[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28921).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/28921#pullrequestreview-1754890765), [achow101](https://github.com/bitcoin/bitcoin/pull/28921#issuecomment-1906930401) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#10102](https://github.com/bitcoin/bitcoin/pull/10102) (Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-11-20T22:12:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#issuecomment-1819887472",
      "id" : 1819887472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28921",
      "node_id" : "IC_kwDOABII585seUdw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819887472/reactions"
      },
      "updated_at" : "2024-01-23T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819887472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400158381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400158381"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    DataStream stream{};\r\n```\r\n\r\nThe values are ignored either way, so it seems better to remove them. `CDataStream` will go away anyway, soon.",
      "commit_id" : "118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6",
      "created_at" : "2023-11-21T08:00:15Z",
      "diff_hunk" : "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <clientversion.h>\n+#include <streams.h>\n+#include <univalue.h>\n+\n+#include <cstddef>\n+#include <mp/proxy-types.h>\n+#include <type_traits>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Use SFINAE to define Serializeable<T> trait which is true if type T has a\n+//! Serialize(stream) method, false otherwise.\n+template <typename T>\n+struct Serializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+//! Use SFINAE to define Unserializeable<T> trait which is true if type T has\n+//! an Unserialize(stream) method, false otherwise.\n+template <typename T>\n+struct Unserializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Functions to serialize / deserialize common bitcoin types.\n+namespace mp {\n+//! Overload multiprocess library's CustomBuildField hook to allow any\n+//! serializable object to be stored in a capnproto Data field or passed to a\n+//! canproto interface. Use Priority<1> so this hook has medium priority, and\n+//! higher priority hooks could take precedence over this one.\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output,\n+    // Enable if serializeable and if LocalType is not cv or reference\n+    // qualified. If LocalType is cv or reference qualified, it is important to\n+    // fall back to lower-priority Priority<0> implementation of this function\n+    // that strips cv references, to prevent this CustomBuildField overload from\n+    // taking precedence over more narrow overloads for specific LocalTypes.\n+    typename std::enable_if_t<ipc::capnp::Serializable<LocalType>::value &&\n+                              std::is_same_v<LocalType, std::remove_cv_t<std::remove_reference_t<LocalType>>>>* enable = nullptr)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400158381",
      "id" : 1400158381,
      "line" : 66,
      "node_id" : "PRRC_kwDOABII585TdLit",
      "original_commit_id" : "118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6",
      "original_line" : 66,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/ipc/capnp/common-types.h",
      "position" : 66,
      "pull_request_review_id" : 1741322101,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400158381/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-21T08:00:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400158381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400413443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400413443"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400158381\r\n\r\n> The values are ignored either way, so it seems better to remove them. `CDataStream` will go away anyway, soon.\r\n\r\nThanks, will update. This previously was used to serialize transactions, but now with #28438 that is broken anyway, so I'll need to find something different to do for transactions.",
      "commit_id" : "a506148b7a7058b4c60e5c497e70688134ee9a3f",
      "created_at" : "2023-11-21T11:09:35Z",
      "diff_hunk" : "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <clientversion.h>\n+#include <streams.h>\n+#include <univalue.h>\n+\n+#include <cstddef>\n+#include <mp/proxy-types.h>\n+#include <type_traits>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Use SFINAE to define Serializeable<T> trait which is true if type T has a\n+//! Serialize(stream) method, false otherwise.\n+template <typename T>\n+struct Serializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+//! Use SFINAE to define Unserializeable<T> trait which is true if type T has\n+//! an Unserialize(stream) method, false otherwise.\n+template <typename T>\n+struct Unserializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Functions to serialize / deserialize common bitcoin types.\n+namespace mp {\n+//! Overload multiprocess library's CustomBuildField hook to allow any\n+//! serializable object to be stored in a capnproto Data field or passed to a\n+//! canproto interface. Use Priority<1> so this hook has medium priority, and\n+//! higher priority hooks could take precedence over this one.\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output,\n+    // Enable if serializeable and if LocalType is not cv or reference\n+    // qualified. If LocalType is cv or reference qualified, it is important to\n+    // fall back to lower-priority Priority<0> implementation of this function\n+    // that strips cv references, to prevent this CustomBuildField overload from\n+    // taking precedence over more narrow overloads for specific LocalTypes.\n+    typename std::enable_if_t<ipc::capnp::Serializable<LocalType>::value &&\n+                              std::is_same_v<LocalType, std::remove_cv_t<std::remove_reference_t<LocalType>>>>* enable = nullptr)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400413443",
      "id" : 1400413443,
      "in_reply_to_id" : 1400158381,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585TeJ0D",
      "original_commit_id" : "118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6",
      "original_line" : 66,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/ipc/capnp/common-types.h",
      "position" : null,
      "pull_request_review_id" : 1741720019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400413443/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-21T15:09:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400413443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400551468"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400551468"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This type of interface where we pass serialized objects (using our serialization) via capnp data obviously fits in quite well with our code base, but I am wondering if this is a nice design for external use? since now anybody using it needs capnp and our serialization format.\r\n\r\nI might have missed prior discussion on this, is the plan to gradually convert more of the interface to native capnp types?\r\n\r\n---\r\n\r\nI really like this conversion glue by the way (i.e. `$Proxy.wrap`, etc.)! I've been working on a clone of https://github.com/google/libprotobuf-mutator for capnp, which I eventually would like to use to fuzz the multi-process interfaces. Conversion from capnp to c++ types is always a bit annoying, so your work on this could integrate quite well I think.",
      "commit_id" : "118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6",
      "created_at" : "2023-11-21T12:47:54Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xd71b0fc8727fdf83;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"gen\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"test/ipc_test.h\");\n+$Proxy.includeTypes(\"ipc/capnp/common-types.h\");\n+\n+interface FooInterface $Proxy.wrap(\"FooImplementation\") {\n+    add @0 (a :Int32, b :Int32) -> (result :Int32);\n+    passOutPoint @1 (arg :Data) -> (result :Data);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400551468",
      "id" : 1400551468,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII585Tergs",
      "original_commit_id" : "118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/test/ipc_test.capnp",
      "position" : 16,
      "pull_request_review_id" : 1741945816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400551468/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-21T12:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400551468",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400723520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400723520"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400551468\r\n\r\n> This type of interface where we pass serialized objects (using our serialization) via capnp data obviously fits in quite well with our code base, but I am wondering if this is a nice design for external use? since now anybody using it needs capnp and our serialization format.\r\n\r\nI think the choice will vary on a case-by-case basis. If you look at [`chain.capnp`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/capnp/chain.capnp#L95-L185), [`node.capnp`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/capnp/node.capnp#L139-L206), [`wallet.capnp`](https://github.com/ryanofsky/bitcoin/blob/18d382f4f8a74612ae0e91efd8a2b83bb665e081/src/ipc/capnp/wallet.capnp#L141-L242) you'll see a lot of custom capnp structs being defined and used to send data, but types that support bitcoin serialization are just being passed as `Data` fields, and some types that support JSON serialization are being passed as `Text` fields. Using pre-existing serialization formats is nice because it saves code, but the resulting nested data format is not very pretty, and like you say it basically makes writing internal code easier at the expense of making writing external code harder. I think as long as we consider the API unstable and willing to break it, the best thing to do is start with a simple implementation and improve it later. There are other parts of the API that are unwieldy too (like basically the whole [`Chain`](https://github.com/ryanofsky/bitcoin/blob/18d382f4f8a74612ae0e91efd8a2b83bb665e081/src/interfaces/chain.h#L98-L122) interface) so I expect there will be a lot of chances to make improvements.",
      "commit_id" : "a506148b7a7058b4c60e5c497e70688134ee9a3f",
      "created_at" : "2023-11-21T14:54:05Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xd71b0fc8727fdf83;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"gen\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"test/ipc_test.h\");\n+$Proxy.includeTypes(\"ipc/capnp/common-types.h\");\n+\n+interface FooInterface $Proxy.wrap(\"FooImplementation\") {\n+    add @0 (a :Int32, b :Int32) -> (result :Int32);\n+    passOutPoint @1 (arg :Data) -> (result :Data);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1400723520",
      "id" : 1400723520,
      "in_reply_to_id" : 1400551468,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII585TfVhA",
      "original_commit_id" : "118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/test/ipc_test.capnp",
      "position" : 16,
      "pull_request_review_id" : 1741720019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400723520/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-21T15:09:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400723520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated 42a51f8939200845c1702b3029377ebcf0aa3610 -> 118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6 ([`pr/ipcc.1`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.1) -> [`pr/ipcc.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipcc.1..pr/ipcc.2)) fixing lint error and making minor cleanups\r\nUpdated 118d60e95cc5c8c0d5a88c0d16904355c7e0c5f6 -> 33d796411dd4d8098287e1307f1337b6e2eab3e7 ([`pr/ipcc.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.2) -> [`pr/ipcc.3`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipcc.2..pr/ipcc.3)) replacing `CDataStream` with `DataStream` as suggested and making minor cleanups\r\nUpdated 33d796411dd4d8098287e1307f1337b6e2eab3e7 -> a506148b7a7058b4c60e5c497e70688134ee9a3f ([`pr/ipcc.3`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.3) -> [`pr/ipcc.4`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipcc.3..pr/ipcc.4)) to try to fix MSVC link error https://github.com/bitcoin/bitcoin/actions/runs/6948636857/job/18905029537?pr=28921\r\n",
      "created_at" : "2023-11-21T19:28:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#issuecomment-1821552816",
      "id" : 1821552816,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28921",
      "node_id" : "IC_kwDOABII585skrCw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1821552816/reactions"
      },
      "updated_at" : "2023-11-21T20:40:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1821552816",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1401997881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401997881"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm gonna try to summarize my understanding of this to make sure I actually got it right.\r\n\r\nWe want this specialization of `CustomBuildField` for (most) of our serializable types. So we can either define it manually for each type or we can make use of sfinae (like you do here) to automatically only create the specialization for each of the required serializable types.\r\n\r\nWe also want to be able to further overload `CustomBuildField` for serializable types that can't use this generic specialization (e.g. if we need to use `TX_WITH_WITNESS`), so we specify `Priority<1>` such that another overload with `Priority<2>` would take precedence.\r\n\r\nWhat I don't understand is making this exclusive to non cv and reference qualified types. \r\n\r\n> If LocalType is cv or reference qualified, it is important to fall back to lower-priority Priority<0> ... to prevent this CustomBuildField overload from taking precedence\r\n\r\nAs I understand it, this comment implies that (without `&& std::is_same_v<LocalType, std::remove_cv_t<std::remove_reference_t<LocalType>>>`) the following would not take precedence, even though it has `Priority<2>`?\r\n```c++\r\ntemplate <typename LocalType, typename Output>\r\nvoid CustomBuildField(TypeList<LocalType>, Priority<2>, InvokeContext& invoke_context, const CTransaction& value, Output&& output)\r\n{\r\n    DataStream stream;\r\n    stream << TX_WITH_WITNESS(value);\r\n    auto result = output.init(stream.size());\r\n    memcpy(result.begin(), stream.data(), stream.size());\r\n}\r\n```\r\n\r\n",
      "commit_id" : "a506148b7a7058b4c60e5c497e70688134ee9a3f",
      "created_at" : "2023-11-22T12:49:49Z",
      "diff_hunk" : "@@ -0,0 +1,89 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <clientversion.h>\n+#include <streams.h>\n+\n+#include <cstddef>\n+#include <mp/proxy-types.h>\n+#include <type_traits>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Use SFINAE to define Serializeable<T> trait which is true if type T has a\n+//! Serialize(stream) method, false otherwise.\n+template <typename T>\n+struct Serializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+//! Use SFINAE to define Unserializeable<T> trait which is true if type T has\n+//! an Unserialize(stream) method, false otherwise.\n+template <typename T>\n+struct Unserializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Functions to serialize / deserialize common bitcoin types.\n+namespace mp {\n+//! Overload multiprocess library's CustomBuildField hook to allow any\n+//! serializable object to be stored in a capnproto Data field or passed to a\n+//! canproto interface. Use Priority<1> so this hook has medium priority, and\n+//! higher priority hooks could take precedence over this one.\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output,\n+    // Enable if serializeable and if LocalType is not cv or reference\n+    // qualified. If LocalType is cv or reference qualified, it is important to\n+    // fall back to lower-priority Priority<0> implementation of this function\n+    // that strips cv references, to prevent this CustomBuildField overload from\n+    // taking precedence over more narrow overloads for specific LocalTypes.\n+    std::enable_if_t<ipc::capnp::Serializable<LocalType>::value &&\n+                     std::is_same_v<LocalType, std::remove_cv_t<std::remove_reference_t<LocalType>>>>* enable = nullptr)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1401997881",
      "id" : 1401997881,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII585TkMo5",
      "original_commit_id" : "3315f33e7c63d899db412dacb9c868e18d09fded",
      "original_line" : 63,
      "original_position" : 63,
      "original_start_line" : 50,
      "path" : "src/ipc/capnp/common-types.h",
      "position" : 64,
      "pull_request_review_id" : 1744305635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401997881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 51,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-11-22T14:35:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401997881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1402240033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402240033"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> As I understand it, this comment implies that (without `&& std::is_same_v<LocalType, std::remove_cv_t<std::remove_reference_t<LocalType>>>`) the following would not take precedence, even though it has `Priority<2>`?\r\n> \r\n> ```c++\r\n> template <typename LocalType, typename Output>\r\n> void CustomBuildField(TypeList<LocalType>, Priority<2>, InvokeContext& invoke_context, const CTransaction& value, Output&& output)\r\n> ```\r\n\r\nYes that's right, but it would be more correct to say \"would not *reliably* take precedence\". For example, in the case where a `const CTransaction` argument was passed then the `Priority<2>` function actually would take precedence, but if a non-const `CTransaction` were passed the precedence would be ambiguous. This is because if you passed a non-const `CTransaction`, the types of the two functions after template type deduction would be:\r\n\r\n```\r\nvoid CustomBuildField(TypeList<LocalType>, Priority<1>, InvokeContext&, CTransaction&, Output&& output);\r\nvoid CustomBuildField(TypeList<LocalType>, Priority<2>, InvokeContext&, const CTransaction&, Output&& output);\r\n```\r\nSo with a non-const `CTransaction` argument, it would be ambiguous whether to call the Priority<2> function that requires a const conversion, or a Priority<1> function not requiring a const-conversion, and there would be a compile error about the overload being ambiguous.",
      "commit_id" : "a506148b7a7058b4c60e5c497e70688134ee9a3f",
      "created_at" : "2023-11-22T15:29:12Z",
      "diff_hunk" : "@@ -0,0 +1,89 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <clientversion.h>\n+#include <streams.h>\n+\n+#include <cstddef>\n+#include <mp/proxy-types.h>\n+#include <type_traits>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Use SFINAE to define Serializeable<T> trait which is true if type T has a\n+//! Serialize(stream) method, false otherwise.\n+template <typename T>\n+struct Serializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+//! Use SFINAE to define Unserializeable<T> trait which is true if type T has\n+//! an Unserialize(stream) method, false otherwise.\n+template <typename T>\n+struct Unserializable {\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<std::nullptr_t&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Functions to serialize / deserialize common bitcoin types.\n+namespace mp {\n+//! Overload multiprocess library's CustomBuildField hook to allow any\n+//! serializable object to be stored in a capnproto Data field or passed to a\n+//! canproto interface. Use Priority<1> so this hook has medium priority, and\n+//! higher priority hooks could take precedence over this one.\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output,\n+    // Enable if serializeable and if LocalType is not cv or reference\n+    // qualified. If LocalType is cv or reference qualified, it is important to\n+    // fall back to lower-priority Priority<0> implementation of this function\n+    // that strips cv references, to prevent this CustomBuildField overload from\n+    // taking precedence over more narrow overloads for specific LocalTypes.\n+    std::enable_if_t<ipc::capnp::Serializable<LocalType>::value &&\n+                     std::is_same_v<LocalType, std::remove_cv_t<std::remove_reference_t<LocalType>>>>* enable = nullptr)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#discussion_r1402240033",
      "id" : 1402240033,
      "in_reply_to_id" : 1401997881,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII585TlHwh",
      "original_commit_id" : "3315f33e7c63d899db412dacb9c868e18d09fded",
      "original_line" : 63,
      "original_position" : 63,
      "original_start_line" : 50,
      "path" : "src/ipc/capnp/common-types.h",
      "position" : 64,
      "pull_request_review_id" : 1744689152,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28921",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402240033/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 51,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-11-22T15:29:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402240033",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased a506148b7a7058b4c60e5c497e70688134ee9a3f -> 6acec6b9ff02b91de132bb1575d75908a8a2d27b ([`pr/ipcc.4`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.4) -> [`pr/ipcc.5`](https://github.com/ryanofsky/bitcoin/commits/pr/ipcc.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipcc.4-rebase..pr/ipcc.5)) due to silent conflicts with #28922 and #28912\r\n",
      "created_at" : "2023-11-28T21:41:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#issuecomment-1830793787",
      "id" : 1830793787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28921",
      "node_id" : "IC_kwDOABII585tH7I7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1830793787/reactions"
      },
      "updated_at" : "2023-11-28T21:41:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1830793787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 6acec6b9ff02b91de132bb1575d75908a8a2d27b",
      "created_at" : "2024-01-23T21:15:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28921#issuecomment-1906930401",
      "id" : 1906930401,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28921",
      "node_id" : "IC_kwDOABII585xqXLh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1906930401/reactions"
      },
      "updated_at" : "2024-01-23T21:15:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1906930401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
