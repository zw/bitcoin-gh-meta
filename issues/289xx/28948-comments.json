[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28948).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [sdaftuar](https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1832669087), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1842795172) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29001](https://github.com/bitcoin/bitcoin/pull/29001) (Ephemeral Anchors by instagibbs)\n* [#28984](https://github.com/bitcoin/bitcoin/pull/28984) (Cluster size 2 package rbf by instagibbs)\n* [#28960](https://github.com/bitcoin/bitcoin/pull/28960) (kernel: Remove dependency on CScheduler by TheCharlatan)\n* [#28886](https://github.com/bitcoin/bitcoin/pull/28886) (refactor: Replace sets of txiter with CTxMemPoolEntryRefs by TheCharlatan)\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n* [#28690](https://github.com/bitcoin/bitcoin/pull/28690) (build: Introduce internal kernel library by TheCharlatan)\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) ([WIP] Cluster mempool implementation by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-11-27T15:17:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828035445",
      "id" : 1828035445,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585s9Zt1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828035445/reactions"
      },
      "updated_at" : "2023-12-12T17:53:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828035445",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406359885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406359885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use `Wtxid`?",
      "commit_id" : "8e7f1ac3d3c19f143eb129089cfe7321e782ec93",
      "created_at" : "2023-11-27T15:41:52Z",
      "diff_hunk" : "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406359885",
      "id" : 1406359885,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585T01lN",
      "original_commit_id" : "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : null,
      "pull_request_review_id" : 1750753834,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406359885/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-27T15:52:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406359885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406361767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406361767"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Are these txids/wtxids?",
      "commit_id" : "8e7f1ac3d3c19f143eb129089cfe7321e782ec93",
      "created_at" : "2023-11-27T15:42:53Z",
      "diff_hunk" : "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also be V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.\n+ * 2. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. Each V3 ancestor and its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 2. The tx must be within V3_CHILD_MAX_SIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406361767",
      "id" : 1406361767,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585T02Cn",
      "original_commit_id" : "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : null,
      "pull_request_review_id" : 1750753834,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406361767/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-27T15:52:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406361767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406442920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442920"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to specify `Txid`. I assume we want a \"update as we touch these lines\" kind of thing so I added a preceding commit to make `m_conflicts` a `std::set<Txid>` instead of uint256, and updated other places as necessary to compile.",
      "commit_id" : "8e7f1ac3d3c19f143eb129089cfe7321e782ec93",
      "created_at" : "2023-11-27T16:38:28Z",
      "diff_hunk" : "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also be V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.\n+ * 2. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. Each V3 ancestor and its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 2. The tx must be within V3_CHILD_MAX_SIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406442920",
      "id" : 1406442920,
      "in_reply_to_id" : 1406361767,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585T1J2o",
      "original_commit_id" : "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : null,
      "pull_request_review_id" : 1750885461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442920/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-27T16:38:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406442992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated this file to use `Txid`/`Wtxid` instead of uint256 everywhere.",
      "commit_id" : "8e7f1ac3d3c19f143eb129089cfe7321e782ec93",
      "created_at" : "2023-11-27T16:38:31Z",
      "diff_hunk" : "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406442992",
      "id" : 1406442992,
      "in_reply_to_id" : 1406359885,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585T1J3w",
      "original_commit_id" : "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : null,
      "pull_request_review_id" : 1750885588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442992/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-27T16:38:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Changed tx_pool and tx_package_eval fuzzer to sometimes create v3 transactions, and check v3 invariants at the end of each iteration.",
      "created_at" : "2023-11-27T16:38:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828199453",
      "id" : 1828199453,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585s-Bwd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828199453/reactions"
      },
      "updated_at" : "2023-11-27T16:56:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828199453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\n$ echo \"ACVL/gA+Pj4+Pj4+3D4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPT09//8AAP/8AAAAigAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAAAIAQk9AAAAAAAAAAAAAAAAAAAAABMA9wAAAAYiACkAAAAAAAAAAAD///8AAPkAAAAkAAAAAACiAGxpbWl0YW739/f3Y2VzdG9yc2lSemUAAAAmAKMAAP9kZQBi4nUxZ2xvZ2ZpbGUAJgD/AA==\" | base64 --decode > tx_pool-bbe7bc3c2a6d0cb1a21c48506cd16fdb807ae3cf.crash\r\n$ FUZZ=tx_pool ./src/test/fuzz/fuzz tx_pool-bbe7bc3c2a6d0cb1a21c48506cd16fdb807ae3cf.crash\r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 1136977254\r\nINFO: Loaded 1 modules   (572973 inline 8-bit counters): 572973 [0x563877bfae70, 0x563877c86c9d), \r\nINFO: Loaded 1 PC tables (572973 PCs): 572973 [0x563877c86ca0,0x563878544f70), \r\n/workdir/fuzz_bins/fuzz_libfuzzer: Running 1 inputs 1 time(s) each.\r\nRunning: /workdir/crashes/crash-bbe7bc3c2a6d0cb1a21c48506cd16fdb807ae3cf\r\ntest/fuzz/tx_pool.cpp:114 Finish: Assertion `entry.GetModFeesWithDescendants() > 0' failed.\r\n==1877== ERROR: libFuzzer: deadly signal\r\n    #0 0x5638764b4c88 in __sanitizer_print_stack_trace (/workdir/fuzz_bins/fuzz_libfuzzer+0x14b4c88) (BuildId: 7fbfcc32a58adde3cb3dcfe8229731b5bb30d71d)\r\n    #1 0x56387648c04c in fuzzer::PrintStackTrace() crtstuff.c\r\n    #2 0x563876471e67 in fuzzer::Fuzzer::CrashCallback() crtstuff.c\r\n    #3 0x7f168cc0850f  (/lib/x86_64-linux-gnu/libc.so.6+0x3c50f) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #4 0x7f168cc560fb  (/lib/x86_64-linux-gnu/libc.so.6+0x8a0fb) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #5 0x7f168cc08471 in raise (/lib/x86_64-linux-gnu/libc.so.6+0x3c471) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #6 0x7f168cbf24b1 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x264b1) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #7 0x5638778c6167 in assertion_fail(std::basic_string_view<char, std::char_traits<char>>, int, std::basic_string_view<char, std::char_traits<char>>, std::basic_string_view<char, std::char_traits<char>>) check.cpp\r\n    #8 0x56387682def1 in (anonymous namespace)::Finish(FuzzedDataProvider&, (anonymous namespace)::MockedTxPool&, Chainstate&) tx_pool.cpp\r\n    #9 0x563876832e79 in (anonymous namespace)::tx_pool_fuzz_target(Span<unsigned char const>) tx_pool.cpp\r\n    #10 0x5638768972c7 in LLVMFuzzerTestOneInput fuzz.cpp\r\n    #11 0x563876473334 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) crtstuff.c\r\n    #12 0x56387645c263 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) crtstuff.c\r\n    #13 0x563876461e86 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) crtstuff.c\r\n    #14 0x56387648c9d6 in main crtstuff.c\r\n    #15 0x7f168cbf36c9  (/lib/x86_64-linux-gnu/libc.so.6+0x276c9) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #16 0x7f168cbf3784 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x27784) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #17 0x563876456cd0 in _start (/workdir/fuzz_bins/fuzz_libfuzzer+0x1456cd0) (BuildId: 7fbfcc32a58adde3cb3dcfe8229731b5bb30d71d)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\n```",
      "created_at" : "2023-11-27T18:02:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828351782",
      "id" : 1828351782,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585s-m8m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828351782/reactions"
      },
      "updated_at" : "2023-11-27T18:02:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828351782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Even though we don't have cluster limits, we are able to treat these transactions as having as having a maximum cluster size of 2. \r\n\r\nI donât think adopting cluster limits instead of max ancestors / descendants limits change anything for V3 packages. What matters is the overall weight limit of the package (4000 WU for a child), as this limit draws an anti-pinning security bound on the lowest off-chain payment that one can afford to burn as an absolute fee . Limit to be evaluated in function of network mempools congestion. Removing the absolute fee replacement rules I think would simplify current pinning analysis - though sounds this is beyond the scope of this proposal.",
      "created_at" : "2023-11-28T00:07:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828842996",
      "id" : 1828842996,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585tAe30",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828842996/reactions"
      },
      "updated_at" : "2023-11-28T00:07:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828842996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408171165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408171165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If `bypass_limits` is set for a single submission, this can fail since no trimming is done after that.",
      "commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "created_at" : "2023-11-28T18:02:18Z",
      "diff_hunk" : "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408171165",
      "id" : 1408171165,
      "line" : 318,
      "node_id" : "PRRC_kwDOABII585T7vyd",
      "original_commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "original_line" : 318,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/test/fuzz/package_eval.cpp",
      "position" : 34,
      "pull_request_review_id" : 1753556814,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408171165/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T18:02:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408171165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408277869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408277869"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We need to limit the sigops-adjusted size of the child, since that effects the effectiveness of a potential pin. This difference can be up to 20x for really strange scripts.\r\n\r\nSimplest but perhaps controversial would be to disallow v3 transactions to have sigops-adjusted size different than bip141 vsize, Other solution would be to directly feed in the adjusted vsize and check against that instead of weight.",
      "commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "created_at" : "2023-11-28T19:19:45Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408277869",
      "id" : 1408277869,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII585T8J1t",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 84,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 84,
      "pull_request_review_id" : 1753714068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408277869/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T19:19:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408277869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408287424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408287424"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes definitely\r\n\r\n> disallow v3 transactions to have sigops-adjusted size different than bip141 vsize\r\n\r\nI actually think this is more complicated than adding a sigop limit, since we'd need to define what sigop-adjusted size is. Or just word it as \"number of sigops times this constant cannot be larger than the weight\" I guess.",
      "commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "created_at" : "2023-11-28T19:29:24Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408287424",
      "id" : 1408287424,
      "in_reply_to_id" : 1408277869,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII585T8MLA",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 84,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 84,
      "pull_request_review_id" : 1753729645,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408287424/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T19:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408287424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408289426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408289426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah true. I forgot that we do an atmp here too. I don't think we should do `bypass_limits` though - couldn't that cause the result to deviate from the package eval result?",
      "commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "created_at" : "2023-11-28T19:31:03Z",
      "diff_hunk" : "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408289426",
      "id" : 1408289426,
      "in_reply_to_id" : 1408171165,
      "line" : 318,
      "node_id" : "PRRC_kwDOABII585T8MqS",
      "original_commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "original_line" : 318,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/test/fuzz/package_eval.cpp",
      "position" : 34,
      "pull_request_review_id" : 1753732264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408289426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T19:31:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408289426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408290515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408290515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah I don't think we need to ever",
      "commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "created_at" : "2023-11-28T19:32:13Z",
      "diff_hunk" : "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408290515",
      "id" : 1408290515,
      "in_reply_to_id" : 1408171165,
      "line" : 318,
      "node_id" : "PRRC_kwDOABII585T8M7T",
      "original_commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "original_line" : 318,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/test/fuzz/package_eval.cpp",
      "position" : 34,
      "pull_request_review_id" : 1753734001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408290515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T19:32:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408290515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409129842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409129842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made bypass_limits always false",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T11:12:39Z",
      "diff_hunk" : "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409129842",
      "id" : 1409129842,
      "in_reply_to_id" : 1408171165,
      "line" : 320,
      "node_id" : "PRRC_kwDOABII585T_Z1y",
      "original_commit_id" : "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "original_line" : 320,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/test/fuzz/package_eval.cpp",
      "position" : 54,
      "pull_request_review_id" : 1755016347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409129842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409129842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409130981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409130981"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a 50-sigop limit, with a p2sh test.",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T11:13:40Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409130981",
      "id" : 1409130981,
      "in_reply_to_id" : 1408277869,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585T_aHl",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 85,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 85,
      "pull_request_review_id" : 1755018211,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409130981/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T11:13:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409130981",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "CI is green. I've added a rule for maximum sigops and updated the doc.\r\n(cc @sdaftuar)",
      "created_at" : "2023-11-29T14:51:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1832044826",
      "id" : 1832044826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585tMska",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832044826/reactions"
      },
      "updated_at" : "2023-11-29T14:51:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832044826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409750171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409750171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What's the issue with using the transaction's vsize, which is already the value used everywhere else in the mempool?  It seems like that is simpler than introducing a second limit, and exactly captures how we apply the RBF rules anyway.",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T19:07:43Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409750171",
      "id" : 1409750171,
      "in_reply_to_id" : 1408277869,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585UBxSb",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 85,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 85,
      "pull_request_review_id" : 1756015917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409750171/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T19:07:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409750171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409753009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409753009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, I think the thing we're actually trying to protect against, sigops-adjusted vsize, is what should be used.",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T19:10:19Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409753009",
      "id" : 1409753009,
      "in_reply_to_id" : 1408277869,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585UBx-x",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 85,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 85,
      "pull_request_review_id" : 1755493640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409753009/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T19:10:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409753009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409761071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409761071"
         }
      },
      "author_association" : "MEMBER",
      "body" : "you can remove this level of nesting since the 3 checks above all end early",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T19:17:33Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409761071",
      "id" : 1409761071,
      "line" : 82,
      "node_id" : "PRRC_kwDOABII585UBz8v",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 82,
      "pull_request_review_id" : 1756038415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409761071/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T20:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409761071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409765502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409765502"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This logic only works if `V3_ANCESTOR_LIMIT <= 2`, I think?  Having a constant would imply that you could consider changing the value, but if the logic breaks with higher values then I think we should `static_assert` that the constant is in the range we expect.",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T19:21:48Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {\n+            return strprintf(\"v3 child tx is too big: %u > %u weight units\", tx_weight, V3_CHILD_MAX_WEIGHT);\n+        }\n+        if (sigops > V3_CHILD_MAX_SIGOPS) {\n+            return strprintf(\"v3 child tx has too many sigops: %u > %u sigops\", sigops, V3_CHILD_MAX_SIGOPS);\n+        }\n+        // Any ancestor of a V3 transaction must also be V3.\n+        const auto& parent_entry = *ancestors.begin();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409765502",
      "id" : 1409765502,
      "line" : 92,
      "node_id" : "PRRC_kwDOABII585UB1B-",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 92,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 92,
      "pull_request_review_id" : 1756044862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409765502/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T19:21:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409765502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409768985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409768985"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n        // This is a v3 parent; no additional constraints\r\n        return std::nullopt;\r\n```",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T19:25:25Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409768985",
      "id" : 1409768985,
      "line" : 81,
      "node_id" : "PRRC_kwDOABII585UB14Z",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 81,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 81,
      "pull_request_review_id" : 1756038415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409768985/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T20:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409768985",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409775820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409775820"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think a v3 transaction is not permitted to have non-v3 unconfirmed ancestors -- so this comment seems confusing?",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T19:31:59Z",
      "diff_hunk" : "@@ -0,0 +1,65 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+/** Maximum sigops cost of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_SIGOPS{50};\n+// The maximum weight and sigops cost are the equivalent limit in virtual bytes (when calculated using default -bytespersigop).\n+static_assert(V3_CHILD_MAX_SIGOPS * DEFAULT_BYTES_PER_SIGOP == V3_CHILD_MAX_WEIGHT / WITNESS_SCALE_FACTOR);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also be V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409775820",
      "id" : 1409775820,
      "line" : 50,
      "node_id" : "PRRC_kwDOABII585UB3jM",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 50,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : 50,
      "pull_request_review_id" : 1756063055,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409775820/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T19:32:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409775820",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409812453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409812453"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1) This strikes me as a very expensive operation to perform in order to update the mempool for a reorg.  I think we could probably do better by only calculating ancestors or descendants for transactions that are themselves v3, if we decide we need to enforce the v3 rules after a reorg.\r\n\r\n2) With the logic as written, if a v3 parent-child pair (A, B) were to be reorged out and added back to the mempool, and A has some other spend C already in the mempool, then when `ApplyV3Rules()` is invoked on B, it would be selected for removal.  This in turn would prevent A from being mined, if we assume that B's feerate was the reason it was mined in the first place?  This strikes me as unfortunate.\r\n\r\nInstead, I'd suggest that we not bother enforcing the v3 rules on a reorg.  That seems safer than potentially evicting the fee-paying transaction, less CPU work (so reorgs won't be further slowed down by additional processing), and shouldn't materially affect pinning (if miners are reorging out your transactions, trying to minimize RBF pinning with v3 policy isn't really going to help you!).",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T20:09:41Z",
      "diff_hunk" : "@@ -372,11 +375,16 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n             }\n         }\n         // Transaction is still valid and cached LockPoints are updated.\n+        auto ancestors{m_mempool->AssumeCalculateMemPoolAncestors(func, *it, CTxMemPool::Limits::NoLimits(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409812453",
      "id" : 1409812453,
      "line" : 378,
      "node_id" : "PRRC_kwDOABII585UCAfl",
      "original_commit_id" : "22ce995d0b4fbf697596738503a429de5a057c0e",
      "original_line" : 378,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 1756128156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409812453/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T20:09:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409812453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Did a first pass review -- concept ACK.  \r\n\r\nAlso I think we should resurrect #27018 so that we will mine everything in the mempool, but that doesn't need to be in this PR (and probably isn't strictly necessary either).",
      "created_at" : "2023-11-29T20:41:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1832669087",
      "id" : 1832669087,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585tPE-f",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832669087/reactions"
      },
      "updated_at" : "2023-11-29T20:41:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832669087",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409842026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409842026"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This only seems to run useful checks on v3 children when the ancestor is already in the mempool, not when the ancestor is something new in a package. I suspect we want a parallel `ApplyV3Rules` that looks at the packages only, just like `CheckV3Inheritance`\r\n\r\nAs-is you can get large children and muiltiple ancestors in currently.\r\n\r\n(also, mempool_v3_accept.py needs tests covering this case for each situation)\r\n\r\n```\r\ndiff --git a/test/functional/mempool_accept_v3.py b/test/functional/mempool_accept_v3.py\r\nindex 5b72cca6b9..3a4b822a90 100755\r\n--- a/test/functional/mempool_accept_v3.py\r\n+++ b/test/functional/mempool_accept_v3.py\r\n@@ -22,57 +22,73 @@ def cleanup(func):\r\n         try:\r\n             func(self)\r\n         finally:\r\n             # Clear mempool\r\n             self.generate(self.nodes[0], 1)\r\n             # Reset config options\r\n             self.restart_node(0)\r\n     return wrapper\r\n \r\n class MempoolAcceptV3(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n         self.num_nodes = 1\r\n         self.setup_clean_chain = True\r\n \r\n     def check_mempool(self, txids):\r\n         \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\r\n         mempool_contents = self.nodes[0].getrawmempool()\r\n         assert_equal(len(txids), len(mempool_contents))\r\n         assert all([txid in txids for txid in mempool_contents])\r\n \r\n     @cleanup\r\n     def test_v3_acceptance(self):\r\n         node = self.nodes[0]\r\n         self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\r\n         self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\r\n-        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\r\n-        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\r\n-        tx_v3_child_heavy = self.wallet.create_self_transfer(\r\n-            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\r\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\r\n+            fee_rate=0,\r\n+            target_weight=4004,\r\n+            version=3\r\n+        )\r\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\r\n+            fee_rate=0,\r\n             target_weight=4004,\r\n             version=3\r\n         )\r\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\r\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\r\n+            target_weight=4004,\r\n+            fee_per_output=10000,\r\n+            version=3\r\n+        )\r\n+\r\n+        assert_equal(node.getrawmempool(), [])\r\n+        node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\r\n+        # !!! Oversize child and multiple (in-package) ancestors\r\n+        assert_equal(len(node.getrawmempool()), 3)\r\n+        assert False\r\n+\r\n```",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-29T20:42:14Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409842026",
      "id" : 1409842026,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII585UCHtq",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 69,
      "pull_request_review_id" : 1756174839,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409842026/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-29T20:42:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409842026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410643071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410643071"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> What's the issue with using the transaction's vsize\r\n\r\nMy reasons were:\r\n- I wanted to specify a value of sigops that wouldn't depend on the node's `-bytespersigop` setting, and similarly didn't want it to be bypassable locally this way\r\n- People expressed confusion at what sigops-adjusted vsize was, so I wanted to make it clearer\r\n\r\nHappy to change though, if it's preferred?",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-30T13:02:15Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410643071",
      "id" : 1410643071,
      "in_reply_to_id" : 1408277869,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585UFLR_",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 85,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 85,
      "pull_request_review_id" : 1757418889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410643071/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-30T13:02:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410643071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410653204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410653204"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Instead, I'd suggest that we not bother enforcing the v3 rules on a reorg.\r\n\r\nI'm a fan of this approach. I want to spend a little bit of time thinking about what the possibilities are - I guess we can have some incorrect assumptions about transactions (resulting in e.g. incorect MinerScores) but it wouldn't be problematic if a reorg is the only way to get there, as you say.",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-30T13:11:42Z",
      "diff_hunk" : "@@ -372,11 +375,16 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n             }\n         }\n         // Transaction is still valid and cached LockPoints are updated.\n+        auto ancestors{m_mempool->AssumeCalculateMemPoolAncestors(func, *it, CTxMemPool::Limits::NoLimits(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410653204",
      "id" : 1410653204,
      "in_reply_to_id" : 1409812453,
      "line" : 378,
      "node_id" : "PRRC_kwDOABII585UFNwU",
      "original_commit_id" : "22ce995d0b4fbf697596738503a429de5a057c0e",
      "original_line" : 378,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 1757435436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410653204/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-30T13:11:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410653204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410793961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410793961"
         }
      },
      "author_association" : "MEMBER",
      "body" : "good news: this issue was discovered in less than a minute on a single core with the package fuzzer",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-30T14:53:13Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410793961",
      "id" : 1410793961,
      "in_reply_to_id" : 1409842026,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII585UFwHp",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 69,
      "pull_request_review_id" : 1757665254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410793961/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-30T14:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410793961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410816950"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410816950"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I just think that the point of the policy rule is not to enforce a particular sigops limit, but instead to ensure that the total fee required to replace a child transaction is only high if the child itself has a high feerate, which is defined as `fee / sigops_adjusted_vsize`.  So there doesn't seem to me to be a benefit to thinking about two different limits.",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-11-30T15:09:24Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410816950",
      "id" : 1410816950,
      "in_reply_to_id" : 1408277869,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585UF1u2",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 85,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 85,
      "pull_request_review_id" : 1757702879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410816950/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-30T15:09:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410816950",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\n$ echo \"jtHRO///YED/AAD/AAABCQAAgQAN/wAAAQAALAEB/QAAAAAJAAAAAAAAAAAAAAAA+GwAAPAV/v8BkAEicG9vcyYANwAAAAEBADsBAQHo/v7+bv4RAQEBkQABAQE3CTsBIQEBAQEBAAEBATcAACYKAAQBAf8BAQEBAQEBCAABAQEBfgEAAQEBCgAAADsBAQEBAQEB/v8BJgABQQE3AAAAAAFBATcAAAAA8AAAAQEBAQEBAQEBCAABLgEBAX4BAAE=\" | base64 --decode > tx_package_eval-81b8ec0e06b86811790d61f69fe27701ca0c8305.crash\r\n$ FUZZ=tx_package_eval ./src/test/fuzz/fuzz tx_package_eval-81b8ec0e06b86811790d61f69fe27701ca0c8305.crash\r\ntest/fuzz/package_eval.cpp:320 tx_package_eval_fuzz_target: Assertion `entry.GetModFeesWithDescendants() > 0' \r\n```",
      "created_at" : "2023-12-01T10:30:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1835850051",
      "id" : 1835850051,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585tbNlD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1835850051/reactions"
      },
      "updated_at" : "2023-12-01T10:30:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1835850051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1412155613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412155613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Will change ð ",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-12-01T14:15:35Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1412155613",
      "id" : 1412155613,
      "in_reply_to_id" : 1408277869,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585UK8jd",
      "original_commit_id" : "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "original_line" : 85,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 85,
      "pull_request_review_id" : 1759897764,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412155613/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-01T14:15:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412155613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Also I think we should resurrect https://github.com/bitcoin/bitcoin/pull/27018 so that we will mine everything in the mempool, but that doesn't need to be in this PR (and probably isn't strictly necessary either).\r\n\r\nI donât know about automatically flushing out <= 0 fees even when the local mempool is empty. One could add significant computing payload on its mining competitors by throwing buffy packages with 0 fees parent and then replace the high-fee child (in a cycle). A more robust approach can be to let those 0 fees parent sleep in the local non-full mempool, and only evict them when you have non-0 fees transactions showing up. The asymmetry between the additional computational cost to flush out automatically and the rbf penalty paid sounds to be at the advantage of a potential denial-of-service attacker (edited).",
      "created_at" : "2023-12-04T03:26:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1837780398",
      "id" : 1837780398,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585tik2u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837780398/reactions"
      },
      "updated_at" : "2023-12-04T03:32:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837780398",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I donât know about automatically flushing out <= 0 fees even when the local mempool is empty. One could add significant computing payload on its mining competitors by throwing buffy packages with 0 fees parent and then replace the high-fee child (in a cycle). \r\n\r\nThe replacements are paying for those CPU cycles and bandwidth via \"incremental feerate\", it's equivalent to an entire package simply being RBF'd like normal. Keeping 0-fee parents hanging around in mempool would also allow new entries into the mempool that will never be mined. See https://github.com/bitcoin/bitcoin/pull/26933 for historical discussion. Post-cluster mempool maybe that isn't the case anymore.\r\n\r\nIt also neatly allows ephemeral anchors to be ejected from the mempool if it has no children.",
      "created_at" : "2023-12-04T15:14:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1838855510",
      "id" : 1838855510,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585tmrVW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1838855510/reactions"
      },
      "updated_at" : "2023-12-04T15:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1838855510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1414612161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414612161"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could lead to confusing log messages when removing 0-fee (or deprioritized) transactions: Such a tx could be removed due to \"size limit\" even if the mempool was almost empty.",
      "commit_id" : "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "created_at" : "2023-12-04T23:06:01Z",
      "diff_hunk" : "@@ -1157,17 +1157,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1414612161",
      "id" : 1414612161,
      "line" : 1167,
      "node_id" : "PRRC_kwDOABII585UUUTB",
      "original_commit_id" : "f6a382af7ba3378539af6375a51b3798cc1fea76",
      "original_line" : 1167,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 30,
      "pull_request_review_id" : 1763610776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414612161/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-04T23:10:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414612161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2023-12-06T12:44:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1842795172",
      "id" : 1842795172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585t1tKk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842795172/reactions"
      },
      "updated_at" : "2023-12-06T12:44:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842795172",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1835850051\r\n\r\n`LimitMempoolSize` is only called upon successful transaction inclusions, so a v3 tx that is negatively prioritized later may not be evicted yet.",
      "created_at" : "2023-12-07T16:49:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1845689097",
      "id" : 1845689097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585uAvsJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1845689097/reactions"
      },
      "updated_at" : "2023-12-07T16:49:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1845689097",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421613674"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421613674"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Leftover comment?",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-10T00:28:52Z",
      "diff_hunk" : "@@ -328,11 +329,12 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n \n     // Predicate to use for filtering transactions in removeForReorg.\n+    // Checks whether a non-v3 transaction spends v3 and or vice versa.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421613674",
      "id" : 1421613674,
      "line" : 332,
      "node_id" : "PRRC_kwDOABII585UvBpq",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 332,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 12,
      "pull_request_review_id" : 1773907154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421613674/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-10T00:46:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421613674",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421614259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421614259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is an aside -- in the cluster mempool branch, I think I'd like to change this to just look at direct parents rather than ancestors (I believe that in the normal course of transaction validation, we should no longer need to calculate ancestor sets when we're not worried about ancestor limits or updating cached ancestor state anymore).  Can you think of any reason it would be problematic to replace ancestors with just an entry's direct parents here? ",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-10T00:34:09Z",
      "diff_hunk" : "@@ -946,6 +948,16 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     ws.m_ancestors = *ancestors;\n+    if (const auto err_string{CheckV3Inheritance(ws.m_ptx, ws.m_ancestors)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421614259",
      "id" : 1421614259,
      "line" : 953,
      "node_id" : "PRRC_kwDOABII585UvByz",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 951,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 79,
      "pull_request_review_id" : 1773907154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421614259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-10T00:46:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421614259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421615040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421615040"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure if I'm missing something, but this only checks that the v3 inheritance rules are enforced among transactions in the package.  What if someone sent a package of 2 v3 transactions, but the child transaction also spent a transaction that was already in the mempool?  I think the `CheckV3Inheritance()` needs to be able to pull parents from both the mempool and from the package, perhaps? ",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-10T00:44:11Z",
      "diff_hunk" : "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421615040",
      "id" : 1421615040,
      "line" : 1305,
      "node_id" : "PRRC_kwDOABII585UvB_A",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 1303,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 96,
      "pull_request_review_id" : 1773907154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421615040/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-10T00:46:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421615040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422166975"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422166975"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why move this to the if statement?",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T09:26:53Z",
      "diff_hunk" : "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {\n+            removed += m_incremental_relay_feerate;\n+            trackPackageRemoved(removed);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422166975",
      "id" : 1422166975,
      "line" : 1163,
      "node_id" : "PRRC_kwDOABII585UxIu_",
      "original_commit_id" : "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "original_line" : 1163,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 42,
      "pull_request_review_id" : 1774659127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422166975/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T14:17:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422166975",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422364536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422364536"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n#include <algorithm>\r\n```",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T11:57:46Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422364536",
      "id" : 1422364536,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII585Ux494",
      "original_commit_id" : "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 11,
      "pull_request_review_id" : 1774659127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422364536/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T14:17:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422364536",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422369475"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422369475"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think just direct parents should be fine - presumably any further generations should have the same version anyway.\r\nI'll continue using `m_ancestors` here since it's what we have access to, but will leave a comment about this.",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T12:02:40Z",
      "diff_hunk" : "@@ -946,6 +948,16 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     ws.m_ancestors = *ancestors;\n+    if (const auto err_string{CheckV3Inheritance(ws.m_ptx, ws.m_ancestors)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422369475",
      "id" : 1422369475,
      "in_reply_to_id" : 1421614259,
      "line" : 953,
      "node_id" : "PRRC_kwDOABII585Ux6LD",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 951,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 79,
      "pull_request_review_id" : 1774987315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422369475/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T12:02:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422369475",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422429402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422429402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\r\nIs it worth adding a comment saying `Package` does not refer to a child and all of its unconfirmed parents?  The `Package` in  param can contain unrelated transaction.\r\nuntill I saw the test, I had the assumption of otherwise.",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T12:54:20Z",
      "diff_hunk" : "@@ -0,0 +1,60 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422429402",
      "id" : 1422429402,
      "line" : 33,
      "node_id" : "PRRC_kwDOABII585UyIza",
      "original_commit_id" : "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "original_line" : 33,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : 33,
      "pull_request_review_id" : 1774659127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422429402/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T14:17:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422429402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422485145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422485145"
         }
      },
      "author_association" : "MEMBER",
      "body" : "the other variant you're referring to here https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421614259 should cover that case.",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T13:42:24Z",
      "diff_hunk" : "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422485145",
      "id" : 1422485145,
      "in_reply_to_id" : 1421615040,
      "line" : 1305,
      "node_id" : "PRRC_kwDOABII585UyWaZ",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 1303,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 96,
      "pull_request_review_id" : 1775168195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422485145/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T13:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422485145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422494963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422494963"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree with @mzumsande  https://github.com/bitcoin/bitcoin/pull/28948/commits/bb979f4c76f4f4f4357a08674df833a5cc6dcf82#r1414612161.\r\nI think it will generally be better to remove the transaction when it was deprioritized and its fee reduced to <= 0 to clear the ambiguity?\r\n\r\ntx2 is evicted for having 0 fees but its when we are trimming mempool that its evicted, it should not be in the mempool the moment it's deprioritized not at a later time.",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T13:50:24Z",
      "diff_hunk" : "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422494963",
      "id" : 1422494963,
      "line" : 278,
      "node_id" : "PRRC_kwDOABII585UyYzz",
      "original_commit_id" : "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "original_line" : 278,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_bip68_sequence.py",
      "position" : 15,
      "pull_request_review_id" : 1774659127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422494963/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T14:17:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422494963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422497121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422497121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "   ```cpp\r\n   if (ancestors.empty()) {\r\n        return std::nullopt;\r\n    }\r\n```\r\nshould be checked before we check this size?",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T13:52:14Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422497121",
      "id" : 1422497121,
      "in_reply_to_id" : 1409768985,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585UyZVh",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 85,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 85,
      "pull_request_review_id" : 1774659127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422497121/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T14:17:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422497121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422654904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422654904"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removal of things below minimum relay feerate shouldn't impact the dynamic mempool minimum",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T15:30:23Z",
      "diff_hunk" : "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {\n+            removed += m_incremental_relay_feerate;\n+            trackPackageRemoved(removed);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422654904",
      "id" : 1422654904,
      "in_reply_to_id" : 1422166975,
      "line" : 1163,
      "node_id" : "PRRC_kwDOABII585Uy_24",
      "original_commit_id" : "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "original_line" : 1163,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 42,
      "pull_request_review_id" : 1775436538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422654904/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T15:30:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422654904",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422657588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422657588"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry I'm having trouble parsing this suggestion, are you saying we should call `TrimToSize` whenever a transaction is prioritised?",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T15:32:14Z",
      "diff_hunk" : "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422657588",
      "id" : 1422657588,
      "in_reply_to_id" : 1422494963,
      "line" : 278,
      "node_id" : "PRRC_kwDOABII585UzAg0",
      "original_commit_id" : "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "original_line" : 278,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_bip68_sequence.py",
      "position" : 15,
      "pull_request_review_id" : 1775440706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422657588/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T15:32:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422657588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422670830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422670830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No what I am suggesting is to remove the transaction from mempool when it was deprioritized and its fee reduced to <= 0, not call `TrimToSize`",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T15:40:11Z",
      "diff_hunk" : "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422670830",
      "id" : 1422670830,
      "in_reply_to_id" : 1422494963,
      "line" : 278,
      "node_id" : "PRRC_kwDOABII585UzDvu",
      "original_commit_id" : "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "original_line" : 278,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_bip68_sequence.py",
      "position" : 15,
      "pull_request_review_id" : 1775461249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422670830/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T15:40:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422670830",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422682244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422682244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in 104b3d39f416d20ab496d753afbe7e4d31902065:\r\n\r\nThis only allows the `version` option for `create*` calls. I think it would be better to allow the option for any MiniWallet method. In python this can be achieved by passing keyword-args down a call chain. See https://github.com/bitcoin/bitcoin/pull/28972. Feel free to cherry-pick that here (replacing this commit), or review it, or ignore it.",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T15:47:20Z",
      "diff_hunk" : "@@ -290,7 +290,8 @@ def create_self_transfer_multi(\n         sequence=0,\n         fee_per_output=1000,\n         target_weight=0,\n-        confirmed_only=False\n+        confirmed_only=False,\n+        version=2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422682244",
      "id" : 1422682244,
      "line" : 294,
      "node_id" : "PRRC_kwDOABII585UzGiE",
      "original_commit_id" : "104b3d39f416d20ab496d753afbe7e4d31902065",
      "original_line" : 294,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 6,
      "pull_request_review_id" : 1775478745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422682244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T15:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422682244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423035255"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423035255"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thanks :+1: ",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T19:36:56Z",
      "diff_hunk" : "@@ -290,7 +290,8 @@ def create_self_transfer_multi(\n         sequence=0,\n         fee_per_output=1000,\n         target_weight=0,\n-        confirmed_only=False\n+        confirmed_only=False,\n+        version=2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423035255",
      "id" : 1423035255,
      "in_reply_to_id" : 1422682244,
      "line" : 294,
      "node_id" : "PRRC_kwDOABII585U0ct3",
      "original_commit_id" : "104b3d39f416d20ab496d753afbe7e4d31902065",
      "original_line" : 294,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 6,
      "pull_request_review_id" : 1776025246,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423035255/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T19:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423035255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423076943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423076943"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like it's broken, see this test (here the parent transaction is spending an in-mempool output, rather than the child transaction):\r\n```\r\ndiff --git a/test/functional/mempool_accept_v3.py b/test/functional/mempool_accept_v3.py\r\nindex 769b177cf523..713a8cb7406b 100755\r\n--- a/test/functional/mempool_accept_v3.py\r\n+++ b/test/functional/mempool_accept_v3.py\r\n@@ -229,11 +229,42 @@ class MempoolAcceptV3(BitcoinTestFramework):\r\n         tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\r\n         self.check_mempool([tx_replacer[\"txid\"]])\r\n \r\n+    @cleanup\r\n+    def test_package_v3_inheritance(self):\r\n+        \"\"\"\r\n+        A v3 transaction in a package cannot have 2 v3 parents.\r\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\r\n+        all v3 transactions, that we cannot use submitpackage to get the\r\n+        transactions all into the mempool.\r\n+\r\n+        Verify, in particular, that if A is already in the mempool, then\r\n+        submitpackage(B, C) will fail.\r\n+        \"\"\"\r\n+        node = self.nodes[0]\r\n+        self.log.info(\"Test that submitpackage won't allow v3 topology rules to be violated\")\r\n+        # This is our transaction \"A\":\r\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\r\n+\r\n+        # Verify that A is in the mempool\r\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\r\n+\r\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\r\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\r\n+\r\n+        # tx_child_violator is our transaction \"C\"; create it:\r\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\r\n+\r\n+        # submitpackage(B, C) should fail\r\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\r\n+        assert(result['package_msg'] != 'success')\r\n+        #self.check_mempool([tx_in_mempool[\"txid\"], tx_0fee_parent[\"txid\"], tx_child_violator[\"txid\"]])\r\n+\r\n     def run_test(self):\r\n         self.log.info(\"Generate blocks to create UTXOs\")\r\n         node = self.nodes[0]\r\n         self.wallet = MiniWallet(node)\r\n         self.generate(self.wallet, 110)\r\n+        self.test_package_v3_inheritance()\r\n         self.test_v3_acceptance()\r\n         self.test_v3_replacement()\r\n         self.test_v3_bip125()\r\n```",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T20:16:55Z",
      "diff_hunk" : "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423076943",
      "id" : 1423076943,
      "in_reply_to_id" : 1421615040,
      "line" : 1305,
      "node_id" : "PRRC_kwDOABII585U0m5P",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 1303,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 96,
      "pull_request_review_id" : 1776090512,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423076943/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T20:17:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423076943",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423081068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423081068"
         }
      },
      "author_association" : "MEMBER",
      "body" : "that's the known topology issue IIUC: https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409842026",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T20:20:18Z",
      "diff_hunk" : "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423081068",
      "id" : 1423081068,
      "in_reply_to_id" : 1421615040,
      "line" : 1305,
      "node_id" : "PRRC_kwDOABII585U0n5s",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 1303,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 96,
      "pull_request_review_id" : 1776096637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423081068/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T20:20:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423081068",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423116594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423116594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah,  I see.  I think this is a different set of checks that fail, but I'm not sure exactly what the fix is so maybe both of these can be fixed at the same time...",
      "commit_id" : "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "created_at" : "2023-12-11T20:54:14Z",
      "diff_hunk" : "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423116594",
      "id" : 1423116594,
      "in_reply_to_id" : 1421615040,
      "line" : 1305,
      "node_id" : "PRRC_kwDOABII585U0wky",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 1303,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 96,
      "pull_request_review_id" : 1776152202,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423116594/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T20:54:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423116594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T13:18:45Z",
      "diff_hunk" : "@@ -290,7 +290,8 @@ def create_self_transfer_multi(\n         sequence=0,\n         fee_per_output=1000,\n         target_weight=0,\n-        confirmed_only=False\n+        confirmed_only=False,\n+        version=2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981108",
      "id" : 1423981108,
      "in_reply_to_id" : 1422682244,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U4Do0",
      "original_commit_id" : "104b3d39f416d20ab496d753afbe7e4d31902065",
      "original_line" : 294,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : null,
      "pull_request_review_id" : 1777451209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981108/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T13:18:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added mention of no topological restrictions to the comment",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T13:19:04Z",
      "diff_hunk" : "@@ -0,0 +1,60 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981481",
      "id" : 1423981481,
      "in_reply_to_id" : 1422429402,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U4Dup",
      "original_commit_id" : "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "original_line" : 33,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : null,
      "pull_request_review_id" : 1777451829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981481/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T13:19:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981578"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T13:19:09Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981578",
      "id" : 1423981578,
      "in_reply_to_id" : 1422364536,
      "line" : 12,
      "node_id" : "PRRC_kwDOABII585U4DwK",
      "original_commit_id" : "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "original_line" : 12,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 12,
      "pull_request_review_id" : 1777451998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981578/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T13:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981578",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423982889"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423982889"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a check for in-package + mempool ancestors, and both of your tests.",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T13:20:09Z",
      "diff_hunk" : "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423982889",
      "id" : 1423982889,
      "in_reply_to_id" : 1421615040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U4EEp",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 1303,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1777453998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423982889/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T13:20:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423982889",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423983165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T13:20:20Z",
      "diff_hunk" : "@@ -328,11 +329,12 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n \n     // Predicate to use for filtering transactions in removeForReorg.\n+    // Checks whether a non-v3 transaction spends v3 and or vice versa.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423983165",
      "id" : 1423983165,
      "in_reply_to_id" : 1421613674,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U4EI9",
      "original_commit_id" : "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "original_line" : 332,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1777454378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983165/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T13:20:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423983892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've changed the `RemovalReasonToString` to be \"sizelimit or <=0 fee\". Alternatively, we can add another reason?",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T13:20:54Z",
      "diff_hunk" : "@@ -1157,17 +1157,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423983892",
      "id" : 1423983892,
      "in_reply_to_id" : 1414612161,
      "line" : 1154,
      "node_id" : "PRRC_kwDOABII585U4EUU",
      "original_commit_id" : "f6a382af7ba3378539af6375a51b3798cc1fea76",
      "original_line" : 1154,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 30,
      "pull_request_review_id" : 1777455477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983892/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T13:20:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> As a side effect, I think this will allow users to remove select entries from their non-full mempool by prioritizing to large negative values (so basically a poor man's https://github.com/bitcoin/bitcoin/pull/15873).\r\n\r\nThis was discussed as part of #27018, also see the discussion on irc that day: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-02-01. I think the general idea is \"this is good, and will help avoid unspent ephemeral anchors.\"",
      "created_at" : "2023-12-12T13:23:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852028059",
      "id" : 1852028059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585uY7Sb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852028059/reactions"
      },
      "updated_at" : "2023-12-12T13:23:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852028059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423987772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423987772"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added this test",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T13:24:01Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423987772",
      "id" : 1423987772,
      "in_reply_to_id" : 1409842026,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII585U4FQ8",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 95,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 95,
      "pull_request_review_id" : 1777461631,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423987772/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T13:24:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423987772",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Last push fixed issues and addressed most comments, I'm also working on adding more tests.",
      "created_at" : "2023-12-12T13:25:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852030780",
      "id" : 1852030780,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585uY788",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852030780/reactions"
      },
      "updated_at" : "2023-12-12T13:25:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852030780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424116143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424116143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "did you want to use `CheckMempoolInvariants` here as well?",
      "commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "created_at" : "2023-12-12T14:53:30Z",
      "diff_hunk" : "@@ -300,5 +303,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424116143",
      "id" : 1424116143,
      "line" : 307,
      "node_id" : "PRRC_kwDOABII585U4kmv",
      "original_commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "original_line" : 307,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/test/fuzz/package_eval.cpp",
      "position" : 42,
      "pull_request_review_id" : 1777677456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424116143/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T14:53:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424116143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424133256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unused addition?",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:01:56Z",
      "diff_hunk" : "@@ -1014,6 +1035,7 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n }\n \n bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         const std::vector<Workspace>& workspaces,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424133256",
      "id" : 1424133256,
      "line" : 1038,
      "node_id" : "PRRC_kwDOABII585U4oyI",
      "original_commit_id" : "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "original_line" : 1038,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 106,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133256/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424133394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "extra line",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:02:01Z",
      "diff_hunk" : "@@ -1029,6 +1051,7 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424133394",
      "id" : 1424133394,
      "line" : 1054,
      "node_id" : "PRRC_kwDOABII585U4o0S",
      "original_commit_id" : "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "original_line" : 1054,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 114,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133394/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424137225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424137225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "isn't this already covered by CheckV3Inheritence?",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:03:38Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. This is not a complete\n+    // check, but we can exit early if it fails.\n+    if (!package.empty() && package.size() > V3_CHILD_MAX_VSIZE && package.back()->nVersion == 3) {\n+        const auto& child_wtxid = package.back()->GetWitnessHash();\n+        return strprintf(\"tx %s would have too many ancestors\", child_wtxid.ToString());\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize)\n+{\n+    // This function is specialized for these limits, and must be reimplemented if they ever change.\n+    static_assert(V3_ANCESTOR_LIMIT == 2);\n+    static_assert(V3_DESCENDANT_LIMIT == 2);\n+\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    }\n+    // If this transaction spends V3 parents, it cannot be too large.\n+    if (vsize > V3_CHILD_MAX_VSIZE) {\n+        return strprintf(\"v3 child tx is too big: %u > %u virtual bytes\", vsize, V3_CHILD_MAX_VSIZE);\n+    }\n+    // Any ancestor of a V3 transaction must also be V3.\n+    const auto& parent_entry = *ancestors.begin();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424137225",
      "id" : 1424137225,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U4pwJ",
      "original_commit_id" : "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "original_line" : 118,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : null,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424137225/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424137225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424141970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424141970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`Assume(IsChildWithParents())` here makes sense",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:07:07Z",
      "diff_hunk" : "@@ -1332,11 +1362,24 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n+    // Check the last transaction's v3 ancestor limits again, assuming that all transactions\n+    // are in the ancestor set of the last tx (which is the case when a package IsChildWithParents)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424141970",
      "id" : 1424141970,
      "line" : 1366,
      "node_id" : "PRRC_kwDOABII585U4q6S",
      "original_commit_id" : "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "original_line" : 1366,
      "original_position" : 142,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 151,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424141970/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424141970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424169715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424169715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Taken",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:23:27Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424169715",
      "id" : 1424169715,
      "in_reply_to_id" : 1409761071,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U4xrz",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : null,
      "pull_request_review_id" : 1777771980,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424169715/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424169715",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424176890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424176890"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think we should do that; we'd want to look at the impact on all related transaction's descendant scores. This transaction's modified fee might be negative, but it could have high-feerate descendants.",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:27:57Z",
      "diff_hunk" : "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424176890",
      "id" : 1424176890,
      "in_reply_to_id" : 1422494963,
      "line" : 278,
      "node_id" : "PRRC_kwDOABII585U4zb6",
      "original_commit_id" : "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "original_line" : 278,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_bip68_sequence.py",
      "position" : 15,
      "pull_request_review_id" : 1777784569,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424176890/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T15:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424176890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424190533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424190533"
         }
      },
      "author_association" : "MEMBER",
      "body" : "let's check the error messages here and elsewhere to prevent test regressions:\r\n`'error': 'v3-nonstandard, tx 1399d1fad241d2da8057b0eb29524e75b8415dedc26a536d8a0cfa72f49f9747 would have too many ancestors'}`\r\n",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:35:56Z",
      "diff_hunk" : "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424190533",
      "id" : 1424190533,
      "line" : 255,
      "node_id" : "PRRC_kwDOABII585U42xF",
      "original_commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "original_line" : 255,
      "original_position" : 255,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept_v3.py",
      "position" : 255,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424190533/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424190533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424191480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424191480"
         }
      },
      "author_association" : "MEMBER",
      "body" : "let's check the error messages here and elsewhere to prevent test regressions",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:36:37Z",
      "diff_hunk" : "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424191480",
      "id" : 1424191480,
      "line" : 285,
      "node_id" : "PRRC_kwDOABII585U42_4",
      "original_commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "original_line" : 285,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept_v3.py",
      "position" : 285,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424191480/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424191480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424215142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424215142"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've nested this part of the function inside `!ancestors.empty()` to make this clearer (and safer imo).",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:52:26Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424215142",
      "id" : 1424215142,
      "in_reply_to_id" : 1409768985,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U48xm",
      "original_commit_id" : "fc62757320f216a8adf45726eeca121e13d6c39e",
      "original_line" : 111,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : null,
      "pull_request_review_id" : 1777858477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424215142/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T15:52:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424215142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424216465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424216465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Pulled into a helper function and reused :+1: ",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T15:53:23Z",
      "diff_hunk" : "@@ -300,5 +303,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424216465",
      "id" : 1424216465,
      "in_reply_to_id" : 1424116143,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U49GR",
      "original_commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "original_line" : 307,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/test/fuzz/package_eval.cpp",
      "position" : null,
      "pull_request_review_id" : 1777860603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424216465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T15:53:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424216465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed the fuzzer crashes in  https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828351782 and https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1835850051 (thanks)",
      "created_at" : "2023-12-12T15:53:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852315761",
      "id" : 1852315761,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585uaBhx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852315761/reactions"
      },
      "updated_at" : "2023-12-12T15:53:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852315761",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424237443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424237443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Now that V3 checks are split into 4 different areas, I think we need to brainstorm a better way of naming this function, and describing exactly what it's *not* covering. Encapsulating the final check with something very similar will probably help with my pattern matching, ala `CheckV3Inheritence`?\r\n\r\n",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T16:08:42Z",
      "diff_hunk" : "@@ -0,0 +1,68 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 2. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. The tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424237443",
      "id" : 1424237443,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII585U5COD",
      "original_commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : 42,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424237443/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424237443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424302431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424302431"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`V3_CHILD_MAX_VSIZE` is the wrong thing, obviously, but it does need to be checked, otherwise a package size two doesn't  fail when the child is too big ala https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852439055",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-12T16:52:22Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. Assumes that this is\n+    // ancestor package-shaped.\n+    if (!package.empty() && package.size() > V3_CHILD_MAX_VSIZE && package.back()->nVersion == 3) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424302431",
      "id" : 1424302431,
      "line" : 87,
      "node_id" : "PRRC_kwDOABII585U5SFf",
      "original_commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : 87,
      "pull_request_review_id" : 1777711045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424302431/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T17:02:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424302431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\n$ echo \"/v//tk/aAYxsz8/Pz8/PAAAAAAB2AAYAAADPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz88AAABAAgAAAL35AAAABwIBAIwAAABA0gH5ACMAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAAAFBWwAACD/gPp66urq6uro=\" | base64 --decode > tx_package_eval-e9f61e34e32c669558b51daaec0c5c3780377b37.crash\r\n$ FUZZ=tx_package_eval ./src/test/fuzz/fuzz tx_package_eval-e9f61e34e32c669558b51daaec0c5c3780377b37.crash\r\ntest/util/txmempool.cpp:132 CheckMempoolV3Invariants: Assertion `entry.GetTxSize() <= V3_CHILD_MAX_VSIZE' failed.\r\n```",
      "created_at" : "2023-12-12T16:58:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852439055",
      "id" : 1852439055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585uafoP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852439055/reactions"
      },
      "updated_at" : "2023-12-12T16:58:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852439055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425084623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425084623"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok the lazy way clearly doesn't work; I think what we have to do is calculate in-package ancestors and feed that to `ApplyV3Rules` when we call it. This will also have the effect of consolidating our v3 checks so that it's cleaner. Pushing soon...",
      "commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "created_at" : "2023-12-13T09:31:52Z",
      "diff_hunk" : "@@ -1332,11 +1362,24 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n+    // Check the last transaction's v3 ancestor limits again, assuming that all transactions\n+    // are in the ancestor set of the last tx (which is the case when a package IsChildWithParents)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425084623",
      "id" : 1425084623,
      "in_reply_to_id" : 1424141970,
      "line" : 1366,
      "node_id" : "PRRC_kwDOABII585U8RDP",
      "original_commit_id" : "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "original_line" : 1366,
      "original_position" : 142,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 151,
      "pull_request_review_id" : 1779209175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425084623/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T09:31:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425084623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425180669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425180669"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yikes, fixed",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T10:50:42Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. Assumes that this is\n+    // ancestor package-shaped.\n+    if (!package.empty() && package.size() > V3_CHILD_MAX_VSIZE && package.back()->nVersion == 3) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425180669",
      "id" : 1425180669,
      "in_reply_to_id" : 1424302431,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U8of9",
      "original_commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.cpp",
      "position" : null,
      "pull_request_review_id" : 1779359870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425180669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T11:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425180669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181145"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok there are now only 2 places where v3 is checked: package sanity checks, and then `ApplyV3Rules` for each tx. I think the sanity check is very useful, as there is some heavy-ish computation done to calculate each transaction's ancestor set (including in-package and their mempool ancestors) to pass on to `ApplyV3Rules`. I've moved inheritance checks into `ApplyV3Rules` and made all errors \"v3-rule-violation\" with more details in the debug string.",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T10:51:08Z",
      "diff_hunk" : "@@ -0,0 +1,68 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 2. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. The tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181145",
      "id" : 1425181145,
      "in_reply_to_id" : 1424237443,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII585U8onZ",
      "original_commit_id" : "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "original_line" : 43,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : 43,
      "pull_request_review_id" : 1779359870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181145/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T11:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181660"
         }
      },
      "author_association" : "MEMBER",
      "body" : "deleted",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T10:51:34Z",
      "diff_hunk" : "@@ -1014,6 +1035,7 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n }\n \n bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         const std::vector<Workspace>& workspaces,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181660",
      "id" : 1425181660,
      "in_reply_to_id" : 1424133256,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U8ovc",
      "original_commit_id" : "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "original_line" : 1038,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1779359870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181660/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T11:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181714"
         }
      },
      "author_association" : "MEMBER",
      "body" : "deleted",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T10:51:37Z",
      "diff_hunk" : "@@ -1029,6 +1051,7 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181714",
      "id" : 1425181714,
      "in_reply_to_id" : 1424133394,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U8owS",
      "original_commit_id" : "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "original_line" : 1054,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1779359870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181714/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T11:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181714",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425182035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182035"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added error string checks everywhere",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T10:51:53Z",
      "diff_hunk" : "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425182035",
      "id" : 1425182035,
      "in_reply_to_id" : 1424190533,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U8o1T",
      "original_commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "original_line" : 255,
      "original_position" : 255,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept_v3.py",
      "position" : null,
      "pull_request_review_id" : 1779359870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182035/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T11:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182035",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425182152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T10:52:00Z",
      "diff_hunk" : "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425182152",
      "id" : 1425182152,
      "in_reply_to_id" : 1424191480,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U8o3I",
      "original_commit_id" : "e649551b120da0597668941d8b72e8a3fb33f087",
      "original_line" : 285,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept_v3.py",
      "position" : null,
      "pull_request_review_id" : 1779359870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182152/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T11:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1777711045\r\n\r\nAdded this test but changed the `tx_v3_child_heavy` test assuming that it wasn't supposed to be submitted with `tx_v3_parent_2_normal` (it fails package topo checks then), lmk if you had something else in mind?",
      "created_at" : "2023-12-13T11:22:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1853734787",
      "id" : 1853734787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
      "node_id" : "IC_kwDOABII585ufb-D",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853734787/reactions"
      },
      "updated_at" : "2023-12-13T11:22:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853734787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425606237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425606237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this only works if prioritization happens before mempool acceptance\r\n\r\nI'd just set `check_fees` to false if Prio had just been called before calling this, to stay simple.",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T16:31:39Z",
      "diff_hunk" : "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425606237",
      "id" : 1425606237,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII585U-QZd",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 135,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/test/util/txmempool.cpp",
      "position" : 27,
      "pull_request_review_id" : 1780045798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425606237/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T16:39:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425606237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425695018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425695018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Might be worth stressing that this is the only place where in-package inheritance is checked\r\n\r\n\"Necessary but insufficient\"",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T17:48:40Z",
      "diff_hunk" : "@@ -0,0 +1,65 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * \n+ * The following rules apply to V3 transactions:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 4. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a V3 tx has any ancestors, the tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        unsigned int num_other_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Helper function for PackageV3SanityChecks below.\n+ * Any two unconfirmed transactions with a dependency relationship must either both be v3 or both\n+ * be non-v3. Check this rule for any list of unconfirmed transactions (no topology requirements).\n+ *\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Check inheritance of v3 and ancestor/descendant limits within a package (this assumes that all\n+ * transactions are in the ancestor set of the last tx, which is true if IsChildWithParents). This\n+ * check does not fully check all v3 rules, but allows us to quit early before accessing mempool.  */\n+std::optional<std::string> PackageV3SanityChecks(const Package& package);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425695018",
      "id" : 1425695018,
      "line" : 63,
      "node_id" : "PRRC_kwDOABII585U-mEq",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 63,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : 63,
      "pull_request_review_id" : 1780186265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425695018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T18:06:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425695018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425701016"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425701016"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                const auto& parents = entry.GetMemPoolParentsConst();\r\n                Assert(parents.begin()->get().GetTx().nVersion == 3);\r\n            }\r\n            if (entry.GetCountWithDescendants() > 1) {\r\n                const auto& children = entry.GetMemPoolChildrenConst();\r\n                Assert(children.begin()->get().GetTx().nVersion == 3);\r\n            }\r\n```\r\nto catch inheritance failures",
      "commit_id" : "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "created_at" : "2023-12-13T17:54:43Z",
      "diff_hunk" : "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425701016",
      "id" : 1425701016,
      "line" : 136,
      "node_id" : "PRRC_kwDOABII585U-niY",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 136,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/util/txmempool.cpp",
      "position" : 28,
      "pull_request_review_id" : 1780186265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425701016/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T19:17:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425701016",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425704039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425704039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no straight forward coverage of this I think, so:\r\n\r\n```suggestion\r\n\r\n    @cleanup\r\n    def test_v3_package_inheritence(self):\r\n        self.log.info(\"Test that v3 inheritence is checked within package\")\r\n        node = self.nodes[0]\r\n        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\r\n        tx_v3_parent = self.wallet.create_self_transfer(\r\n            fee_rate=0,\r\n            version=3\r\n        )\r\n        tx_v2_child = self.wallet.create_self_transfer(\r\n            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\r\n            fee=10000,\r\n            version=2\r\n        )\r\n\r\n        assert_equal(node.getrawmempool(), [])\r\n        result = node.submitpackage([tx_v3_parent[\"hex\"], tx_v2_child[\"hex\"]])\r\n        assert_equal(result['package_msg'], \"v3-violation\")\r\n        self.check_mempool([])\r\n\r\n```",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T17:57:40Z",
      "diff_hunk" : "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-rule-violation, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_multiparent[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert_equal(result['package_msg'], \"transaction failed\")\n+        assert_equal(result['tx-results'][tx_child_violator['wtxid']]['error'], f\"v3-rule-violation, tx {tx_child_violator['wtxid']} would have too many ancestors\")\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425704039",
      "id" : 1425704039,
      "line" : 298,
      "node_id" : "PRRC_kwDOABII585U-oRn",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 298,
      "original_position" : 298,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept_v3.py",
      "position" : 298,
      "pull_request_review_id" : 1780186265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425704039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T18:10:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425704039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425705028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425705028"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        self.test_v3_ancestors_package_and_mempool()\r\n        self.test_v3_package_inheritence()\r\n```",
      "commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "created_at" : "2023-12-13T17:58:38Z",
      "diff_hunk" : "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-rule-violation, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_multiparent[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert_equal(result['package_msg'], \"transaction failed\")\n+        assert_equal(result['tx-results'][tx_child_violator['wtxid']]['error'], f\"v3-rule-violation, tx {tx_child_violator['wtxid']} would have too many ancestors\")\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 110)\n+        self.test_v3_acceptance()\n+        self.test_v3_replacement()\n+        self.test_v3_bip125()\n+        self.test_v3_reorg()\n+        self.test_nondefault_package_limits()\n+        self.test_fee_dependency_replacements()\n+        self.test_v3_ancestors_package()\n+        self.test_v3_ancestors_package_and_mempool()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425705028",
      "id" : 1425705028,
      "line" : 312,
      "node_id" : "PRRC_kwDOABII585U-ohE",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 312,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept_v3.py",
      "position" : 312,
      "pull_request_review_id" : 1780186265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425705028/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T18:06:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425705028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426435808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426435808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah... slightly annoying that we can't check this until we're sure a trim happened.",
      "commit_id" : "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "created_at" : "2023-12-14T09:08:13Z",
      "diff_hunk" : "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426435808",
      "id" : 1426435808,
      "in_reply_to_id" : 1425606237,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VBa7g",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 135,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/test/util/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1781356473,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426435808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-14T09:08:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426435808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489158"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489158"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rewrote the docs in this file, I think it's much more clear now",
      "commit_id" : "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "created_at" : "2023-12-14T09:53:12Z",
      "diff_hunk" : "@@ -0,0 +1,65 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * \n+ * The following rules apply to V3 transactions:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 4. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a V3 tx has any ancestors, the tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        unsigned int num_other_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Helper function for PackageV3SanityChecks below.\n+ * Any two unconfirmed transactions with a dependency relationship must either both be v3 or both\n+ * be non-v3. Check this rule for any list of unconfirmed transactions (no topology requirements).\n+ *\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Check inheritance of v3 and ancestor/descendant limits within a package (this assumes that all\n+ * transactions are in the ancestor set of the last tx, which is true if IsChildWithParents). This\n+ * check does not fully check all v3 rules, but allows us to quit early before accessing mempool.  */\n+std::optional<std::string> PackageV3SanityChecks(const Package& package);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489158",
      "id" : 1426489158,
      "in_reply_to_id" : 1425695018,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII585VBn9G",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 88,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/policy/v3_policy.h",
      "position" : 88,
      "pull_request_review_id" : 1781441551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489158/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-14T09:53:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489158",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added the inheritance check, but the second half is redundant with when we check the child, no?",
      "commit_id" : "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "created_at" : "2023-12-14T09:53:18Z",
      "diff_hunk" : "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489285",
      "id" : 1426489285,
      "in_reply_to_id" : 1425701016,
      "line" : 136,
      "node_id" : "PRRC_kwDOABII585VBn_F",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 136,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/util/txmempool.cpp",
      "position" : 28,
      "pull_request_review_id" : 1781441743,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489285/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-14T09:53:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489285",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489422"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added, thanks",
      "commit_id" : "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "created_at" : "2023-12-14T09:53:25Z",
      "diff_hunk" : "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-rule-violation, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_multiparent[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert_equal(result['package_msg'], \"transaction failed\")\n+        assert_equal(result['tx-results'][tx_child_violator['wtxid']]['error'], f\"v3-rule-violation, tx {tx_child_violator['wtxid']} would have too many ancestors\")\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489422",
      "id" : 1426489422,
      "in_reply_to_id" : 1425704039,
      "line" : 298,
      "node_id" : "PRRC_kwDOABII585VBoBO",
      "original_commit_id" : "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "original_line" : 298,
      "original_position" : 298,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept_v3.py",
      "position" : 298,
      "pull_request_review_id" : 1781441975,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489422/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-14T09:53:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489422",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426534962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426534962"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I understand your point.\r\n`TrimToSize` docstring says \r\n```cpp\r\n/** Remove transactions from the mempool until its dynamic size is <= sizelimit.\r\n```\r\nNow `TrimToSize`removes transaction even if the mempool is not full if their are 0 fee transactions.\r\nthe docstring should be updated to reflect the operation and maybe the name?\r\n",
      "commit_id" : "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "created_at" : "2023-12-14T10:31:18Z",
      "diff_hunk" : "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426534962",
      "id" : 1426534962,
      "in_reply_to_id" : 1422494963,
      "line" : 278,
      "node_id" : "PRRC_kwDOABII585VBzIy",
      "original_commit_id" : "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "original_line" : 278,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_bip68_sequence.py",
      "position" : 15,
      "pull_request_review_id" : 1781514056,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426534962/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-14T10:31:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426534962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   }
]
