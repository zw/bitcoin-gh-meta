[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28929).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/28929#pullrequestreview-1745623209), [dergoegge](https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1825460284) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "created_at" : "2023-11-23T01:31:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1823723265",
      "id" : 1823723265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28929",
      "node_id" : "IC_kwDOABII585ss88B",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1823723265/reactions"
      },
      "updated_at" : "2024-01-12T06:36:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1823723265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1402847278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402847278"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is more generalising, than dropping...",
      "commit_id" : "334f75acfdfd8c8737f0fc5da41d25ec8e6ab588",
      "created_at" : "2023-11-23T01:40:33Z",
      "diff_hunk" : "@@ -332,7 +332,7 @@ class CTransaction\n     template <typename Stream>\n     CTransaction(deserialize_type, const TransactionSerParams& params, Stream& s) : CTransaction(CMutableTransaction(deserialize, params, s)) {}\n     template <typename Stream>\n-    CTransaction(deserialize_type, ParamsStream<TransactionSerParams,Stream>& s) : CTransaction(CMutableTransaction(deserialize, s)) {}\n+    CTransaction(deserialize_type, Stream& s) : CTransaction(CMutableTransaction(deserialize, s)) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1402847278",
      "id" : 1402847278,
      "line" : 335,
      "node_id" : "PRRC_kwDOABII585TncAu",
      "original_commit_id" : "554a0dd18c0a277ab1d45c1643c16ed851eee14c",
      "original_line" : 335,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/primitives/transaction.h",
      "position" : 14,
      "pull_request_review_id" : 1745596465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402847278/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-23T01:40:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402847278",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1402864403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402864403"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Dropping `SERIALIZE_METHODS_PARAMS` doesn't seem like an improvement?\r\n\r\nI would have expected something more like:\r\n\r\n```c++\r\n// this pr: #define SER_PARAMS(type) (s.template GetParams<type>())\r\n// instead:\r\ntemplate<typename T, typename Stream>\r\nconst auto& GetSerParams(const Stream& s)\r\n{\r\n    return s.template GetParams<T>();\r\n}\r\n\r\n// FORMATTER_METHODS_PARAMS has the same signature, but now uses the new GetSerParams<>()\r\n#define FORMATTER_METHODS_PARAMS(cls, obj, paramcls, paramobj) \\\r\n    template<typename Stream> \\\r\n    static void Ser(Stream& s, const cls& obj) { SerializationOps(obj, s, GetSerParams<paramcls>(s), ActionSerialize{}); } \\\r\n    template<typename Stream> \\\r\n    static void Unser(Stream& s, cls& obj) { SerializationOps(obj, s, GetSerParams<paramcls>(s), ActionUnserialize{}); } \\\r\n    template<typename Stream, typename Type, typename Operation> \\\r\n    static void SerializationOps(Type& obj, Stream& s, const paramcls& paramobj, Operation ser_action)\r\n\r\n// protocol.h\r\n// this pr:\r\n//  SERIALIZE_METHODS(CAddress, obj) {\r\n//      auto& params = SER_PARAMS(SerParams);\r\n// instead:\r\n    SERIALIZE_METHODS_PARAMS(CAddress, obj, SerParams, params) {\r\n\r\n\r\n// netaddress.h:\r\n// original:\r\n//      if (s.GetParams().enc == Encoding::V2) {\r\n// this pr:\r\n//      if (s.template GetParams<SerParams>().enc == Encoding::V2) {\r\n// instead:\r\n        if (GetSerParams<SerParams>(s).enc == Encoding::V2) { ... }\r\n```",
      "commit_id" : "334f75acfdfd8c8737f0fc5da41d25ec8e6ab588",
      "created_at" : "2023-11-23T02:30:13Z",
      "diff_hunk" : "@@ -406,9 +406,10 @@ class CAddress : public CService\n     static constexpr SerParams V1_DISK{{CNetAddr::Encoding::V1}, Format::Disk};\n     static constexpr SerParams V2_DISK{{CNetAddr::Encoding::V2}, Format::Disk};\n \n-    SERIALIZE_METHODS_PARAMS(CAddress, obj, SerParams, params)\n+    SERIALIZE_METHODS(CAddress, obj)\n     {\n         bool use_v2;\n+        auto& params = SER_PARAMS(SerParams);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1402864403",
      "id" : 1402864403,
      "line" : 412,
      "node_id" : "PRRC_kwDOABII585TngMT",
      "original_commit_id" : "334f75acfdfd8c8737f0fc5da41d25ec8e6ab588",
      "original_line" : 412,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 8,
      "pull_request_review_id" : 1745623209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402864403/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-23T02:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402864403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1403153558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403153558"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1402864403\r\n\r\n> Dropping `SERIALIZE_METHODS_PARAMS` doesn't seem like an improvement?\r\n\r\nI think `SER_PARAMS` is an improvement over `SERIALIZE_METHODS_PARAMS` and `FORMATTER_METHODS_PARAMS` because:\r\n\r\n- It allows retrieving an arbitrary number of parameters, not just one.\r\n- It makes unified `SERIALIZE_METHODS` and separated `Serialize`/`Unserialize` method definitions more similar to each other. In a unified method you use `READWRITE(field)`, and in separated methods you write `stream << field`  and `stream >> field`. In a unified method, you use `SER_PARAMS(type)` and in separated methods you write `stream.template GetParams<type>()`. This way there is a 1:1 correspondence between code in unified and separate methods without unnecessary differences.\r\n- It deduplicates code and eliminates confusing macros. `FORMATTER_METHODS_PARAMS` was a copy of `FORMATTER_METHODS` and `SERIALIZE_METHODS_PARAMS` was a copy of `SERIALIZE_METHODS`. Having duplicate code makes the library confusing to navigate and can become a maintenance burden when the definitions get out of sync or fixing a bug or adding a feature requires updating both sets of the definitions. Our own example code was previously broken on line 208, because it was confusing `FORMATTER_METHODS` for `FORMATTER_METHODS_PARAMS`. Having fewer duplicated and similarly named macros is better for users and maintainers of the serialization library.\r\n\r\nI think #25284 made a (small) mistake by adding new duplicate variants of macros instead of just extending the existing macros, and this commit cleans that up. I could probably split this commit up into two parts, first deleting the duplicate macros, then adding multiple parameter support. As I was implementing this change, it just seemed easier to delete the duplicate code than to update it, so I did both things at once.",
      "commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "created_at" : "2023-11-23T09:58:14Z",
      "diff_hunk" : "@@ -406,9 +406,10 @@ class CAddress : public CService\n     static constexpr SerParams V1_DISK{{CNetAddr::Encoding::V1}, Format::Disk};\n     static constexpr SerParams V2_DISK{{CNetAddr::Encoding::V2}, Format::Disk};\n \n-    SERIALIZE_METHODS_PARAMS(CAddress, obj, SerParams, params)\n+    SERIALIZE_METHODS(CAddress, obj)\n     {\n         bool use_v2;\n+        auto& params = SER_PARAMS(SerParams);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1403153558",
      "id" : 1403153558,
      "in_reply_to_id" : 1402864403,
      "line" : 412,
      "node_id" : "PRRC_kwDOABII585TomyW",
      "original_commit_id" : "334f75acfdfd8c8737f0fc5da41d25ec8e6ab588",
      "original_line" : 412,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 8,
      "pull_request_review_id" : 1746085184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403153558/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T21:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403153558",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1403212531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403212531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1402847278\r\n\r\n> This is more generalising, than dropping...\r\n\r\nI think describing this as generalizing would incorrectly imply that some functionality is being added, when then function definitions aren't even changing, just the declarations. Motivation for this change is not really to generalize, just to drop an unnecessary reference to the ParamsStream class to simplify the next commit, and to pass streams the same way here as they are passed other places.",
      "commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "created_at" : "2023-11-23T10:50:45Z",
      "diff_hunk" : "@@ -332,7 +332,7 @@ class CTransaction\n     template <typename Stream>\n     CTransaction(deserialize_type, const TransactionSerParams& params, Stream& s) : CTransaction(CMutableTransaction(deserialize, params, s)) {}\n     template <typename Stream>\n-    CTransaction(deserialize_type, ParamsStream<TransactionSerParams,Stream>& s) : CTransaction(CMutableTransaction(deserialize, s)) {}\n+    CTransaction(deserialize_type, Stream& s) : CTransaction(CMutableTransaction(deserialize, s)) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1403212531",
      "id" : 1403212531,
      "in_reply_to_id" : 1402847278,
      "line" : 337,
      "node_id" : "PRRC_kwDOABII585To1Lz",
      "original_commit_id" : "554a0dd18c0a277ab1d45c1643c16ed851eee14c",
      "original_line" : 337,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/primitives/transaction.h",
      "position" : 14,
      "pull_request_review_id" : 1746085184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403212531/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T21:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403212531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2023-11-24T10:29:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1825460284",
      "id" : 1825460284,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28929",
      "node_id" : "IC_kwDOABII585szlA8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1825460284/reactions"
      },
      "updated_at" : "2023-11-24T10:29:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1825460284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-11-30T17:42:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1834260364",
      "id" : 1834260364,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28929",
      "node_id" : "IC_kwDOABII585tVJeM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1834260364/reactions"
      },
      "updated_at" : "2023-11-30T17:42:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1834260364",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 97338eec9e35401f42c376062ea161a22143d628 -> ffc1e9fd8cf53cfcf4d7926ca2963958eacf73d7 ([`pr/iparams.2`](https://github.com/ryanofsky/bitcoin/commits/pr/iparams.2) -> [`pr/iparams.3`](https://github.com/ryanofsky/bitcoin/commits/pr/iparams.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/iparams.2-rebase..pr/iparams.3)) due to minor conflict with #28451",
      "created_at" : "2024-01-11T23:19:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1888120269",
      "id" : 1888120269,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28929",
      "node_id" : "IC_kwDOABII585wim3N",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888120269/reactions"
      },
      "updated_at" : "2024-01-11T23:19:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888120269",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\ntest/serialize_tests.cpp:394:11: error: unused variable 'oi2' [-Werror,-Wunused-variable]\r\n  394 |     Other oi2;\r\n      |           ^~~",
      "created_at" : "2024-01-12T07:19:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1888552974",
      "id" : 1888552974,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28929",
      "node_id" : "IC_kwDOABII585wkQgO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888552974/reactions"
      },
      "updated_at" : "2024-01-12T07:19:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888552974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated ffc1e9fd8cf53cfcf4d7926ca2963958eacf73d7 -> 3c311734d2fc6a4ca410f254ba3c8e923d58be70 ([`pr/iparams.3`](https://github.com/ryanofsky/bitcoin/commits/pr/iparams.3) -> [`pr/iparams.4`](https://github.com/ryanofsky/bitcoin/commits/pr/iparams.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/iparams.3..pr/iparams.4)) to fix unused variable in test https://cirrus-ci.com/task/4527517751574528?logs=ci#L2260\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1888552974\r\n\r\n> ```\r\n> test/serialize_tests.cpp:394:11: error: unused variable 'oi2' [-Werror,-Wunused-variable]\r\n> ```\r\n\r\nFixed, thanks. Also renamed variables in the test to make it more readable\r\n\r\n",
      "created_at" : "2024-01-12T12:42:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#issuecomment-1889089160",
      "id" : 1889089160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28929",
      "node_id" : "IC_kwDOABII585wmTaI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889089160/reactions"
      },
      "updated_at" : "2024-01-12T12:42:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889089160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484199895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484199895"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70:\r\n\r\nI don't understand this. For example, if `SubStream` is a `DataStream` that holds data, this will now create a copy of this data, when previously it didn't?\r\n\r\nIt seems odd that the stream has to be passed down the whole \"type-stack\" anyway. Maybe it is simpler to just create a stack of params only to hold the types?",
      "commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "created_at" : "2024-02-09T11:34:24Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484199895",
      "id" : 1484199895,
      "line" : 1114,
      "node_id" : "PRRC_kwDOABII585YdxfX",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 9,
      "pull_request_review_id" : 1872178867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484199895/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T11:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484199895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484226391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484226391"
         }
      },
      "author_association" : "MEMBER",
      "body" : "One could consider to completely disallow wrapping streams into each other, see also https://www.github.com/bitcoin/bitcoin/pull/25284/commits/faec591d64e40ba7ec7656cbfdda1a05953bde13#r1315927911",
      "commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "created_at" : "2024-02-09T11:56:00Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484226391",
      "id" : 1484226391,
      "in_reply_to_id" : 1484199895,
      "line" : 1114,
      "node_id" : "PRRC_kwDOABII585Yd39X",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 9,
      "pull_request_review_id" : 1872221594,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484226391/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T11:56:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484226391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484292817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484292817"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484199895\r\n\r\n> [3c31173](https://github.com/bitcoin/bitcoin/commit/3c311734d2fc6a4ca410f254ba3c8e923d58be70):\r\n> \r\n> I don't understand this. For example, if `SubStream` is a `DataStream` that holds data, this will now create a copy of this data, when previously it didn't?\r\n\r\nI will add a comment here, but this does not happen due to the \"Template deduction guide for a single params argument that's slightly different from the default generated deduction guide because it stores a reference to the substream inside `ParamsStream` instead of a copy\" on line 1147 below.\r\n\r\nWith this change, a caller constructing the `ParamsStream` is in control and can decide whether  `ParamsStream` should hold a value or a reference by specifying `DataStream` if they want a value, or `DataSteam&` if they want a reference.\r\n\r\nThe default behavior for a single parameter is unchanged, and will use a reference. But if there are multiple parameters, the inner `ParamsStream` instances are stored by value so we have a single tuple-like object containing all the parameters, not multiple `ParamsStream` objects with unpredictable lifetimes referencing each other.\r\n \r\n> It seems odd that the stream has to be passed down the whole \"type-stack\" anyway. Maybe it is simpler to just create a stack of params only to hold the types?\r\n\r\nI don't think it's odd. Ultimately the `ParamsStream` wrapper methods (`read`, `write`, `size`, etc) need to call the corresponding methods on the wrapped streams, so types of all the streams need to be known.\r\n\r\n> One could consider to completely disallow wrapping streams into each other, see also https://www.github.com/bitcoin/bitcoin/pull/25284/commits/faec591d64e40ba7ec7656cbfdda1a05953bde13#r1315927911\r\n\r\nThat would be a problem because \"wrapping a `ParamsStream` in a `ParamsStream`\" is a useful thing to do, and shouldn't be forbidden. It's the most straightforward way to support multiple parameters because each `ParamStream` can hold one parameter, and `ParamsStream::GetParams` can return its own parameter if requested, or call the wrapped `GetParams` method otherwise.",
      "commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "created_at" : "2024-02-09T13:04:16Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484292817",
      "id" : 1484292817,
      "in_reply_to_id" : 1484199895,
      "line" : 1114,
      "node_id" : "PRRC_kwDOABII585YeILR",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 9,
      "pull_request_review_id" : 1872329508,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484292817/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T13:05:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484292817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484322490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484322490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In any case `m_substream{substream}` still creates a copy when it shouldn't, due to a missing `std::forward`, no?",
      "commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "created_at" : "2024-02-09T13:32:50Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484322490",
      "id" : 1484322490,
      "in_reply_to_id" : 1484199895,
      "line" : 1114,
      "node_id" : "PRRC_kwDOABII585YePa6",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 9,
      "pull_request_review_id" : 1872411619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484322490/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T13:32:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484322490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484425597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484425597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484322490\r\n\r\n> In any case `m_substream{substream}` still creates a copy when it shouldn't, due to a missing `std::forward`, no?\r\n\r\nOh that's interesting. I wouldn't think to use `std::forward` because normally it's just used for && rvalue reference function template parameters, not class template parameters, and doesn't do anything useful if && is not used and special template deduction rules for it are not applied.\r\n\r\nWe are actually ok with copies not moves here in all current cases. Copies and moves in all current cases are identical because ParamStream instances don't contain any real values, just references to external params and an external substream, so their copy and move methods are the same.\r\n\r\nBut theoretically if someone did want create a `ParamsStream` with a nested substream that moved from another instance during construction, probably the code could be changed to support that better, because right now I think you have to write `ParamsStream<MySubstream>{std::move(mysubstream), myparams)`, and wouldn't be able to shorten it to  `ParamsStream{std::move(mysubstream), myparams}`. Just adding std::forward on this line wouldn't fix this, but maybe adding std::forward along with  switching from & to && in template deduction guides below would work.\r\n\r\nI can experiment with this and add a test. I could imagine this being useful if you wanted to write something like `ParamsStream mystream{FileStream{\"file.bin\"}, param1, param2}` and have the file automatically closed when the stream was destroyed.",
      "commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "created_at" : "2024-02-09T14:51:26Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484425597",
      "id" : 1484425597,
      "in_reply_to_id" : 1484199895,
      "line" : 1114,
      "node_id" : "PRRC_kwDOABII585Yeol9",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 9,
      "pull_request_review_id" : 1872576998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484425597/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T14:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484425597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484436443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484436443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I could imagine this being useful if you wanted to write something like `ParamsStream mystream{FileStream{\"file.bin\"}, param1, param2}` and have the file automatically closed when the stream was destroyed.\r\n\r\nYes, an example would be in net.cpp, but feel free to ignore, if it is too much hassle.\r\n\r\n```cpp\r\nsrc/net.cpp-    DataStream underlying_stream{vSeedsIn};\r\nsrc/net.cpp:    ParamsStream s{underlying_stream, CAddress::V2_NETWORK};\r\n",
      "commit_id" : "33d99bad01637a3454358841b5c1aaf099002afb",
      "created_at" : "2024-02-09T14:59:58Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484436443",
      "id" : 1484436443,
      "in_reply_to_id" : 1484199895,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YerPb",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1872594580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484436443/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T14:59:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484436443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496589417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496589417"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1484436443\r\n\r\n> Yes, an example would be in net.cpp, but feel free to ignore, if it is too much hassle.\r\n> \r\n> ```c++\r\n> src/net.cpp-    DataStream underlying_stream{vSeedsIn};\r\n> src/net.cpp:    ParamsStream s{underlying_stream, CAddress::V2_NETWORK};\r\n> ```\r\n\r\nSince it didn't complicate implementation of this PR too much, I implemented support for passing any type of substream as an rvalue to ParamsStream, instead of only passing nested ParamStreams to by value, and I added a test for this. This just required changing & to && and adding std::forward a few places.\r\n\r\nUnfortunately, however, I could not find a way to simplify `net.cpp` without triggering a compiler warning:\r\n\r\n```diff\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -198,8 +198,7 @@ static std::vector<CAddress> ConvertSeeds(const std::vector<uint8_t> &vSeedsIn)\r\n     const auto one_week{7 * 24h};\r\n     std::vector<CAddress> vSeedsOut;\r\n     FastRandomContext rng;\r\n-    DataStream underlying_stream{vSeedsIn};\r\n-    ParamsStream s{underlying_stream, CAddress::V2_NETWORK};\r\n+    ParamsStream s{DataStream{vSeedsIn}, CAddress::V2_NETWORK};\r\n     while (!s.eof()) {\r\n         CService endpoint;\r\n         s >> endpoint;\r\n\r\n```\r\n\r\nThis change *should* work, but unfortunately it triggers a clang [`-Wdangling` ](https://clang.llvm.org/docs/DiagnosticsReference.html#wdangling) warning, which I believe is spurious:\r\n\r\n```c++\r\nnet.cpp:201:20: error: temporary whose address is used as value of local variable 's' will be destroyed at the end of the full-expression [-Werror,-Wdangling]\r\n  201 |     ParamsStream s{DataStream{vSeedsIn}, CAddress::V2_NETWORK};\r\n      |                    ^~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\nThe warning doesn't make sense and I think it is a compiler bug. It happens for me with clang 17.0.6.",
      "commit_id" : "33d99bad01637a3454358841b5c1aaf099002afb",
      "created_at" : "2024-02-20T22:04:51Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496589417",
      "id" : 1496589417,
      "in_reply_to_id" : 1484199895,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZNCRp",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1891677340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496589417/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T22:21:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496589417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496625389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496625389"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496589417\r\n\r\n> The warning doesn't make sense and I think it is a compiler bug.\r\n\r\nActually it is not a compiler bug. It happens because of the lifetimebound annotation and goes away if I change:\r\n\r\n```diff\r\n-    ParamsStream(SubStream&& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{std::forward<SubStream>(substream)} {}\r\n+    ParamsStream(SubStream&& substream, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{std::forward<SubStream>(substream)} {}\r\n```\r\n\r\nBut that change is potentially less safe, because we really do want the [lifetimebound](https://clang.llvm.org/docs/AttributeReference.html#lifetimebound) attribute to be specified if Substream is an lvalue reference, just not in other cases. I'm not sure if there is an attribute syntax which would support doing that.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "commit_id" : "33d99bad01637a3454358841b5c1aaf099002afb",
      "created_at" : "2024-02-20T22:33:43Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496625389",
      "id" : 1496625389,
      "in_reply_to_id" : 1484199895,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZNLDt",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1891714108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496625389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T22:33:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496625389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496650793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496650793"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496625389\r\n\r\nThis should be resolved in latest push, which just drops the LIFETIMEBOUND annotation since it isn't always accurate. The only case where specifying the annotation is actually correct is the case where the argument is an lvalue. And in that case, I think the annotation is probably not useful. The language already doesn't allow passing temporaries as ~rvalues~ lvalues so there is probably not anything the compiler can helpfully warn about in that case.",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-20T22:54:37Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1496650793",
      "id" : 1496650793,
      "in_reply_to_id" : 1484199895,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZNRQp",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1891730489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496650793/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T14:04:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496650793",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497210553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497210553"
         }
      },
      "author_association" : "MEMBER",
      "body" : "af7f90da74b935c17d986b0f4d21e4bce6f56343: Thanks for removing it, but I think it can be a separate (trivial) 4 line diff commit?",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T09:53:48Z",
      "diff_hunk" : "@@ -1103,22 +1103,36 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename SubStream, typename Params>\n+/** Wrapper that overrides the GetParams() function of a stream. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497210553",
      "id" : 1497210553,
      "line" : 1106,
      "node_id" : "PRRC_kwDOABII585ZPZ65",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1106,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 59,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497210553/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497210553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497229478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497229478"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in https://github.com/bitcoin/bitcoin/commit/af7f90da74b935c17d986b0f4d21e4bce6f56343: Would it matter if all of these were updated to use `GetStream` over `m_substream`? I guess the only difference would be that `std::stacktrace::current()` would be smaller if called inside of one of the substream methods?",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T10:05:36Z",
      "diff_hunk" : "@@ -1103,22 +1103,36 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename SubStream, typename Params>\n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template <typename SubStream, typename Params, bool nested = false>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    // If ParamsStream constructor is passed an lvalue argument, Substream will\n+    // be a reference type, and m_substream will reference that argument.\n+    // Otherwise m_substream will be a substream instance and move from the\n+    // argument. Letting ParamsStream contain a substream instance instead of\n+    // just a reference is useful to make the ParamsStream object self contained\n+    // and let it do cleanup when destroyed, for example by closing files if\n+    // SubStream is a file stream.\n+    SubStream m_substream;\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream&& substream, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{std::forward<SubStream>(substream)} {}\n+\n+    template<typename NestedSubstream, typename Params1, typename Params2, typename... NestedParams>\n+    ParamsStream(NestedSubstream&& s, const Params1& params1 LIFETIMEBOUND, const Params2& params2 LIFETIMEBOUND, const NestedParams&... params LIFETIMEBOUND)\n+        : ParamsStream{::ParamsStream{std::forward<NestedSubstream>(s), params2, params...}, params1} {}\n+\n     template <typename U> ParamsStream& operator<<(const U& obj) { ::Serialize(*this, obj); return *this; }\n     template <typename U> ParamsStream& operator>>(U&& obj) { ::Unserialize(*this, obj); return *this; }\n     void write(Span<const std::byte> src) { m_substream.write(src); }\n     void read(Span<std::byte> dst) { m_substream.read(dst); }\n     void ignore(size_t num) { m_substream.ignore(num); }\n     bool eof() const { return m_substream.eof(); }\n     size_t size() const { return m_substream.size(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497229478",
      "id" : 1497229478,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZPeim",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1133,
      "original_position" : 35,
      "original_start_line" : 1129,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497229478/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497229478",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497240550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497240550"
         }
      },
      "author_association" : "MEMBER",
      "body" : ";;",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T10:13:17Z",
      "diff_hunk" : "@@ -344,6 +356,76 @@ class Derived : public Base\n     }\n };\n \n+struct OtherParam {\n+    uint8_t param;\n+    SER_PARAMS_OPFUNC\n+};\n+\n+//! Checker for value of OtherParam. When being serialized, serializes the\n+//! param to the stream. When being unserialized, verifies the value in the\n+//! stream matches the param.\n+class OtherParamChecker\n+{\n+public:\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        const uint8_t param = s.template GetParams<OtherParam>().param;\n+        s << param;\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s) const\n+    {\n+        const uint8_t param = s.template GetParams<OtherParam>().param;\n+        uint8_t value;\n+        s >> value;\n+        BOOST_CHECK_EQUAL(value, param);\n+    }\n+};\n+\n+//! Test creating a stream with multiple parameters and making sure\n+//! serialization code requiring different parameters can retrieve them. Also\n+//! test that earlier parameters take precedence if the same parameter type is\n+//! specified twice. (Choice of whether earlier or later values take precedence\n+//! or multiple values of the same type are allowed was arbitrary, and just\n+//! decided based on what would require smallest amount of ugly C++ template\n+//! code. Intent of the test is to just ensure there is no unexpected behavior.)\n+BOOST_AUTO_TEST_CASE(with_params_multi)\n+{\n+    const OtherParam other_param_used{.param = 0x10};\n+    const OtherParam other_param_ignored{.param = 0x11};\n+    const OtherParam other_param_override{.param = 0x12};\n+    const OtherParamChecker check;\n+    DataStream stream;\n+    ParamsStream pstream{stream, RAW, other_param_used, other_param_ignored};\n+\n+    Base base1{0x20};\n+    pstream << base1 << check << other_param_override(check);\n+    BOOST_CHECK_EQUAL(stream.str(), \"\\x20\\x10\\x12\");\n+\n+    Base base2;\n+    pstream >> base2 >> check >> other_param_override(check);\n+    BOOST_CHECK_EQUAL(base2.m_base_data, 0x20);\n+}\n+\n+//! Test creating a ParamsStream that moves from a stream argument.\n+BOOST_AUTO_TEST_CASE(with_params_move)\n+{\n+    UncopyableStream stream{MakeByteSpan(std::string_view{\"abc\"})};\n+    ParamsStream pstream{std::move(stream), RAW, HEX, RAW};\n+    BOOST_CHECK_EQUAL(pstream.GetStream().str(), \"abc\");\n+    pstream.GetStream().clear();\n+\n+    Base base1{0x20};\n+    pstream << base1;\n+    BOOST_CHECK_EQUAL(pstream.GetStream().str(), \"\\x20\");\n+\n+    Base base2;\n+    pstream >> base2;;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497240550",
      "id" : 1497240550,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZPhPm",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 425,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/test/serialize_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497240550/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497240550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497241697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497241697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Space after `template` according to clang-format?",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T10:14:10Z",
      "diff_hunk" : "@@ -1128,10 +1142,34 @@ class ParamsStream\n             return m_substream.template GetParams<P>();\n         }\n     }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (nested) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n };\n \n+/**\n+ * Explicit template deduction guide is required for single-parameter\n+ * constructor so Substream&& is treated as a forwarding reference, and\n+ * SubStream is deduced as reference type for lvalue arguments.\n+ */\n+template<typename Substream, typename Params>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497241697",
      "id" : 1497241697,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZPhhh",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1162,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497241697/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497241697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497241949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497241949"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same?",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T10:14:22Z",
      "diff_hunk" : "@@ -1128,10 +1142,34 @@ class ParamsStream\n             return m_substream.template GetParams<P>();\n         }\n     }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (nested) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n };\n \n+/**\n+ * Explicit template deduction guide is required for single-parameter\n+ * constructor so Substream&& is treated as a forwarding reference, and\n+ * SubStream is deduced as reference type for lvalue arguments.\n+ */\n+template<typename Substream, typename Params>\n+ParamsStream(Substream&&, const Params&) -> ParamsStream<Substream, Params>;\n+\n+/**\n+ * Template deduction guide for multiple params arguments that creates a nested\n+ * ParamsStream.\n+ */\n+template<typename Substream, typename Params1, typename Params2, typename... Params>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497241949",
      "id" : 1497241949,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZPhld",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1169,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497241949/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497241949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497272449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497272449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The language already doesn't allow passing temporaries as rvalues so there is probably not anything the compiler can helpfully warn about in that case.\r\n\r\nI think you meant to say \"lvalues\"? Also, const lvalues should be fine by the language. For example, the following should cause a use-after-free:\r\n\r\n```cpp\r\nParamsStream<const UncopyableStream&,const BaseFormat&> pstream{UncopyableStream {MakeByteSpan(std::string_view{\"abc\"})}, RAW};\r\n     BOOST_CHECK_EQUAL(pstream.GetStream().str(), \"abc\");\r\n```\r\n\r\nJust leaving a comment. Not sure if it is worth it to re-add the LIFETIMEBOUND attribute for this edge case.",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T10:29:29Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497272449",
      "id" : 1497272449,
      "in_reply_to_id" : 1484199895,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZPpCB",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497272449/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497272449",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497303755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497303755"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in https://github.com/bitcoin/bitcoin/commit/af7f90da74b935c17d986b0f4d21e4bce6f56343: I wonder if the `nested` bool could somehow be derived with a C++20 concept, so that it is true, whenever `SubStream::m_substream` exists (or whenever `SubStream{}.GetStream()` exists). This would avoid issues where a dev \"manually\" nests params-streams and would have to call `GetStream` for the number of manual nests they did. Using the compiler to deduce the bool makes sure that `GetStream` would have to be called only ever once to get the most underlying stream.",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T10:47:08Z",
      "diff_hunk" : "@@ -1103,22 +1103,36 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename SubStream, typename Params>\n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template <typename SubStream, typename Params, bool nested = false>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497303755",
      "id" : 1497303755,
      "line" : 1107,
      "node_id" : "PRRC_kwDOABII585ZPwrL",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1107,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 60,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497303755/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497303755",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497307976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497307976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the point of LIFETIMEBOUND in deduction guides? Does it do anything?",
      "commit_id" : "9dc839a7fd1c8c7648f9e0a025d5ebecee8d289a",
      "created_at" : "2024-02-21T10:49:35Z",
      "diff_hunk" : "@@ -1128,10 +1142,34 @@ class ParamsStream\n             return m_substream.template GetParams<P>();\n         }\n     }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (nested) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n };\n \n+/**\n+ * Explicit template deduction guide is required for single-parameter\n+ * constructor so Substream&& is treated as a forwarding reference, and\n+ * SubStream is deduced as reference type for lvalue arguments.\n+ */\n+template<typename Substream, typename Params>\n+ParamsStream(Substream&&, const Params&) -> ParamsStream<Substream, Params>;\n+\n+/**\n+ * Template deduction guide for multiple params arguments that creates a nested\n+ * ParamsStream.\n+ */\n+template<typename Substream, typename Params1, typename Params2, typename... Params>\n+ParamsStream(Substream&& s LIFETIMEBOUND, const Params1& params1 LIFETIMEBOUND, const Params2& params2 LIFETIMEBOUND, const Params&... params LIFETIMEBOUND) ->",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497307976",
      "id" : 1497307976,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZPxtI",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1170,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1892577456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497307976/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T10:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497307976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497418316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497418316"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497210553\r\n\r\n> [af7f90d](https://github.com/bitcoin/bitcoin/commit/af7f90da74b935c17d986b0f4d21e4bce6f56343): Thanks for removing it, but I think it can be a separate (trivial) 4 line diff commit?\r\n\r\nSure, moved to separate commit",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T12:10:35Z",
      "diff_hunk" : "@@ -1103,22 +1103,36 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename SubStream, typename Params>\n+/** Wrapper that overrides the GetParams() function of a stream. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497418316",
      "id" : 1497418316,
      "in_reply_to_id" : 1497210553,
      "line" : 1110,
      "node_id" : "PRRC_kwDOABII585ZQMpM",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1110,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 63,
      "pull_request_review_id" : 1893028346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497418316/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T12:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497418316",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497439570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497439570"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> What is the point of LIFETIMEBOUND in deduction guides? Does it do anything?\r\n\r\nGood catch, they can't do anything, removed these",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T12:23:41Z",
      "diff_hunk" : "@@ -1128,10 +1142,34 @@ class ParamsStream\n             return m_substream.template GetParams<P>();\n         }\n     }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (nested) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n };\n \n+/**\n+ * Explicit template deduction guide is required for single-parameter\n+ * constructor so Substream&& is treated as a forwarding reference, and\n+ * SubStream is deduced as reference type for lvalue arguments.\n+ */\n+template<typename Substream, typename Params>\n+ParamsStream(Substream&&, const Params&) -> ParamsStream<Substream, Params>;\n+\n+/**\n+ * Template deduction guide for multiple params arguments that creates a nested\n+ * ParamsStream.\n+ */\n+template<typename Substream, typename Params1, typename Params2, typename... Params>\n+ParamsStream(Substream&& s LIFETIMEBOUND, const Params1& params1 LIFETIMEBOUND, const Params2& params2 LIFETIMEBOUND, const Params&... params LIFETIMEBOUND) ->",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497439570",
      "id" : 1497439570,
      "in_reply_to_id" : 1497307976,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQR1S",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1170,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1893028346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497439570/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T12:59:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497439570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497440806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497440806"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497240550\r\n\r\n> ;;\r\n\r\nThanks fixed",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T12:24:29Z",
      "diff_hunk" : "@@ -344,6 +356,76 @@ class Derived : public Base\n     }\n };\n \n+struct OtherParam {\n+    uint8_t param;\n+    SER_PARAMS_OPFUNC\n+};\n+\n+//! Checker for value of OtherParam. When being serialized, serializes the\n+//! param to the stream. When being unserialized, verifies the value in the\n+//! stream matches the param.\n+class OtherParamChecker\n+{\n+public:\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        const uint8_t param = s.template GetParams<OtherParam>().param;\n+        s << param;\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s) const\n+    {\n+        const uint8_t param = s.template GetParams<OtherParam>().param;\n+        uint8_t value;\n+        s >> value;\n+        BOOST_CHECK_EQUAL(value, param);\n+    }\n+};\n+\n+//! Test creating a stream with multiple parameters and making sure\n+//! serialization code requiring different parameters can retrieve them. Also\n+//! test that earlier parameters take precedence if the same parameter type is\n+//! specified twice. (Choice of whether earlier or later values take precedence\n+//! or multiple values of the same type are allowed was arbitrary, and just\n+//! decided based on what would require smallest amount of ugly C++ template\n+//! code. Intent of the test is to just ensure there is no unexpected behavior.)\n+BOOST_AUTO_TEST_CASE(with_params_multi)\n+{\n+    const OtherParam other_param_used{.param = 0x10};\n+    const OtherParam other_param_ignored{.param = 0x11};\n+    const OtherParam other_param_override{.param = 0x12};\n+    const OtherParamChecker check;\n+    DataStream stream;\n+    ParamsStream pstream{stream, RAW, other_param_used, other_param_ignored};\n+\n+    Base base1{0x20};\n+    pstream << base1 << check << other_param_override(check);\n+    BOOST_CHECK_EQUAL(stream.str(), \"\\x20\\x10\\x12\");\n+\n+    Base base2;\n+    pstream >> base2 >> check >> other_param_override(check);\n+    BOOST_CHECK_EQUAL(base2.m_base_data, 0x20);\n+}\n+\n+//! Test creating a ParamsStream that moves from a stream argument.\n+BOOST_AUTO_TEST_CASE(with_params_move)\n+{\n+    UncopyableStream stream{MakeByteSpan(std::string_view{\"abc\"})};\n+    ParamsStream pstream{std::move(stream), RAW, HEX, RAW};\n+    BOOST_CHECK_EQUAL(pstream.GetStream().str(), \"abc\");\n+    pstream.GetStream().clear();\n+\n+    Base base1{0x20};\n+    pstream << base1;\n+    BOOST_CHECK_EQUAL(pstream.GetStream().str(), \"\\x20\");\n+\n+    Base base2;\n+    pstream >> base2;;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497440806",
      "id" : 1497440806,
      "in_reply_to_id" : 1497240550,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQSIm",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 425,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/test/serialize_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1893028346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497440806/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T12:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497440806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497444131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497444131"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497241697\r\n\r\n> nit: Space after `template` according to clang-format?\r\n\r\nThanks, fixed",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T12:26:34Z",
      "diff_hunk" : "@@ -1128,10 +1142,34 @@ class ParamsStream\n             return m_substream.template GetParams<P>();\n         }\n     }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (nested) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n };\n \n+/**\n+ * Explicit template deduction guide is required for single-parameter\n+ * constructor so Substream&& is treated as a forwarding reference, and\n+ * SubStream is deduced as reference type for lvalue arguments.\n+ */\n+template<typename Substream, typename Params>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497444131",
      "id" : 1497444131,
      "in_reply_to_id" : 1497241697,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQS8j",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1162,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1893028346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497444131/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T12:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497444131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497444318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497444318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497241949\r\n\r\n> Same?\r\n\r\nThanks, fixed",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T12:26:41Z",
      "diff_hunk" : "@@ -1128,10 +1142,34 @@ class ParamsStream\n             return m_substream.template GetParams<P>();\n         }\n     }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (nested) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n };\n \n+/**\n+ * Explicit template deduction guide is required for single-parameter\n+ * constructor so Substream&& is treated as a forwarding reference, and\n+ * SubStream is deduced as reference type for lvalue arguments.\n+ */\n+template<typename Substream, typename Params>\n+ParamsStream(Substream&&, const Params&) -> ParamsStream<Substream, Params>;\n+\n+/**\n+ * Template deduction guide for multiple params arguments that creates a nested\n+ * ParamsStream.\n+ */\n+template<typename Substream, typename Params1, typename Params2, typename... Params>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497444318",
      "id" : 1497444318,
      "in_reply_to_id" : 1497241949,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQS_e",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1169,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1893028346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497444318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T12:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497444318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497455724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497455724"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497229478\r\n\r\n> nit in [af7f90d](https://github.com/bitcoin/bitcoin/commit/af7f90da74b935c17d986b0f4d21e4bce6f56343): Would it matter if all of these were updated to use `GetStream` over `m_substream`? I guess the only difference would be that `std::stacktrace::current()` would be smaller if called inside of one of the substream methods?\r\n\r\nNice idea. Replaced m_substream with GetStream here. It might make it easier for compiler to inilne these calls functions, too. This required adding a const overload of GetStream.",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T12:33:59Z",
      "diff_hunk" : "@@ -1103,22 +1103,36 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename SubStream, typename Params>\n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template <typename SubStream, typename Params, bool nested = false>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    // If ParamsStream constructor is passed an lvalue argument, Substream will\n+    // be a reference type, and m_substream will reference that argument.\n+    // Otherwise m_substream will be a substream instance and move from the\n+    // argument. Letting ParamsStream contain a substream instance instead of\n+    // just a reference is useful to make the ParamsStream object self contained\n+    // and let it do cleanup when destroyed, for example by closing files if\n+    // SubStream is a file stream.\n+    SubStream m_substream;\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream&& substream, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{std::forward<SubStream>(substream)} {}\n+\n+    template<typename NestedSubstream, typename Params1, typename Params2, typename... NestedParams>\n+    ParamsStream(NestedSubstream&& s, const Params1& params1 LIFETIMEBOUND, const Params2& params2 LIFETIMEBOUND, const NestedParams&... params LIFETIMEBOUND)\n+        : ParamsStream{::ParamsStream{std::forward<NestedSubstream>(s), params2, params...}, params1} {}\n+\n     template <typename U> ParamsStream& operator<<(const U& obj) { ::Serialize(*this, obj); return *this; }\n     template <typename U> ParamsStream& operator>>(U&& obj) { ::Unserialize(*this, obj); return *this; }\n     void write(Span<const std::byte> src) { m_substream.write(src); }\n     void read(Span<std::byte> dst) { m_substream.read(dst); }\n     void ignore(size_t num) { m_substream.ignore(num); }\n     bool eof() const { return m_substream.eof(); }\n     size_t size() const { return m_substream.size(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497455724",
      "id" : 1497455724,
      "in_reply_to_id" : 1497229478,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQVxs",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1133,
      "original_position" : 35,
      "original_start_line" : 1129,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1893028346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497455724/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-21T12:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497455724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497457383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497457383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497303755\r\n\r\n> nit in [af7f90d](https://github.com/bitcoin/bitcoin/commit/af7f90da74b935c17d986b0f4d21e4bce6f56343): I wonder if the `nested` bool could somehow be derived with a C++20 concept [...]\r\n\r\nI'll try that out. I haven't really experimented with concepts much.",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T12:35:03Z",
      "diff_hunk" : "@@ -1103,22 +1103,36 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename SubStream, typename Params>\n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template <typename SubStream, typename Params, bool nested = false>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497457383",
      "id" : 1497457383,
      "in_reply_to_id" : 1497303755,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQWLn",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1107,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1893028346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497457383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T12:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497457383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497566008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497566008"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497303755\r\n\r\n> I wonder if the `nested` bool could somehow be derived with a C++20 concept\r\n\r\nNice suggestion, implemented this",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T13:34:50Z",
      "diff_hunk" : "@@ -1103,22 +1103,36 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename SubStream, typename Params>\n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template <typename SubStream, typename Params, bool nested = false>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497566008",
      "id" : 1497566008,
      "in_reply_to_id" : 1497303755,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQws4",
      "original_commit_id" : "af7f90da74b935c17d986b0f4d21e4bce6f56343",
      "original_line" : 1107,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1893217667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497566008/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T13:35:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497566008",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497623320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497623320"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497272449\r\n\r\n> I think you meant to say \"lvalues\"? Also, const lvalues should be fine by the language. For example, the following should cause a use-after-free:\r\n\r\nThanks that was supposed to say lvalues, and that's a good point, so it's possible lifetimebound could still help avoid bugs in some cases. I think it should be possible to add back lifetimebound by overloading the constructor using `std::is_reference`. But it would add a little complexity, so I think it makes sense to omit it for now, and maybe add it later if it looks like there are cases where a const stream would be used.",
      "commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "created_at" : "2024-02-21T14:05:45Z",
      "diff_hunk" : "@@ -1108,10 +1108,15 @@ template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    SubStream m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n \n public:\n-    ParamsStream(SubStream& substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream substream LIFETIMEBOUND, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1497623320",
      "id" : 1497623320,
      "in_reply_to_id" : 1484199895,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZQ-sY",
      "original_commit_id" : "3c311734d2fc6a4ca410f254ba3c8e923d58be70",
      "original_line" : 1114,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1893300392,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497623320/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T14:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497623320",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1505911484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1505911484"
         }
      },
      "author_association" : "NONE",
      "body" : "If `m_substream` is an owned instance, it will become `const SubStream` in const member functions, and the return value here will be `const Substream&`.\r\nHowever, if `m_substream` is a reference/pointer, the constness is applied to the reference part, so the method will return a mutable reference.\r\nSee https://stackoverflow.com/questions/5055427/returning-non-const-reference-from-a-const-member-function\r\n\r\nMy suggestion would be to return `const auto&` here unless the intent is to enable mutability (which only happens when the member is a reference).\r\n\r\n#### Illustrative example\r\n```C++\r\nclass A\r\n{\r\n    int& b;\r\npublic:\r\n    A(int& n) : b(n) {}\r\n    auto& foo() const { return b; }\r\n};\r\n\r\n    ....\r\n    int bar = 123;\r\n    const A a(bar);\r\n    int& mutating = a.foo();\r\n    mutating = 2;\r\n```",
      "commit_id" : "8d491ae9ecf1948ea29f67b50ca7259123f602aa",
      "created_at" : "2024-02-28T12:49:17Z",
      "diff_hunk" : "@@ -1118,27 +1103,85 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename Params, typename SubStream>\n+//! Check if type contains a stream by seeing if has a GetStream() method.\n+template<typename T>\n+concept ContainsStream = requires(T t) { t.GetStream(); };\n+\n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    // If ParamsStream constructor is passed an lvalue argument, Substream will\n+    // be a reference type, and m_substream will reference that argument.\n+    // Otherwise m_substream will be a substream instance and move from the\n+    // argument. Letting ParamsStream contain a substream instance instead of\n+    // just a reference is useful to make the ParamsStream object self contained\n+    // and let it do cleanup when destroyed, for example by closing files if\n+    // SubStream is a file stream.\n+    SubStream m_substream;\n \n public:\n-    ParamsStream(const Params& params LIFETIMEBOUND, SubStream& substream LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream&& substream, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{std::forward<SubStream>(substream)} {}\n+\n+    template <typename NestedSubstream, typename Params1, typename Params2, typename... NestedParams>\n+    ParamsStream(NestedSubstream&& s, const Params1& params1 LIFETIMEBOUND, const Params2& params2 LIFETIMEBOUND, const NestedParams&... params LIFETIMEBOUND)\n+        : ParamsStream{::ParamsStream{std::forward<NestedSubstream>(s), params2, params...}, params1} {}\n+\n     template <typename U> ParamsStream& operator<<(const U& obj) { ::Serialize(*this, obj); return *this; }\n     template <typename U> ParamsStream& operator>>(U&& obj) { ::Unserialize(*this, obj); return *this; }\n-    void write(Span<const std::byte> src) { m_substream.write(src); }\n-    void read(Span<std::byte> dst) { m_substream.read(dst); }\n-    void ignore(size_t num) { m_substream.ignore(num); }\n-    bool eof() const { return m_substream.eof(); }\n-    size_t size() const { return m_substream.size(); }\n-    const Params& GetParams() const { return m_params; }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+    void write(Span<const std::byte> src) { GetStream().write(src); }\n+    void read(Span<std::byte> dst) { GetStream().read(dst); }\n+    void ignore(size_t num) { GetStream().ignore(num); }\n+    bool eof() const { return GetStream().eof(); }\n+    size_t size() const { return GetStream().size(); }\n+\n+    //! Get reference to stream parameters.\n+    template <typename P>\n+    const auto& GetParams() const\n+    {\n+        if constexpr (std::is_convertible_v<Params, P>) {\n+            return m_params;\n+        } else {\n+            return m_substream.template GetParams<P>();\n+        }\n+    }\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (ContainsStream<SubStream>) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n+    auto& GetStream() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1505911484",
      "id" : 1505911484,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZwmK8",
      "original_commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "original_line" : 1159,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1906187275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1505911484/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-28T12:49:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1505911484",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/581308?v=4",
         "events_url" : "https://api.github.com/users/cbergqvist/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cbergqvist/followers",
         "following_url" : "https://api.github.com/users/cbergqvist/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cbergqvist/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cbergqvist",
         "id" : 581308,
         "login" : "cbergqvist",
         "node_id" : "MDQ6VXNlcjU4MTMwOA==",
         "organizations_url" : "https://api.github.com/users/cbergqvist/orgs",
         "received_events_url" : "https://api.github.com/users/cbergqvist/received_events",
         "repos_url" : "https://api.github.com/users/cbergqvist/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cbergqvist/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cbergqvist/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cbergqvist"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1506137988"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506137988"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1505911484\r\n\r\n> My suggestion would be to return `const auto&` here unless the intent is to enable mutability (which only happens when the member is a reference).\r\n\r\nGood catch, added const. This is intended to return a const refernce consistently, not provide mutable access to the substream if the paramsstream is const.",
      "commit_id" : "8d491ae9ecf1948ea29f67b50ca7259123f602aa",
      "created_at" : "2024-02-28T15:20:43Z",
      "diff_hunk" : "@@ -1118,27 +1103,85 @@ size_t GetSerializeSize(const T& t)\n     return (SizeComputer() << t).size();\n }\n \n-/** Wrapper that overrides the GetParams() function of a stream (and hides GetVersion/GetType). */\n-template <typename Params, typename SubStream>\n+//! Check if type contains a stream by seeing if has a GetStream() method.\n+template<typename T>\n+concept ContainsStream = requires(T t) { t.GetStream(); };\n+\n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template <typename SubStream, typename Params>\n class ParamsStream\n {\n     const Params& m_params;\n-    SubStream& m_substream; // private to avoid leaking version/type into serialization code that shouldn't see it\n+    // If ParamsStream constructor is passed an lvalue argument, Substream will\n+    // be a reference type, and m_substream will reference that argument.\n+    // Otherwise m_substream will be a substream instance and move from the\n+    // argument. Letting ParamsStream contain a substream instance instead of\n+    // just a reference is useful to make the ParamsStream object self contained\n+    // and let it do cleanup when destroyed, for example by closing files if\n+    // SubStream is a file stream.\n+    SubStream m_substream;\n \n public:\n-    ParamsStream(const Params& params LIFETIMEBOUND, SubStream& substream LIFETIMEBOUND) : m_params{params}, m_substream{substream} {}\n+    ParamsStream(SubStream&& substream, const Params& params LIFETIMEBOUND) : m_params{params}, m_substream{std::forward<SubStream>(substream)} {}\n+\n+    template <typename NestedSubstream, typename Params1, typename Params2, typename... NestedParams>\n+    ParamsStream(NestedSubstream&& s, const Params1& params1 LIFETIMEBOUND, const Params2& params2 LIFETIMEBOUND, const NestedParams&... params LIFETIMEBOUND)\n+        : ParamsStream{::ParamsStream{std::forward<NestedSubstream>(s), params2, params...}, params1} {}\n+\n     template <typename U> ParamsStream& operator<<(const U& obj) { ::Serialize(*this, obj); return *this; }\n     template <typename U> ParamsStream& operator>>(U&& obj) { ::Unserialize(*this, obj); return *this; }\n-    void write(Span<const std::byte> src) { m_substream.write(src); }\n-    void read(Span<std::byte> dst) { m_substream.read(dst); }\n-    void ignore(size_t num) { m_substream.ignore(num); }\n-    bool eof() const { return m_substream.eof(); }\n-    size_t size() const { return m_substream.size(); }\n-    const Params& GetParams() const { return m_params; }\n-    int GetVersion() = delete; // Deprecated with Params usage\n-    int GetType() = delete;    // Deprecated with Params usage\n+    void write(Span<const std::byte> src) { GetStream().write(src); }\n+    void read(Span<std::byte> dst) { GetStream().read(dst); }\n+    void ignore(size_t num) { GetStream().ignore(num); }\n+    bool eof() const { return GetStream().eof(); }\n+    size_t size() const { return GetStream().size(); }\n+\n+    //! Get reference to stream parameters.\n+    template <typename P>\n+    const auto& GetParams() const\n+    {\n+        if constexpr (std::is_convertible_v<Params, P>) {\n+            return m_params;\n+        } else {\n+            return m_substream.template GetParams<P>();\n+        }\n+    }\n+\n+    //! Get reference to underlying stream.\n+    auto& GetStream()\n+    {\n+        if constexpr (ContainsStream<SubStream>) {\n+            return m_substream.GetStream();\n+        } else {\n+            return m_substream;\n+        }\n+    }\n+    auto& GetStream() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28929#discussion_r1506137988",
      "id" : 1506137988,
      "in_reply_to_id" : 1505911484,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZxdeE",
      "original_commit_id" : "40f505583f4edeb2859aeb70da20c6374d331a4f",
      "original_line" : 1159,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 1906552004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28929",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506137988/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-28T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506137988",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
