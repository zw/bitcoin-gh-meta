[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28999).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [stickies-v](https://github.com/bitcoin/bitcoin/pull/28999#pullrequestreview-1765440924), [jonatack](https://github.com/bitcoin/bitcoin/pull/28999#pullrequestreview-1766061715) |\n| Concept ACK | [fanquake](https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1842648355) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28142](https://github.com/bitcoin/bitcoin/pull/28142) (wallet: Allow users to create a wallet that encrypts all database records by achow101)\n* [#25972](https://github.com/bitcoin/bitcoin/pull/25972) (build: no-longer disable WARN_CXXFLAGS when CXXFLAGS is set by fanquake)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-12-05T14:38:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1840922156",
      "id" : 1840922156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585tuj4s",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1840922156/reactions"
      },
      "updated_at" : "2023-12-06T11:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1840922156",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-12-05T15:02:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1840972128",
      "id" : 1840972128,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585tuwFg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1840972128/reactions"
      },
      "updated_at" : "2023-12-05T15:02:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1840972128",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1415835758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415835758"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cc @achow101 ",
      "commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "created_at" : "2023-12-05T15:42:33Z",
      "diff_hunk" : "@@ -1499,17 +1499,19 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     if (format == DatabaseFormat::SQLITE) {\n #ifdef USE_SQLITE\n         return MakeSQLiteDatabase(path, options, status, error);\n-#endif\n+#else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1415835758",
      "id" : 1415835758,
      "line" : 1502,
      "node_id" : "PRRC_kwDOABII585UY_Bu",
      "original_commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "original_line" : 1502,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 5,
      "pull_request_review_id" : 1765434730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415835758/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-05T15:42:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415835758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1415840290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415840290"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This doesn't functionally change anything, it just removes dead code _if_ there's an earlier return statement.",
      "commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "created_at" : "2023-12-05T15:45:12Z",
      "diff_hunk" : "@@ -1499,17 +1499,19 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     if (format == DatabaseFormat::SQLITE) {\n #ifdef USE_SQLITE\n         return MakeSQLiteDatabase(path, options, status, error);\n-#endif\n+#else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1415840290",
      "id" : 1415840290,
      "in_reply_to_id" : 1415835758,
      "line" : 1502,
      "node_id" : "PRRC_kwDOABII585UZAIi",
      "original_commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "original_line" : 1502,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 5,
      "pull_request_review_id" : 1765440924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415840290/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-05T15:50:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415840290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1415844552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415844552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@Sjors The previous code was correct as well. However, this refactoring change is required if the warning is enabled.",
      "commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "created_at" : "2023-12-05T15:47:45Z",
      "diff_hunk" : "@@ -1499,17 +1499,19 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     if (format == DatabaseFormat::SQLITE) {\n #ifdef USE_SQLITE\n         return MakeSQLiteDatabase(path, options, status, error);\n-#endif\n+#else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1415844552",
      "id" : 1415844552,
      "in_reply_to_id" : 1415835758,
      "line" : 1502,
      "node_id" : "PRRC_kwDOABII585UZBLI",
      "original_commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "original_line" : 1502,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 5,
      "pull_request_review_id" : 1765446921,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415844552/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-05T15:47:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415844552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> At least on my machine, this does't catch\r\n\r\nYou'll have to use `clang`, because GCC does not have those warnings.",
      "created_at" : "2023-12-05T15:51:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1841067566",
      "id" : 1841067566,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585tvHYu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841067566/reactions"
      },
      "updated_at" : "2023-12-05T15:51:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841067566",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> You'll have to use `clang`, because GCC does not have those warnings.\r\n\r\nI'm using clang, and it also caught the walletdb issue you fixed. It also catches e.g. `error.reset()` dead code I added. Just not the Assert.\r\n\r\n```cpp\r\n    // ...and construct a CTxMemPool from it\r\n    std::optional<bilingual_str> error{};\r\n    return CTxMemPool{mempool_opts, error};\r\n    error.reset();  // just to add unreachable code\r\n    Assert(!error);\r\n```\r\n\r\n```\r\n% make\r\nMaking all in src\r\n  GEN      obj/build.h\r\n  CXX      test/fuzz/fuzz-package_eval.o\r\ntest/fuzz/package_eval.cpp:130:5: error: code will never be executed [-Werror,-Wunreachable-code]\r\n    error.reset();  // just to add unreachable code\r\n```",
      "created_at" : "2023-12-05T15:54:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1841076279",
      "id" : 1841076279,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585tvJg3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841076279/reactions"
      },
      "updated_at" : "2023-12-05T15:54:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841076279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Just not the Assert.\r\n\r\nI thought I tested this, but it looks like you are right. Any code from macros won't trigger the warning.\r\n\r\n",
      "created_at" : "2023-12-05T16:12:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1841113048",
      "id" : 1841113048,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585tvSfY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841113048/reactions"
      },
      "updated_at" : "2023-12-05T16:12:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841113048",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Could alternatively use [-Wunreachable-code-aggressive](https://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-aggressive) -- it catches a few additional unreachable `break` statements in the current code.\r\n\r\nThey seem harmless, so if the author wants them and reviewers are fine with them, it seems fine?",
      "created_at" : "2023-12-05T21:02:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1841606774",
      "id" : 1841606774,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585txLB2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841606774/reactions"
      },
      "updated_at" : "2023-12-05T21:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841606774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> They seem harmless, so if the author wants them and reviewers are fine with them, it seems fine?\r\n\r\nSimilar rationale as in your OP -- it seems confusing to have unreachable code. Happy re-review if you agree otherwise NBD.",
      "created_at" : "2023-12-05T21:08:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1841613979",
      "id" : 1841613979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585txMyb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841613979/reactions"
      },
      "updated_at" : "2023-12-05T21:08:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841613979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2023-12-06T11:01:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1842648355",
      "id" : 1842648355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585t1JUj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842648355/reactions"
      },
      "updated_at" : "2023-12-06T11:01:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842648355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > They seem harmless, so if the author wants them and reviewers are fine with them, it seems fine?\r\n> \r\n> Similar rationale as in your OP -- it seems confusing to have unreachable code. Happy re-review if you agree otherwise NBD.\r\n\r\nOk, but that'd require touching leveldb, which is a subtree, so I can't touch it here.",
      "created_at" : "2023-12-08T15:46:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1847411927",
      "id" : 1847411927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585uHUTX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847411927/reactions"
      },
      "updated_at" : "2023-12-08T15:46:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847411927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> ACK [fa8adbe](https://github.com/bitcoin/bitcoin/commit/fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876)\r\n> \r\n> At least on my machine, this does't catch [#28830 (comment)](https://github.com/bitcoin/bitcoin/pull/28830#discussion_r1415690508) though.\r\n\r\n`Assert(!error)` in that case is trivially true (error was just set to nullopt, !nullopt is true), so presumably it's getting compiled to a no-op, at which point there is no unreachable code to warn about?",
      "created_at" : "2023-12-08T19:40:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1847739799",
      "id" : 1847739799,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585uIkWX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847739799/reactions"
      },
      "updated_at" : "2023-12-08T19:40:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847739799",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > At least on my machine, this does't catch [#28830 (comment)](https://github.com/bitcoin/bitcoin/pull/28830#discussion_r1415690508) though.\r\n> \r\n> `Assert(!error)` in that case is trivially true (error was just set to nullopt, !nullopt is true), so presumably it's getting compiled to a no-op, at which point there is no unreachable code to warn about?\r\n\r\nI did some earlier testing, and I think generally any code injected from macros will be ignored by this warning. Adding a no-op verbatim should warn, IIRC.",
      "created_at" : "2023-12-11T15:49:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1850351548",
      "id" : 1850351548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585uSh-8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850351548/reactions"
      },
      "updated_at" : "2023-12-11T15:49:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850351548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I did some testing too. Adding a `std::cout << \"Hello\\n\";` at the end of `MakeMempool` results in a warning:\r\n\r\n<details>\r\n<summary>git diff on fa8adbe7c1</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/package_eval.cpp b/src/test/fuzz/package_eval.cpp\r\nindex 5a08d0ff44..2369c2ee0d 100644\r\n--- a/src/test/fuzz/package_eval.cpp\r\n+++ b/src/test/fuzz/package_eval.cpp\r\n@@ -126,6 +126,7 @@ CTxMemPool MakeMempool(FuzzedDataProvider& fuzzed_data_provider, const NodeConte\r\n \r\n     // ...and construct a CTxMemPool from it\r\n     return CTxMemPool{mempool_opts};\r\n+    std::cout << \"Hello\\n\";\r\n }\r\n \r\n FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\r\n\r\n```\r\n```\r\ntest/fuzz/package_eval.cpp:129:15: error: code will never be executed [-Werror,-Wunreachable-code]\r\n    std::cout << \"Hello\\n\";\r\n```\r\n</details>\r\n\r\nReplacing it with a macro then compiles fine:\r\n\r\n<details>\r\n<summary>git diff on fa8adbe7c1</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/package_eval.cpp b/src/test/fuzz/package_eval.cpp\r\nindex 5a08d0ff44..1e616272d9 100644\r\n--- a/src/test/fuzz/package_eval.cpp\r\n+++ b/src/test/fuzz/package_eval.cpp\r\n@@ -106,6 +106,8 @@ void MockTime(FuzzedDataProvider& fuzzed_data_provider, const Chainstate& chains\r\n     SetMockTime(time);\r\n }\r\n \r\n+#define Print(val) std::cout << val;\r\n+\r\n CTxMemPool MakeMempool(FuzzedDataProvider& fuzzed_data_provider, const NodeContext& node)\r\n {\r\n     // Take the default options for tests...\r\n@@ -126,6 +128,7 @@ CTxMemPool MakeMempool(FuzzedDataProvider& fuzzed_data_provider, const NodeConte\r\n \r\n     // ...and construct a CTxMemPool from it\r\n     return CTxMemPool{mempool_opts};\r\n+    Print(\"Hello\\n\");\r\n }\r\n \r\n FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\r\n\r\n```\r\n</details>\r\n\r\nWrapping the macro in a function then again results in a warning:\r\n\r\n<details>\r\n<summary>git diff on fa8adbe7c1</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/package_eval.cpp b/src/test/fuzz/package_eval.cpp\r\nindex 5a08d0ff44..ec8b8fd4fb 100644\r\n--- a/src/test/fuzz/package_eval.cpp\r\n+++ b/src/test/fuzz/package_eval.cpp\r\n@@ -106,6 +106,9 @@ void MockTime(FuzzedDataProvider& fuzzed_data_provider, const Chainstate& chains\r\n     SetMockTime(time);\r\n }\r\n \r\n+#define Print(val) std::cout << val;\r\n+void PrintFn(const std::string& val) { Print(val); }\r\n+\r\n CTxMemPool MakeMempool(FuzzedDataProvider& fuzzed_data_provider, const NodeContext& node)\r\n {\r\n     // Take the default options for tests...\r\n@@ -126,6 +129,7 @@ CTxMemPool MakeMempool(FuzzedDataProvider& fuzzed_data_provider, const NodeConte\r\n \r\n     // ...and construct a CTxMemPool from it\r\n     return CTxMemPool{mempool_opts};\r\n+    PrintFn(\"Hello\\n\");\r\n }\r\n \r\n FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\r\n\r\n```\r\n```\r\ntest/fuzz/package_eval.cpp:132:5: error: code will never be executed [-Werror,-Wunreachable-code]\r\n    PrintFn(\"Hello\\n\");\r\n```\r\n</details>\r\n\r\n\r\nWe currently don't have any unreached instances of `Assert` or `Assume`, and I'm not sure it's worth changing this, but if we want to catch this going forward we could wrap the macros in a function, e.g. as such below, which does create a warning.\r\n\r\n<details>\r\n<summary>git diff on fa8adbe7c1</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/package_eval.cpp b/src/test/fuzz/package_eval.cpp\r\nindex 5a08d0ff44..58d7b6feb2 100644\r\n--- a/src/test/fuzz/package_eval.cpp\r\n+++ b/src/test/fuzz/package_eval.cpp\r\n@@ -126,6 +126,7 @@ CTxMemPool MakeMempool(FuzzedDataProvider& fuzzed_data_provider, const NodeConte\r\n \r\n     // ...and construct a CTxMemPool from it\r\n     return CTxMemPool{mempool_opts};\r\n+    Assert(false);\r\n }\r\n \r\n FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\r\ndiff --git a/src/util/check.h b/src/util/check.h\r\nindex a02a1de8dc..4d37edeca4 100644\r\n--- a/src/util/check.h\r\n+++ b/src/util/check.h\r\n@@ -73,8 +73,13 @@ T&& inline_assertion_check(LIFETIMEBOUND T&& val, [[maybe_unused]] const char* f\r\n #define CHECK_NONFATAL(condition) \\\r\n     inline_check_non_fatal(condition, __FILE__, __LINE__, __func__, #condition)\r\n \r\n+#define AssertImpl(val) inline_assertion_check<true>(val, __FILE__, __LINE__, __func__, #val)\r\n+\r\n /** Identity function. Abort if the value compares equal to zero */\r\n-#define Assert(val) inline_assertion_check<true>(val, __FILE__, __LINE__, __func__, #val)\r\n+template <typename T>\r\n+T&& Assert(T&& val) { return AssertImpl(std::forward<T>(val)); }\r\n+\r\n+#define AssumeImpl(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)\r\n \r\n /**\r\n  * Assume is the identity function.\r\n@@ -86,7 +91,8 @@ T&& inline_assertion_check(LIFETIMEBOUND T&& val, [[maybe_unused]] const char* f\r\n  * - For non-fatal errors in interactive sessions (e.g. RPC or command line\r\n  *   interfaces), CHECK_NONFATAL() might be more appropriate.\r\n  */\r\n-#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)\r\n+template <typename T>\r\n+T&& Assume(T&& val) { return AssumeImpl(std::forward<T>(val)); }\r\n \r\n /**\r\n  * NONFATAL_UNREACHABLE() is a macro that is used to mark unreachable code. It throws a NonFatalCheckError.\r\n\r\n```\r\n```\r\ntest/fuzz/package_eval.cpp:129:5: error: code will never be executed [-Werror,-Wunreachable-code]\r\n    Assert(false);\r\n```\r\n</details>\r\n",
      "created_at" : "2023-12-11T16:44:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#issuecomment-1850459273",
      "id" : 1850459273,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28999",
      "node_id" : "IC_kwDOABII585uS8SJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850459273/reactions"
      },
      "updated_at" : "2023-12-11T16:45:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850459273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1465010916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465010916"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"build: Enable -Wunreachable-code\" (fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876)\r\n\r\nNot a big deal, but IMO, this change is not an improvement. The unreachable code warning seems helpful to catch cases where code is unintentionally unreachable. Or to encourage rewriting code where code is intentionally reachable but written in a hard to understand way.\r\n\r\nBut this code was intentionally unreachable in obvious way with two return statements right next to each other. It was written this way so changes to code could be checked at compile time without developers needing rebuild with --without-bdb and --with-sqlite=yes options. So this seems like a case where the compiler warning is unhelpful, and it would be nice if there was a way to disable it.\r\n\r\nAlso, I might have missed it but it doesn't seem like we have CI builds that test building with wallet enabled and sqlite or BDB disabled. So now maybe bugs in this code could be unnoticed?",
      "commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "created_at" : "2024-01-24T14:38:17Z",
      "diff_hunk" : "@@ -1499,17 +1499,19 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     if (format == DatabaseFormat::SQLITE) {\n #ifdef USE_SQLITE\n         return MakeSQLiteDatabase(path, options, status, error);\n-#endif\n+#else\n         error = Untranslated(strprintf(\"Failed to open database path '%s'. Build does not support SQLite database format.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_BAD_FORMAT;\n         return nullptr;\n+#endif\n     }\n \n #ifdef USE_BDB\n     return MakeBerkeleyDatabase(path, options, status, error);\n-#endif\n+#else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1465010916",
      "id" : 1465010916,
      "line" : 1511,
      "node_id" : "PRRC_kwDOABII585XUkrk",
      "original_commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "original_line" : 1511,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 15,
      "pull_request_review_id" : 1841535487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465010916/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-24T14:43:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465010916",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1465156898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465156898"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> It was written this way so changes to code could be checked at compile time without developers needing rebuild with --without-bdb and --with-sqlite=yes options. So this seems like a case where the compiler warning is unhelpful, and it would be nice if there was a way to disable it.\r\n\r\nI think it can be disabled via the verbose `pragma clang diagnostic ignored`, but that is ugly and verbose. A better workaround could be to use `if constexpr(...USE_BDB...) { return MakeBDB();} else { return error; }`? This should ensure the `error` code is compile-able, even though it is never run.\r\n\r\n> Also, I might have missed it but it doesn't seem like we have CI builds that test building with wallet enabled and sqlite or BDB disabled. So now maybe bugs in this code could be unnoticed?\r\n\r\nSeems unrelated to the changes here, because if a piece of code compiles does not mean it has  no bugs. If a test is truly missing, I have no objection to adding one.",
      "commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "created_at" : "2024-01-24T16:03:06Z",
      "diff_hunk" : "@@ -1499,17 +1499,19 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     if (format == DatabaseFormat::SQLITE) {\n #ifdef USE_SQLITE\n         return MakeSQLiteDatabase(path, options, status, error);\n-#endif\n+#else\n         error = Untranslated(strprintf(\"Failed to open database path '%s'. Build does not support SQLite database format.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_BAD_FORMAT;\n         return nullptr;\n+#endif\n     }\n \n #ifdef USE_BDB\n     return MakeBerkeleyDatabase(path, options, status, error);\n-#endif\n+#else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1465156898",
      "id" : 1465156898,
      "in_reply_to_id" : 1465010916,
      "line" : 1511,
      "node_id" : "PRRC_kwDOABII585XVIUi",
      "original_commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "original_line" : 1511,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 15,
      "pull_request_review_id" : 1841763341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465156898/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-24T16:03:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465156898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1465181728"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465181728"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> if a piece of code compiles does not mean it has no bugs\r\n\r\nI've noticed that sometimes. And it would be unreasonable to expect our CI to run every line of code, but I think it's reasonable to expect our CI to at least _compile_ every line of code and not leave blind spots like this. So I really like your constexpr idea, and can try it out in #25722 after I finish rebasing it. Thanks for suggesting that.",
      "commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "created_at" : "2024-01-24T16:19:39Z",
      "diff_hunk" : "@@ -1499,17 +1499,19 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     if (format == DatabaseFormat::SQLITE) {\n #ifdef USE_SQLITE\n         return MakeSQLiteDatabase(path, options, status, error);\n-#endif\n+#else\n         error = Untranslated(strprintf(\"Failed to open database path '%s'. Build does not support SQLite database format.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_BAD_FORMAT;\n         return nullptr;\n+#endif\n     }\n \n #ifdef USE_BDB\n     return MakeBerkeleyDatabase(path, options, status, error);\n-#endif\n+#else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28999#discussion_r1465181728",
      "id" : 1465181728,
      "in_reply_to_id" : 1465010916,
      "line" : 1511,
      "node_id" : "PRRC_kwDOABII585XVOYg",
      "original_commit_id" : "fa8adbe7c17b16cf7ecd16eb9f3f1792e9da2876",
      "original_line" : 1511,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 15,
      "pull_request_review_id" : 1841803627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28999",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465181728/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-24T16:19:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465181728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
