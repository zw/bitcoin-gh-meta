[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28676).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29086](https://github.com/bitcoin/bitcoin/pull/29086) (refactor: Simply include CTxMemPool::Options in CTxMemPool directly rather than duplicating definition by luke-jr)\n* [#29019](https://github.com/bitcoin/bitcoin/pull/29019) (mempool: Don't sort in entryAll by TheCharlatan)\n* [#29016](https://github.com/bitcoin/bitcoin/pull/29016) (RPC: add new `listmempooltransactions` by niftynei)\n* [#29015](https://github.com/bitcoin/bitcoin/pull/29015) (kernel: Streamline util library by ryanofsky)\n* [#29007](https://github.com/bitcoin/bitcoin/pull/29007) (test: create deterministic addrman in the functional tests by stratospher)\n* [#28984](https://github.com/bitcoin/bitcoin/pull/28984) (Cluster size 2 package rbf by instagibbs)\n* [#28960](https://github.com/bitcoin/bitcoin/pull/28960) (kernel: Remove dependency on CScheduler by TheCharlatan)\n* [#28948](https://github.com/bitcoin/bitcoin/pull/28948) (v3 transaction policy for anti-pinning by glozow)\n* [#28886](https://github.com/bitcoin/bitcoin/pull/28886) (refactor: Replace sets of txiter with CTxMemPoolEntryRefs by TheCharlatan)\n* [#28863](https://github.com/bitcoin/bitcoin/pull/28863) (wallet, mempool: propagete `checkChainLimits` error message to wallet by ismaelsadeeq)\n* [#28830](https://github.com/bitcoin/bitcoin/pull/28830) ([refactor] Check CTxMemPool options in ctor by TheCharlatan)\n* [#28687](https://github.com/bitcoin/bitcoin/pull/28687) ([WIP] C++20 std::views::reverse by stickies-v)\n* [#28528](https://github.com/bitcoin/bitcoin/pull/28528) (test: Use test framework utils in functional tests by osagie98)\n* [#28121](https://github.com/bitcoin/bitcoin/pull/28121) (include verbose debug messages in testmempoolaccept reject-reason by pinheadmz)\n* [#27351](https://github.com/bitcoin/bitcoin/pull/27351) (wallet: add `seeds` argument to `importdescriptors` by apoelstra)\n* [#26593](https://github.com/bitcoin/bitcoin/pull/26593) (tracing: Only prepare tracepoint arguments when actually tracing by 0xB10C)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-10-18T18:59:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1769143762",
      "id" : 1769143762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585pcv3S",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1769143762/reactions"
      },
      "updated_at" : "2023-12-18T04:15:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1769143762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1364398135"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1364398135"
         }
      },
      "author_association" : "MEMBER",
      "body" : "might be easier to just \"strike out\" this rule and mark it deprecated instead of changing numbers since that's become engineer lingo",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-18T19:11:00Z",
      "diff_hunk" : "@@ -18,14 +18,7 @@ other consensus and policy rules, each of the following conditions are met:\n    Use the (`-mempoolfullrbf`) configuration option to allow transaction replacement without enforcement of the\n    opt-in signaling rule.\n \n-2. The replacement transaction only include an unconfirmed input if that input was included in\n-   one of the directly conflicting transactions. An unconfirmed input spends an output from a\n-   currently-unconfirmed transaction.\n-\n-   *Rationale*: When RBF was originally implemented, the mempool did not keep track of\n-   ancestor feerates yet. This rule was suggested as a temporary restriction.\n-\n-3. The replacement transaction pays an absolute fee of at least the sum paid by the original",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1364398135",
      "id" : 1364398135,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII585RUxA3",
      "original_commit_id" : "b0f771bb559f38ea16a8f4d13110e2247ac080b9",
      "original_line" : 28,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "doc/policy/mempool-replacements.md",
      "position" : 11,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1364398135/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1364398135",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365716769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365716769"
         }
      },
      "author_association" : "MEMBER",
      "body" : "shouldn't this be 0?",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T15:13:12Z",
      "diff_hunk" : "@@ -684,6 +830,19 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"incrementalrelayfee\", ValueFromAmount(pool.m_incremental_relay_feerate.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n     ret.pushKV(\"fullrbf\", pool.m_full_rbf);\n+    ret.pushKV(\"numberofclusters\", pool.m_cluster_map.size());\n+    int64_t max_cluster_count = 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365716769",
      "id" : 1365716769,
      "line" : 847,
      "node_id" : "PRRC_kwDOABII585RZy8h",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 834,
      "original_position" : 283,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 296,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365716769/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365716769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365753481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365753481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note: this is sticking with the same rule#5 instead of number of effected clusters. It would be more ideal if it were number of clusters to allow for better usage of adversarial-ish batched CPFPs",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T15:40:30Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365753481",
      "id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585RZ76J",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365753481/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365753481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366095113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366095113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "the check two conditionals above:\r\n\r\n```\r\nif (!bypass_limits && ws.m_modified_fees < m_pool.m_min_relay_feerate.GetFee(ws.m_vsize))\r\n```\r\n\r\nThis is still needed for the same reason as before: transaction that is above minrelay, but would be in a chunk below minrelay. We could immediately evict below minrelay chunks post-re-linearization f.e. which would allow 0-fee parents then relax this maybe.\r\n\r\n",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T20:48:36Z",
      "diff_hunk" : "@@ -876,75 +880,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     ws.m_iters_conflicting = m_pool.GetIterSet(ws.m_conflicts);\n \n-    // Note that these modifications are only applicable to single transaction scenarios;\n-    // carve-outs and package RBF are disabled for multi-transaction evaluations.\n-    CTxMemPool::Limits maybe_rbf_limits = m_pool.m_limits;\n-\n-    // Calculate in-mempool ancestors, up to a limit.\n-    if (ws.m_conflicts.size() == 1) {\n-        // In general, when we receive an RBF transaction with mempool conflicts, we want to know whether we\n-        // would meet the chain limits after the conflicts have been removed. However, there isn't a practical\n-        // way to do this short of calculating the ancestor and descendant sets with an overlay cache of\n-        // changed mempool entries. Due to both implementation and runtime complexity concerns, this isn't\n-        // very realistic, thus we only ensure a limited set of transactions are RBF'able despite mempool\n-        // conflicts here. Importantly, we need to ensure that some transactions which were accepted using\n-        // the below carve-out are able to be RBF'ed, without impacting the security the carve-out provides\n-        // for off-chain contract systems (see link in the comment below).\n-        //\n-        // Specifically, the subset of RBF transactions which we allow despite chain limits are those which\n-        // conflict directly with exactly one other transaction (but may evict children of said transaction),\n-        // and which are not adding any new mempool dependencies. Note that the \"no new mempool dependencies\"\n-        // check is accomplished later, so we don't bother doing anything about it here, but if our\n-        // policy changes, we may need to move that check to here instead of removing it wholesale.\n-        //\n-        // Such transactions are clearly not merging any existing packages, so we are only concerned with\n-        // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n-        // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n-        // to.\n-        //\n-        // To check these we first check if we meet the RBF criteria, above, and increment the descendant\n-        // limits by the direct conflict and its descendants (as these are recalculated in\n-        // CalculateMempoolAncestors by assuming the new transaction being added is a new descendant, with no\n-        // removals, of each parent's existing dependent set). The ancestor count limits are unmodified (as\n-        // the ancestor limits should be the same for both our new transaction and any conflicts).\n-        // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes\n-        // into force here (as we're only adding a single transaction).\n-        assert(ws.m_iters_conflicting.size() == 1);\n-        CTxMemPool::txiter conflict = *ws.m_iters_conflicting.begin();\n-\n-        maybe_rbf_limits.descendant_count += 1;\n-        maybe_rbf_limits.descendant_size_vbytes += conflict->GetSizeWithDescendants();\n-    }\n-\n-    auto ancestors{m_pool.CalculateMemPoolAncestors(*entry, maybe_rbf_limits)};\n-    if (!ancestors) {\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        // Contracting/payment channels CPFP carve-out:\n-        // If the new transaction is relatively small (up to 40k weight)\n-        // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n-        //\n-        // This allows protocols which rely on distrusting counterparties\n-        // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n-        // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        CTxMemPool::Limits cpfp_carve_out_limits{\n-            .ancestor_count = 2,\n-            .ancestor_size_vbytes = maybe_rbf_limits.ancestor_size_vbytes,\n-            .descendant_count = maybe_rbf_limits.descendant_count + 1,\n-            .descendant_size_vbytes = maybe_rbf_limits.descendant_size_vbytes + EXTRA_DESCENDANT_TX_SIZE_LIMIT,\n-        };\n-        const auto error_message{util::ErrorString(ancestors).original};\n-        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", error_message);\n-        }\n-        ancestors = m_pool.CalculateMemPoolAncestors(*entry, cpfp_carve_out_limits);\n-        if (!ancestors) return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", error_message);\n-    }\n-\n-    ws.m_ancestors = *ancestors;\n+    // Calculate in-mempool ancestors",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366095113",
      "id" : 1366095113,
      "line" : 883,
      "node_id" : "PRRC_kwDOABII585RbPUJ",
      "original_commit_id" : "c5d3c42da466feca9192d0e389654ba55caec5a6",
      "original_line" : 883,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 84,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366095113/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366095113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366105725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366105725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "numbers in comments are off\r\n\r\nshower thought: Should we/can we bound the number of clusters in addition to total memory in TrimToSize? I can't think of a good way to do that that doesn't complicate things quite a bit, and perhaps practical mempool sizes make this moot. Just something to consider in case I missed something obvious.",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T21:01:05Z",
      "diff_hunk" : "@@ -83,26 +86,104 @@ static std::vector<CTransactionRef> CreateOrderedCoins(FastRandomContext& det_ra\n     return ordered_coins;\n }\n \n+static void MemPoolAddTransactions(benchmark::Bench& bench)\n+{\n+    FastRandomContext det_rand{true};\n+    int childTxs = 90;\n+    if (bench.complexityN() > 1) {\n+        childTxs = static_cast<int>(bench.complexityN());\n+    }\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(ChainType::MAIN);\n+    CTxMemPool& pool = *testing_setup.get()->m_node.mempool;\n+\n+    std::vector<CTransactionRef> transactions;\n+    // Create 1000 clusters of 100 transactions each",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366105725",
      "id" : 1366105725,
      "line" : 100,
      "node_id" : "PRRC_kwDOABII585RbR59",
      "original_commit_id" : "c5d3c42da466feca9192d0e389654ba55caec5a6",
      "original_line" : 100,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/bench/mempool_stress.cpp",
      "position" : 54,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366105725/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366105725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367425942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367425942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You probably didn't mean to call make_heap in the loop for 3N work each time. fwiw I don't see any performance difference between `push_heap`ing all the elements on vs one `make_heap`.\r\n\r\nonce this is changed, add+trimming seems to be faster than in master regardless of topology tested",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-20T19:39:27Z",
      "diff_hunk" : "@@ -1135,29 +1457,67 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n+\n+    // Use a heap to determine which chunks to evict, but only make the heap if\n+    // we're actually above the size limit.\n+    std::vector<Cluster::HeapEntry> heap_chunks;\n+    std::set<Cluster*> clusters_with_evictions;\n     while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n-        indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n+        if (heap_chunks.empty()) {\n+            for (const auto & [id, cluster] : m_cluster_map) {\n+                if (!cluster->m_chunks.empty()) {\n+                    heap_chunks.emplace_back(cluster->m_chunks.end()-1, cluster.get());\n+                }\n+            }\n+        }\n+\n+        // Define comparison operator on our heap entries (using feerate of chunks).\n+        auto cmp = [](const Cluster::HeapEntry& a, const Cluster::HeapEntry& b) {\n+            // TODO: branch on size of fee to do this as 32-bit calculation\n+            // instead? etc\n+            return a.first->fee*b.first->size > b.first->fee*a.first->size;\n+        };\n+\n+        std::make_heap(heap_chunks.begin(), heap_chunks.end(), cmp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367425942",
      "id" : 1367425942,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RgUOW",
      "original_commit_id" : "26e831d5f2c7db15e7a50f910ddf4e1737d226da",
      "original_line" : 1481,
      "original_position" : 1421,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367425942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367425942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367430770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367430770"
         }
      },
      "author_association" : "MEMBER",
      "body" : "don't ask why but I'm getting significant performance improvement(>10%) just `push_heap`ing everything from scratch, and similarly with priority_queue",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-20T19:46:25Z",
      "diff_hunk" : "@@ -210,183 +194,84 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::list<CTxMemPoolEntry::CTxMemPoolEntryRef>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx.get().GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter);\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     bool fPrintPriority = gArgs.GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     if (fPrintPriority) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n }\n \n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n+void BlockAssembler::addChunks(const CTxMemPool& mempool)\n {\n     AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n-    }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n-}\n-\n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(const CTxMemPool& mempool, int& nPackagesSelected, int& nDescendantsUpdated)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    CTxMemPool::setEntries failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it)) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n-\n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n+    std::vector<Cluster::HeapEntry> heap_chunks;\n+    // Initialize the heap with the best entry from each cluster\n+    for (const auto & [id, cluster] : mempool.m_cluster_map) {\n+        if (!cluster->m_chunks.empty()) {\n+            heap_chunks.emplace_back(cluster->m_chunks.begin(), cluster.get());\n         }\n-\n-        if (packageFees < m_options.blockMinFeeRate.GetFee(packageSize)) {\n-            // Everything else we might consider has a lower fee rate\n+    }\n+    // Define comparison operator on our heap entries (using feerate of chunks).\n+    auto cmp = [](const Cluster::HeapEntry& a, const Cluster::HeapEntry& b) {\n+        // TODO: branch on size of fee to do this as 32-bit calculation\n+        // instead? etc\n+        return a.first->fee*b.first->size < b.first->fee*a.first->size;\n+    };\n+    // TODO: replace the heap with a priority queue\n+    std::make_heap(heap_chunks.begin(), heap_chunks.end(), cmp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367430770",
      "id" : 1367430770,
      "line" : 248,
      "node_id" : "PRRC_kwDOABII585RgVZy",
      "original_commit_id" : "26e831d5f2c7db15e7a50f910ddf4e1737d226da",
      "original_line" : 248,
      "original_position" : 244,
      "original_start_line" : null,
      "path" : "src/node/miner.cpp",
      "position" : 244,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367430770/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367430770",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1370716238"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370716238"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The immediate downside to a cap on number of clusters is that singleton, high-feerate transactions would not be accepted.  And I don't think we need to -- the only places where having more clusters makes us slower is in eviction and mining, and for both of those use cases we could improve performance (if we need to) by maintaining the relevant heap data structures (or something equivalent) as chunks are modified, rather than all at once. \r\n\r\nFor now in this branch I've created these from scratch each time, but if it turns out that performance is meaningfully impacted when the mempool is busy, then I can optimize this further by just using a bit more memory.",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-24T19:24:39Z",
      "diff_hunk" : "@@ -83,26 +86,104 @@ static std::vector<CTransactionRef> CreateOrderedCoins(FastRandomContext& det_ra\n     return ordered_coins;\n }\n \n+static void MemPoolAddTransactions(benchmark::Bench& bench)\n+{\n+    FastRandomContext det_rand{true};\n+    int childTxs = 90;\n+    if (bench.complexityN() > 1) {\n+        childTxs = static_cast<int>(bench.complexityN());\n+    }\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(ChainType::MAIN);\n+    CTxMemPool& pool = *testing_setup.get()->m_node.mempool;\n+\n+    std::vector<CTransactionRef> transactions;\n+    // Create 1000 clusters of 100 transactions each",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1370716238",
      "id" : 1370716238,
      "in_reply_to_id" : 1366105725,
      "line" : 100,
      "node_id" : "PRRC_kwDOABII585Rs3hO",
      "original_commit_id" : "c5d3c42da466feca9192d0e389654ba55caec5a6",
      "original_line" : 100,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/bench/mempool_stress.cpp",
      "position" : 54,
      "pull_request_review_id" : 1695722724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370716238/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T19:24:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370716238",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371708009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371708009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There is room to relax this rule some, so if this is important we can do so. I think the requirement is a bound on the number of clusters that would have to be re-sorted in order to accept the new transaction.  We can approximate that as the number of clusters that would be non-empty as a result of removing all the conflicting transactions from the mempool, and only process replacements for which that is below some target.  \r\n\r\nThat would be a more complex logic though, so before implementing it I wanted to have some sense of whether we need to.  Has the historical 100-transaction-conflict limit been problematic for use cases in the past?  Note also that in the new code, we are calculating the number of conflicts exactly (the old code used an approximation, which could be gamed by an adversary).",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-10-25T12:48:09Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371708009",
      "id" : 1371708009,
      "in_reply_to_id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585Rwppp",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1697257034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371708009/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T12:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371708009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371803601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371803601"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~Ah! I wrote a huge response to this, then looked up our previous discussions, and realized I didn't actually read the code: https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1554708843~~\r\n\r\n~~IIUC now, this is only counting *direct* conflicts, and not the descendants that are booted.~~\r\n\r\n~~I think that's fine.~~\r\n\r\nActually no, the existing code comments were just misleading, looks like the issue still exists, see: https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1554708843",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-10-25T13:52:53Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371803601",
      "id" : 1371803601,
      "in_reply_to_id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585RxA_R",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1697415470,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371803601/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T13:59:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371803601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371813655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371813655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yes, in the new code I'm only counting direct conflicts right now, because every descendant of a direct conflict must be in the same cluster as that conflict.  So this is already a relaxation of the existing rule.",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-10-25T13:59:21Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371813655",
      "id" : 1371813655,
      "in_reply_to_id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585RxDcX",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1697431678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371813655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T13:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371813655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371819952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371819952"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think the requirement is a bound on the number of clusters that would have to be re-sorted in order to accept the new transaction.\r\n\r\nAs an alternative, we drop the replacement limit to like, 10 or something, and then *only* count the *direct* conflicts, not the direct conflicts and all the descendants?",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-10-25T14:01:44Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371819952",
      "id" : 1371819952,
      "in_reply_to_id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585RxE-w",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1697442366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371819952/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T14:01:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371819952",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-30T15:55:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1785522347",
      "id" : 1785522347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585qbOir",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1785522347/reactions"
      },
      "updated_at" : "2023-10-30T15:55:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1785522347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392325037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392325037"
         }
      },
      "author_association" : "MEMBER",
      "body" : "dd6684ab665bc8ae76b76fdd2e578fc77d562a52: While you're touching this, can you rename `MempoolCheck` to `MemPoolCheck`, `MempoolEviction` to `MemPoolEviction` and `ComplexMemPool` to `MempoolComplex`? That makes `-filter=MemPool.*` work\r\n\r\nAs a workaround, `-filter=.*Mem.*` does work.",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-14T10:05:29Z",
      "diff_hunk" : "@@ -118,5 +199,63 @@ static void MempoolCheck(benchmark::Bench& bench)\n     });\n }\n \n+static void MemPoolMiningScoreCheck(benchmark::Bench& bench)\n+{\n+    // Default test: each cluster is of size 20, and we'll try to RBF with a\n+    // transaction that merges 10 clusters, evicting 10 transactions from each.\n+\n+    FastRandomContext det_rand{true};\n+    int childTxs = 10;\n+    if (bench.complexityN() > 1) {\n+        childTxs = static_cast<int>(bench.complexityN());\n+    }\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(ChainType::MAIN);\n+    CTxMemPool& pool = *testing_setup.get()->m_node.mempool;\n+\n+    LOCK2(cs_main, pool.cs);\n+\n+    std::vector<CTransactionRef> parent_txs_for_rbf;\n+    std::set<uint256> child_txs_to_conflict_with;\n+\n+    for (int i=0; i<10; i++) {\n+        std::vector<CTransactionRef> transactions = CreateCoinCluster(det_rand, childTxs, /*min_ancestors=*/1);\n+        parent_txs_for_rbf.push_back(transactions[0]);\n+        // Conflict with everything after the first 10 transactions\n+        for (size_t j=10; j<transactions.size(); ++j) {\n+            child_txs_to_conflict_with.insert(transactions[j]->GetHash());\n+        }\n+\n+        // Add all transactions to the mempool.\n+        for (auto& tx : transactions) {\n+            AddTx(tx, pool, det_rand);\n+        }\n+    }\n+\n+    // Construct a transaction that spends from each of the parent transactions\n+    // selected.\n+    CMutableTransaction tx = CMutableTransaction();\n+    tx.vin.resize(10);\n+    for (size_t i=0; i<parent_txs_for_rbf.size(); ++i) {\n+        tx.vin[i].prevout = COutPoint(parent_txs_for_rbf[i]->GetHash(), 0);\n+        tx.vin[i].scriptSig = CScript() << i;\n+    }\n+    tx.vout.resize(1);\n+    for (auto& out : tx.vout) {\n+        out.scriptPubKey = CScript() << CScriptNum(det_rand.randrange(19)+1) << OP_EQUAL;\n+        out.nValue = 10 * COIN;\n+    }\n+\n+    CTxMemPool::setEntries all_conflicts = pool.GetIterSet(child_txs_to_conflict_with);\n+    CTxMemPoolEntry entry(MakeTransactionRef(tx), det_rand.randrange(10000)+1000, 0, 1, 0, false, 4, LockPoints());\n+\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        CTxMemPool::Limits limits(pool.m_limits);\n+        pool.CalculateMiningScoreOfReplacementTx(entry, det_rand.randrange(30000)+1000, all_conflicts, limits);\n+    });\n+}\n+\n+BENCHMARK(MemPoolAncestorsDescendants, benchmark::PriorityLevel::HIGH);\n+BENCHMARK(MemPoolAddTransactions, benchmark::PriorityLevel::HIGH);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392325037",
      "id" : 1392325037,
      "line" : 258,
      "node_id" : "PRRC_kwDOABII585S_TGt",
      "original_commit_id" : "dd6684ab665bc8ae76b76fdd2e578fc77d562a52",
      "original_line" : 258,
      "original_position" : 210,
      "original_start_line" : null,
      "path" : "src/bench/mempool_stress.cpp",
      "position" : 210,
      "pull_request_review_id" : 1729366575,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392325037/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-14T10:29:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392325037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It would be useful to add a `mempool_backwards_compatibility.py` test to illustrate how the new rules interact with older nodes. It could have two modern nodes and one v25 (or v26) node. Some of the tests you deleted in this branch could be moved there. E.g. the test could demonstrate how RBF rule 2 is not enforced when relaying to the new node, but it is when relaying to the v25 node.\r\n\r\nBenchmarks on a 2019 MacBook Pro (2,3 GHz 8-Core Intel Core i9), plugged in:\r\n\r\n```\r\n% src/bench/bench_bitcoin -filter=.*Mem.* -min-time=10000\r\n\r\n|      330,557,188.67 |                3.03 |    1.5% |     10.77 | `ComplexMemPool`\r\n|      451,529,273.50 |                2.21 |    2.8% |     10.01 | `MemPoolAddTransactions`\r\n|            2,847.13 |          351,231.06 |    2.7% |     10.93 | `MemPoolAncestorsDescendants`\r\n|           11,047.90 |           90,514.97 |    2.5% |     10.69 | `MemPoolMiningScoreCheck`\r\n|        4,328,796.04 |              231.01 |    1.1% |     10.99 | `MempoolCheck`\r\n|           36,268.80 |           27,571.91 |    2.9% |     11.17 | `MempoolEviction`\r\n|        9,123,684.25 |              109.60 |    1.4% |     10.74 | `RpcMempool`\r\n```\r\n\r\nUpdate: added bench for master@c2d4e40e454ba0c7c836a849b6d15db4850079f2:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|      302,677,055.25 |                3.30 |    3.5% |     10.76 | `ComplexMemPool`\r\n|      100,167,478.00 |                9.98 |    2.5% |     11.08 | `MempoolCheck`\r\n|           43,759.84 |           22,852.00 |    4.1% |     11.42 | `MempoolEviction`\r\n|       10,235,913.25 |               97.70 |    3.5% |     10.66 | `RpcMempool`\r\n```",
      "created_at" : "2023-11-14T10:29:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1809939629",
      "id" : 1809939629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585r4Xyt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809939629/reactions"
      },
      "updated_at" : "2023-11-14T14:23:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809939629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392364899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392364899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I made an attempt at dropping `-limitdescendantsize` and friends: https://github.com/Sjors/bitcoin/commits/2022/11/cluster-mempool\r\n\r\nI (naively) replaced ancestor and descendent limits in coin selection with the new cluster limit. At least the tests pass *.\r\n\r\nWhen we drop these settings anyone who uses them will get an error when starting the node. That's probably a good thing, since they should read about this change.\r\n\r\n`* =` well, wallet_basic.py fails with:\r\n\r\n```\r\nInternal bug detected: Shared UTXOs among selection results\r\nwallet/coinselection.h:340 (InsertInputs)\r\n```",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-14T10:34:19Z",
      "diff_hunk" : "@@ -574,6 +574,8 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustercount=<n>\", strprintf(\"Do not accept transactions connected to <n> or more existing in-mempool transactions (default: %u)\", DEFAULT_CLUSTER_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392364899",
      "id" : 1392364899,
      "line" : 577,
      "node_id" : "PRRC_kwDOABII585S_c1j",
      "original_commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "original_line" : 577,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_review_id" : 1729419761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392364899/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-14T12:30:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392364899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392567718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392567718"
         }
      },
      "author_association" : "MEMBER",
      "body" : "54f39ca8f101483f5f82707689ca49431d4091e5: what if the deleted transaction makes it so there are now two clusters? This is also safe to ignore? ",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-14T13:15:36Z",
      "diff_hunk" : "@@ -1245,3 +1536,169 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+void Cluster::AddTransaction(const CTxMemPoolEntry& entry, bool sort)\n+{\n+    m_chunks.emplace_back(entry.GetModifiedFee(), entry.GetTxSize());\n+    m_chunks.back().txs.emplace_back(entry);\n+    entry.m_cluster = this;\n+    ++m_tx_count;\n+    if (sort) Sort();\n+    return;\n+}\n+\n+void Cluster::RemoveTransaction(const CTxMemPoolEntry& entry)\n+{\n+    m_chunks[entry.m_loc.first].txs.erase(entry.m_loc.second);\n+\n+    // Chunk (or cluster) may now be empty, but this will get cleaned up",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392567718",
      "id" : 1392567718,
      "line" : 1677,
      "node_id" : "PRRC_kwDOABII585TAOWm",
      "original_commit_id" : "54f39ca8f101483f5f82707689ca49431d4091e5",
      "original_line" : 1554,
      "original_position" : 407,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1612,
      "pull_request_review_id" : 1729707068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392567718/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-14T14:27:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392567718",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392640692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392640692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "54f39ca8f101483f5f82707689ca49431d4091e5: So you're creating a chunk for each new transaction and then erasing it if the fee rate goes down. Why not the other way around? ",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-14T14:09:48Z",
      "diff_hunk" : "@@ -1245,3 +1536,169 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+void Cluster::AddTransaction(const CTxMemPoolEntry& entry, bool sort)\n+{\n+    m_chunks.emplace_back(entry.GetModifiedFee(), entry.GetTxSize());\n+    m_chunks.back().txs.emplace_back(entry);\n+    entry.m_cluster = this;\n+    ++m_tx_count;\n+    if (sort) Sort();\n+    return;\n+}\n+\n+void Cluster::RemoveTransaction(const CTxMemPoolEntry& entry)\n+{\n+    m_chunks[entry.m_loc.first].txs.erase(entry.m_loc.second);\n+\n+    // Chunk (or cluster) may now be empty, but this will get cleaned up\n+    // when the cluster is re-sorted (or when the cluster is deleted) Note:\n+    // if we cleaned up empty chunks here, then this would break the\n+    // locations of other entries in the cluster. Since we would like to be\n+    // able to do multiple removals in a row and then clean up the sort, we\n+    // can't clean up empty chunks here.\n+    --m_tx_count;\n+    return;\n+}\n+\n+void Cluster::RechunkFromLinearization(std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& txs, bool reassign_locations)\n+{\n+    m_chunks.clear();\n+\n+    for (auto txentry : txs) {\n+        m_chunks.emplace_back(txentry.get().GetModifiedFee(), txentry.get().GetTxSize());\n+        m_chunks.back().txs.emplace_back(txentry);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392640692",
      "id" : 1392640692,
      "line" : 1695,
      "node_id" : "PRRC_kwDOABII585TAgK0",
      "original_commit_id" : "54f39ca8f101483f5f82707689ca49431d4091e5",
      "original_line" : 1570,
      "original_position" : 423,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1630,
      "pull_request_review_id" : 1729707068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392640692/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-14T14:27:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392640692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392646700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392646700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "54f39ca8f101483f5f82707689ca49431d4091e5: shouldn't this be `fee / size`? Or do you mean to use an inverse fee rate for performance (`inv_fee_rate`)?",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-14T14:13:05Z",
      "diff_hunk" : "@@ -1245,3 +1536,169 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+void Cluster::AddTransaction(const CTxMemPoolEntry& entry, bool sort)\n+{\n+    m_chunks.emplace_back(entry.GetModifiedFee(), entry.GetTxSize());\n+    m_chunks.back().txs.emplace_back(entry);\n+    entry.m_cluster = this;\n+    ++m_tx_count;\n+    if (sort) Sort();\n+    return;\n+}\n+\n+void Cluster::RemoveTransaction(const CTxMemPoolEntry& entry)\n+{\n+    m_chunks[entry.m_loc.first].txs.erase(entry.m_loc.second);\n+\n+    // Chunk (or cluster) may now be empty, but this will get cleaned up\n+    // when the cluster is re-sorted (or when the cluster is deleted) Note:\n+    // if we cleaned up empty chunks here, then this would break the\n+    // locations of other entries in the cluster. Since we would like to be\n+    // able to do multiple removals in a row and then clean up the sort, we\n+    // can't clean up empty chunks here.\n+    --m_tx_count;\n+    return;\n+}\n+\n+void Cluster::RechunkFromLinearization(std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& txs, bool reassign_locations)\n+{\n+    m_chunks.clear();\n+\n+    for (auto txentry : txs) {\n+        m_chunks.emplace_back(txentry.get().GetModifiedFee(), txentry.get().GetTxSize());\n+        m_chunks.back().txs.emplace_back(txentry);\n+        while (m_chunks.size() >= 2) {\n+            auto cur_iter = std::prev(m_chunks.end());\n+            auto prev_iter = std::prev(cur_iter);\n+            double feerate_prev = prev_iter->fee*cur_iter->size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1392646700",
      "id" : 1392646700,
      "line" : 1699,
      "node_id" : "PRRC_kwDOABII585TAhos",
      "original_commit_id" : "54f39ca8f101483f5f82707689ca49431d4091e5",
      "original_line" : 1574,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1634,
      "pull_request_review_id" : 1729707068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392646700/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-14T14:27:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392646700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399053865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399053865"
         }
      },
      "author_association" : "MEMBER",
      "body" : "065e18fff30a91c94c47d5c2fc65b13ddc38aa47: do you plan to relax this assumption so that a transaction in (a) full cluster(s) can be replaced?\r\n\r\n_Update_: `AcceptSingleTransaction` skips `ClusterSizeChecks` if there's a replacement, in which case `ReplacementChecks` checks the new cluster size. So this is not an issue.",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T11:22:37Z",
      "diff_hunk" : "@@ -632,6 +634,22 @@ class CTxMemPool\n      */\n     void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\n \n+    /**\n+     * Calculate whether cluster size limits would be exceeded if a new tx were\n+     * added to the mempool (assuming no conflicts).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399053865",
      "id" : 1399053865,
      "line" : 523,
      "node_id" : "PRRC_kwDOABII585TY94p",
      "original_commit_id" : "065e18fff30a91c94c47d5c2fc65b13ddc38aa47",
      "original_line" : 639,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 440,
      "pull_request_review_id" : 1739566572,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399053865/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T14:32:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399053865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399137900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399137900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1: it would be more practical to (also) have a lookup by transaction hash",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T12:32:16Z",
      "diff_hunk" : "@@ -553,6 +660,39 @@ static RPCHelpMan getmempooldescendants()\n     };\n }\n \n+static RPCHelpMan getmempoolcluster()\n+{\n+    return RPCHelpMan{\"getmempoolcluster\",\n+        \"\\nReturns mempool data for given cluster\\n\",\n+        {\n+            {\"id\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The cluster id (must be in mempool)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399137900",
      "id" : 1399137900,
      "line" : 687,
      "node_id" : "PRRC_kwDOABII585TZSZs",
      "original_commit_id" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1",
      "original_line" : 668,
      "original_position" : 192,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 260,
      "pull_request_review_id" : 1739706549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399137900/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T12:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399137900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399160874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399160874"
         }
      },
      "author_association" : "MEMBER",
      "body" : "To check `a/b > c/d` you can instead check `a*d > c*b`, which avoids divisions (which are an order of magnitude slower than multiplication).",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T12:53:42Z",
      "diff_hunk" : "@@ -1245,3 +1536,169 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+void Cluster::AddTransaction(const CTxMemPoolEntry& entry, bool sort)\n+{\n+    m_chunks.emplace_back(entry.GetModifiedFee(), entry.GetTxSize());\n+    m_chunks.back().txs.emplace_back(entry);\n+    entry.m_cluster = this;\n+    ++m_tx_count;\n+    if (sort) Sort();\n+    return;\n+}\n+\n+void Cluster::RemoveTransaction(const CTxMemPoolEntry& entry)\n+{\n+    m_chunks[entry.m_loc.first].txs.erase(entry.m_loc.second);\n+\n+    // Chunk (or cluster) may now be empty, but this will get cleaned up\n+    // when the cluster is re-sorted (or when the cluster is deleted) Note:\n+    // if we cleaned up empty chunks here, then this would break the\n+    // locations of other entries in the cluster. Since we would like to be\n+    // able to do multiple removals in a row and then clean up the sort, we\n+    // can't clean up empty chunks here.\n+    --m_tx_count;\n+    return;\n+}\n+\n+void Cluster::RechunkFromLinearization(std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& txs, bool reassign_locations)\n+{\n+    m_chunks.clear();\n+\n+    for (auto txentry : txs) {\n+        m_chunks.emplace_back(txentry.get().GetModifiedFee(), txentry.get().GetTxSize());\n+        m_chunks.back().txs.emplace_back(txentry);\n+        while (m_chunks.size() >= 2) {\n+            auto cur_iter = std::prev(m_chunks.end());\n+            auto prev_iter = std::prev(cur_iter);\n+            double feerate_prev = prev_iter->fee*cur_iter->size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399160874",
      "id" : 1399160874,
      "in_reply_to_id" : 1392646700,
      "line" : 1699,
      "node_id" : "PRRC_kwDOABII585TZYAq",
      "original_commit_id" : "54f39ca8f101483f5f82707689ca49431d4091e5",
      "original_line" : 1574,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1634,
      "pull_request_review_id" : 1739741540,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399160874/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T12:53:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399160874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399161977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399161977"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe that's an idea we've toyed with (calling it \"sibling eviction\"), but so far it isn't clear how to align that with DoS prevention.",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T12:54:40Z",
      "diff_hunk" : "@@ -632,6 +634,22 @@ class CTxMemPool\n      */\n     void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\n \n+    /**\n+     * Calculate whether cluster size limits would be exceeded if a new tx were\n+     * added to the mempool (assuming no conflicts).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399161977",
      "id" : 1399161977,
      "in_reply_to_id" : 1399053865,
      "line" : 523,
      "node_id" : "PRRC_kwDOABII585TZYR5",
      "original_commit_id" : "065e18fff30a91c94c47d5c2fc65b13ddc38aa47",
      "original_line" : 639,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 440,
      "pull_request_review_id" : 1739743147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399161977/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T12:54:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399161977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399223399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399223399"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1: can you order chunks by mining score?",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T13:42:19Z",
      "diff_hunk" : "@@ -249,34 +249,81 @@ static RPCHelpMan testmempoolaccept()\n     };\n }\n \n+static std::vector<RPCResult> ClusterDescription()\n+{\n+    return {\n+        RPCResult{RPCResult::Type::NUM, \"vsize\", \"virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\"},\n+        RPCResult{RPCResult::Type::NUM, \"txcount\", \"number of transactions (including this one)\"},\n+        RPCResult{RPCResult::Type::NUM, \"clusterid\", \"id of the cluster containing this tx\"},\n+        RPCResult{RPCResult::Type::ARR, \"chunks\", \"the cluster's chunks\",\n+            {RPCResult{RPCResult::Type::OBJ, \"chunkentry\", \"\",\n+                {\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"fee\", \"fee of this chunk\"},\n+                    RPCResult{RPCResult::Type::NUM, \"vsize\", \"virtual size of this chunk\"},\n+                    RPCResult{RPCResult::Type::NUM, \"feerate\", \"fee rate in \" + CURRENCY_UNIT + \"/kvB\"},\n+                    RPCResult{RPCResult::Type::ARR, \"txids\", \"txids in this chunk in sorted order\",\n+                        {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"the transaction id\"}}}\n+                }}\n+            }\n+        }\n+    };\n+}\n+\n static std::vector<RPCResult> MempoolEntryDescription()\n {\n     return {\n         RPCResult{RPCResult::Type::NUM, \"vsize\", \"virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\"},\n-        RPCResult{RPCResult::Type::NUM, \"weight\", \"transaction weight as defined in BIP 141.\"},\n-        RPCResult{RPCResult::Type::NUM_TIME, \"time\", \"local time transaction entered pool in seconds since 1 Jan 1970 GMT\"},\n-        RPCResult{RPCResult::Type::NUM, \"height\", \"block height when transaction entered pool\"},\n-        RPCResult{RPCResult::Type::NUM, \"descendantcount\", \"number of in-mempool descendant transactions (including this one)\"},\n-        RPCResult{RPCResult::Type::NUM, \"descendantsize\", \"virtual transaction size of in-mempool descendants (including this one)\"},\n-        RPCResult{RPCResult::Type::NUM, \"ancestorcount\", \"number of in-mempool ancestor transactions (including this one)\"},\n-        RPCResult{RPCResult::Type::NUM, \"ancestorsize\", \"virtual transaction size of in-mempool ancestors (including this one)\"},\n-        RPCResult{RPCResult::Type::STR_HEX, \"wtxid\", \"hash of serialized transaction, including witness data\"},\n-        RPCResult{RPCResult::Type::OBJ, \"fees\", \"\",\n-            {\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee, denominated in \" + CURRENCY_UNIT},\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"modified\", \"transaction fee with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"ancestor\", \"transaction fees of in-mempool ancestors (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"descendant\", \"transaction fees of in-mempool descendants (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n-            }},\n-        RPCResult{RPCResult::Type::ARR, \"depends\", \"unconfirmed transactions used as inputs for this transaction\",\n-            {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"parent transaction id\"}}},\n-        RPCResult{RPCResult::Type::ARR, \"spentby\", \"unconfirmed transactions spending outputs from this transaction\",\n-            {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"child transaction id\"}}},\n-        RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction signals BIP125 replaceability or has an unconfirmed ancestor signaling BIP125 replaceability.\\n\"},\n-        RPCResult{RPCResult::Type::BOOL, \"unbroadcast\", \"Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\"},\n+            RPCResult{RPCResult::Type::NUM, \"weight\", \"transaction weight as defined in BIP 141.\"},\n+            RPCResult{RPCResult::Type::NUM_TIME, \"time\", \"local time transaction entered pool in seconds since 1 Jan 1970 GMT\"},\n+            RPCResult{RPCResult::Type::NUM, \"height\", \"block height when transaction entered pool\"},\n+            RPCResult{RPCResult::Type::NUM, \"descendantcount\", \"number of in-mempool descendant transactions (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"descendantsize\", \"virtual transaction size of in-mempool descendants (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"ancestorcount\", \"number of in-mempool ancestor transactions (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"ancestorsize\", \"virtual transaction size of in-mempool ancestors (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"chunksize\", \"virtual transaction size of this transaction's chunk\"},\n+            RPCResult{RPCResult::Type::NUM, \"clusterid\", \"id of the cluster containing this tx\"},\n+            RPCResult{RPCResult::Type::STR_HEX, \"wtxid\", \"hash of serialized transaction, including witness data\"},\n+            RPCResult{RPCResult::Type::OBJ, \"fees\", \"\",\n+                {\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"modified\", \"transaction fee with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"ancestor\", \"transaction fees of in-mempool ancestors (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"descendant\", \"transaction fees of in-mempool descendants (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"chunk\", \"transaction fees of chunk, denominated in \" + CURRENCY_UNIT},\n+                }},\n+            RPCResult{RPCResult::Type::ARR, \"depends\", \"unconfirmed transactions used as inputs for this transaction\",\n+                {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"parent transaction id\"}}},\n+            RPCResult{RPCResult::Type::ARR, \"spentby\", \"unconfirmed transactions spending outputs from this transaction\",\n+                {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"child transaction id\"}}},\n+            RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction signals BIP125 replaceability or has an unconfirmed ancestor signaling BIP125 replaceability.\\n\"},\n+            RPCResult{RPCResult::Type::BOOL, \"unbroadcast\", \"Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\"},\n     };\n }\n \n+static void clusterToJSON(const CTxMemPool& pool, UniValue& info, const Cluster& c) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n+{\n+    AssertLockHeld(pool.cs);\n+    info.pushKV(\"vsize\", (int)c.m_tx_size);\n+    info.pushKV(\"txcount\", (int)c.m_tx_count);\n+    info.pushKV(\"clusterid\", (int)c.m_id);\n+    UniValue chunks(UniValue::VARR);\n+    for (auto &chunk : c.m_chunks) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399223399",
      "id" : 1399223399,
      "line" : 310,
      "node_id" : "PRRC_kwDOABII585TZnRn",
      "original_commit_id" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1",
      "original_line" : 310,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 83,
      "pull_request_review_id" : 1739853534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399223399/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T13:42:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399223399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399231122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399231122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be good to explain the rationale for the miner score somewhere.\r\n\r\nWhy a * b and b * a?\r\n\r\nAnd why is not the fee rate `a_fee / a_size`? (inverse score?)",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T13:48:38Z",
      "diff_hunk" : "@@ -764,48 +918,174 @@ void CTxMemPool::check(const CCoinsViewCache& active_coins_tip, int64_t spendhei\n         assert(&tx == it->second);\n     }\n \n+    // Check that clusters are sorted topologically and that the chunk metadata\n+    // matches the txs in the chunk.\n+    for (const auto & [id, cluster] : m_cluster_map) {\n+        assert(cluster->m_tx_count > 0); // no empty clusters\n+        CTxMemPoolEntry::Parents txs_so_far;\n+        for (size_t i=0; i<cluster->m_chunks.size(); ++i) {\n+            int64_t fee{0};\n+            int64_t size{0};\n+            assert(!cluster->m_chunks[i].txs.empty()); // no empty chunks\n+            for (auto it=cluster->m_chunks[i].txs.begin(); it != cluster->m_chunks[i].txs.end(); ++it) {\n+                fee += it->get().GetModifiedFee();\n+                size += it->get().GetTxSize();\n+                // Check that all parents are in txs_so_far\n+                for (const auto& parent : it->get().GetMemPoolParentsConst()) {\n+                    assert(txs_so_far.count(parent));\n+                }\n+                txs_so_far.insert(*it);\n+            }\n+            assert(fee == cluster->m_chunks[i].fee);\n+            assert(size == cluster->m_chunks[i].size);\n+        }\n+        innerUsage += cluster->GetMemoryUsage();\n+    }\n+\n+    // Check that each cluster is connected.\n+    for (const auto & [id, cluster] : m_cluster_map) {\n+        // Since we've checked the parents and children already, we'll use\n+        // those values here.\n+        // We'll check that if we walk to every transaction reachable from the\n+        // first one, that we get every tx in the cluster.\n+        auto first_tx = cluster->m_chunks.front().txs.front();\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> work_queue;\n+        int reachable_txs = 1; // we'll count the transactions we reach.\n+\n+        WITH_FRESH_EPOCH(m_epoch);\n+        visited(first_tx.get());\n+        assert(first_tx.get().GetMemPoolParentsConst().size() == 0); // first tx can never have parents.\n+        for (auto child : first_tx.get().GetMemPoolChildrenConst()) {\n+            work_queue.push_back(child);\n+            visited(child.get());\n+            ++reachable_txs;\n+        }\n+        while (work_queue.size() > 0) {\n+            auto next_tx = work_queue.back();\n+            work_queue.pop_back();\n+            for (auto parent : next_tx.get().GetMemPoolParentsConst()) {\n+                if (!visited(parent.get())) {\n+                    ++reachable_txs;\n+                    work_queue.push_back(parent);\n+                }\n+            }\n+            for (auto child : next_tx.get().GetMemPoolChildrenConst()) {\n+                if (!visited(child.get())) {\n+                    ++reachable_txs;\n+                    work_queue.push_back(child);\n+                }\n+            }\n+        }\n+        assert(reachable_txs == cluster->m_tx_count);\n+    }\n+\n     assert(totalTxSize == checkTotal);\n     assert(m_total_fee == check_total_fee);\n     assert(innerUsage == cachedInnerUsage);\n }\n \n-bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid)\n+// Return true if a comes before b in mempool sort order\n+bool CTxMemPool::CompareMiningScore(txiter a, txiter b) const\n+{\n+    if (a == b) return false; // An element cannot be less than itself.\n+\n+    CAmount a_fee = a->m_cluster->m_chunks[a->m_loc.first].fee;\n+    int64_t a_size = a->m_cluster->m_chunks[a->m_loc.first].size;\n+    CAmount b_fee = b->m_cluster->m_chunks[b->m_loc.first].fee;\n+    int64_t b_size = b->m_cluster->m_chunks[b->m_loc.first].size;\n+\n+    int64_t a_score = a_fee * b_size;\n+    int64_t b_score = b_fee * a_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399231122",
      "id" : 1399231122,
      "line" : 998,
      "node_id" : "PRRC_kwDOABII585TZpKS",
      "original_commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "original_line" : 998,
      "original_position" : 1113,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1113,
      "pull_request_review_id" : 1739865937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399231122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T13:51:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399231122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors I believe most if not all of this PR will be rewritten, and split up into several components. The goal here is just to give an idea of the high-level interactions with other changes (wallet behavior, package validation/relay/RBF, ...). I don't think a detailed line-by-line code review at this stage is a good use of your time.",
      "created_at" : "2023-11-20T13:53:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1819105431",
      "id" : 1819105431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585sbViX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819105431/reactions"
      },
      "updated_at" : "2023-11-20T13:53:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819105431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399244164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399244164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1: this should also list the cluster id, and maybe also the chunk number.\r\n\r\nCould also add an argument limit the total number of vbytes.\r\n\r\n`getmempoolfeesize` can be introduced in its own commit",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T13:58:48Z",
      "diff_hunk" : "@@ -377,6 +427,63 @@ UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose, bool include_mempoo\n     }\n }\n \n+static RPCHelpMan getmempoolfeesize()\n+{\n+    return RPCHelpMan{\"getmempoolfeesize\",\n+        \"Returns fee/size data for the whole mempool.\",\n+        {},\n+        {},\n+        RPCExamples{\n+            HelpExampleCli(\"getmempoolfeesize\", \"\")\n+            + HelpExampleRpc(\"getmempoolfeesize\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+            LOCK(mempool.cs);\n+\n+            UniValue result(UniValue::VARR);\n+\n+            // TODO: refactor so that we're not just copying this from the miner.\n+            std::vector<Cluster::HeapEntry> heap_chunks;\n+            // Initialize the heap with the best entry from each cluster\n+            for (const auto & [id, cluster] : mempool.m_cluster_map) {\n+                if (!cluster->m_chunks.empty()) {\n+                    heap_chunks.emplace_back(cluster->m_chunks.begin(), cluster.get());\n+                }\n+            }\n+            // Define comparison operator on our heap entries (using feerate of chunks).\n+            auto cmp = [](const Cluster::HeapEntry& a, const Cluster::HeapEntry& b) {\n+                return a.first->fee*b.first->size < b.first->fee*a.first->size;\n+            };\n+            std::make_heap(heap_chunks.begin(), heap_chunks.end(), cmp);\n+\n+            CAmount accum_fee{0};\n+            int64_t accum_size{0};\n+            while (!heap_chunks.empty()) {\n+                auto best_chunk = heap_chunks.front();\n+                std::pop_heap(heap_chunks.begin(), heap_chunks.end(), cmp);\n+                heap_chunks.pop_back();\n+\n+                accum_size += best_chunk.first->size;\n+                accum_fee += best_chunk.first->fee;\n+\n+                UniValue o(UniValue::VOBJ);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399244164",
      "id" : 1399244164,
      "line" : 490,
      "node_id" : "PRRC_kwDOABII585TZsWE",
      "original_commit_id" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1",
      "original_line" : 471,
      "original_position" : 164,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 195,
      "pull_request_review_id" : 1739885361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399244164/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T13:59:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399244164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399246551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399246551"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1 : Could this use `CompareMiningScore` or does it have a different goal?",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T14:00:41Z",
      "diff_hunk" : "@@ -377,6 +427,63 @@ UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose, bool include_mempoo\n     }\n }\n \n+static RPCHelpMan getmempoolfeesize()\n+{\n+    return RPCHelpMan{\"getmempoolfeesize\",\n+        \"Returns fee/size data for the whole mempool.\",\n+        {},\n+        {},\n+        RPCExamples{\n+            HelpExampleCli(\"getmempoolfeesize\", \"\")\n+            + HelpExampleRpc(\"getmempoolfeesize\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+            LOCK(mempool.cs);\n+\n+            UniValue result(UniValue::VARR);\n+\n+            // TODO: refactor so that we're not just copying this from the miner.\n+            std::vector<Cluster::HeapEntry> heap_chunks;\n+            // Initialize the heap with the best entry from each cluster\n+            for (const auto & [id, cluster] : mempool.m_cluster_map) {\n+                if (!cluster->m_chunks.empty()) {\n+                    heap_chunks.emplace_back(cluster->m_chunks.begin(), cluster.get());\n+                }\n+            }\n+            // Define comparison operator on our heap entries (using feerate of chunks).\n+            auto cmp = [](const Cluster::HeapEntry& a, const Cluster::HeapEntry& b) {\n+                return a.first->fee*b.first->size < b.first->fee*a.first->size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399246551",
      "id" : 1399246551,
      "line" : 476,
      "node_id" : "PRRC_kwDOABII585TZs7X",
      "original_commit_id" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1",
      "original_line" : 457,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 181,
      "pull_request_review_id" : 1739889097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399246551/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T14:00:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399246551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399253500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399253500"
         }
      },
      "author_association" : "MEMBER",
      "body" : "bf467f8286425b692a1736ab6d417d0ba6074658 Maybe make this rule 7. That seems a bit more clear than saying \"previously this rule referred to fee rate\"",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T14:06:13Z",
      "diff_hunk" : "@@ -53,12 +46,10 @@ other consensus and policy rules, each of the following conditions are met:\n    significant portions of the node's mempool using replacements with multiple directly conflicting\n    transactions, each with large descendant sets.\n \n-6. The replacement transaction's feerate is greater than the feerates of all directly conflicting\n+5. The replacement transaction's mining score is greater than the mining score of all directly conflicting",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399253500",
      "id" : 1399253500,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII585TZun8",
      "original_commit_id" : "bf467f8286425b692a1736ab6d417d0ba6074658",
      "original_line" : 49,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "doc/policy/mempool-replacements.md",
      "position" : 39,
      "pull_request_review_id" : 1739900168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399253500/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T14:06:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399253500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399257380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399257380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "bf467f8286425b692a1736ab6d417d0ba6074658: \"a higher feerate or (using clusters) mining score\"\r\n\r\nIs the \"Additionally\" reasoning still valid?",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T14:09:35Z",
      "diff_hunk" : "@@ -18,14 +18,7 @@ other consensus and policy rules, each of the following conditions are met:\n    Use the (`-mempoolfullrbf`) configuration option to allow transaction replacement without enforcement of the\n    opt-in signaling rule.\n \n-2. The replacement transaction only include an unconfirmed input if that input was included in\n-   one of the directly conflicting transactions. An unconfirmed input spends an output from a\n-   currently-unconfirmed transaction.\n-\n-   *Rationale*: When RBF was originally implemented, the mempool did not keep track of\n-   ancestor feerates yet. This rule was suggested as a temporary restriction.\n-\n-3. The replacement transaction pays an absolute fee of at least the sum paid by the original\n+2. The replacement transaction pays an absolute fee of at least the sum paid by the original\n    transactions.\n \n    *Rationale*: Only requiring the replacement transaction to have a higher feerate could allow an",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399257380",
      "id" : 1399257380,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII585TZvkk",
      "original_commit_id" : "bf467f8286425b692a1736ab6d417d0ba6074658",
      "original_line" : 24,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "doc/policy/mempool-replacements.md",
      "position" : 15,
      "pull_request_review_id" : 1739906712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399257380/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T14:10:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399257380",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399277318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399277318"
         }
      },
      "author_association" : "MEMBER",
      "body" : "bf467f8286425b692a1736ab6d417d0ba6074658: history can be expanded:\r\n\r\n```md\r\n  * Cluster mempool introduced, dropping rule 2 and introducing rule 7.\r\n    As of **v27.0** ([PR 28676](https://github.com/bitcoin/bitcoin/pull/28676)).\r\n```",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T14:24:01Z",
      "diff_hunk" : "@@ -53,12 +46,10 @@ other consensus and policy rules, each of the following conditions are met:\n    significant portions of the node's mempool using replacements with multiple directly conflicting\n    transactions, each with large descendant sets.\n \n-6. The replacement transaction's feerate is greater than the feerates of all directly conflicting\n+5. The replacement transaction's mining score is greater than the mining score of all directly conflicting\n    transactions.\n \n-   *Rationale*: This rule was originally intended to ensure that the replacement transaction is\n-   preferable for block-inclusion, compared to what would be removed from the mempool. This rule\n-   predates ancestor feerate-based transaction selection.\n+   *Rationale*: Ensure that the new transaction is more appealing to mine than those being evicted.\n \n This set of rules is similar but distinct from BIP125.\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399277318",
      "id" : 1399277318,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585TZ0cG",
      "original_commit_id" : "bf467f8286425b692a1736ab6d417d0ba6074658",
      "original_line" : 55,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "doc/policy/mempool-replacements.md",
      "position" : 48,
      "pull_request_review_id" : 1739940128,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399277318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T14:24:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399277318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399281690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399281690"
         }
      },
      "author_association" : "MEMBER",
      "body" : "bf467f8286425b692a1736ab6d417d0ba6074658: `; new chunk feerate %s <= old chunk feerate`",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T14:27:08Z",
      "diff_hunk" : "@@ -139,11 +107,11 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& i\n         // as that would lower the feerate of the next block. Requiring that the feerate always be\n         // increased is also an easy-to-reason about way to prevent DoS attacks via replacements.\n         //\n-        // We only consider the feerates of transactions being directly replaced, not their indirect\n-        // descendants. While that does mean high feerate children are ignored when deciding whether\n-        // or not to replace, we do require the replacement to pay more overall fees too, mitigating\n-        // most cases.\n-        CFeeRate original_feerate(mi->GetModifiedFee(), mi->GetTxSize());\n+        // We only need to consider the chunk feerates of transactions being\n+        // directly replaced, because descendant transactions which pay for the\n+        // parent will be reflected in the parent's chunk feerate.\n+        Cluster::Chunk &chunk = mi->m_cluster->m_chunks[mi->m_loc.first];\n+        CFeeRate original_feerate(chunk.fee, chunk.size);\n         if (replacement_feerate <= original_feerate) {\n             return strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399281690",
      "id" : 1399281690,
      "line" : 116,
      "node_id" : "PRRC_kwDOABII585TZ1ga",
      "original_commit_id" : "bf467f8286425b692a1736ab6d417d0ba6074658",
      "original_line" : 116,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 98,
      "pull_request_review_id" : 1739947219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399281690/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T14:27:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399281690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I was wondering if we can drop RBF rule 5 (in a followup), but I'm guessing not really. My initial thinking was the cluster limit could be used instead. But `CalculateMiningScoreOfReplacementTx` only checks that the _new_ cluster doesn't get too big.\r\n\r\nBut does the new cluster system make it less of a burden to have large numbers of transactions appear and disappear from the mempool?\r\n\r\nâ\r\n\r\nI'm also trying to understand if dropping the [CPFP carveout](https://bitcoinops.org/en/topics/cpfp-carve-out/) is fine. The original scenario described on the [mailistlist](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html):\r\n\r\n\r\n```\r\nTX_important\r\n  * output Alice <- child_a_1 <- child_a_2 <- â¦ -< child_a_25\r\n                   (^ intentionally low fees so it doesn't confirm before timeout)\r\n  * output Bob: child_b_1\r\n                ^ high fee\r\n```\r\n  \r\nThe carveout rule allows Bob's `child_b_1`, despite Alice having used up the 25 ancestor limit for TX_important. And alice can't use the carveout to just add child_a_26, because child_26 has more than one unconfirmed ancestor.\r\n\r\nSo what happens in the cluster world?\r\n\r\nFor simplicity, let's set `-limitclustercount` to 26 (the default is 100 in this PR). Without the CPFP carveout, can Bob still insert `child_b_1`?\r\n\r\nMy understanding is that he can't, because `ClusterSizeChecks` will fail.\r\n\r\nInstead of failing, can we check if it's possible to evict the lowest value chunk? Though it introduces an implicit RBF-like mechanismâ¦ If it were possible, then `child_a_25` would be evicted from the cluster as long as it has a longer fee rate than `child_b_1`.\r\n\r\nAlice might make sure that the fee rates of `child_a_1` â¦ `child_a_25` increase such that there's only one chunk. That just requires Bob to use a higher fee rate.",
      "created_at" : "2023-11-20T15:00:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1819230080",
      "id" : 1819230080,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585sbz-A",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819230080/reactions"
      },
      "updated_at" : "2023-11-20T15:44:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819230080",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399422341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399422341"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you clarify what `txs`, `orig_txs` and `cluster` are for, and what the general strategy is here?",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T16:04:07Z",
      "diff_hunk" : "@@ -1245,3 +1648,251 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+CTxMemPoolEntry::CTxMemPoolEntryRef Cluster::GetLastTransaction()\n+{\n+    assert(m_tx_count > 0);\n+    for (auto chunkit = m_chunks.rbegin(); chunkit != m_chunks.rend(); ++chunkit) {\n+        if (!chunkit->txs.empty()) return chunkit->txs.back();\n+    }\n+    // Unreachable\n+    assert(false);\n+}\n+\n+void Cluster::AddTransaction(const CTxMemPoolEntry& entry, bool sort)\n+{\n+    m_chunks.emplace_back(entry.GetModifiedFee(), entry.GetTxSize());\n+    m_chunks.back().txs.emplace_back(entry);\n+    entry.m_cluster = this;\n+    ++m_tx_count;\n+    m_tx_size += entry.GetTxSize();\n+    if (sort) Sort();\n+    return;\n+}\n+\n+void Cluster::RemoveTransaction(const CTxMemPoolEntry& entry)\n+{\n+    m_chunks[entry.m_loc.first].txs.erase(entry.m_loc.second);\n+\n+    // Chunk (or cluster) may now be empty, but this will get cleaned up\n+    // when the cluster is re-sorted (or when the cluster is deleted) Note:\n+    // if we cleaned up empty chunks here, then this would break the\n+    // locations of other entries in the cluster. Since we would like to be\n+    // able to do multiple removals in a row and then clean up the sort, we\n+    // can't clean up empty chunks here.\n+    --m_tx_count;\n+    m_tx_size -= entry.GetTxSize();\n+    return;\n+}\n+\n+void Cluster::RechunkFromLinearization(std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& txs, bool reassign_locations)\n+{\n+    m_chunks.clear();\n+    m_tx_size = 0;\n+\n+    for (auto txentry : txs) {\n+        m_chunks.emplace_back(txentry.get().GetModifiedFee(), txentry.get().GetTxSize());\n+        m_chunks.back().txs.emplace_back(txentry);\n+        while (m_chunks.size() >= 2) {\n+            auto cur_iter = std::prev(m_chunks.end());\n+            auto prev_iter = std::prev(cur_iter);\n+            double feerate_prev = prev_iter->fee*cur_iter->size;\n+            double feerate_cur = cur_iter->fee*prev_iter->size;\n+            // We only combine chunks if the feerate would go up; if two\n+            // chunks have equal feerate, we prefer to keep the smaller\n+            // chunksize (which is generally better for both mining and\n+            // eviction).\n+            if (feerate_cur > feerate_prev) {\n+                prev_iter->fee += cur_iter->fee;\n+                prev_iter->size += cur_iter->size;\n+                prev_iter->txs.splice(prev_iter->txs.end(), cur_iter->txs, cur_iter->txs.begin(), cur_iter->txs.end());\n+                m_chunks.erase(cur_iter);\n+            } else {\n+                break;\n+            }\n+        }\n+        m_tx_size += txentry.get().GetTxSize();\n+    }\n+\n+    if (reassign_locations) {\n+        // Update locations of all transactions\n+        for (size_t i=0; i<m_chunks.size(); ++i) {\n+            for (auto it = m_chunks[i].txs.begin(); it != m_chunks[i].txs.end(); ++it) {\n+                it->get().m_loc = {i, it};\n+            }\n+        }\n+    }\n+}\n+\n+namespace {\n+\n+template <typename SetType>\n+std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> InvokeSort(size_t tx_count, const std::vector<Cluster::Chunk>& chunks)\n+{\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> txs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399422341",
      "id" : 1399422341,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII585TaX2F",
      "original_commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "original_line" : 1732,
      "original_position" : 1667,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1667,
      "pull_request_review_id" : 1740177374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399422341/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T16:04:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399422341",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't think a detailed line-by-line code review at this stage is a good use of your time.\r\n\r\nThat's not what I'm trying to do. I strategically / haphazardly picked a dozen lines to ask questions about to get a better understanding of the whole thing. Based on IRC chat today, I'll wait now for the upcoming update.\r\n\r\nRelevant IRC log: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-11-20#984780;",
      "created_at" : "2023-11-20T17:16:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1819490214",
      "id" : 1819490214,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585sczem",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819490214/reactions"
      },
      "updated_at" : "2023-11-20T17:20:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819490214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399521672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399521672"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The math school memories are coming back :-)",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-11-20T17:22:14Z",
      "diff_hunk" : "@@ -1245,3 +1536,169 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+void Cluster::AddTransaction(const CTxMemPoolEntry& entry, bool sort)\n+{\n+    m_chunks.emplace_back(entry.GetModifiedFee(), entry.GetTxSize());\n+    m_chunks.back().txs.emplace_back(entry);\n+    entry.m_cluster = this;\n+    ++m_tx_count;\n+    if (sort) Sort();\n+    return;\n+}\n+\n+void Cluster::RemoveTransaction(const CTxMemPoolEntry& entry)\n+{\n+    m_chunks[entry.m_loc.first].txs.erase(entry.m_loc.second);\n+\n+    // Chunk (or cluster) may now be empty, but this will get cleaned up\n+    // when the cluster is re-sorted (or when the cluster is deleted) Note:\n+    // if we cleaned up empty chunks here, then this would break the\n+    // locations of other entries in the cluster. Since we would like to be\n+    // able to do multiple removals in a row and then clean up the sort, we\n+    // can't clean up empty chunks here.\n+    --m_tx_count;\n+    return;\n+}\n+\n+void Cluster::RechunkFromLinearization(std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& txs, bool reassign_locations)\n+{\n+    m_chunks.clear();\n+\n+    for (auto txentry : txs) {\n+        m_chunks.emplace_back(txentry.get().GetModifiedFee(), txentry.get().GetTxSize());\n+        m_chunks.back().txs.emplace_back(txentry);\n+        while (m_chunks.size() >= 2) {\n+            auto cur_iter = std::prev(m_chunks.end());\n+            auto prev_iter = std::prev(cur_iter);\n+            double feerate_prev = prev_iter->fee*cur_iter->size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1399521672",
      "id" : 1399521672,
      "in_reply_to_id" : 1392646700,
      "line" : 1699,
      "node_id" : "PRRC_kwDOABII585TawGI",
      "original_commit_id" : "54f39ca8f101483f5f82707689ca49431d4091e5",
      "original_line" : 1574,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1634,
      "pull_request_review_id" : 1740335905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399521672/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-20T17:22:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399521672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419287189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419287189"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure the best way to document things, but I added a to-do item to the OP so that we don't lose track of figuring out how we want the docs to look. (Will have to conform all the code comments as well.) ",
      "commit_id" : "72f240b8ebf80fd15e4dea20f7cc41099273d4bd",
      "created_at" : "2023-12-07T16:52:48Z",
      "diff_hunk" : "@@ -18,14 +18,7 @@ other consensus and policy rules, each of the following conditions are met:\n    Use the (`-mempoolfullrbf`) configuration option to allow transaction replacement without enforcement of the\n    opt-in signaling rule.\n \n-2. The replacement transaction only include an unconfirmed input if that input was included in\n-   one of the directly conflicting transactions. An unconfirmed input spends an output from a\n-   currently-unconfirmed transaction.\n-\n-   *Rationale*: When RBF was originally implemented, the mempool did not keep track of\n-   ancestor feerates yet. This rule was suggested as a temporary restriction.\n-\n-3. The replacement transaction pays an absolute fee of at least the sum paid by the original",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419287189",
      "id" : 1419287189,
      "in_reply_to_id" : 1364398135,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII585UmJqV",
      "original_commit_id" : "b0f771bb559f38ea16a8f4d13110e2247ac080b9",
      "original_line" : 28,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "doc/policy/mempool-replacements.md",
      "position" : 11,
      "pull_request_review_id" : 1770623709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419287189/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-07T16:52:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419287189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419291403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419291403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Chunks for a given cluster are already sorted in descending feerate (ie mining score) order, is that what you're asking about or is there another issue I'm overlooking?",
      "commit_id" : "72f240b8ebf80fd15e4dea20f7cc41099273d4bd",
      "created_at" : "2023-12-07T16:55:18Z",
      "diff_hunk" : "@@ -249,34 +249,81 @@ static RPCHelpMan testmempoolaccept()\n     };\n }\n \n+static std::vector<RPCResult> ClusterDescription()\n+{\n+    return {\n+        RPCResult{RPCResult::Type::NUM, \"vsize\", \"virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\"},\n+        RPCResult{RPCResult::Type::NUM, \"txcount\", \"number of transactions (including this one)\"},\n+        RPCResult{RPCResult::Type::NUM, \"clusterid\", \"id of the cluster containing this tx\"},\n+        RPCResult{RPCResult::Type::ARR, \"chunks\", \"the cluster's chunks\",\n+            {RPCResult{RPCResult::Type::OBJ, \"chunkentry\", \"\",\n+                {\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"fee\", \"fee of this chunk\"},\n+                    RPCResult{RPCResult::Type::NUM, \"vsize\", \"virtual size of this chunk\"},\n+                    RPCResult{RPCResult::Type::NUM, \"feerate\", \"fee rate in \" + CURRENCY_UNIT + \"/kvB\"},\n+                    RPCResult{RPCResult::Type::ARR, \"txids\", \"txids in this chunk in sorted order\",\n+                        {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"the transaction id\"}}}\n+                }}\n+            }\n+        }\n+    };\n+}\n+\n static std::vector<RPCResult> MempoolEntryDescription()\n {\n     return {\n         RPCResult{RPCResult::Type::NUM, \"vsize\", \"virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\"},\n-        RPCResult{RPCResult::Type::NUM, \"weight\", \"transaction weight as defined in BIP 141.\"},\n-        RPCResult{RPCResult::Type::NUM_TIME, \"time\", \"local time transaction entered pool in seconds since 1 Jan 1970 GMT\"},\n-        RPCResult{RPCResult::Type::NUM, \"height\", \"block height when transaction entered pool\"},\n-        RPCResult{RPCResult::Type::NUM, \"descendantcount\", \"number of in-mempool descendant transactions (including this one)\"},\n-        RPCResult{RPCResult::Type::NUM, \"descendantsize\", \"virtual transaction size of in-mempool descendants (including this one)\"},\n-        RPCResult{RPCResult::Type::NUM, \"ancestorcount\", \"number of in-mempool ancestor transactions (including this one)\"},\n-        RPCResult{RPCResult::Type::NUM, \"ancestorsize\", \"virtual transaction size of in-mempool ancestors (including this one)\"},\n-        RPCResult{RPCResult::Type::STR_HEX, \"wtxid\", \"hash of serialized transaction, including witness data\"},\n-        RPCResult{RPCResult::Type::OBJ, \"fees\", \"\",\n-            {\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee, denominated in \" + CURRENCY_UNIT},\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"modified\", \"transaction fee with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"ancestor\", \"transaction fees of in-mempool ancestors (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n-                RPCResult{RPCResult::Type::STR_AMOUNT, \"descendant\", \"transaction fees of in-mempool descendants (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n-            }},\n-        RPCResult{RPCResult::Type::ARR, \"depends\", \"unconfirmed transactions used as inputs for this transaction\",\n-            {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"parent transaction id\"}}},\n-        RPCResult{RPCResult::Type::ARR, \"spentby\", \"unconfirmed transactions spending outputs from this transaction\",\n-            {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"child transaction id\"}}},\n-        RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction signals BIP125 replaceability or has an unconfirmed ancestor signaling BIP125 replaceability.\\n\"},\n-        RPCResult{RPCResult::Type::BOOL, \"unbroadcast\", \"Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\"},\n+            RPCResult{RPCResult::Type::NUM, \"weight\", \"transaction weight as defined in BIP 141.\"},\n+            RPCResult{RPCResult::Type::NUM_TIME, \"time\", \"local time transaction entered pool in seconds since 1 Jan 1970 GMT\"},\n+            RPCResult{RPCResult::Type::NUM, \"height\", \"block height when transaction entered pool\"},\n+            RPCResult{RPCResult::Type::NUM, \"descendantcount\", \"number of in-mempool descendant transactions (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"descendantsize\", \"virtual transaction size of in-mempool descendants (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"ancestorcount\", \"number of in-mempool ancestor transactions (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"ancestorsize\", \"virtual transaction size of in-mempool ancestors (including this one)\"},\n+            RPCResult{RPCResult::Type::NUM, \"chunksize\", \"virtual transaction size of this transaction's chunk\"},\n+            RPCResult{RPCResult::Type::NUM, \"clusterid\", \"id of the cluster containing this tx\"},\n+            RPCResult{RPCResult::Type::STR_HEX, \"wtxid\", \"hash of serialized transaction, including witness data\"},\n+            RPCResult{RPCResult::Type::OBJ, \"fees\", \"\",\n+                {\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"modified\", \"transaction fee with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"ancestor\", \"transaction fees of in-mempool ancestors (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"descendant\", \"transaction fees of in-mempool descendants (including this one) with fee deltas used for mining priority, denominated in \" + CURRENCY_UNIT},\n+                    RPCResult{RPCResult::Type::STR_AMOUNT, \"chunk\", \"transaction fees of chunk, denominated in \" + CURRENCY_UNIT},\n+                }},\n+            RPCResult{RPCResult::Type::ARR, \"depends\", \"unconfirmed transactions used as inputs for this transaction\",\n+                {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"parent transaction id\"}}},\n+            RPCResult{RPCResult::Type::ARR, \"spentby\", \"unconfirmed transactions spending outputs from this transaction\",\n+                {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"child transaction id\"}}},\n+            RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction signals BIP125 replaceability or has an unconfirmed ancestor signaling BIP125 replaceability.\\n\"},\n+            RPCResult{RPCResult::Type::BOOL, \"unbroadcast\", \"Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\"},\n     };\n }\n \n+static void clusterToJSON(const CTxMemPool& pool, UniValue& info, const Cluster& c) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n+{\n+    AssertLockHeld(pool.cs);\n+    info.pushKV(\"vsize\", (int)c.m_tx_size);\n+    info.pushKV(\"txcount\", (int)c.m_tx_count);\n+    info.pushKV(\"clusterid\", (int)c.m_id);\n+    UniValue chunks(UniValue::VARR);\n+    for (auto &chunk : c.m_chunks) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419291403",
      "id" : 1419291403,
      "in_reply_to_id" : 1399223399,
      "line" : 311,
      "node_id" : "PRRC_kwDOABII585UmKsL",
      "original_commit_id" : "0b284b5fd29c06d46c1ec60ea7e1bcd07f36feb1",
      "original_line" : 311,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 83,
      "pull_request_review_id" : 1770628066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419291403/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-07T16:55:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419291403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419299493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419299493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe I (finally) actually fixed this behavior to count the number of direct conflicts.  ",
      "commit_id" : "72f240b8ebf80fd15e4dea20f7cc41099273d4bd",
      "created_at" : "2023-12-07T17:00:39Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419299493",
      "id" : 1419299493,
      "in_reply_to_id" : 1365753481,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UmMql",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : null,
      "pull_request_review_id" : 1770638034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419299493/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-07T17:00:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419299493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419303051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419303051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be fixed now.",
      "commit_id" : "72f240b8ebf80fd15e4dea20f7cc41099273d4bd",
      "created_at" : "2023-12-07T17:03:28Z",
      "diff_hunk" : "@@ -1135,29 +1457,67 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n+\n+    // Use a heap to determine which chunks to evict, but only make the heap if\n+    // we're actually above the size limit.\n+    std::vector<Cluster::HeapEntry> heap_chunks;\n+    std::set<Cluster*> clusters_with_evictions;\n     while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n-        indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n+        if (heap_chunks.empty()) {\n+            for (const auto & [id, cluster] : m_cluster_map) {\n+                if (!cluster->m_chunks.empty()) {\n+                    heap_chunks.emplace_back(cluster->m_chunks.end()-1, cluster.get());\n+                }\n+            }\n+        }\n+\n+        // Define comparison operator on our heap entries (using feerate of chunks).\n+        auto cmp = [](const Cluster::HeapEntry& a, const Cluster::HeapEntry& b) {\n+            // TODO: branch on size of fee to do this as 32-bit calculation\n+            // instead? etc\n+            return a.first->fee*b.first->size > b.first->fee*a.first->size;\n+        };\n+\n+        std::make_heap(heap_chunks.begin(), heap_chunks.end(), cmp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1419303051",
      "id" : 1419303051,
      "in_reply_to_id" : 1367425942,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UmNiL",
      "original_commit_id" : "26e831d5f2c7db15e7a50f910ddf4e1737d226da",
      "original_line" : 1481,
      "original_position" : 1421,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1770643203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419303051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-07T17:03:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1419303051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1421668681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421668681"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I wouldn't say it's safe to ignore, but the idea is that we often want to be able to batch deletions, and then clean things up in one pass.  So the call sites should all be dealing with this issue and ensuring that we always clean up at some point.\r\n\r\n(This is definitely an area where I expect that we'll be re-engineering all this logic and trying to come up with a better abstraction layer so that this is more robust and easier to think about!)",
      "commit_id" : "4e00a94faa1616b962b5a98719155237a3bab9f5",
      "created_at" : "2023-12-10T01:33:24Z",
      "diff_hunk" : "@@ -1245,3 +1536,169 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+void Cluster::AddTransaction(const CTxMemPoolEntry& entry, bool sort)\n+{\n+    m_chunks.emplace_back(entry.GetModifiedFee(), entry.GetTxSize());\n+    m_chunks.back().txs.emplace_back(entry);\n+    entry.m_cluster = this;\n+    ++m_tx_count;\n+    if (sort) Sort();\n+    return;\n+}\n+\n+void Cluster::RemoveTransaction(const CTxMemPoolEntry& entry)\n+{\n+    m_chunks[entry.m_loc.first].txs.erase(entry.m_loc.second);\n+\n+    // Chunk (or cluster) may now be empty, but this will get cleaned up",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1421668681",
      "id" : 1421668681,
      "in_reply_to_id" : 1392567718,
      "line" : 1856,
      "node_id" : "PRRC_kwDOABII585UvPFJ",
      "original_commit_id" : "54f39ca8f101483f5f82707689ca49431d4091e5",
      "original_line" : 1856,
      "original_position" : 407,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 1777,
      "pull_request_review_id" : 1773954379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421668681/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-10T01:33:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421668681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-12-18T17:38:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1861155277",
      "id" : 1861155277,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585u7vnN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1861155277/reactions"
      },
      "updated_at" : "2023-12-18T17:38:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1861155277",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
