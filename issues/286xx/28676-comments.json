[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28676).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-10-18T18:59:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#issuecomment-1769143762",
      "id" : 1769143762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
      "node_id" : "IC_kwDOABII585pcv3S",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1769143762/reactions"
      },
      "updated_at" : "2023-10-18T18:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1769143762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1364398135"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1364398135"
         }
      },
      "author_association" : "MEMBER",
      "body" : "might be easier to just \"strike out\" this rule and mark it deprecated instead of changing numbers since that's become engineer lingo",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-18T19:11:00Z",
      "diff_hunk" : "@@ -18,14 +18,7 @@ other consensus and policy rules, each of the following conditions are met:\n    Use the (`-mempoolfullrbf`) configuration option to allow transaction replacement without enforcement of the\n    opt-in signaling rule.\n \n-2. The replacement transaction only include an unconfirmed input if that input was included in\n-   one of the directly conflicting transactions. An unconfirmed input spends an output from a\n-   currently-unconfirmed transaction.\n-\n-   *Rationale*: When RBF was originally implemented, the mempool did not keep track of\n-   ancestor feerates yet. This rule was suggested as a temporary restriction.\n-\n-3. The replacement transaction pays an absolute fee of at least the sum paid by the original",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1364398135",
      "id" : 1364398135,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII585RUxA3",
      "original_commit_id" : "b0f771bb559f38ea16a8f4d13110e2247ac080b9",
      "original_line" : 28,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "doc/policy/mempool-replacements.md",
      "position" : 11,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1364398135/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1364398135",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365716769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365716769"
         }
      },
      "author_association" : "MEMBER",
      "body" : "shouldn't this be 0?",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T15:13:12Z",
      "diff_hunk" : "@@ -684,6 +830,19 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"incrementalrelayfee\", ValueFromAmount(pool.m_incremental_relay_feerate.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n     ret.pushKV(\"fullrbf\", pool.m_full_rbf);\n+    ret.pushKV(\"numberofclusters\", pool.m_cluster_map.size());\n+    int64_t max_cluster_count = 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365716769",
      "id" : 1365716769,
      "line" : 847,
      "node_id" : "PRRC_kwDOABII585RZy8h",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 834,
      "original_position" : 283,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 296,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365716769/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365716769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365753481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365753481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note: this is sticking with the same rule#5 instead of number of effected clusters. It would be more ideal if it were number of clusters to allow for better usage of adversarial-ish batched CPFPs",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T15:40:30Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1365753481",
      "id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585RZ76J",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365753481/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1365753481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366095113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366095113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "the check two conditionals above:\r\n\r\n```\r\nif (!bypass_limits && ws.m_modified_fees < m_pool.m_min_relay_feerate.GetFee(ws.m_vsize))\r\n```\r\n\r\nThis is still needed for the same reason as before: transaction that is above minrelay, but would be in a chunk below minrelay. We could immediately evict below minrelay chunks post-re-linearization f.e. which would allow 0-fee parents then relax this maybe.\r\n\r\n",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T20:48:36Z",
      "diff_hunk" : "@@ -876,75 +880,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     ws.m_iters_conflicting = m_pool.GetIterSet(ws.m_conflicts);\n \n-    // Note that these modifications are only applicable to single transaction scenarios;\n-    // carve-outs and package RBF are disabled for multi-transaction evaluations.\n-    CTxMemPool::Limits maybe_rbf_limits = m_pool.m_limits;\n-\n-    // Calculate in-mempool ancestors, up to a limit.\n-    if (ws.m_conflicts.size() == 1) {\n-        // In general, when we receive an RBF transaction with mempool conflicts, we want to know whether we\n-        // would meet the chain limits after the conflicts have been removed. However, there isn't a practical\n-        // way to do this short of calculating the ancestor and descendant sets with an overlay cache of\n-        // changed mempool entries. Due to both implementation and runtime complexity concerns, this isn't\n-        // very realistic, thus we only ensure a limited set of transactions are RBF'able despite mempool\n-        // conflicts here. Importantly, we need to ensure that some transactions which were accepted using\n-        // the below carve-out are able to be RBF'ed, without impacting the security the carve-out provides\n-        // for off-chain contract systems (see link in the comment below).\n-        //\n-        // Specifically, the subset of RBF transactions which we allow despite chain limits are those which\n-        // conflict directly with exactly one other transaction (but may evict children of said transaction),\n-        // and which are not adding any new mempool dependencies. Note that the \"no new mempool dependencies\"\n-        // check is accomplished later, so we don't bother doing anything about it here, but if our\n-        // policy changes, we may need to move that check to here instead of removing it wholesale.\n-        //\n-        // Such transactions are clearly not merging any existing packages, so we are only concerned with\n-        // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n-        // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n-        // to.\n-        //\n-        // To check these we first check if we meet the RBF criteria, above, and increment the descendant\n-        // limits by the direct conflict and its descendants (as these are recalculated in\n-        // CalculateMempoolAncestors by assuming the new transaction being added is a new descendant, with no\n-        // removals, of each parent's existing dependent set). The ancestor count limits are unmodified (as\n-        // the ancestor limits should be the same for both our new transaction and any conflicts).\n-        // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes\n-        // into force here (as we're only adding a single transaction).\n-        assert(ws.m_iters_conflicting.size() == 1);\n-        CTxMemPool::txiter conflict = *ws.m_iters_conflicting.begin();\n-\n-        maybe_rbf_limits.descendant_count += 1;\n-        maybe_rbf_limits.descendant_size_vbytes += conflict->GetSizeWithDescendants();\n-    }\n-\n-    auto ancestors{m_pool.CalculateMemPoolAncestors(*entry, maybe_rbf_limits)};\n-    if (!ancestors) {\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        // Contracting/payment channels CPFP carve-out:\n-        // If the new transaction is relatively small (up to 40k weight)\n-        // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n-        //\n-        // This allows protocols which rely on distrusting counterparties\n-        // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n-        // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        CTxMemPool::Limits cpfp_carve_out_limits{\n-            .ancestor_count = 2,\n-            .ancestor_size_vbytes = maybe_rbf_limits.ancestor_size_vbytes,\n-            .descendant_count = maybe_rbf_limits.descendant_count + 1,\n-            .descendant_size_vbytes = maybe_rbf_limits.descendant_size_vbytes + EXTRA_DESCENDANT_TX_SIZE_LIMIT,\n-        };\n-        const auto error_message{util::ErrorString(ancestors).original};\n-        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", error_message);\n-        }\n-        ancestors = m_pool.CalculateMemPoolAncestors(*entry, cpfp_carve_out_limits);\n-        if (!ancestors) return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", error_message);\n-    }\n-\n-    ws.m_ancestors = *ancestors;\n+    // Calculate in-mempool ancestors",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366095113",
      "id" : 1366095113,
      "line" : 883,
      "node_id" : "PRRC_kwDOABII585RbPUJ",
      "original_commit_id" : "c5d3c42da466feca9192d0e389654ba55caec5a6",
      "original_line" : 883,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 84,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366095113/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366095113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366105725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366105725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "numbers in comments are off\r\n\r\nshower thought: Should we/can we bound the number of clusters in addition to total memory in TrimToSize? I can't think of a good way to do that that doesn't complicate things quite a bit, and perhaps practical mempool sizes make this moot. Just something to consider in case I missed something obvious.",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-19T21:01:05Z",
      "diff_hunk" : "@@ -83,26 +86,104 @@ static std::vector<CTransactionRef> CreateOrderedCoins(FastRandomContext& det_ra\n     return ordered_coins;\n }\n \n+static void MemPoolAddTransactions(benchmark::Bench& bench)\n+{\n+    FastRandomContext det_rand{true};\n+    int childTxs = 90;\n+    if (bench.complexityN() > 1) {\n+        childTxs = static_cast<int>(bench.complexityN());\n+    }\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(ChainType::MAIN);\n+    CTxMemPool& pool = *testing_setup.get()->m_node.mempool;\n+\n+    std::vector<CTransactionRef> transactions;\n+    // Create 1000 clusters of 100 transactions each",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1366105725",
      "id" : 1366105725,
      "line" : 100,
      "node_id" : "PRRC_kwDOABII585RbR59",
      "original_commit_id" : "c5d3c42da466feca9192d0e389654ba55caec5a6",
      "original_line" : 100,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/bench/mempool_stress.cpp",
      "position" : 54,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366105725/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366105725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367425942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367425942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You probably didn't mean to call make_heap in the loop for 3N work each time. fwiw I don't see any performance difference between `push_heap`ing all the elements on vs one `make_heap`.\r\n\r\nonce this is changed, add+trimming seems to be faster than in master regardless of topology tested",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-20T19:39:27Z",
      "diff_hunk" : "@@ -1135,29 +1457,67 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n+\n+    // Use a heap to determine which chunks to evict, but only make the heap if\n+    // we're actually above the size limit.\n+    std::vector<Cluster::HeapEntry> heap_chunks;\n+    std::set<Cluster*> clusters_with_evictions;\n     while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n-        indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n+        if (heap_chunks.empty()) {\n+            for (const auto & [id, cluster] : m_cluster_map) {\n+                if (!cluster->m_chunks.empty()) {\n+                    heap_chunks.emplace_back(cluster->m_chunks.end()-1, cluster.get());\n+                }\n+            }\n+        }\n+\n+        // Define comparison operator on our heap entries (using feerate of chunks).\n+        auto cmp = [](const Cluster::HeapEntry& a, const Cluster::HeapEntry& b) {\n+            // TODO: branch on size of fee to do this as 32-bit calculation\n+            // instead? etc\n+            return a.first->fee*b.first->size > b.first->fee*a.first->size;\n+        };\n+\n+        std::make_heap(heap_chunks.begin(), heap_chunks.end(), cmp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367425942",
      "id" : 1367425942,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RgUOW",
      "original_commit_id" : "26e831d5f2c7db15e7a50f910ddf4e1737d226da",
      "original_line" : 1481,
      "original_position" : 1421,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367425942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367425942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367430770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367430770"
         }
      },
      "author_association" : "MEMBER",
      "body" : "don't ask why but I'm getting significant performance improvement(>10%) just `push_heap`ing everything from scratch, and similarly with priority_queue",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-20T19:46:25Z",
      "diff_hunk" : "@@ -210,183 +194,84 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::list<CTxMemPoolEntry::CTxMemPoolEntryRef>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx.get().GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter);\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     bool fPrintPriority = gArgs.GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     if (fPrintPriority) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n }\n \n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n+void BlockAssembler::addChunks(const CTxMemPool& mempool)\n {\n     AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n-    }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n-}\n-\n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(const CTxMemPool& mempool, int& nPackagesSelected, int& nDescendantsUpdated)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    CTxMemPool::setEntries failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it)) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n-\n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n+    std::vector<Cluster::HeapEntry> heap_chunks;\n+    // Initialize the heap with the best entry from each cluster\n+    for (const auto & [id, cluster] : mempool.m_cluster_map) {\n+        if (!cluster->m_chunks.empty()) {\n+            heap_chunks.emplace_back(cluster->m_chunks.begin(), cluster.get());\n         }\n-\n-        if (packageFees < m_options.blockMinFeeRate.GetFee(packageSize)) {\n-            // Everything else we might consider has a lower fee rate\n+    }\n+    // Define comparison operator on our heap entries (using feerate of chunks).\n+    auto cmp = [](const Cluster::HeapEntry& a, const Cluster::HeapEntry& b) {\n+        // TODO: branch on size of fee to do this as 32-bit calculation\n+        // instead? etc\n+        return a.first->fee*b.first->size < b.first->fee*a.first->size;\n+    };\n+    // TODO: replace the heap with a priority queue\n+    std::make_heap(heap_chunks.begin(), heap_chunks.end(), cmp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1367430770",
      "id" : 1367430770,
      "line" : 248,
      "node_id" : "PRRC_kwDOABII585RgVZy",
      "original_commit_id" : "26e831d5f2c7db15e7a50f910ddf4e1737d226da",
      "original_line" : 248,
      "original_position" : 244,
      "original_start_line" : null,
      "path" : "src/node/miner.cpp",
      "position" : 244,
      "pull_request_review_id" : 1685916441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367430770/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T18:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367430770",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1370716238"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370716238"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The immediate downside to a cap on number of clusters is that singleton, high-feerate transactions would not be accepted.  And I don't think we need to -- the only places where having more clusters makes us slower is in eviction and mining, and for both of those use cases we could improve performance (if we need to) by maintaining the relevant heap data structures (or something equivalent) as chunks are modified, rather than all at once. \r\n\r\nFor now in this branch I've created these from scratch each time, but if it turns out that performance is meaningfully impacted when the mempool is busy, then I can optimize this further by just using a bit more memory.",
      "commit_id" : "e523b1df611ea477330c8b60ee842b63e653295b",
      "created_at" : "2023-10-24T19:24:39Z",
      "diff_hunk" : "@@ -83,26 +86,104 @@ static std::vector<CTransactionRef> CreateOrderedCoins(FastRandomContext& det_ra\n     return ordered_coins;\n }\n \n+static void MemPoolAddTransactions(benchmark::Bench& bench)\n+{\n+    FastRandomContext det_rand{true};\n+    int childTxs = 90;\n+    if (bench.complexityN() > 1) {\n+        childTxs = static_cast<int>(bench.complexityN());\n+    }\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(ChainType::MAIN);\n+    CTxMemPool& pool = *testing_setup.get()->m_node.mempool;\n+\n+    std::vector<CTransactionRef> transactions;\n+    // Create 1000 clusters of 100 transactions each",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1370716238",
      "id" : 1370716238,
      "in_reply_to_id" : 1366105725,
      "line" : 100,
      "node_id" : "PRRC_kwDOABII585Rs3hO",
      "original_commit_id" : "c5d3c42da466feca9192d0e389654ba55caec5a6",
      "original_line" : 100,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/bench/mempool_stress.cpp",
      "position" : 54,
      "pull_request_review_id" : 1695722724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370716238/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T19:24:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370716238",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371708009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371708009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There is room to relax this rule some, so if this is important we can do so. I think the requirement is a bound on the number of clusters that would have to be re-sorted in order to accept the new transaction.  We can approximate that as the number of clusters that would be non-empty as a result of removing all the conflicting transactions from the mempool, and only process replacements for which that is below some target.  \r\n\r\nThat would be a more complex logic though, so before implementing it I wanted to have some sense of whether we need to.  Has the historical 100-transaction-conflict limit been problematic for use cases in the past?  Note also that in the new code, we are calculating the number of conflicts exactly (the old code used an approximation, which could be gamed by an adversary).",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-10-25T12:48:09Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371708009",
      "id" : 1371708009,
      "in_reply_to_id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585Rwppp",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1697257034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371708009/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T12:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371708009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371803601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371803601"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~Ah! I wrote a huge response to this, then looked up our previous discussions, and realized I didn't actually read the code: https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1554708843~~\r\n\r\n~~IIUC now, this is only counting *direct* conflicts, and not the descendants that are booted.~~\r\n\r\n~~I think that's fine.~~\r\n\r\nActually no, the existing code comments were just misleading, looks like the issue still exists, see: https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1554708843",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-10-25T13:52:53Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371803601",
      "id" : 1371803601,
      "in_reply_to_id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585RxA_R",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1697415470,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371803601/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T13:59:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371803601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371813655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371813655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yes, in the new code I'm only counting direct conflicts right now, because every descendant of a direct conflict must be in the same cluster as that conflict.  So this is already a relaxation of the existing rule.",
      "commit_id" : "7fdcccd1338655328c28ff949d50442ace931a5e",
      "created_at" : "2023-10-25T13:59:21Z",
      "diff_hunk" : "@@ -60,57 +59,26 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n {\n     AssertLockHeld(pool.cs);\n     const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // Rule #5: don't consider replacing more than MAX_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n-        pool.CalculateDescendants(it, all_conflicts);\n-    }\n-    return std::nullopt;\n-}\n-\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& pool,\n-                                               const CTxMemPool::setEntries& iters_conflicting)\n-{\n-    AssertLockHeld(pool.cs);\n-    std::set<uint256> parents_of_conflicts;\n-    for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn& txin : mi->GetTx().vin) {\n-            parents_of_conflicts.insert(txin.prevout.hash);\n+        // Exit early if we're going to fail (see below)\n+        if (all_conflicts.size() > MAX_REPLACEMENT_CANDIDATES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28676#discussion_r1371813655",
      "id" : 1371813655,
      "in_reply_to_id" : 1365753481,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585RxDcX",
      "original_commit_id" : "3a42ba255a73e609ac37eee8288208fa43953779",
      "original_line" : 65,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 45,
      "pull_request_review_id" : 1697431678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371813655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T13:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371813655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   }
]
