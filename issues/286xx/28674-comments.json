[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28674).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1768665243), [kristapsk](https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1768748254), [theStack](https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1771737157) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21590](https://github.com/bitcoin/bitcoin/pull/21590) (Safegcd-based modular inverses in MuHash3072 by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-10-18T14:19:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1768568170",
      "id" : 1768568170,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585pajVq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1768568170/reactions"
      },
      "updated_at" : "2023-12-08T16:23:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1768568170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2023-10-18T15:05:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1768665243",
      "id" : 1768665243,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585pa7Cb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1768665243/reactions"
      },
      "updated_at" : "2023-10-18T15:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1768665243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-10-18T15:34:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1768748254",
      "id" : 1768748254,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585pbPTe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1768748254/reactions"
      },
      "updated_at" : "2023-10-18T15:34:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1768748254",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-10-19T21:33:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1771737157",
      "id" : 1771737157,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585pmpBF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1771737157/reactions"
      },
      "updated_at" : "2023-10-19T21:33:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1771737157",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-11-28T23:24:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1830917326",
      "id" : 1830917326,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585tIZTO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1830917326/reactions"
      },
      "updated_at" : "2023-11-28T23:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1830917326",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've been experimenting with benchmark comparisons between pulls and master on my test coverage tool corecheck (https://corecheck.dev/bitcoin/bitcoin/pulls/28674).\r\nIt seems that this pull request is negatively impacting a bunch of benchmarks:\r\n![image](https://github.com/bitcoin/bitcoin/assets/22493292/46a8d027-1ce3-448e-9dd7-9c615512331f)\r\n\r\nNote that the benchmarks are being run on ARM64 CPUs, but I tested locally on an x86 and the performance loss is roughly the same.",
      "created_at" : "2023-12-05T16:17:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841125275",
      "id" : 1841125275,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585tvVeb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841125275/reactions"
      },
      "updated_at" : "2023-12-05T16:17:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841125275",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cc @theuni we might not always be getting bswaps",
      "created_at" : "2023-12-05T17:25:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841276845",
      "id" : 1841276845,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585tv6et",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841276845/reactions"
      },
      "updated_at" : "2023-12-05T17:25:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841276845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@aureleoules Thanks for testing!\r\n\r\nI tested this by comparing the x86_64 asm output of a simple test file and confirmed that it compiled down to bswaps as necessary. I didn't do the same for other arches. Perhaps others are missing the critical optimizations? :(\r\n\r\nCould you say more about your compiler/flags? I would expect to see the nasty behavior you're seeing:\r\n- On old compilers\r\n- On non-bleeding-edge MSVC\r\n- Without optimizations.\r\n\r\nWould you mind pasting the flags use for compile? Without `-O2` or better, for example, I would expect these results.",
      "created_at" : "2023-12-05T17:59:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841329489",
      "id" : 1841329489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585twHVR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841329489/reactions"
      },
      "updated_at" : "2023-12-05T17:59:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841329489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'd presume it is https://github.com/corecheck/coverage-worker/blob/7d4767493be390399b54ea3cd8cafc2f068c19e2/entrypoint.sh#L58 (default flags `-O2` on Ubuntu Jammy)",
      "created_at" : "2023-12-05T18:28:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841373951",
      "id" : 1841373951,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585twSL_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841373951/reactions"
      },
      "updated_at" : "2023-12-05T18:28:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841373951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'd presume it is [corecheck/coverage-worker@7d47674/entrypoint.sh#L58](https://github.com/corecheck/coverage-worker/blob/7d4767493be390399b54ea3cd8cafc2f068c19e2/entrypoint.sh#L58) (default flags -O2 on Ubuntu Jammy)\r\n\r\nYes that is correct. Also the compiler installed is `g++-11`.",
      "created_at" : "2023-12-05T18:40:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841400148",
      "id" : 1841400148,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585twYlU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841400148/reactions"
      },
      "updated_at" : "2023-12-05T18:40:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841400148",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Here is the output of the configure script of the corecheck job if this helps:\r\n\r\n```\r\n1701686294337,checking for pkg-config... /usr/bin/pkg-config\r\n1701686294338,checking pkg-config is at least version 0.9.0... yes\r\n1701686294378,checking build system type... aarch64-unknown-linux-gnu\r\n1701686294379,checking host system type... aarch64-unknown-linux-gnu\r\n1701686294384,checking for a BSD-compatible install... /usr/bin/install -c\r\n1701686294387,checking whether build environment is sane... yes\r\n1701686294393,checking for a race-free mkdir -p... /usr/bin/mkdir -p\r\n1701686294393,checking for gawk... no\r\n1701686294393,checking for mawk... mawk\r\n1701686294398,checking whether make sets $(MAKE)... yes\r\n1701686294402,checking whether make supports nested variables... yes\r\n1701686294406,checking whether to enable maintainer-specific portions of Makefiles... yes\r\n1701686294406,checking whether make supports nested variables... (cached) yes\r\n1701686294406,checking for g++... g++\r\n1701686294456,checking whether the C++ compiler works... yes\r\n1701686294456,checking for C++ compiler default output file name... a.out\r\n1701686294490,checking for suffix of executables... \r\n1701686294529,checking whether we are cross compiling... no\r\n1701686294545,checking for suffix of object files... o\r\n1701686294558,checking whether the compiler supports GNU C++... yes\r\n1701686294573,checking whether g++ accepts -g... yes\r\n1701686294631,checking for g++ option to enable C++11 features... none needed\r\n1701686294636,checking whether make supports the include directive... yes (GNU style)\r\n1701686294660,checking dependency style of g++... gcc3\r\n1701686294749,checking whether g++ supports C++20 features with -std=c++20... yes\r\n1701686294771,checking whether the compiler supports GNU Objective C++... no\r\n1701686294795,checking whether g++ -std=c++20 accepts -g... no\r\n1701686294818,checking dependency style of g++ -std=c++20... gcc3\r\n1701686294820,checking how to print strings... printf\r\n1701686294820,checking for gcc... gcc\r\n1701686294854,checking whether the compiler supports GNU C... yes\r\n1701686294867,checking whether gcc accepts -g... yes\r\n1701686294912,checking for gcc option to enable C11 features... none needed\r\n1701686294938,checking whether gcc understands -c and -o together... yes\r\n1701686294961,checking dependency style of gcc... gcc3\r\n1701686294964,checking for a sed that does not truncate output... /usr/bin/sed\r\n1701686294966,checking for grep that handles long lines and -e... /usr/bin/grep\r\n1701686294967,checking for egrep... /usr/bin/grep -E\r\n1701686294968,checking for fgrep... /usr/bin/grep -F\r\n1701686294972,checking for ld used by gcc... /usr/bin/ld\r\n1701686294973,checking if the linker (/usr/bin/ld) is GNU ld... yes\r\n1701686294975,checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\n1701686294991,checking the name lister (/usr/bin/nm -B) interface... BSD nm\r\n1701686294991,checking whether ln -s works... yes\r\n1701686294994,checking the maximum length of command line arguments... 1966080\r\n1701686294996,checking how to convert aarch64-unknown-linux-gnu file names to aarch64-unknown-linux-gnu format... func_convert_file_noop\r\n1701686294996,checking how to convert aarch64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop\r\n1701686294996,checking for /usr/bin/ld option to reload object files... -r\r\n1701686294996,checking for objdump... objdump\r\n1701686294997,checking how to recognize dependent libraries... pass_all\r\n1701686294997,checking for dlltool... no\r\n1701686294997,\"checking how to associate runtime and link libraries... printf %s\r\n\"\r\n1701686294997,checking for ar... ar\r\n1701686295017,checking for archiver @FILE support... @\r\n1701686295017,checking for strip... strip\r\n1701686295017,checking for ranlib... ranlib\r\n1701686295067,checking command to parse /usr/bin/nm -B output from gcc object... ok\r\n1701686295068,checking for sysroot... no\r\n1701686295071,checking for a working dd... /usr/bin/dd\r\n1701686295073,checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1\r\n1701686295074,checking for mt... no\r\n1701686295076,checking if : is a manifest tool... no\r\n1701686295093,checking for stdio.h... yes\r\n1701686295112,checking for stdlib.h... yes\r\n1701686295133,checking for string.h... yes\r\n1701686295155,checking for inttypes.h... yes\r\n1701686295177,checking for stdint.h... yes\r\n1701686295198,checking for strings.h... yes\r\n1701686295220,checking for sys/stat.h... yes\r\n1701686295242,checking for sys/types.h... yes\r\n1701686295269,checking for unistd.h... yes\r\n1701686295297,checking for dlfcn.h... yes\r\n1701686295300,checking for objdir... .libs\r\n1701686295360,checking if gcc supports -fno-rtti -fno-exceptions... no\r\n1701686295360,checking for gcc option to produce PIC... -fPIC -DPIC\r\n1701686295375,checking if gcc PIC flag -fPIC -DPIC works... yes\r\n1701686295435,checking if gcc static flag -static works... yes\r\n1701686295455,checking if gcc supports -c -o file.o... yes\r\n1701686295455,checking if gcc supports -c -o file.o... (cached) yes\r\n1701686295462,checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes\r\n1701686295481,checking whether -lc should be explicitly linked in... no\r\n1701686295520,checking dynamic linker characteristics... GNU/Linux ld.so\r\n1701686295520,checking how to hardcode library paths into programs... immediate\r\n1701686295521,checking whether stripping libraries is possible... yes\r\n1701686295521,checking if libtool supports shared libraries... yes\r\n1701686295521,checking whether to build shared libraries... yes\r\n1701686295521,checking whether to build static libraries... yes\r\n1701686295546,checking how to run the C++ preprocessor... g++ -std=c++20 -E\r\n1701686295620,checking for ld used by g++ -std=c++20... /usr/bin/ld\r\n1701686295622,checking if the linker (/usr/bin/ld) is GNU ld... yes\r\n1701686295627,checking whether the g++ -std=c++20 linker (/usr/bin/ld) supports shared libraries... yes\r\n1701686295680,checking for g++ -std=c++20 option to produce PIC... -fPIC -DPIC\r\n1701686295699,checking if g++ -std=c++20 PIC flag -fPIC -DPIC works... yes\r\n1701686295759,checking if g++ -std=c++20 static flag -static works... yes\r\n1701686295783,checking if g++ -std=c++20 supports -c -o file.o... yes\r\n1701686295783,checking if g++ -std=c++20 supports -c -o file.o... (cached) yes\r\n1701686295783,checking whether the g++ -std=c++20 linker (/usr/bin/ld) supports shared libraries... yes\r\n1701686295786,checking dynamic linker characteristics... (cached) GNU/Linux ld.so\r\n1701686295786,checking how to hardcode library paths into programs... immediate\r\n1701686295787,checking for ar... /usr/bin/ar\r\n1701686295787,checking for gcov... /usr/bin/gcov\r\n1701686295787,checking for llvm-cov... no\r\n1701686295787,checking for lcov... /usr/bin/lcov\r\n1701686295787,checking for python3.9... no\r\n1701686295787,checking for python3.10... /usr/bin/python3.10\r\n1701686295788,checking for genhtml... /usr/bin/genhtml\r\n1701686295788,checking for git... /usr/bin/git\r\n1701686295788,checking for ccache... /usr/bin/ccache\r\n1701686295788,checking for xgettext... no\r\n1701686295788,checking for hexdump... /usr/bin/hexdump\r\n1701686295788,checking for objcopy... /usr/bin/objcopy\r\n1701686295789,checking for doxygen... no\r\n1701686295805,checking whether C++ compiler accepts -Werror... yes\r\n1701686295844,\"checking whether the linker accepts -Wl,--fatal-warnings... yes\"\r\n1701686295864,checking whether C++ compiler accepts -Wall... yes\r\n1701686295881,checking whether C++ compiler accepts -Wextra... yes\r\n1701686295892,checking whether C++ compiler accepts -Wgnu... no\r\n1701686295910,checking whether C++ compiler accepts -Wformat -Wformat-security... yes\r\n1701686295929,checking whether C++ compiler accepts -Wvla... yes\r\n1701686295942,checking whether C++ compiler accepts -Wshadow-field... no\r\n1701686295958,checking whether C++ compiler accepts -Wthread-safety... no\r\n1701686295973,checking whether C++ compiler accepts -Wloop-analysis... no\r\n1701686295991,checking whether C++ compiler accepts -Wredundant-decls... yes\r\n1701686296011,checking whether C++ compiler accepts -Wunused-member-function... no\r\n1701686296029,checking whether C++ compiler accepts -Wdate-time... yes\r\n1701686296050,checking whether C++ compiler accepts -Wconditional-uninitialized... no\r\n1701686296068,checking whether C++ compiler accepts -Wduplicated-branches... yes\r\n1701686296085,checking whether C++ compiler accepts -Wduplicated-cond... yes\r\n1701686296103,checking whether C++ compiler accepts -Wlogical-op... yes\r\n1701686296121,checking whether C++ compiler accepts -Woverloaded-virtual... yes\r\n1701686296138,checking whether C++ compiler accepts -Wsuggest-override... yes\r\n1701686296161,checking whether C++ compiler accepts -Wunreachable-code-loop-increment... no\r\n1701686296179,checking whether C++ compiler accepts -Wimplicit-fallthrough... yes\r\n1701686296195,checking whether C++ compiler accepts -Wdocumentation... no\r\n1701686296213,checking whether C++ compiler accepts -Wunused-parameter... yes\r\n1701686296226,checking whether C++ compiler accepts -Wself-assign... no\r\n1701686296245,checking whether C++ compiler accepts -fno-extended-identifiers... yes\r\n1701686296260,checking whether C++ compiler accepts -fstack-reuse=none... yes\r\n1701686296272,checking whether C++ compiler accepts -msse4.2... no\r\n1701686296283,checking whether C++ compiler accepts -msse4.1... no\r\n1701686296294,checking whether C++ compiler accepts -mavx -mavx2... no\r\n1701686296305,checking whether C++ compiler accepts -msse4 -msha... no\r\n1701686296317,checking whether C++ compiler accepts -mpclmul... no\r\n1701686296340,checking for SSE4.2 intrinsics... no\r\n1701686296356,checking for SSE4.1 intrinsics... no\r\n1701686296370,checking for AVX2 intrinsics... no\r\n1701686296385,checking for x86 SHA-NI intrinsics... no\r\n1701686296405,checking whether C++ compiler accepts -march=armv8-a+crc+crypto... yes\r\n1701686296423,checking whether C++ compiler accepts -march=armv8-a+crypto... yes\r\n1701686296645,checking for ARMv8 CRC32 intrinsics... yes\r\n1701686296869,checking for ARMv8 SHA-NI intrinsics... yes\r\n1701686296951,checking whether byte ordering is bigendian... no\r\n1701686296971,checking how to run the C preprocessor... gcc -E\r\n1701686297002,checking whether gcc is Clang... no\r\n1701686297044,\"checking whether pthreads work with \"\"-pthread\"\" and \"\"-lpthread\"\"... yes\"\r\n1701686297076,checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE\r\n1701686297076,checking whether more special flags are required for pthreads... no\r\n1701686297108,checking for PTHREAD_PRIO_INHERIT... yes\r\n1701686297581,checking whether std::atomic can be used without link library... yes\r\n1701686297582,checking for special C compiler options needed for large files... no\r\n1701686297600,checking for _FILE_OFFSET_BITS value needed for large files... no\r\n1701686297633,checking for g++ -std=c++20 options needed to detect all undeclared functions... none needed\r\n1701686297679,checking whether strerror_r is declared... yes\r\n1701686297701,checking whether strerror_r returns char *... yes\r\n1701686297717,checking whether C++ compiler accepts -fPIC... yes\r\n1701686297734,checking whether C++ compiler accepts -Wstack-protector... yes\r\n1701686297750,checking whether C++ compiler accepts -fstack-protector-all... yes\r\n1701686297758,checking whether C++ compiler accepts -fcf-protection=full... no\r\n1701686297776,checking whether C++ compiler accepts -fstack-clash-protection... yes\r\n1701686297792,checking whether C++ compiler accepts -mbranch-protection=bti... yes\r\n1701686297801,checking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=3... yes\r\n1701686297811,checking whether C++ preprocessor accepts -U_FORTIFY_SOURCE... yes\r\n1701686297835,\"checking whether the linker accepts -Wl,--enable-reloc-section... no\"\r\n1701686297859,\"checking whether the linker accepts -Wl,--dynamicbase... no\"\r\n1701686297882,\"checking whether the linker accepts -Wl,--nxcompat... no\"\r\n1701686297907,\"checking whether the linker accepts -Wl,--high-entropy-va... no\"\r\n1701686297947,\"checking whether the linker accepts -Wl,-z,relro... yes\"\r\n1701686297986,\"checking whether the linker accepts -Wl,-z,now... yes\"\r\n1701686298025,\"checking whether the linker accepts -Wl,-z,separate-code... yes\"\r\n1701686298064,checking whether the linker accepts -fPIE -pie... yes\r\n1701686298103,checking for sys/select.h... yes\r\n1701686298143,checking for sys/prctl.h... yes\r\n1701686298169,checking for sys/sysctl.h... no\r\n1701686298194,checking for vm/vm_param.h... no\r\n1701686298219,checking for sys/vmmeter.h... no\r\n1701686298244,checking for sys/resources.h... no\r\n1701686298271,checking whether getifaddrs is declared... yes\r\n1701686298317,checking whether ifaddrs funcs can be used without link library... yes\r\n1701686298345,checking whether freeifaddrs is declared... yes\r\n1701686298389,checking whether ifaddrs funcs can be used without link library... yes\r\n1701686298438,checking whether fork is declared... yes\r\n1701686298484,checking whether setsid is declared... yes\r\n1701686298530,checking whether pipe2 is declared... yes\r\n1701686298572,checking for timingsafe_bcmp... no\r\n1701686298587,checking for __builtin_clzl... yes\r\n1701686298601,checking for __builtin_clzll... yes\r\n1701686298625,checking for getmemoryinfo... yes\r\n1701686298648,checking for mallopt M_ARENA_MAX... yes\r\n1701686298668,checking for posix_fallocate... yes\r\n1701686298684,checking for default visibility attribute... yes\r\n1701686298699,checking for dllexport attribute... no\r\n1701686299371,checking for thread_local support... yes\r\n1701686299391,checking for gmtime_r... yes\r\n1701686299414,checking for Linux getrandom function... yes\r\n1701686299437,checking for getentropy via sys/random.h... yes\r\n1701686299454,checking for sysctl... no\r\n1701686299469,checking for sysctl KERN_ARND... no\r\n1701686299498,checking for if type char equals int8_t... no\r\n1701686299523,checking for fdatasync... yes\r\n1701686299541,checking for F_FULLFSYNC... no\r\n1701686299562,checking for O_CLOEXEC... yes\r\n1701686299579,checking for __builtin_prefetch... yes\r\n1701686299592,checking for _mm_prefetch... no\r\n1701686299612,checking for strong getauxval support in the system headers... yes\r\n1701686299659,checking for std::system... yes\r\n1701686299684,checking for ::_wsystem... no\r\n1701686299691,checking for Qt5Core >= 5.11.3... no\r\n1701686299693,configure: WARNING: Qt5Core >= 5.11.3 not found; bitcoin-qt frontend will not be built\r\n1701686299694,checking whether to build Bitcoin Core GUI... no\r\n1701686299710,checking for sqlite3 >= 3.7.17... yes\r\n1701686299710,checking whether to build wallet with support for sqlite... yes\r\n1701686299723,\"checking whether Userspace, Statically Defined Tracing tracepoints are supported... no\"\r\n1701686299768,checking for miniupnpc/miniupnpc.h... yes\r\n1701686299814,checking for miniupnpc/upnpcommands.h... yes\r\n1701686299861,checking for miniupnpc/upnperrors.h... yes\r\n1701686299905,checking for upnpDiscover in -lminiupnpc... yes\r\n1701686299914,checking whether miniUPnPc API version is supported... yes\r\n1701686299941,checking for natpmp.h... no\r\n1701686299966,checking for Boost headers >= 1.64.0 (106400)... yes\r\n1701686299986,checking whether C++ preprocessor accepts -DBOOST_NO_CXX98_FUNCTION_BASE... yes\r\n1701686306369,checking whether Boost.Process can be used... yes\r\n1701686306374,checking for libevent >= 2.1.8... yes\r\n1701686306379,checking for libevent_pthreads >= 2.1.8... yes\r\n1701686306408,checking if evhttp_connection_get_peer expects const char**... no\r\n1701686306413,checking for libmultiprocess... no\r\n1701686306415,checking whether to build bitcoind... yes\r\n1701686306415,checking whether to build bitcoin-cli... yes\r\n1701686306415,checking whether to build bitcoin-tx... yes\r\n1701686306415,checking whether to build bitcoin-wallet... yes\r\n1701686306415,checking whether to build bitcoin-util... yes\r\n1701686306415,checking whether to build experimental bitcoin-chainstate... no\r\n1701686306416,checking whether to build libraries... yes\r\n1701686306416,checking if ccache should be used... yes\r\n1701686306549,checking whether C compiler accepts -fdebug-prefix-map=A=B... yes\r\n1701686306560,checking whether C preprocessor accepts -fmacro-prefix-map=A=B... yes\r\n1701686306560,checking if wallet should be enabled... yes\r\n1701686306560,checking whether to build with support for UPnP... yes\r\n1701686306560,checking whether to build with support for NAT-PMP... no\r\n1701686306560,checking whether to build test_bitcoin... no\r\n1701686306560,checking whether to reduce exports... no\r\n1701686306587,checking that generated files are newer than configure... done\r\n1701686306588,configure: creating ./config.status\r\n1701686307056,config.status: creating libbitcoinconsensus.pc\r\n1701686307064,config.status: creating Makefile\r\n1701686307072,config.status: creating src/Makefile\r\n1701686307108,config.status: creating doc/man/Makefile\r\n1701686307119,config.status: creating share/setup.nsi\r\n1701686307130,config.status: creating share/qt/Info.plist\r\n1701686307141,config.status: creating test/config.ini\r\n1701686307151,config.status: creating contrib/devtools/split-debug.sh\r\n1701686307163,config.status: creating src/config/bitcoin-config.h\r\n1701686307168,config.status: src/config/bitcoin-config.h is unchanged\r\n1701686307209,config.status: executing depfiles commands\r\n1701686307261,config.status: executing libtool commands\r\n1701686307270,'\"=== configuring in src/secp256k1 (/tmp/bitcoin/src/secp256k1)\"\r\n1701686307274,configure: running /bin/bash ./configure --disable-option-checking '--prefix=/usr/local'  '--enable-bench' '--disable-tests' '--disable-gui' '--disable-zmq' '--disable-fuzz' '--enable-fuzz-binary=no' 'BDB_LIBS=-L/tmp/bitcoin/depends/aarch64-unknown-linux-gnu/lib -ldb_cxx-4.8' 'BDB_CFLAGS=-I/tmp/bitcoin/depends/aarch64-unknown-linux-gnu/include' '--disable-shared' '--with-pic' '--enable-benchmark=no' '--enable-module-recovery' '--disable-module-ecdh' --cache-file=/dev/null --srcdir=.\r\n1701686307402,checking build system type... aarch64-unknown-linux-gnu\r\n1701686307402,checking host system type... aarch64-unknown-linux-gnu\r\n1701686307408,checking for a BSD-compatible install... /usr/bin/install -c\r\n1701686307410,checking whether build environment is sane... yes\r\n1701686307416,checking for a race-free mkdir -p... /usr/bin/mkdir -p\r\n1701686307416,checking for gawk... no\r\n1701686307416,checking for mawk... mawk\r\n1701686307421,checking whether make sets $(MAKE)... yes\r\n1701686307425,checking whether make supports nested variables... yes\r\n1701686307428,checking whether make supports nested variables... (cached) yes\r\n1701686307428,checking for gcc... gcc\r\n1701686307472,checking whether the C compiler works... yes\r\n1701686307472,checking for C compiler default output file name... a.out\r\n1701686307497,checking for suffix of executables... \r\n1701686307525,checking whether we are cross compiling... no\r\n1701686307540,checking for suffix of object files... o\r\n1701686307553,checking whether the compiler supports GNU C... yes\r\n1701686307566,checking whether gcc accepts -g... yes\r\n1701686307609,checking for gcc option to enable C11 features... none needed\r\n1701686307633,checking whether gcc understands -c and -o together... yes\r\n1701686307638,checking whether make supports the include directive... yes (GNU style)\r\n1701686307661,checking dependency style of gcc... gcc3\r\n1701686307683,checking dependency style of gcc... gcc3\r\n1701686307683,checking for ar... ar\r\n1701686307697,checking the archiver (ar) interface... ar\r\n1701686307699,checking how to print strings... printf\r\n1701686307702,checking for a sed that does not truncate output... /usr/bin/sed\r\n1701686307704,checking for grep that handles long lines and -e... /usr/bin/grep\r\n1701686307705,checking for egrep... /usr/bin/grep -E\r\n1701686307706,checking for fgrep... /usr/bin/grep -F\r\n1701686307709,checking for ld used by gcc... /usr/bin/ld\r\n1701686307711,checking if the linker (/usr/bin/ld) is GNU ld... yes\r\n1701686307712,checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\n1701686307728,checking the name lister (/usr/bin/nm -B) interface... BSD nm\r\n1701686307728,checking whether ln -s works... yes\r\n1701686307731,checking the maximum length of command line arguments... 1966080\r\n1701686307733,checking how to convert aarch64-unknown-linux-gnu file names to aarch64-unknown-linux-gnu format... func_convert_file_noop\r\n1701686307733,checking how to convert aarch64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop\r\n1701686307733,checking for /usr/bin/ld option to reload object files... -r\r\n1701686307734,checking for objdump... objdump\r\n1701686307734,checking how to recognize dependent libraries... pass_all\r\n1701686307734,checking for dlltool... no\r\n1701686307734,\"checking how to associate runtime and link libraries... printf %s\r\n\"\r\n1701686307754,checking for archiver @FILE support... @\r\n1701686307754,checking for strip... strip\r\n1701686307754,checking for ranlib... ranlib\r\n1701686307803,checking command to parse /usr/bin/nm -B output from gcc object... ok\r\n1701686307804,checking for sysroot... no\r\n1701686307807,checking for a working dd... /usr/bin/dd\r\n1701686307810,checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1\r\n1701686307810,checking for mt... no\r\n1701686307812,checking if : is a manifest tool... no\r\n1701686307829,checking for stdio.h... yes\r\n1701686307850,checking for stdlib.h... yes\r\n1701686307872,checking for string.h... yes\r\n1701686307894,checking for inttypes.h... yes\r\n1701686307917,checking for stdint.h... yes\r\n1701686307940,checking for strings.h... yes\r\n1701686307962,checking for sys/stat.h... yes\r\n1701686307984,checking for sys/types.h... yes\r\n1701686308010,checking for unistd.h... yes\r\n1701686308037,checking for dlfcn.h... yes\r\n1701686308040,checking for objdir... .libs\r\n1701686308098,checking if gcc supports -fno-rtti -fno-exceptions... no\r\n1701686308098,checking for gcc option to produce PIC... -fPIC -DPIC\r\n1701686308113,checking if gcc PIC flag -fPIC -DPIC works... yes\r\n1701686308172,checking if gcc static flag -static works... yes\r\n1701686308191,checking if gcc supports -c -o file.o... yes\r\n1701686308191,checking if gcc supports -c -o file.o... (cached) yes\r\n1701686308198,checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes\r\n1701686308236,checking dynamic linker characteristics... GNU/Linux ld.so\r\n1701686308236,checking how to hardcode library paths into programs... immediate\r\n1701686308237,checking whether stripping libraries is possible... yes\r\n1701686308237,checking if libtool supports shared libraries... yes\r\n1701686308237,checking whether to build shared libraries... no\r\n1701686308237,checking whether to build static libraries... yes\r\n1701686308250,checking if gcc supports -Werror... yes\r\n1701686308262,checking if gcc supports -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef... yes\r\n1701686308274,checking if gcc supports -Wno-overlength-strings... yes\r\n1701686308287,checking if gcc supports -Wall... yes\r\n1701686308299,checking if gcc supports -Wno-unused-function... yes\r\n1701686308312,checking if gcc supports -Wextra... yes\r\n1701686308324,checking if gcc supports -Wcast-align... yes\r\n1701686308337,checking if gcc supports -Wcast-align=strict... yes\r\n1701686308356,checking if gcc supports -Wconditional-uninitialized... no\r\n1701686308372,checking if gcc supports -Wreserved-identifier... no\r\n1701686308383,checking if gcc supports -fvisibility=hidden... yes\r\n1701686308397,checking for valgrind support... \r\n1701686308415,checking for x86_64 assembly availability... no\r\n1701686308434,checking that generated files are newer than configure... done\r\n1701686308434,configure: creating ./config.status\r\n1701686308749,config.status: creating Makefile\r\n1701686308758,config.status: creating libsecp256k1.pc\r\n1701686308766,config.status: executing depfiles commands\r\n1701686308777,config.status: executing libtool commands\r\n1701686308784,Build Options:\r\n1701686308784,  with external callbacks = no\r\n1701686308784,  with benchmarks         = no\r\n1701686308784,  with tests              = no\r\n1701686308784,  with ctime tests        = no\r\n1701686308784,  with coverage           = no\r\n1701686308784,  with examples           = no\r\n1701686308784,  module ecdh             = no\r\n1701686308784,  module recovery         = yes\r\n1701686308784,  module extrakeys        = yes\r\n1701686308784,  module schnorrsig       = yes\r\n1701686308784,  module ellswift         = yes\r\n1701686308784,  asm                     = no\r\n1701686308784,  ecmult window size      = 15\r\n1701686308784,  ecmult gen prec. bits   = 4\r\n1701686308784,  valgrind                = no\r\n1701686308784,  CC                      = gcc\r\n1701686308784,  CPPFLAGS                = \r\n1701686308784,  SECP_CFLAGS             = -O2  -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-overlength-strings -Wall -Wno-unused-function -Wextra -Wcast-align -Wcast-align=strict -fvisibility=hidden \r\n1701686308784,  CFLAGS                  = -g -O2\r\n1701686308784,  LDFLAGS                 = \r\n1701686308812,Options used to compile and link:\r\n1701686308812,  external signer = yes\r\n1701686308812,  multiprocess    = no\r\n1701686308812,  with libs       = yes\r\n1701686308812,  with wallet     = yes\r\n1701686308812,    with sqlite   = yes\r\n1701686308812,    with bdb      = yes\r\n1701686308812,  with gui / qt   = no\r\n1701686308812,  with zmq        = no\r\n1701686308812,  with test       = no\r\n1701686308812,  with fuzz binary = no\r\n1701686308812,  with bench      = yes\r\n1701686308812,  with upnp       = yes\r\n1701686308812,  with natpmp     = no\r\n1701686308812,  use asm         = yes\r\n1701686308812,  USDT tracing    = no\r\n1701686308812,  sanitizers      = \r\n1701686308812,  debug enabled   = no\r\n1701686308812,  gprof enabled   = no\r\n1701686308812,  werror          = no\r\n1701686308812,  LTO             = no\r\n1701686308812,  target os       = linux-gnu\r\n1701686308812,  build os        = linux-gnu\r\n1701686308812,  CC              = /usr/bin/ccache gcc\r\n1701686308812,  CFLAGS          = -pthread -g -O2\r\n1701686308812,  CPPFLAGS        =  -fmacro-prefix-map=$(abs_top_srcdir)=.  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3  -DHAVE_BUILD_INFO \r\n1701686308812,  CXX             = /usr/bin/ccache g++ -std=c++20\r\n1701686308812,  CXXFLAGS        =   -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fstack-clash-protection -mbranch-protection=bti  -Wall -Wextra -Wformat -Wformat-security -Wvla -Wredundant-decls -Wdate-time -Wduplicated-branches -Wduplicated-cond -Wlogical-op -Woverloaded-virtual -Wsuggest-override -Wimplicit-fallthrough  -Wno-unused-parameter    -fno-extended-identifiers -fstack-reuse=none -g -O2\r\n1701686308812,\"  LDFLAGS         =  -lpthread  -Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code -pie   \"\r\n1701686308812,  AR              = /usr/bin/ar\r\n1701686308812,  ARFLAGS         = cr\r\n``` ",
      "created_at" : "2023-12-05T19:02:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841445584",
      "id" : 1841445584,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585twjrQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841445584/reactions"
      },
      "updated_at" : "2023-12-05T19:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841445584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Same bench result here, compiling with `clang`, both master and this pull. My command:\r\n\r\n```\r\n$ grep 'make_bitcoin_core=' ~/.bashrc \r\nalias make_bitcoin_core=\"      ./autogen.sh && CC=clang CXX=clang++ ./configure -q --enable-c++20 --enable-experimental-util-chainstate --with-experimental-kernel-lib                                 && make clean && make -j $(nproc)\"\r\n",
      "created_at" : "2023-12-05T19:03:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841445629",
      "id" : 1841445629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585twjr9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841445629/reactions"
      },
      "updated_at" : "2023-12-05T19:03:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841445629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Yes that is correct. Also the compiler installed is g++-11.\r\n\r\nIt would be useful to have compiler/version used/C{XX} flags/configure options (even if just mentioning it's the default) displayed next to the benchmarking information, as I assume this will always be one of the first questions asked in relation to benchmark output.",
      "created_at" : "2023-12-06T10:50:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1842632814",
      "id" : 1842632814,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t1Fhu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842632814/reactions"
      },
      "updated_at" : "2023-12-06T10:50:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842632814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased on master/the current C++20 PR, which should improve the CI here.\r\n\r\n~~@aureleoules does the SonarCloud output always run on the latest changes? I've dropped all the `inline` usage from the constexpr functions in `endian.h`, but https://corecheck.dev/bitcoin/bitcoin/pulls/28674 still shows all the output about using inline with constexpr?~~\r\n\r\nMaybe something was being cached, as this seems to have updated now.",
      "created_at" : "2023-12-06T11:49:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1842717748",
      "id" : 1842717748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t1aQ0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842717748/reactions"
      },
      "updated_at" : "2023-12-06T11:50:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842717748",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Maybe something was being cached, as this seems to have updated now.\r\n\r\nYes it may take some time for the sonarcloud worker to finish, as well as sonarcloud to refresh the results.\r\nI'll improve the UX for that ð ",
      "created_at" : "2023-12-06T12:54:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1842819914",
      "id" : 1842819914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t1zNK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842819914/reactions"
      },
      "updated_at" : "2023-12-06T12:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842819914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Hmm, playing around with this code on godbolt, it hardly ever compiles down to bswaps. I'm not sure what changed from when I was initially investigating. Will have a look.",
      "created_at" : "2023-12-06T16:09:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1843211066",
      "id" : 1843211066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t3Ss6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843211066/reactions"
      },
      "updated_at" : "2023-12-06T16:09:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843211066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Hmm, playing around with this code on godbolt, it hardly ever compiles down to bswaps. I'm not sure what changed from when I was initially investigating. Will have a look.\r\n\r\nOk, interesting, the problem is pretty easy to see here: https://godbolt.org/z/d5EGs8Ybs\r\n\r\nGCC and MSVC both do the same thing: the optimization is done on the small static function, but it doesn't carry through when inlined. clang's output looks as expected. That explains why my test cases look good, but real world performance took a nosedive.\r\n\r\nAlso interesting, switching the function to a macro doesn't change anything.\r\n\r\n@aureleoules How hard would it be to switch to using clang for a test-run to compare?\r\n\r\nI wonder if this is something GCC would be interested in taking a look at. clang can obviously do the right thing.",
      "created_at" : "2023-12-06T18:38:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1843470806",
      "id" : 1843470806,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t4SHW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843470806/reactions"
      },
      "updated_at" : "2023-12-06T18:39:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843470806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> clang can obviously do the right thing.\r\n\r\nAre you sure? When I tried yesterday, it did not (https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841445629)",
      "created_at" : "2023-12-06T18:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1843481759",
      "id" : 1843481759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t4Uyf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843481759/reactions"
      },
      "updated_at" : "2023-12-06T18:42:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843481759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > clang can obviously do the right thing.\r\n> \r\n> Are you sure?\r\n\r\nAbsolutely not! I'm making this up as I go. \r\nEdit: See the godbolt link for comparison though.\r\n\r\n> When I tried yesterday, it did not ([#28674 (comment)](https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1841445629))\r\n\r\nThanks, I guess that's the test I just asked for.\r\n\r\nOk, I'll keep poking. But it seems like this approach likely won't work :(",
      "created_at" : "2023-12-06T18:51:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1843504462",
      "id" : 1843504462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t4aVO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843504462/reactions"
      },
      "updated_at" : "2023-12-06T18:51:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843504462",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Ok, I'll keep poking. But it seems like this approach likely won't work :(\r\n\r\nWhat about hiding the function inside a compilation unit, where they are turned into `bswap`, and then rely on LTO to replace the `call    internal_bswap_64` with `bswap`? (Haven't tried this)",
      "created_at" : "2023-12-06T19:00:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1843519987",
      "id" : 1843519987,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585t4eHz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843519987/reactions"
      },
      "updated_at" : "2023-12-06T19:00:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1843519987",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1420514261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420514261"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could split this up from the other changes?\r\n\r\nnit: Also missing clang-format on this line.",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-08T14:17:00Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL\n-    if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n-    }\n-#endif\n-    int ret = 0;\n-    while (x) {\n-        x >>= 1;\n-        ++ret;\n-    }\n-    return ret;\n+    return (sizeof(x) * 8 )- std::countl_zero(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1420514261",
      "id" : 1420514261,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585Uq1PV",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 89,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 119,
      "pull_request_review_id" : 1772446281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420514261/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-08T14:17:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420514261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > Ok, I'll keep poking. But it seems like this approach likely won't work :(\r\n> \r\n> What about hiding the function inside a compilation unit, where they are turned into `bswap`, and then rely on LTO to replace the `call internal_bswap_64` with `bswap`? (Haven't tried this)\r\n\r\nHah, that's fun. Too fun in fact, so I'm not going to try because it would make things even more complicated if it worked :p\r\nBecause even if it worked, we couldn't possibly require LTO as a means of achieving basic performance.",
      "created_at" : "2023-12-08T16:54:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1847520923",
      "id" : 1847520923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585uHu6b",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847520923/reactions"
      },
      "updated_at" : "2023-12-08T16:54:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847520923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1420786252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420786252"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, there are essentially 3 changes here:\r\n- using `std::endian`\r\n- using `std::countl_zero`\r\n- removing the non-standard byteswaps\r\n\r\nThe first two are useful regardless, though obviously much less so without doing the third.\r\n\r\nI'll update this to break up the commits.\r\n\r\nAs an alternative to what's here, I'm going to try switching our byteswaps to compiler builtins for gcc/clang/msvc. That still leaves us with compiler-specific behavior, but that would at least be an improvement over the current required autoconf/cmake tests.",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-08T16:59:36Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL\n-    if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n-    }\n-#endif\n-    int ret = 0;\n-    while (x) {\n-        x >>= 1;\n-        ++ret;\n-    }\n-    return ret;\n+    return (sizeof(x) * 8 )- std::countl_zero(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1420786252",
      "id" : 1420786252,
      "in_reply_to_id" : 1420514261,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585Ur3pM",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 89,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 119,
      "pull_request_review_id" : 1772819190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420786252/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-08T16:59:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420786252",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Hmm. I have something working, but as usual, MSVC is the odd case. Looking at the current code, it's not clear to me how MSVC ends up doing byteswaps because we don't have any detection for it. But I also doubt that it's finding the functions in  `<byteswap.h>`.\r\n\r\nSo I think it's possible that MSVC is always taking the slow path? If that's the case, fixing this here would give it a big speedup.\r\n\r\n@hebasto could you check with MSVC? It should be easy to check with master with something like:\r\n```patch\r\ndiff --git a/src/compat/byteswap.h b/src/compat/byteswap.h\r\nindex 9ee71ef267d..49e17c68828 100644\r\n--- a/src/compat/byteswap.h\r\n+++ b/src/compat/byteswap.h\r\n@@ -43,6 +43,7 @@ inline uint32_t bswap_32(uint32_t x)\r\n #if HAVE_DECL_BSWAP_64 == 0\r\n inline uint64_t bswap_64(uint64_t x)\r\n {\r\n+#error using slow path\r\n      return (((x & 0xff00000000000000ull) >> 56)\r\n           | ((x & 0x00ff000000000000ull) >> 40)\r\n           | ((x & 0x0000ff0000000000ull) >> 24)\r\n```",
      "created_at" : "2023-12-08T17:37:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1847574299",
      "id" : 1847574299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585uH78b",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847574299/reactions"
      },
      "updated_at" : "2023-12-08T17:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847574299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@theuni \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3e691258d8789a4a89cce42e7e71b130491594d7/build_msvc/bitcoin_config.h.in#L69",
      "created_at" : "2023-12-08T18:36:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1847650626",
      "id" : 1847650626,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585uIOlC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847650626/reactions"
      },
      "updated_at" : "2023-12-08T18:36:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847650626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @theuni\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/3e691258d8789a4a89cce42e7e71b130491594d7/build_msvc/bitcoin_config.h.in#L69\r\n\r\nThanks! https://github.com/theuni/bitcoin/commit/bbc72033128b6496dd3a92432eadbc4e75aaffe2 ready for PR if it indeed provides a speedup. I don't see how it couldn't :)",
      "created_at" : "2023-12-08T18:42:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#issuecomment-1847657957",
      "id" : 1847657957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28674",
      "node_id" : "IC_kwDOABII585uIQXl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847657957/reactions"
      },
      "updated_at" : "2023-12-08T18:42:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847657957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422215535"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422215535"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Depending on what happens here, given we only use `CountBits` in two places, if this is going to basically become a std lib call, we could just use it directly where needed, and remove our `CountBits` unit/fuzz tests, so that we aren't nearly unit testing / fuzzing the standard library.",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-11T09:53:01Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL\n-    if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n-    }\n-#endif\n-    int ret = 0;\n-    while (x) {\n-        x >>= 1;\n-        ++ret;\n-    }\n-    return ret;\n+    return (sizeof(x) * 8 )- std::countl_zero(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422215535",
      "id" : 1422215535,
      "in_reply_to_id" : 1420514261,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585UxUlv",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 89,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 119,
      "pull_request_review_id" : 1774723605,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422215535/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T09:53:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422215535",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422852478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422852478"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think I'd prefer to leave this with its comment. Note that we don't use `std::counl_zero` directly, we want kinda the opposite: `(sizeof(x) * 8 )- std::countl_zero(x);`",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-11T17:29:19Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL\n-    if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n-    }\n-#endif\n-    int ret = 0;\n-    while (x) {\n-        x >>= 1;\n-        ++ret;\n-    }\n-    return ret;\n+    return (sizeof(x) * 8 )- std::countl_zero(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422852478",
      "id" : 1422852478,
      "in_reply_to_id" : 1420514261,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585UzwF-",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 89,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 119,
      "pull_request_review_id" : 1775738903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422852478/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T17:29:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422852478",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422858528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422858528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can remove this from configure.ac now?",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-11T17:33:29Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422858528",
      "id" : 1422858528,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII585Uzxkg",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 97,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 108,
      "pull_request_review_id" : 1775748563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422858528/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T17:33:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422858528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422867877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422867877"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I worked on a branch last week that left me very confused: https://github.com/theuni/bitcoin/commits/pr28674-rebase2/\r\n\r\nIt's the _last_ commit (which I would expect to be a no-op) which causes the slowdown. For whatever reason, the built-in functions like `be64toh` are much faster than my hand-written internal ones which implement _the same code that glibc does_ in its headers! I'm still scratching my head trying to work out what's happening. \r\n\r\nBut for now, now that we have c++20, I'll go ahead and PR the first two parts.",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-11T17:36:27Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL\n-    if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n-    }\n-#endif\n-    int ret = 0;\n-    while (x) {\n-        x >>= 1;\n-        ++ret;\n-    }\n-    return ret;\n+    return (sizeof(x) * 8 )- std::countl_zero(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422867877",
      "id" : 1422867877,
      "in_reply_to_id" : 1420514261,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585Uzz2l",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 89,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 119,
      "pull_request_review_id" : 1775762891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422867877/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T17:36:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422867877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422871347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422871347"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like it. Will do in the updated PR.",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-11T17:37:57Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1422871347",
      "id" : 1422871347,
      "in_reply_to_id" : 1422858528,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII585Uz0sz",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 97,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 108,
      "pull_request_review_id" : 1775767692,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422871347/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T17:37:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422871347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1423020120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423020120"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think I'd prefer to leave this with its comment. Note that we don't use `std::counl_zero` directly, we want kinda the opposite: `(sizeof(x) * 8 )- std::countl_zero(x);`\r\n\r\nActually, as it turns out, [std::bit_width](https://en.cppreference.com/w/cpp/numeric/bit_width) is exactly what we want (and it's even described in terms of `countl_zero`). I'll see if it works to use your suggestion with that function instead.",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-11T19:20:34Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL\n-    if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n-    }\n-#endif\n-    int ret = 0;\n-    while (x) {\n-        x >>= 1;\n-        ++ret;\n-    }\n-    return ret;\n+    return (sizeof(x) * 8 )- std::countl_zero(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1423020120",
      "id" : 1423020120,
      "in_reply_to_id" : 1420514261,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585U0ZBY",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 89,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 119,
      "pull_request_review_id" : 1776000444,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423020120/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T19:20:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423020120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1423843923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423843923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Will be possible after we pull the changes from minisketch: https://github.com/sipa/minisketch/pull/80.",
      "commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "created_at" : "2023-12-12T11:14:11Z",
      "diff_hunk" : "@@ -5,106 +5,88 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <stdint.h>\n-#include <string.h>\n-\n #include <compat/endian.h>\n \n+#include <bit>\n+#include <cstdint>\n+#include <cstring>\n+\n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return le16toh(x);\n+    return le16toh_internal(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return le32toh(x);\n+    return le32toh_internal(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return le64toh(x);\n+    return le64toh_internal(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    uint16_t v = htole16(x);\n+    uint16_t v = htole16_internal(x);\n     memcpy(ptr, &v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htole32(x);\n+    uint32_t v = htole32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htole64(x);\n+    uint64_t v = htole64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n uint16_t static inline ReadBE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy(&x, ptr, 2);\n-    return be16toh(x);\n+    return be16toh_internal(x);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy(&x, ptr, 4);\n-    return be32toh(x);\n+    return be32toh_internal(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy(&x, ptr, 8);\n-    return be64toh(x);\n+    return be64toh_internal(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    uint32_t v = htobe32(x);\n+    uint32_t v = htobe32_internal(x);\n     memcpy(ptr, &v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    uint64_t v = htobe64(x);\n+    uint64_t v = htobe64_internal(x);\n     memcpy(ptr, &v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#if HAVE_BUILTIN_CLZL\n-    if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n-        return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n-    }\n-#endif\n-#if HAVE_BUILTIN_CLZLL",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28674#discussion_r1423843923",
      "id" : 1423843923,
      "in_reply_to_id" : 1422858528,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII585U3iJT",
      "original_commit_id" : "51e4a8fe23360c7506764606b33fb7bbe271cd76",
      "original_line" : 97,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/crypto/common.h",
      "position" : 108,
      "pull_request_review_id" : 1777231691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28674",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423843923/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T11:14:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423843923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
