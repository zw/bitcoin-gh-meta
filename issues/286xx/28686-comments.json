[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28686).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [naumenkogs](https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1786663162) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28690](https://github.com/bitcoin/bitcoin/pull/28690) (build: Introduce internal kernel library by TheCharlatan)\n* [#28455](https://github.com/bitcoin/bitcoin/pull/28455) (refactor: share and use `GenerateRandomKey` helper by theStack)\n* [#28451](https://github.com/bitcoin/bitcoin/pull/28451) (Remove unused SER_DISK, SER_NETWORK, SER_GETHASH by maflcko)\n* [#27600](https://github.com/bitcoin/bitcoin/pull/27600) (net: Add new permission `forceinbound` to evict a random unprotected connection if all slots are otherwise full by pinheadmz)\n* [#27114](https://github.com/bitcoin/bitcoin/pull/27114) (p2p: Allow whitelisting outgoing connections by brunoerg)\n* [#26697](https://github.com/bitcoin/bitcoin/pull/26697) (logging: use bitset for categories by LarryRuane)\n* [#25832](https://github.com/bitcoin/bitcoin/pull/25832) (tracing: network connection tracepoints by 0xB10C)\n* [#10102](https://github.com/bitcoin/bitcoin/pull/10102) (Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-10-19T10:23:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1770519657",
      "id" : 1770519657,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585ph_xp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770519657/reactions"
      },
      "updated_at" : "2023-10-31T07:42:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770519657",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The idea here is to restructure `CNode` / `CConnman` / `PeerManager` a bit. Currently, net.h combines all the p2p logic in between the very low-level socket stuff (sock.h) and the high-level protocol (net_processing.h). This splits that into two parts: node/node.h that now contains `CNode`, `TransportV1`, etc that focusses on dealing with a single peer; and leaves `CConnman` in net.h, with the idea that that focusses on coordinating amongst the many peers we have (so, opening new connections, choosing what to evict, working out which node to give cpu time to next, etc).\r\n\r\nThis PR just moves code around; the idea is that future PRs would improve the separation more (see https://github.com/ajtowns/bitcoin/commits/202308-netnode and https://github.com/bitcoin/bitcoin/pull/28252#issuecomment-1680222391) and, eventually, breaking the circular dependency between `PeerManager` and `CConnman` (ie, have `PeerManager` only deal with a single node at a time, eg see the `PushMessage` changes in the repo just mentioned).",
      "created_at" : "2023-10-19T10:31:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1770530541",
      "id" : 1770530541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585piCbt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770530541/reactions"
      },
      "updated_at" : "2023-10-19T10:31:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770530541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "`node/node` seems a bit confusing, because the two `node` refer to different things. `node` refers to this node and the other `node` refers to a peer, so `node/peer` may be better?",
      "created_at" : "2023-10-19T11:37:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1770711821",
      "id" : 1770711821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585piusN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770711821/reactions"
      },
      "updated_at" : "2023-10-19T11:37:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770711821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> `node/node` seems a bit confusing, because the two `node` refer to different things. `node` refers to this node and the other `node` refers to a peer, so `node/peer` may be better?\r\n\r\nI did think about that, but it's confusing in its own way: we have `class Peer` in net_processing that contains the per-peer protocol-level data for a particular connection. I guess we could decide to move towards calling them `Peer` (instead of `CNode`) and `PeerLogic` (instead of `Peer`), and `PeerLogicManager` (instead of `PeerManager`)?",
      "created_at" : "2023-10-19T11:52:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1770741963",
      "id" : 1770741963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585pi2DL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770741963/reactions"
      },
      "updated_at" : "2023-10-19T11:52:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770741963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "While we are bike-shedding the naming, I actually think `node/connection` would make sense.  `Connection` would also seem like the appropriate name for `CNode` given that it is managed by something called connection manager.",
      "created_at" : "2023-10-19T12:22:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1770854526",
      "id" : 1770854526,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585pjRh-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770854526/reactions"
      },
      "updated_at" : "2023-10-19T12:22:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770854526",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> While we are bike-shedding the naming, I actually think `node/connection` would make sense. `Connection` would also seem like the appropriate name for `CNode` given that it is managed by something called connection manager.\r\n\r\nI like it! Done.",
      "created_at" : "2023-10-19T13:14:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1770965821",
      "id" : 1770965821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585pjss9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770965821/reactions"
      },
      "updated_at" : "2023-10-19T13:14:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1770965821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366273430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366273430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "was this header not needed? I don't see `#include <node/connection.h>` being added",
      "commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "created_at" : "2023-10-20T00:19:17Z",
      "diff_hunk" : "@@ -4,7 +4,6 @@\n \n #include <chainparams.h>\n #include <consensus/amount.h>\n-#include <net.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366273430",
      "id" : 1366273430,
      "line" : 7,
      "node_id" : "PRRC_kwDOABII585Rb62W",
      "original_commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "original_line" : 7,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 1688907451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366273430/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T00:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366273430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15950706?v=4",
         "events_url" : "https://api.github.com/users/kevkevinpal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kevkevinpal/followers",
         "following_url" : "https://api.github.com/users/kevkevinpal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kevkevinpal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kevkevinpal",
         "id" : 15950706,
         "login" : "kevkevinpal",
         "node_id" : "MDQ6VXNlcjE1OTUwNzA2",
         "organizations_url" : "https://api.github.com/users/kevkevinpal/orgs",
         "received_events_url" : "https://api.github.com/users/kevkevinpal/received_events",
         "repos_url" : "https://api.github.com/users/kevkevinpal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kevkevinpal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kevkevinpal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kevkevinpal"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366395057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366395057"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems like it wasn't; iwyu doesn't recommend adding it back, either. Shouldn't be needed -- validation stuff should be \"kernel\" level, so shouldn't rely on any p2p/net things.",
      "commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "created_at" : "2023-10-20T03:05:28Z",
      "diff_hunk" : "@@ -4,7 +4,6 @@\n \n #include <chainparams.h>\n #include <consensus/amount.h>\n-#include <net.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366395057",
      "id" : 1366395057,
      "in_reply_to_id" : 1366273430,
      "line" : 7,
      "node_id" : "PRRC_kwDOABII585RcYix",
      "original_commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "original_line" : 7,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 1689112826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366395057/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T03:05:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366395057",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366408004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366408004"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "sounds good to me!",
      "commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "created_at" : "2023-10-20T03:29:20Z",
      "diff_hunk" : "@@ -4,7 +4,6 @@\n \n #include <chainparams.h>\n #include <consensus/amount.h>\n-#include <net.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366408004",
      "id" : 1366408004,
      "in_reply_to_id" : 1366273430,
      "line" : 7,
      "node_id" : "PRRC_kwDOABII585RcbtE",
      "original_commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "original_line" : 7,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 1689130499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366408004/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T03:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366408004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15950706?v=4",
         "events_url" : "https://api.github.com/users/kevkevinpal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kevkevinpal/followers",
         "following_url" : "https://api.github.com/users/kevkevinpal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kevkevinpal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kevkevinpal",
         "id" : 15950706,
         "login" : "kevkevinpal",
         "node_id" : "MDQ6VXNlcjE1OTUwNzA2",
         "organizations_url" : "https://api.github.com/users/kevkevinpal/orgs",
         "received_events_url" : "https://api.github.com/users/kevkevinpal/received_events",
         "repos_url" : "https://api.github.com/users/kevkevinpal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kevkevinpal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kevkevinpal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kevkevinpal"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366712378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366712378"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you think of moving the transport impls to net.cpp (or their own module)?. They aren't really part of this interface, more of a implementation detail.",
      "commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "created_at" : "2023-10-20T09:19:40Z",
      "diff_hunk" : "@@ -0,0 +1,887 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_CONNECTION_H\n+#define BITCOIN_NODE_CONNECTION_H\n+\n+/* This module encapsulates connecting with an individual peer,\n+ * translating messages into a byte stream and feeding it to a Sock\n+ * object. Protocol logic is left for net_processing/PeerManager, and\n+ * management of multiple peers is left for net/CConnman.\n+ */\n+\n+#include <bip324.h>\n+#include <hash.h>\n+#include <i2p.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <node/connection_types.h>\n+#include <protocol.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <util/check.h>\n+#include <util/sock.h>\n+\n+#include <atomic>\n+#include <cstdint>\n+#include <deque>\n+#include <list>\n+#include <map>\n+#include <memory>\n+#include <optional>\n+#include <vector>\n+\n+/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n+/** Maximum length of the user agent string in `version` message */\n+static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n+\n+static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+\n+typedef int64_t NodeId;\n+\n+struct CSerializedNetMsg {\n+    CSerializedNetMsg() = default;\n+    CSerializedNetMsg(CSerializedNetMsg&&) = default;\n+    CSerializedNetMsg& operator=(CSerializedNetMsg&&) = default;\n+    // No implicit copying, only moves.\n+    CSerializedNetMsg(const CSerializedNetMsg& msg) = delete;\n+    CSerializedNetMsg& operator=(const CSerializedNetMsg&) = delete;\n+\n+    CSerializedNetMsg Copy() const\n+    {\n+        CSerializedNetMsg copy;\n+        copy.data = data;\n+        copy.m_type = m_type;\n+        return copy;\n+    }\n+\n+    std::vector<unsigned char> data;\n+    std::string m_type;\n+\n+    /** Compute total memory usage of this object (own memory + any dynamic memory). */\n+    size_t GetMemoryUsage() const noexcept;\n+};\n+\n+extern const std::string NET_MESSAGE_TYPE_OTHER;\n+using mapMsgTypeSize = std::map</* message type */ std::string, /* total bytes */ uint64_t>;\n+\n+class CNodeStats\n+{\n+public:\n+    NodeId nodeid;\n+    std::chrono::seconds m_last_send;\n+    std::chrono::seconds m_last_recv;\n+    std::chrono::seconds m_last_tx_time;\n+    std::chrono::seconds m_last_block_time;\n+    std::chrono::seconds m_connected;\n+    int64_t nTimeOffset;\n+    std::string m_addr_name;\n+    int nVersion;\n+    std::string cleanSubVer;\n+    bool fInbound;\n+    // We requested high bandwidth connection to peer\n+    bool m_bip152_highbandwidth_to;\n+    // Peer requested high bandwidth connection\n+    bool m_bip152_highbandwidth_from;\n+    int m_starting_height;\n+    uint64_t nSendBytes;\n+    mapMsgTypeSize mapSendBytesPerMsgType;\n+    uint64_t nRecvBytes;\n+    mapMsgTypeSize mapRecvBytesPerMsgType;\n+    NetPermissionFlags m_permission_flags;\n+    std::chrono::microseconds m_last_ping_time;\n+    std::chrono::microseconds m_min_ping_time;\n+    // Our address, as reported by the peer\n+    std::string addrLocal;\n+    // Address of this peer\n+    CAddress addr;\n+    // Bind address of our side of the connection\n+    CAddress addrBind;\n+    // Network the peer connected through\n+    Network m_network;\n+    uint32_t m_mapped_as;\n+    ConnectionType m_conn_type;\n+    /** Transport protocol type. */\n+    TransportProtocolType m_transport_type;\n+    /** BIP324 session id string in hex, if any. */\n+    std::string m_session_id;\n+};\n+\n+\n+/** Transport protocol agnostic message container.\n+ * Ideally it should only contain receive time, payload,\n+ * type and size.\n+ */\n+class CNetMessage {\n+public:\n+    CDataStream m_recv;                  //!< received message data\n+    std::chrono::microseconds m_time{0}; //!< time of message receipt\n+    uint32_t m_message_size{0};          //!< size of the payload\n+    uint32_t m_raw_message_size{0};      //!< used wire size of the message (including header/checksum)\n+    std::string m_type;\n+\n+    CNetMessage(CDataStream&& recv_in) : m_recv(std::move(recv_in)) {}\n+    // Only one CNetMessage object will exist for the same message on either\n+    // the receive or processing queue. For performance reasons we therefore\n+    // delete the copy constructor and assignment operator to avoid the\n+    // possibility of copying CNetMessage objects.\n+    CNetMessage(CNetMessage&&) = default;\n+    CNetMessage(const CNetMessage&) = delete;\n+    CNetMessage& operator=(CNetMessage&&) = default;\n+    CNetMessage& operator=(const CNetMessage&) = delete;\n+\n+    void SetVersion(int nVersionIn)\n+    {\n+        m_recv.SetVersion(nVersionIn);\n+    }\n+};\n+\n+/** The Transport converts one connection's sent messages to wire bytes, and received bytes back. */\n+class Transport {\n+public:\n+    virtual ~Transport() {}\n+\n+    struct Info\n+    {\n+        TransportProtocolType transport_type;\n+        std::optional<uint256> session_id;\n+    };\n+\n+    /** Retrieve information about this transport. */\n+    virtual Info GetInfo() const noexcept = 0;\n+\n+    // 1. Receiver side functions, for decoding bytes received on the wire into transport protocol\n+    // agnostic CNetMessage (message type & payload) objects.\n+\n+    /** Returns true if the current message is complete (so GetReceivedMessage can be called). */\n+    virtual bool ReceivedMessageComplete() const = 0;\n+\n+    /** Feed wire bytes to the transport.\n+     *\n+     * @return false if some bytes were invalid, in which case the transport can't be used anymore.\n+     *\n+     * Consumed bytes are chopped off the front of msg_bytes.\n+     */\n+    virtual bool ReceivedBytes(Span<const uint8_t>& msg_bytes) = 0;\n+\n+    /** Retrieve a completed message from transport.\n+     *\n+     * This can only be called when ReceivedMessageComplete() is true.\n+     *\n+     * If reject_message=true is returned the message itself is invalid, but (other than false\n+     * returned by ReceivedBytes) the transport is not in an inconsistent state.\n+     */\n+    virtual CNetMessage GetReceivedMessage(std::chrono::microseconds time, bool& reject_message) = 0;\n+\n+    // 2. Sending side functions, for converting messages into bytes to be sent over the wire.\n+\n+    /** Set the next message to send.\n+     *\n+     * If no message can currently be set (perhaps because the previous one is not yet done being\n+     * sent), returns false, and msg will be unmodified. Otherwise msg is enqueued (and\n+     * possibly moved-from) and true is returned.\n+     */\n+    virtual bool SetMessageToSend(CSerializedNetMsg& msg) noexcept = 0;\n+\n+    /** Return type for GetBytesToSend, consisting of:\n+     *  - Span<const uint8_t> to_send: span of bytes to be sent over the wire (possibly empty).\n+     *  - bool more: whether there will be more bytes to be sent after the ones in to_send are\n+     *    all sent (as signaled by MarkBytesSent()).\n+     *  - const std::string& m_type: message type on behalf of which this is being sent\n+     *    (\"\" for bytes that are not on behalf of any message).\n+     */\n+    using BytesToSend = std::tuple<\n+        Span<const uint8_t> /*to_send*/,\n+        bool /*more*/,\n+        const std::string& /*m_type*/\n+    >;\n+\n+    /** Get bytes to send on the wire, if any, along with other information about it.\n+     *\n+     * As a const function, it does not modify the transport's observable state, and is thus safe\n+     * to be called multiple times.\n+     *\n+     * @param[in] have_next_message If true, the \"more\" return value reports whether more will\n+     *            be sendable after a SetMessageToSend call. It is set by the caller when they know\n+     *            they have another message ready to send, and only care about what happens\n+     *            after that. The have_next_message argument only affects this \"more\" return value\n+     *            and nothing else.\n+     *\n+     *            Effectively, there are three possible outcomes about whether there are more bytes\n+     *            to send:\n+     *            - Yes:     the transport itself has more bytes to send later. For example, for\n+     *                       V1Transport this happens during the sending of the header of a\n+     *                       message, when there is a non-empty payload that follows.\n+     *            - No:      the transport itself has no more bytes to send, but will have bytes to\n+     *                       send if handed a message through SetMessageToSend. In V1Transport this\n+     *                       happens when sending the payload of a message.\n+     *            - Blocked: the transport itself has no more bytes to send, and is also incapable\n+     *                       of sending anything more at all now, if it were handed another\n+     *                       message to send. This occurs in V2Transport before the handshake is\n+     *                       complete, as the encryption ciphers are not set up for sending\n+     *                       messages before that point.\n+     *\n+     *            The boolean 'more' is true for Yes, false for Blocked, and have_next_message\n+     *            controls what is returned for No.\n+     *\n+     * @return a BytesToSend object. The to_send member returned acts as a stream which is only\n+     *         ever appended to. This means that with the exception of MarkBytesSent (which pops\n+     *         bytes off the front of later to_sends), operations on the transport can only append\n+     *         to what is being returned. Also note that m_type and to_send refer to data that is\n+     *         internal to the transport, and calling any non-const function on this object may\n+     *         invalidate them.\n+     */\n+    virtual BytesToSend GetBytesToSend(bool have_next_message) const noexcept = 0;\n+\n+    /** Report how many bytes returned by the last GetBytesToSend() have been sent.\n+     *\n+     * bytes_sent cannot exceed to_send.size() of the last GetBytesToSend() result.\n+     *\n+     * If bytes_sent=0, this call has no effect.\n+     */\n+    virtual void MarkBytesSent(size_t bytes_sent) noexcept = 0;\n+\n+    /** Return the memory usage of this transport attributable to buffered data to send. */\n+    virtual size_t GetSendMemoryUsage() const noexcept = 0;\n+\n+    // 3. Miscellaneous functions.\n+\n+    /** Whether upon disconnections, a reconnect with V1 is warranted. */\n+    virtual bool ShouldReconnectV1() const noexcept = 0;\n+};\n+\n+class V1Transport final : public Transport",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366712378",
      "id" : 1366712378,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII585RdmA6",
      "original_commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "original_line" : 259,
      "original_position" : 259,
      "original_start_line" : null,
      "path" : "src/node/connection.h",
      "position" : 259,
      "pull_request_review_id" : 1689613170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366712378/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T09:19:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366712378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366850622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366850622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The class info is exposed for unit tests, and you at least need `class Transport` in order to know what a `CNode` looks like. Separating out the V1/V2 implementation details alone doesn't seem like much of a win. (And wouldn't really be a win at all if we just had a concrete Transport class instead of the replaceable virtual setup, cf https://github.com/bitcoin/bitcoin/pull/28331#discussion_r1336030845)",
      "commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "created_at" : "2023-10-20T11:28:53Z",
      "diff_hunk" : "@@ -0,0 +1,887 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_CONNECTION_H\n+#define BITCOIN_NODE_CONNECTION_H\n+\n+/* This module encapsulates connecting with an individual peer,\n+ * translating messages into a byte stream and feeding it to a Sock\n+ * object. Protocol logic is left for net_processing/PeerManager, and\n+ * management of multiple peers is left for net/CConnman.\n+ */\n+\n+#include <bip324.h>\n+#include <hash.h>\n+#include <i2p.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <node/connection_types.h>\n+#include <protocol.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <util/check.h>\n+#include <util/sock.h>\n+\n+#include <atomic>\n+#include <cstdint>\n+#include <deque>\n+#include <list>\n+#include <map>\n+#include <memory>\n+#include <optional>\n+#include <vector>\n+\n+/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n+/** Maximum length of the user agent string in `version` message */\n+static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n+\n+static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+\n+typedef int64_t NodeId;\n+\n+struct CSerializedNetMsg {\n+    CSerializedNetMsg() = default;\n+    CSerializedNetMsg(CSerializedNetMsg&&) = default;\n+    CSerializedNetMsg& operator=(CSerializedNetMsg&&) = default;\n+    // No implicit copying, only moves.\n+    CSerializedNetMsg(const CSerializedNetMsg& msg) = delete;\n+    CSerializedNetMsg& operator=(const CSerializedNetMsg&) = delete;\n+\n+    CSerializedNetMsg Copy() const\n+    {\n+        CSerializedNetMsg copy;\n+        copy.data = data;\n+        copy.m_type = m_type;\n+        return copy;\n+    }\n+\n+    std::vector<unsigned char> data;\n+    std::string m_type;\n+\n+    /** Compute total memory usage of this object (own memory + any dynamic memory). */\n+    size_t GetMemoryUsage() const noexcept;\n+};\n+\n+extern const std::string NET_MESSAGE_TYPE_OTHER;\n+using mapMsgTypeSize = std::map</* message type */ std::string, /* total bytes */ uint64_t>;\n+\n+class CNodeStats\n+{\n+public:\n+    NodeId nodeid;\n+    std::chrono::seconds m_last_send;\n+    std::chrono::seconds m_last_recv;\n+    std::chrono::seconds m_last_tx_time;\n+    std::chrono::seconds m_last_block_time;\n+    std::chrono::seconds m_connected;\n+    int64_t nTimeOffset;\n+    std::string m_addr_name;\n+    int nVersion;\n+    std::string cleanSubVer;\n+    bool fInbound;\n+    // We requested high bandwidth connection to peer\n+    bool m_bip152_highbandwidth_to;\n+    // Peer requested high bandwidth connection\n+    bool m_bip152_highbandwidth_from;\n+    int m_starting_height;\n+    uint64_t nSendBytes;\n+    mapMsgTypeSize mapSendBytesPerMsgType;\n+    uint64_t nRecvBytes;\n+    mapMsgTypeSize mapRecvBytesPerMsgType;\n+    NetPermissionFlags m_permission_flags;\n+    std::chrono::microseconds m_last_ping_time;\n+    std::chrono::microseconds m_min_ping_time;\n+    // Our address, as reported by the peer\n+    std::string addrLocal;\n+    // Address of this peer\n+    CAddress addr;\n+    // Bind address of our side of the connection\n+    CAddress addrBind;\n+    // Network the peer connected through\n+    Network m_network;\n+    uint32_t m_mapped_as;\n+    ConnectionType m_conn_type;\n+    /** Transport protocol type. */\n+    TransportProtocolType m_transport_type;\n+    /** BIP324 session id string in hex, if any. */\n+    std::string m_session_id;\n+};\n+\n+\n+/** Transport protocol agnostic message container.\n+ * Ideally it should only contain receive time, payload,\n+ * type and size.\n+ */\n+class CNetMessage {\n+public:\n+    CDataStream m_recv;                  //!< received message data\n+    std::chrono::microseconds m_time{0}; //!< time of message receipt\n+    uint32_t m_message_size{0};          //!< size of the payload\n+    uint32_t m_raw_message_size{0};      //!< used wire size of the message (including header/checksum)\n+    std::string m_type;\n+\n+    CNetMessage(CDataStream&& recv_in) : m_recv(std::move(recv_in)) {}\n+    // Only one CNetMessage object will exist for the same message on either\n+    // the receive or processing queue. For performance reasons we therefore\n+    // delete the copy constructor and assignment operator to avoid the\n+    // possibility of copying CNetMessage objects.\n+    CNetMessage(CNetMessage&&) = default;\n+    CNetMessage(const CNetMessage&) = delete;\n+    CNetMessage& operator=(CNetMessage&&) = default;\n+    CNetMessage& operator=(const CNetMessage&) = delete;\n+\n+    void SetVersion(int nVersionIn)\n+    {\n+        m_recv.SetVersion(nVersionIn);\n+    }\n+};\n+\n+/** The Transport converts one connection's sent messages to wire bytes, and received bytes back. */\n+class Transport {\n+public:\n+    virtual ~Transport() {}\n+\n+    struct Info\n+    {\n+        TransportProtocolType transport_type;\n+        std::optional<uint256> session_id;\n+    };\n+\n+    /** Retrieve information about this transport. */\n+    virtual Info GetInfo() const noexcept = 0;\n+\n+    // 1. Receiver side functions, for decoding bytes received on the wire into transport protocol\n+    // agnostic CNetMessage (message type & payload) objects.\n+\n+    /** Returns true if the current message is complete (so GetReceivedMessage can be called). */\n+    virtual bool ReceivedMessageComplete() const = 0;\n+\n+    /** Feed wire bytes to the transport.\n+     *\n+     * @return false if some bytes were invalid, in which case the transport can't be used anymore.\n+     *\n+     * Consumed bytes are chopped off the front of msg_bytes.\n+     */\n+    virtual bool ReceivedBytes(Span<const uint8_t>& msg_bytes) = 0;\n+\n+    /** Retrieve a completed message from transport.\n+     *\n+     * This can only be called when ReceivedMessageComplete() is true.\n+     *\n+     * If reject_message=true is returned the message itself is invalid, but (other than false\n+     * returned by ReceivedBytes) the transport is not in an inconsistent state.\n+     */\n+    virtual CNetMessage GetReceivedMessage(std::chrono::microseconds time, bool& reject_message) = 0;\n+\n+    // 2. Sending side functions, for converting messages into bytes to be sent over the wire.\n+\n+    /** Set the next message to send.\n+     *\n+     * If no message can currently be set (perhaps because the previous one is not yet done being\n+     * sent), returns false, and msg will be unmodified. Otherwise msg is enqueued (and\n+     * possibly moved-from) and true is returned.\n+     */\n+    virtual bool SetMessageToSend(CSerializedNetMsg& msg) noexcept = 0;\n+\n+    /** Return type for GetBytesToSend, consisting of:\n+     *  - Span<const uint8_t> to_send: span of bytes to be sent over the wire (possibly empty).\n+     *  - bool more: whether there will be more bytes to be sent after the ones in to_send are\n+     *    all sent (as signaled by MarkBytesSent()).\n+     *  - const std::string& m_type: message type on behalf of which this is being sent\n+     *    (\"\" for bytes that are not on behalf of any message).\n+     */\n+    using BytesToSend = std::tuple<\n+        Span<const uint8_t> /*to_send*/,\n+        bool /*more*/,\n+        const std::string& /*m_type*/\n+    >;\n+\n+    /** Get bytes to send on the wire, if any, along with other information about it.\n+     *\n+     * As a const function, it does not modify the transport's observable state, and is thus safe\n+     * to be called multiple times.\n+     *\n+     * @param[in] have_next_message If true, the \"more\" return value reports whether more will\n+     *            be sendable after a SetMessageToSend call. It is set by the caller when they know\n+     *            they have another message ready to send, and only care about what happens\n+     *            after that. The have_next_message argument only affects this \"more\" return value\n+     *            and nothing else.\n+     *\n+     *            Effectively, there are three possible outcomes about whether there are more bytes\n+     *            to send:\n+     *            - Yes:     the transport itself has more bytes to send later. For example, for\n+     *                       V1Transport this happens during the sending of the header of a\n+     *                       message, when there is a non-empty payload that follows.\n+     *            - No:      the transport itself has no more bytes to send, but will have bytes to\n+     *                       send if handed a message through SetMessageToSend. In V1Transport this\n+     *                       happens when sending the payload of a message.\n+     *            - Blocked: the transport itself has no more bytes to send, and is also incapable\n+     *                       of sending anything more at all now, if it were handed another\n+     *                       message to send. This occurs in V2Transport before the handshake is\n+     *                       complete, as the encryption ciphers are not set up for sending\n+     *                       messages before that point.\n+     *\n+     *            The boolean 'more' is true for Yes, false for Blocked, and have_next_message\n+     *            controls what is returned for No.\n+     *\n+     * @return a BytesToSend object. The to_send member returned acts as a stream which is only\n+     *         ever appended to. This means that with the exception of MarkBytesSent (which pops\n+     *         bytes off the front of later to_sends), operations on the transport can only append\n+     *         to what is being returned. Also note that m_type and to_send refer to data that is\n+     *         internal to the transport, and calling any non-const function on this object may\n+     *         invalidate them.\n+     */\n+    virtual BytesToSend GetBytesToSend(bool have_next_message) const noexcept = 0;\n+\n+    /** Report how many bytes returned by the last GetBytesToSend() have been sent.\n+     *\n+     * bytes_sent cannot exceed to_send.size() of the last GetBytesToSend() result.\n+     *\n+     * If bytes_sent=0, this call has no effect.\n+     */\n+    virtual void MarkBytesSent(size_t bytes_sent) noexcept = 0;\n+\n+    /** Return the memory usage of this transport attributable to buffered data to send. */\n+    virtual size_t GetSendMemoryUsage() const noexcept = 0;\n+\n+    // 3. Miscellaneous functions.\n+\n+    /** Whether upon disconnections, a reconnect with V1 is warranted. */\n+    virtual bool ShouldReconnectV1() const noexcept = 0;\n+};\n+\n+class V1Transport final : public Transport",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366850622",
      "id" : 1366850622,
      "in_reply_to_id" : 1366712378,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII585ReHw-",
      "original_commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "original_line" : 259,
      "original_position" : 259,
      "original_start_line" : null,
      "path" : "src/node/connection.h",
      "position" : 259,
      "pull_request_review_id" : 1689833687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366850622/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T11:28:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366850622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366851589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366851589"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(The `Transport` stuff is all specific to a single connection, so it would go in `node/connection.cpp` rather than `net.cpp` per the logic of this PR)",
      "commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "created_at" : "2023-10-20T11:29:56Z",
      "diff_hunk" : "@@ -0,0 +1,887 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_CONNECTION_H\n+#define BITCOIN_NODE_CONNECTION_H\n+\n+/* This module encapsulates connecting with an individual peer,\n+ * translating messages into a byte stream and feeding it to a Sock\n+ * object. Protocol logic is left for net_processing/PeerManager, and\n+ * management of multiple peers is left for net/CConnman.\n+ */\n+\n+#include <bip324.h>\n+#include <hash.h>\n+#include <i2p.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <node/connection_types.h>\n+#include <protocol.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <util/check.h>\n+#include <util/sock.h>\n+\n+#include <atomic>\n+#include <cstdint>\n+#include <deque>\n+#include <list>\n+#include <map>\n+#include <memory>\n+#include <optional>\n+#include <vector>\n+\n+/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n+/** Maximum length of the user agent string in `version` message */\n+static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n+\n+static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+\n+typedef int64_t NodeId;\n+\n+struct CSerializedNetMsg {\n+    CSerializedNetMsg() = default;\n+    CSerializedNetMsg(CSerializedNetMsg&&) = default;\n+    CSerializedNetMsg& operator=(CSerializedNetMsg&&) = default;\n+    // No implicit copying, only moves.\n+    CSerializedNetMsg(const CSerializedNetMsg& msg) = delete;\n+    CSerializedNetMsg& operator=(const CSerializedNetMsg&) = delete;\n+\n+    CSerializedNetMsg Copy() const\n+    {\n+        CSerializedNetMsg copy;\n+        copy.data = data;\n+        copy.m_type = m_type;\n+        return copy;\n+    }\n+\n+    std::vector<unsigned char> data;\n+    std::string m_type;\n+\n+    /** Compute total memory usage of this object (own memory + any dynamic memory). */\n+    size_t GetMemoryUsage() const noexcept;\n+};\n+\n+extern const std::string NET_MESSAGE_TYPE_OTHER;\n+using mapMsgTypeSize = std::map</* message type */ std::string, /* total bytes */ uint64_t>;\n+\n+class CNodeStats\n+{\n+public:\n+    NodeId nodeid;\n+    std::chrono::seconds m_last_send;\n+    std::chrono::seconds m_last_recv;\n+    std::chrono::seconds m_last_tx_time;\n+    std::chrono::seconds m_last_block_time;\n+    std::chrono::seconds m_connected;\n+    int64_t nTimeOffset;\n+    std::string m_addr_name;\n+    int nVersion;\n+    std::string cleanSubVer;\n+    bool fInbound;\n+    // We requested high bandwidth connection to peer\n+    bool m_bip152_highbandwidth_to;\n+    // Peer requested high bandwidth connection\n+    bool m_bip152_highbandwidth_from;\n+    int m_starting_height;\n+    uint64_t nSendBytes;\n+    mapMsgTypeSize mapSendBytesPerMsgType;\n+    uint64_t nRecvBytes;\n+    mapMsgTypeSize mapRecvBytesPerMsgType;\n+    NetPermissionFlags m_permission_flags;\n+    std::chrono::microseconds m_last_ping_time;\n+    std::chrono::microseconds m_min_ping_time;\n+    // Our address, as reported by the peer\n+    std::string addrLocal;\n+    // Address of this peer\n+    CAddress addr;\n+    // Bind address of our side of the connection\n+    CAddress addrBind;\n+    // Network the peer connected through\n+    Network m_network;\n+    uint32_t m_mapped_as;\n+    ConnectionType m_conn_type;\n+    /** Transport protocol type. */\n+    TransportProtocolType m_transport_type;\n+    /** BIP324 session id string in hex, if any. */\n+    std::string m_session_id;\n+};\n+\n+\n+/** Transport protocol agnostic message container.\n+ * Ideally it should only contain receive time, payload,\n+ * type and size.\n+ */\n+class CNetMessage {\n+public:\n+    CDataStream m_recv;                  //!< received message data\n+    std::chrono::microseconds m_time{0}; //!< time of message receipt\n+    uint32_t m_message_size{0};          //!< size of the payload\n+    uint32_t m_raw_message_size{0};      //!< used wire size of the message (including header/checksum)\n+    std::string m_type;\n+\n+    CNetMessage(CDataStream&& recv_in) : m_recv(std::move(recv_in)) {}\n+    // Only one CNetMessage object will exist for the same message on either\n+    // the receive or processing queue. For performance reasons we therefore\n+    // delete the copy constructor and assignment operator to avoid the\n+    // possibility of copying CNetMessage objects.\n+    CNetMessage(CNetMessage&&) = default;\n+    CNetMessage(const CNetMessage&) = delete;\n+    CNetMessage& operator=(CNetMessage&&) = default;\n+    CNetMessage& operator=(const CNetMessage&) = delete;\n+\n+    void SetVersion(int nVersionIn)\n+    {\n+        m_recv.SetVersion(nVersionIn);\n+    }\n+};\n+\n+/** The Transport converts one connection's sent messages to wire bytes, and received bytes back. */\n+class Transport {\n+public:\n+    virtual ~Transport() {}\n+\n+    struct Info\n+    {\n+        TransportProtocolType transport_type;\n+        std::optional<uint256> session_id;\n+    };\n+\n+    /** Retrieve information about this transport. */\n+    virtual Info GetInfo() const noexcept = 0;\n+\n+    // 1. Receiver side functions, for decoding bytes received on the wire into transport protocol\n+    // agnostic CNetMessage (message type & payload) objects.\n+\n+    /** Returns true if the current message is complete (so GetReceivedMessage can be called). */\n+    virtual bool ReceivedMessageComplete() const = 0;\n+\n+    /** Feed wire bytes to the transport.\n+     *\n+     * @return false if some bytes were invalid, in which case the transport can't be used anymore.\n+     *\n+     * Consumed bytes are chopped off the front of msg_bytes.\n+     */\n+    virtual bool ReceivedBytes(Span<const uint8_t>& msg_bytes) = 0;\n+\n+    /** Retrieve a completed message from transport.\n+     *\n+     * This can only be called when ReceivedMessageComplete() is true.\n+     *\n+     * If reject_message=true is returned the message itself is invalid, but (other than false\n+     * returned by ReceivedBytes) the transport is not in an inconsistent state.\n+     */\n+    virtual CNetMessage GetReceivedMessage(std::chrono::microseconds time, bool& reject_message) = 0;\n+\n+    // 2. Sending side functions, for converting messages into bytes to be sent over the wire.\n+\n+    /** Set the next message to send.\n+     *\n+     * If no message can currently be set (perhaps because the previous one is not yet done being\n+     * sent), returns false, and msg will be unmodified. Otherwise msg is enqueued (and\n+     * possibly moved-from) and true is returned.\n+     */\n+    virtual bool SetMessageToSend(CSerializedNetMsg& msg) noexcept = 0;\n+\n+    /** Return type for GetBytesToSend, consisting of:\n+     *  - Span<const uint8_t> to_send: span of bytes to be sent over the wire (possibly empty).\n+     *  - bool more: whether there will be more bytes to be sent after the ones in to_send are\n+     *    all sent (as signaled by MarkBytesSent()).\n+     *  - const std::string& m_type: message type on behalf of which this is being sent\n+     *    (\"\" for bytes that are not on behalf of any message).\n+     */\n+    using BytesToSend = std::tuple<\n+        Span<const uint8_t> /*to_send*/,\n+        bool /*more*/,\n+        const std::string& /*m_type*/\n+    >;\n+\n+    /** Get bytes to send on the wire, if any, along with other information about it.\n+     *\n+     * As a const function, it does not modify the transport's observable state, and is thus safe\n+     * to be called multiple times.\n+     *\n+     * @param[in] have_next_message If true, the \"more\" return value reports whether more will\n+     *            be sendable after a SetMessageToSend call. It is set by the caller when they know\n+     *            they have another message ready to send, and only care about what happens\n+     *            after that. The have_next_message argument only affects this \"more\" return value\n+     *            and nothing else.\n+     *\n+     *            Effectively, there are three possible outcomes about whether there are more bytes\n+     *            to send:\n+     *            - Yes:     the transport itself has more bytes to send later. For example, for\n+     *                       V1Transport this happens during the sending of the header of a\n+     *                       message, when there is a non-empty payload that follows.\n+     *            - No:      the transport itself has no more bytes to send, but will have bytes to\n+     *                       send if handed a message through SetMessageToSend. In V1Transport this\n+     *                       happens when sending the payload of a message.\n+     *            - Blocked: the transport itself has no more bytes to send, and is also incapable\n+     *                       of sending anything more at all now, if it were handed another\n+     *                       message to send. This occurs in V2Transport before the handshake is\n+     *                       complete, as the encryption ciphers are not set up for sending\n+     *                       messages before that point.\n+     *\n+     *            The boolean 'more' is true for Yes, false for Blocked, and have_next_message\n+     *            controls what is returned for No.\n+     *\n+     * @return a BytesToSend object. The to_send member returned acts as a stream which is only\n+     *         ever appended to. This means that with the exception of MarkBytesSent (which pops\n+     *         bytes off the front of later to_sends), operations on the transport can only append\n+     *         to what is being returned. Also note that m_type and to_send refer to data that is\n+     *         internal to the transport, and calling any non-const function on this object may\n+     *         invalidate them.\n+     */\n+    virtual BytesToSend GetBytesToSend(bool have_next_message) const noexcept = 0;\n+\n+    /** Report how many bytes returned by the last GetBytesToSend() have been sent.\n+     *\n+     * bytes_sent cannot exceed to_send.size() of the last GetBytesToSend() result.\n+     *\n+     * If bytes_sent=0, this call has no effect.\n+     */\n+    virtual void MarkBytesSent(size_t bytes_sent) noexcept = 0;\n+\n+    /** Return the memory usage of this transport attributable to buffered data to send. */\n+    virtual size_t GetSendMemoryUsage() const noexcept = 0;\n+\n+    // 3. Miscellaneous functions.\n+\n+    /** Whether upon disconnections, a reconnect with V1 is warranted. */\n+    virtual bool ShouldReconnectV1() const noexcept = 0;\n+};\n+\n+class V1Transport final : public Transport",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#discussion_r1366851589",
      "id" : 1366851589,
      "in_reply_to_id" : 1366712378,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII585ReIAF",
      "original_commit_id" : "1116e57de9556d927e1b3ec14c2c5a71bd6043c5",
      "original_line" : 259,
      "original_position" : 259,
      "original_start_line" : null,
      "path" : "src/node/connection.h",
      "position" : 259,
      "pull_request_review_id" : 1689835431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28686",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366851589/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T11:29:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366851589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-24T22:35:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1778154547",
      "id" : 1778154547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585p_Hwz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1778154547/reactions"
      },
      "updated_at" : "2023-10-24T22:35:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1778154547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Good thing this separation doesn't require additional wrappers and fields.",
      "created_at" : "2023-10-27T10:38:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1782690717",
      "id" : 1782690717,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585qQbOd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1782690717/reactions"
      },
      "updated_at" : "2023-10-27T10:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1782690717",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK fb03ca14c8076bc5fd3c9535c280996032db9cf6",
      "created_at" : "2023-10-31T07:42:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28686#issuecomment-1786663162",
      "id" : 1786663162,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28686",
      "node_id" : "IC_kwDOABII585qflD6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1786663162/reactions"
      },
      "updated_at" : "2023-10-31T07:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1786663162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   }
]
