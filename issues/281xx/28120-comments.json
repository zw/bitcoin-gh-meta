[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28553](https://github.com/bitcoin/bitcoin/pull/28553) ([do not merge] validation: assumeutxo params mainnet by Sjors)\n* [#27596](https://github.com/bitcoin/bitcoin/pull/27596) (assumeutxo (2) by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-07-21T13:55:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#issuecomment-1645631813",
      "id" : 1645631813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28120",
      "node_id" : "IC_kwDOABII585iFllF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1645631813/reactions"
      },
      "updated_at" : "2023-09-30T16:14:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1645631813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> What would be bad is if all our current peers were limited, and we wouldn't try to request the needed blocks from anyone, but also wouldn't try to exchange them for better peers, so that we would be stuck.\r\n\r\nI agree with this part. I think the solution should be expanded to give a chance in such cases, and it should be merged within the same PR.",
      "created_at" : "2023-07-25T09:40:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#issuecomment-1649479100",
      "id" : 1649479100,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28120",
      "node_id" : "IC_kwDOABII585iUQ28",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1649479100/reactions"
      },
      "updated_at" : "2023-07-25T09:40:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1649479100",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agree with @mzumsande and @naumenkogs. Maybe not the same PR if it's substantially different, but the new eviction logic should be merged before this fix.",
      "created_at" : "2023-07-25T18:33:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#issuecomment-1650338677",
      "id" : 1650338677,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28120",
      "node_id" : "IC_kwDOABII585iXit1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650338677/reactions"
      },
      "updated_at" : "2023-07-25T18:33:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650338677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-02T21:54:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#issuecomment-1743824410",
      "id" : 1743824410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28120",
      "node_id" : "IC_kwDOABII585n8KYa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743824410/reactions"
      },
      "updated_at" : "2023-10-02T21:54:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743824410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1375513667"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1375513667"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think we want to keep the + 2 buffer here. This means we would potentially still request blocks 2 blocks after 288, so up to 290. The buffer for sending requested blocks up to 288 + 2 is there for when the sender sees new blocks but the requester has not yet seen it. In this case we are requesting so we should respect the 288 limit.",
      "commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "created_at" : "2023-10-29T21:14:46Z",
      "diff_hunk" : "@@ -1443,30 +1444,46 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n+\n             if (!CanServeWitnesses(peer) && DeploymentActiveAt(*pindex, m_chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n+\n             if (pindex->nStatus & BLOCK_HAVE_DATA || (activeChain && activeChain->Contains(pindex))) {\n-                if (activeChain && pindex->HaveNumChainTxs())\n+                if (activeChain && pindex->HaveNumChainTxs()) {\n                     state->pindexLastCommonBlock = pindex;\n-            } else if (!IsBlockRequested(pindex->GetBlockHash())) {\n-                // The block is not already downloaded, and not yet in flight.\n-                if (pindex->nHeight > nWindowEnd) {\n-                    // We reached the end of the window.\n-                    if (vBlocks.size() == 0 && waitingfor != peer.m_id) {\n-                        // We aren't able to fetch anything, but we would be if the download window was one larger.\n-                        if (nodeStaller) *nodeStaller = waitingfor;\n-                    }\n-                    return;\n                 }\n-                vBlocks.push_back(pindex);\n-                if (vBlocks.size() == count) {\n-                    return;\n+                continue;\n+            }\n+\n+            // Is block in-flight?\n+            if (IsBlockRequested(pindex->GetBlockHash())) {\n+                if (waitingfor == -1) {\n+                    // This is the first already-in-flight block.\n+                    waitingfor = mapBlocksInFlight.lower_bound(pindex->GetBlockHash())->second.first;\n                 }\n-            } else if (waitingfor == -1) {\n-                // This is the first already-in-flight block.\n-                waitingfor = mapBlocksInFlight.lower_bound(pindex->GetBlockHash())->second.first;\n+                continue;\n+            }\n+\n+            // The block is not already downloaded, and not yet in flight.\n+            if (pindex->nHeight > nWindowEnd) {\n+                // We reached the end of the window.\n+                if (vBlocks.size() == 0 && waitingfor != peer.m_id) {\n+                    // We aren't able to fetch anything, but we would be if the download window was one larger.\n+                    if (nodeStaller) *nodeStaller = waitingfor;\n+                }\n+                return;\n+            }\n+\n+            // Don't request blocks that go further than what limited peers can provide\n+            if (is_limited_peer && (state->pindexBestKnownBlock->nHeight - pindex->nHeight > static_cast<int>(NODE_NETWORK_LIMITED_MIN_BLOCKS) + 2 /* add two blocks buffer extension for possible races */)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1375513667",
      "id" : 1375513667,
      "line" : 1480,
      "node_id" : "PRRC_kwDOABII585R_KxD",
      "original_commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "original_line" : 1480,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 61,
      "pull_request_review_id" : 1703037733,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1375513667/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-29T21:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1375513667",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378843710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378843710"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In the commit message of f3089e57aadac462e59499fdeb8091c42f39327b `refactor: Make FindNextBlocksToDownload friendlier`:\r\n\r\n`s/FindNextBlocksToDownload/PeerManagerImpl::FindNextBlocks()/`",
      "commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "created_at" : "2023-11-01T14:02:36Z",
      "diff_hunk" : "@@ -1443,30 +1444,46 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n+\n             if (!CanServeWitnesses(peer) && DeploymentActiveAt(*pindex, m_chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378843710",
      "id" : 1378843710,
      "line" : 1452,
      "node_id" : "PRRC_kwDOABII585SL3w-",
      "original_commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "original_line" : 1452,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 17,
      "pull_request_review_id" : 1708290287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378843710/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T15:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378843710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378886266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378886266"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree - no need for +2, or even it could be harmful and defeat the margin on the sender side - e.g. if the sender is at height 1290, this logic would allow requesting block 1000. Then if the sender progresses to height 1291 in the meantime and sees request for 1000 they will disconnect.\r\n\r\nFurther, to make this symmetric with the sender maybe it should be -2? If we assume the sender has no margin and disconnects for anything >288 then the requester should request only up to 286 (incl)?",
      "commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "created_at" : "2023-11-01T14:36:47Z",
      "diff_hunk" : "@@ -1443,30 +1444,46 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n+\n             if (!CanServeWitnesses(peer) && DeploymentActiveAt(*pindex, m_chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n+\n             if (pindex->nStatus & BLOCK_HAVE_DATA || (activeChain && activeChain->Contains(pindex))) {\n-                if (activeChain && pindex->HaveNumChainTxs())\n+                if (activeChain && pindex->HaveNumChainTxs()) {\n                     state->pindexLastCommonBlock = pindex;\n-            } else if (!IsBlockRequested(pindex->GetBlockHash())) {\n-                // The block is not already downloaded, and not yet in flight.\n-                if (pindex->nHeight > nWindowEnd) {\n-                    // We reached the end of the window.\n-                    if (vBlocks.size() == 0 && waitingfor != peer.m_id) {\n-                        // We aren't able to fetch anything, but we would be if the download window was one larger.\n-                        if (nodeStaller) *nodeStaller = waitingfor;\n-                    }\n-                    return;\n                 }\n-                vBlocks.push_back(pindex);\n-                if (vBlocks.size() == count) {\n-                    return;\n+                continue;\n+            }\n+\n+            // Is block in-flight?\n+            if (IsBlockRequested(pindex->GetBlockHash())) {\n+                if (waitingfor == -1) {\n+                    // This is the first already-in-flight block.\n+                    waitingfor = mapBlocksInFlight.lower_bound(pindex->GetBlockHash())->second.first;\n                 }\n-            } else if (waitingfor == -1) {\n-                // This is the first already-in-flight block.\n-                waitingfor = mapBlocksInFlight.lower_bound(pindex->GetBlockHash())->second.first;\n+                continue;\n+            }\n+\n+            // The block is not already downloaded, and not yet in flight.\n+            if (pindex->nHeight > nWindowEnd) {\n+                // We reached the end of the window.\n+                if (vBlocks.size() == 0 && waitingfor != peer.m_id) {\n+                    // We aren't able to fetch anything, but we would be if the download window was one larger.\n+                    if (nodeStaller) *nodeStaller = waitingfor;\n+                }\n+                return;\n+            }\n+\n+            // Don't request blocks that go further than what limited peers can provide\n+            if (is_limited_peer && (state->pindexBestKnownBlock->nHeight - pindex->nHeight > static_cast<int>(NODE_NETWORK_LIMITED_MIN_BLOCKS) + 2 /* add two blocks buffer extension for possible races */)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378886266",
      "id" : 1378886266,
      "in_reply_to_id" : 1375513667,
      "line" : 1480,
      "node_id" : "PRRC_kwDOABII585SMCJ6",
      "original_commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "original_line" : 1480,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 61,
      "pull_request_review_id" : 1708290287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378886266/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T15:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378886266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378905232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378905232"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should this not be `continue;`? I find `PeerManagerImpl::FindNextBlocks()` hard to follow. Are the entries in `vToFetch` sorted in ascending or descending order?",
      "commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "created_at" : "2023-11-01T14:51:00Z",
      "diff_hunk" : "@@ -1443,30 +1444,46 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n+\n             if (!CanServeWitnesses(peer) && DeploymentActiveAt(*pindex, m_chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n+\n             if (pindex->nStatus & BLOCK_HAVE_DATA || (activeChain && activeChain->Contains(pindex))) {\n-                if (activeChain && pindex->HaveNumChainTxs())\n+                if (activeChain && pindex->HaveNumChainTxs()) {\n                     state->pindexLastCommonBlock = pindex;\n-            } else if (!IsBlockRequested(pindex->GetBlockHash())) {\n-                // The block is not already downloaded, and not yet in flight.\n-                if (pindex->nHeight > nWindowEnd) {\n-                    // We reached the end of the window.\n-                    if (vBlocks.size() == 0 && waitingfor != peer.m_id) {\n-                        // We aren't able to fetch anything, but we would be if the download window was one larger.\n-                        if (nodeStaller) *nodeStaller = waitingfor;\n-                    }\n-                    return;\n                 }\n-                vBlocks.push_back(pindex);\n-                if (vBlocks.size() == count) {\n-                    return;\n+                continue;\n+            }\n+\n+            // Is block in-flight?\n+            if (IsBlockRequested(pindex->GetBlockHash())) {\n+                if (waitingfor == -1) {\n+                    // This is the first already-in-flight block.\n+                    waitingfor = mapBlocksInFlight.lower_bound(pindex->GetBlockHash())->second.first;\n                 }\n-            } else if (waitingfor == -1) {\n-                // This is the first already-in-flight block.\n-                waitingfor = mapBlocksInFlight.lower_bound(pindex->GetBlockHash())->second.first;\n+                continue;\n+            }\n+\n+            // The block is not already downloaded, and not yet in flight.\n+            if (pindex->nHeight > nWindowEnd) {\n+                // We reached the end of the window.\n+                if (vBlocks.size() == 0 && waitingfor != peer.m_id) {\n+                    // We aren't able to fetch anything, but we would be if the download window was one larger.\n+                    if (nodeStaller) *nodeStaller = waitingfor;\n+                }\n+                return;\n+            }\n+\n+            // Don't request blocks that go further than what limited peers can provide\n+            if (is_limited_peer && (state->pindexBestKnownBlock->nHeight - pindex->nHeight > static_cast<int>(NODE_NETWORK_LIMITED_MIN_BLOCKS) + 2 /* add two blocks buffer extension for possible races */)) {\n+                return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378905232",
      "id" : 1378905232,
      "line" : 1481,
      "node_id" : "PRRC_kwDOABII585SMGyQ",
      "original_commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "original_line" : 1481,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 62,
      "pull_request_review_id" : 1708290287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378905232/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T15:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378905232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378928478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378928478"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the intention here to mimic `NODE_NETWORK_LIMITED_MIN_BLOCKS` from the C++ source code, which is `288`? `MIN_BLOCKS_TO_KEEP` is a different constant defined in both the C++ and Python code which happens to be also `288`. Should `NODE_NETWORK_LIMITED_MIN_BLOCKS` be defined in the Python code (equal to 288, but not necessary equal or tied to `MIN_BLOCKS_TO_KEEP`)?",
      "commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "created_at" : "2023-11-01T15:08:35Z",
      "diff_hunk" : "@@ -46,6 +49,44 @@ def setup_network(self):\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n+    def test_avoid_requesting_old_blocks(self):\n+        self.log.info(\"Test node not requesting blocks beyond limited peer threshold\")\n+        # The request of blocks further than the NETWORK_NODE_LIMITED threshold causes a direct disconnection.\n+        pruned_node = self.nodes[0]\n+        miner = self.nodes[1]\n+        full_node = self.nodes[2]\n+\n+        # Connect and generate block to ensure IBD=false\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+        self.generate(miner, 1, sync_fun=self.no_op)\n+\n+        # Verify all peers are at the same height\n+        best_block = miner.getbestblockhash()\n+        for node in [full_node, pruned_node]:\n+            self.wait_until(lambda: node.getbestblockhash() == best_block, timeout=10)\n+\n+        # Verify that all peers are out of IBD\n+        for node in self.nodes:\n+            assert not node.getblockchaininfo()['initialblockdownload']\n+\n+        # Disconnect full_node from the other two peers (the node will remain out of IBD)\n+        self.disconnect_nodes(0, 2)\n+        self.disconnect_nodes(1, 2)\n+        assert_equal(len(full_node.getpeerinfo()), 0)\n+\n+        # Mine blocks and sync the pruned node. Surpass the NETWORK_NODE_LIMITED threshold.\n+        self.generate(miner, MIN_BLOCKS_TO_KEEP + 12, sync_fun=self.no_op)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378928478",
      "id" : 1378928478,
      "line" : 79,
      "node_id" : "PRRC_kwDOABII585SMMde",
      "original_commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "original_line" : 79,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "test/functional/p2p_node_network_limited.py",
      "position" : 41,
      "pull_request_review_id" : 1708290287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378928478/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T15:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378928478",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378931951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378931951"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here `sync_blocks()` is used and above `self.wait_until(lambda: node.getbestblockhash() == ...` is used to achieve the same purpose. For consistency maybe use only one of the methods.",
      "commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "created_at" : "2023-11-01T15:11:22Z",
      "diff_hunk" : "@@ -46,6 +49,44 @@ def setup_network(self):\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n+    def test_avoid_requesting_old_blocks(self):\n+        self.log.info(\"Test node not requesting blocks beyond limited peer threshold\")\n+        # The request of blocks further than the NETWORK_NODE_LIMITED threshold causes a direct disconnection.\n+        pruned_node = self.nodes[0]\n+        miner = self.nodes[1]\n+        full_node = self.nodes[2]\n+\n+        # Connect and generate block to ensure IBD=false\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+        self.generate(miner, 1, sync_fun=self.no_op)\n+\n+        # Verify all peers are at the same height\n+        best_block = miner.getbestblockhash()\n+        for node in [full_node, pruned_node]:\n+            self.wait_until(lambda: node.getbestblockhash() == best_block, timeout=10)\n+\n+        # Verify that all peers are out of IBD\n+        for node in self.nodes:\n+            assert not node.getblockchaininfo()['initialblockdownload']\n+\n+        # Disconnect full_node from the other two peers (the node will remain out of IBD)\n+        self.disconnect_nodes(0, 2)\n+        self.disconnect_nodes(1, 2)\n+        assert_equal(len(full_node.getpeerinfo()), 0)\n+\n+        # Mine blocks and sync the pruned node. Surpass the NETWORK_NODE_LIMITED threshold.\n+        self.generate(miner, MIN_BLOCKS_TO_KEEP + 12, sync_fun=self.no_op)\n+        self.sync_blocks([miner, pruned_node])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378931951",
      "id" : 1378931951,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII585SMNTv",
      "original_commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "original_line" : 80,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/p2p_node_network_limited.py",
      "position" : 42,
      "pull_request_review_id" : 1708290287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378931951/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T15:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378931951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378941093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378941093"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This sleep is non-deterministic. The good thing is that it will not cause sporadic test failures, but still, it could occasionally report success even if the full node requests an old block and gets disconnected (false positive). Also it adds unconditional 3 seconds to the tests execution time.\r\n\r\nIs it possible to lookup something in the log or via RPC to cross check that the full node has made a decision not to request blocks from the pruned node?",
      "commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "created_at" : "2023-11-01T15:18:53Z",
      "diff_hunk" : "@@ -46,6 +49,44 @@ def setup_network(self):\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n+    def test_avoid_requesting_old_blocks(self):\n+        self.log.info(\"Test node not requesting blocks beyond limited peer threshold\")\n+        # The request of blocks further than the NETWORK_NODE_LIMITED threshold causes a direct disconnection.\n+        pruned_node = self.nodes[0]\n+        miner = self.nodes[1]\n+        full_node = self.nodes[2]\n+\n+        # Connect and generate block to ensure IBD=false\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+        self.generate(miner, 1, sync_fun=self.no_op)\n+\n+        # Verify all peers are at the same height\n+        best_block = miner.getbestblockhash()\n+        for node in [full_node, pruned_node]:\n+            self.wait_until(lambda: node.getbestblockhash() == best_block, timeout=10)\n+\n+        # Verify that all peers are out of IBD\n+        for node in self.nodes:\n+            assert not node.getblockchaininfo()['initialblockdownload']\n+\n+        # Disconnect full_node from the other two peers (the node will remain out of IBD)\n+        self.disconnect_nodes(0, 2)\n+        self.disconnect_nodes(1, 2)\n+        assert_equal(len(full_node.getpeerinfo()), 0)\n+\n+        # Mine blocks and sync the pruned node. Surpass the NETWORK_NODE_LIMITED threshold.\n+        self.generate(miner, MIN_BLOCKS_TO_KEEP + 12, sync_fun=self.no_op)\n+        self.sync_blocks([miner, pruned_node])\n+\n+        # Connect full_node to prune_node and check peers don't disconnect right away.\n+        # (they will disconnect if full_node, which is chain-wise behind, request blocks\n+        #  older than MIN_BLOCKS_TO_KEEP)\n+        self.connect_nodes(0, 2)\n+        assert_equal(len(full_node.getpeerinfo()), 1)\n+        time.sleep(3)  # Wait for a few seconds to ensure peers remain connected\n+        assert_equal(len(full_node.getpeerinfo()), 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28120#discussion_r1378941093",
      "id" : 1378941093,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII585SMPil",
      "original_commit_id" : "c1612ea1f050b3daede6a181464bbbce6e254b2d",
      "original_line" : 88,
      "original_position" : 50,
      "original_start_line" : 87,
      "path" : "test/functional/p2p_node_network_limited.py",
      "position" : 50,
      "pull_request_review_id" : 1708290287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28120",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378941093/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 87,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-11-01T15:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1378941093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
