{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "## Rationale\r\n\r\nCurrently, `addnode` has a couple of corner cases that allow it to either connect to the same peer more than once, hence wasting outbound connection slots, or add redundant information to `m_added_nodes`, hence making Bitcoin iterate through useless data on a regular basis.\r\n\r\n### Connecting to the same node more than once\r\n\r\nIn general, connecting to the same node more than once is something we should try to prevent. Currently, this is possible via `addnode` in two different ways:\r\n\r\n1. Calling `addnode` more than once in a short time period, using two equivalent but distinct addresses\r\n2. Calling `addnode add` using an IP, and `addnode onetry` after with an address that resolved to the same IP\r\n\r\nFor the former, the issue boils down to `CConnman::ThreadOpenAddedConnections` calling `CConnman::GetAddedNodeInfo` once, and iterating over the result to open connections (`CConman::OpenNetworkConnection`) on the same loop for all addresses.`CConnman::ConnectNode` only checks a single address, at random, when resolving from a hostname, and uses it to check whether we are already connected to it.\r\n\r\nAn example to test this would be calling:\r\n\r\n```\r\nbitcoin-cli addnode \"127.0.0.1:port\" add\r\nbitcoin-cli addnode \"localhost:port\" add\r\n```\r\n\r\nAnd check how it allows us to perform both connections some times, and some times it fails.\r\n\r\nThe latter boils down to the same issue, but takes advantage of `onetry` bypassing the `CConnman::ThreadOpenAddedConnections` logic and calling `CConnman::OpenNetworkConnection` straightaway. A way to test this would be:\r\n\r\n```\r\nbitcoin-cli addnode \"127.0.0.1:port\" add\r\nbitcoin-cli addnode \"localhost:port\" onetry\r\n```\r\n\r\n### Adding the same peer with two different, yet equivalent, addresses\r\n\r\nThe current implementation of `addnode` is pretty naive when checking what data is added to `m_added_nodes`. Given the collection stores strings, the checks at `CConnman::AddNode()` basically check wether the exact provided string is already in the collection. If so, the data is rejected, otherwise, it is accepted. However, ips can be formatted in several ways that would bypass those checks. \r\n\r\nTwo examples would be `127.0.0.1` being equal to `127.1` and `[::1]` being equal to `[0:0:0:0:0:0:0:1]`. Adding any pair of these will be allowed by the rpc command, and both will be reported as connected by `getaddednodeinfo`, given they map to the same `CService`. \r\n\r\nThis is less severe than the previous issue, since even tough both nodes are reported as connected by `getaddednodeinfo`, there is only a single connection to them (as properly reported by `getpeerinfo`). However, this adds redundant data to `m_added_nodes`, which is undesirable.\r\n\r\n\r\n### Parametrize `CConnman::GetAddedNodeInfo`\r\nFinally, this PR also parametrizes `CConnman::GetAddedNodeInfo` so it returns either all added nodes info, or only info about the nodes we are **not** connected to. This method is used both for `rpc`, in `getaddednodeinfo`, in which we are reporting all data to the user, so the former applies, and to check what nodes we are not connected to, in `CConnman::ThreadOpenAddedConnections`, in which we are currently returning more data than needed and then actively filtering using `CService.fConnected()`\r\n",
   "closed_at" : "2023-11-08T11:31:59Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
      "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
      "followers_url" : "https://api.github.com/users/glozow/followers",
      "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/glozow",
      "id" : 25183001,
      "login" : "glozow",
      "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
      "organizations_url" : "https://api.github.com/users/glozow/orgs",
      "received_events_url" : "https://api.github.com/users/glozow/received_events",
      "repos_url" : "https://api.github.com/users/glozow/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/glozow"
   },
   "comments" : 18,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/comments",
   "created_at" : "2023-07-25T20:47:02Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/28155",
   "id" : 1821123378,
   "labels" : [
      {
         "color" : "006b75",
         "default" : false,
         "description" : null,
         "id" : 98298007,
         "name" : "P2P",
         "node_id" : "MDU6TGFiZWw5ODI5ODAwNw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585WYCBk",
   "number" : 28155,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/28155.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28155",
      "merged_at" : "2023-11-08T11:31:59Z",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/28155.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28155"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/timeline",
   "title" : "net: improves addnode / m_added_nodes logic",
   "updated_at" : "2023-11-08T11:31:59Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28155",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
      "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sr-gi/followers",
      "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sr-gi",
      "id" : 6665628,
      "login" : "sr-gi",
      "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
      "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
      "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
      "repos_url" : "https://api.github.com/users/sr-gi/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sr-gi"
   }
}
