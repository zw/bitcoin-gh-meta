[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/27877).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [achow101](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1936432223), [sipa](https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1873140538), [sr-gi](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1936624217) |\n| Concept ACK | [jonatack](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1834473406), [S3RK](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1837467046), [kashifs](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1859275939), [ishaanam](https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1816719303) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28985](https://github.com/bitcoin/bitcoin/pull/28985) (Avoid changeless input sets when SFFO is active by murchandamus)\n* [#28977](https://github.com/bitcoin/bitcoin/pull/28977) (Add Gutter Guard Selector by murchandamus)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-13T22:32:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1590140722",
      "id" : 1590140722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585ex58y",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1590140722/reactions"
      },
      "updated_at" : "2024-02-09T21:25:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1590140722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "At this point, Iâm mostly looking for Concept reviews.\r\n\r\nSome ideas floating around in the context that Iâd love comments on:\r\n\r\n- Also run CoinGrinder when the fees surpass some relative portion of the recipient output amounts\r\n- Only run CoinGrinder if no changeless solution was proposed",
      "created_at" : "2023-06-14T13:58:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1591266110",
      "id" : 1591266110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585e2Ms-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591266110/reactions"
      },
      "updated_at" : "2023-06-14T17:56:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591266110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for exploring this, I think this is an interesting idea! I'll comment based on my specific usage of the wallet for lightning service providers, please bear in mind that this is a very specific use case that is quite different from regular users (see #24795 for early details about this).\r\n\r\nMy understanding of the current goals of coin selection are that it tries to find a good balance between minimizing fees and consolidating utxos. The latter actually helps the former: consolidating utxos is usually good for performance, and if you do it when fees are low, you will avoid paying more fees in the future when fees are higher because you'll be able to use less inputs in your future transactions.\r\n\r\nIn the case of a lightning service provider, we'd rather avoid consolidating utxos, and are ready to pay more fees to keep a large enough utxo set to satisfy our users' needs. The main reasons for that are that:\r\n\r\n- we are using 0-conf (in a setup where the user is trusting us to not double-spend)\r\n- we are using low fees for those transactions (it's ok to keep transactions unconfirmed until the mempool clears, this is how we can keep the cost low for users)\r\n- the change outputs from most of those transactions are _unsafe_ because they may be double-spent by a commitment transaction (and thus generally unusable until the the transaction confirms, except when used for that same user)\r\n\r\nThat last point is a consequence of [splicing](https://github.com/lightning/bolts/pull/863), let me know if you want me to explain that point in more details.\r\n\r\nIf we run out of _safe_ utxos, we cannot onboard new users, which may require us to transfer funds from a cold wallet while making sure we're creating many utxos, at a time where the on-chain fees may be high. Our ideal wallet would maintain a large pool of utxos of various sizes, to ensure we're always ready to onboard new users or sell liquidity to existing users.\r\n\r\nI understand that this is the opposite of what most end users want and can't be achieved by the same algorithm: that's why I would find it very useful to have various coin selection algorithms in bitcoin core, that are tuned to different profiles/scenarios. I like that this algorithm feels like something we could use (at all feerates) to keep a wallet state that makes more sense for us.",
      "created_at" : "2023-06-15T10:44:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1592803865",
      "id" : 1592803865,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585e8EIZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1592803865/reactions"
      },
      "updated_at" : "2023-06-15T10:44:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1592803865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Changes in last force-push: https://github.com/bitcoin/bitcoin/compare/10621c6c4499ba32ff3b7f0bd11b0351f36982b4..0446986f8dd87db29153618d380d159ec0016c1a\r\n\r\nThanks for your thoughts, @t-bast. Your comment inspired a small optimization. \r\nCoinGrinder has been simplified by keeping only track of the input weight (instead of weight and waste), and minimizing input weight throughout. This reduced the number of parameters necessary to call CoinGrinder, simplified the input set traversal, and allows CoinGrinder to be used at all feerates instead of just high feerates. It is however still only called for feerates above 100â¯á¹©/vB from [`spend.cpp`](https://github.com/bitcoin/bitcoin/pull/27877/files#diff-6e06b309cd494ef5da4e78aa0929a980767edd12342137f268b9219167064d13R586) at this time.",
      "created_at" : "2023-06-15T20:11:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1593666325",
      "id" : 1593666325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585e_WsV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593666325/reactions"
      },
      "updated_at" : "2023-06-15T20:12:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593666325",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ran the fuzzer for a bit:\r\n\r\n```\r\nfuzz: wallet/test/fuzz/coinselection.cpp:102: void wallet::coin_grinder_fuzz_target(FuzzBufferType): Assertion `result_knapsack->GetWeight() >= result_cg->GetWeight()' failed.\r\n```\r\n\r\nInput to reproduce:\r\n```sh\r\n$ echo \"d3d3/wF383d3d3d3d3d3d3d3d3d5d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3fzd3d3d3d3d7BE\r\nWnd3d3d3d3V3d3d3d3d3d3l6d3d3d3d3d3f///8Fd3d3d3d3d3d3d3d3d1d3d3d3d3d3d3d3d3d3\r\nd3d3d3d3d3d3d3d3d3d3d3d3Mnd3d3d3d3d5d3d3d3d3YS5hYWFhYWFhYWFhYWFhYWFhYWFhYUBh\r\nYWEuAAAACmFhWWFhYWFhd3d3d3d3d3d3d3d3dzp3d3d3d3d3d3d3d3d3d3d3d/N3d3d3d3d3d3d3\r\nd3d3eXd3d3d3d3d3d3d1d3d3d3d3d3d3dzJ3d3d3d3d3eXd3d3d3d3d3d3d1d3d3d3d3d3d3dzJ3\r\nd3d3d3d3d3d3d3d3d3d3dyh3d3d3d3d3dxcC+xc=\" | base64 -d > coingrinder_crash\r\n```",
      "created_at" : "2023-06-20T09:40:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1598451117",
      "id" : 1598451117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585fRm2t",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1598451117/reactions"
      },
      "updated_at" : "2023-06-20T09:40:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1598451117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I would like to see if the CI catches the [crash](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1598451117), now that #27919 has been merged. @Xekyo would you mind rebasing?",
      "created_at" : "2023-06-21T09:24:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1600498713",
      "id" : 1600498713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585fZawZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600498713/reactions"
      },
      "updated_at" : "2023-06-21T09:24:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600498713",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@dergoegge: Thanks, I discovered the issue myself over the weekend and was exploring yesterday whether I could come up with another optimization. In the end, I fixed the fuzz test by only comparing the weight with SRD and Knapsack when CoinGrinder actually concluded searching the combination space exhaustively. Since finding the lowest weight input set is an NP-hard problem, itâs clearly expected that we can generate UTXO pools for which CoinGrinder will not be able to finish the search in 100k attempts, it was naÃ¯ve to expect that the fuzz test wouldnât eventually find such a case.\r\n\r\nYour crash seed passes now.\r\n\r\nIâm sorry Iâm only seeing your comment after pushing the fix.",
      "created_at" : "2023-06-21T17:07:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1601246132",
      "id" : 1601246132,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585fcRO0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601246132/reactions"
      },
      "updated_at" : "2023-06-21T17:24:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601246132",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think you can still rebase to unblock the CI in any case?",
      "created_at" : "2023-06-21T17:10:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1601255030",
      "id" : 1601255030,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585fcTZ2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601255030/reactions"
      },
      "updated_at" : "2023-06-21T17:10:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601255030",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on Master.\r\n\r\nChanges since last rebase: SelectionResult now has a record if BnB or CoinGrinder run out of tries and thus have not found the optimal solution.",
      "created_at" : "2023-06-21T17:16:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1601273279",
      "id" : 1601273279,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585fcX2_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601273279/reactions"
      },
      "updated_at" : "2023-06-21T17:16:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601273279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-06-23T22:01:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1605031556",
      "id" : 1605031556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585fqtaE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1605031556/reactions"
      },
      "updated_at" : "2023-06-23T22:01:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1605031556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1318794256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318794256"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 49ec2d4ada6d9abb43c2a5f35dd6f2e5666157f9: Is there any case that `curr_try` may be greater than `TOTAL_TRIES`? ",
      "commit_id" : "6b4cf71446d18c7fc0cbe09aade80769c062e573",
      "created_at" : "2023-09-07T15:37:38Z",
      "diff_hunk" : "@@ -191,6 +191,161 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0;\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1318794256",
      "id" : 1318794256,
      "line" : 301,
      "node_id" : "PRRC_kwDOABII585OmzQQ",
      "original_commit_id" : "49ec2d4ada6d9abb43c2a5f35dd6f2e5666157f9",
      "original_line" : 277,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 145,
      "pull_request_review_id" : 1615733605,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318794256/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T15:37:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318794256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1318948005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318948005"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, I donât think so, an equality check here should be functionally equivalent.",
      "commit_id" : "6b4cf71446d18c7fc0cbe09aade80769c062e573",
      "created_at" : "2023-09-07T17:56:03Z",
      "diff_hunk" : "@@ -191,6 +191,161 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0;\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1318948005",
      "id" : 1318948005,
      "in_reply_to_id" : 1318794256,
      "line" : 301,
      "node_id" : "PRRC_kwDOABII585OnYyl",
      "original_commit_id" : "49ec2d4ada6d9abb43c2a5f35dd6f2e5666157f9",
      "original_line" : 277,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 145,
      "pull_request_review_id" : 1615976225,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318948005/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T17:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318948005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1319031269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1319031269"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In cf14a72859a2eaf42a24a2ea3125bdadde5f6611: Here we're setting it for BnB but seems we're not using `GetAlgoCompleted` for it?",
      "commit_id" : "6b4cf71446d18c7fc0cbe09aade80769c062e573",
      "created_at" : "2023-09-07T19:23:20Z",
      "diff_hunk" : "@@ -174,6 +174,10 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n                 curr_selection_weight += utxo.m_weight;\n             }\n         }\n+        if (curr_try >= TOTAL_TRIES - 1) {\n+            // On last attempt and didnât break due to full traversal: solution is non-optimal\n+            result.SetAlgoCompleted(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1319031269",
      "id" : 1319031269,
      "line" : 191,
      "node_id" : "PRRC_kwDOABII585OntHl",
      "original_commit_id" : "cf14a72859a2eaf42a24a2ea3125bdadde5f6611",
      "original_line" : 179,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 45,
      "pull_request_review_id" : 1616104896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1319031269/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T19:23:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1319031269",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1320274591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320274591"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You are right, Iâll have follow up on this",
      "commit_id" : "6b4cf71446d18c7fc0cbe09aade80769c062e573",
      "created_at" : "2023-09-08T19:41:44Z",
      "diff_hunk" : "@@ -174,6 +174,10 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n                 curr_selection_weight += utxo.m_weight;\n             }\n         }\n+        if (curr_try >= TOTAL_TRIES - 1) {\n+            // On last attempt and didnât break due to full traversal: solution is non-optimal\n+            result.SetAlgoCompleted(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1320274591",
      "id" : 1320274591,
      "in_reply_to_id" : 1319031269,
      "line" : 191,
      "node_id" : "PRRC_kwDOABII585Oscqf",
      "original_commit_id" : "cf14a72859a2eaf42a24a2ea3125bdadde5f6611",
      "original_line" : 179,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 45,
      "pull_request_review_id" : 1618156668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320274591/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-08T19:41:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320274591",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK here or https://github.com/bitcoin/bitcoin/pull/28977 based on today's IRC discussion https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-11-30#986727.",
      "created_at" : "2023-11-30T20:10:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1834473406",
      "id" : 1834473406,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585tV9e-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1834473406/reactions"
      },
      "updated_at" : "2023-11-30T22:17:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1834473406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK.\r\n\r\nThe PR description should say that we don't use hardcoded fee rate value, but rather multiple of long-term-fee-rate. LTFR is an existing user configurable parameter. It's also a good fit for the purpose of determining when to be more \"aggressive\" with coin selection, because it captures forward looking fee market expectations. ",
      "created_at" : "2023-12-03T12:32:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1837467046",
      "id" : 1837467046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585thYWm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837467046/reactions"
      },
      "updated_at" : "2023-12-03T12:32:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837467046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The PR description should say that we don't use hardcoded fee rate value, but rather multiple of long-term-fee-rate. LTFR is an existing user configurable parameter. It's also a good fit for the purpose of determining when to be more \"aggressive\" with coin selection, because it captures forward looking fee market expectations.\r\n\r\nThanks, Iâve amended the description.",
      "created_at" : "2023-12-04T19:19:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1839309807",
      "id" : 1839309807,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585toaPv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1839309807/reactions"
      },
      "updated_at" : "2023-12-04T19:19:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1839309807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414446693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414446693"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 313d4df88360edf1bad1f3415166a96f0ee93f0a \"opt: Tie-break UTXO sort by waste for BnB\"\r\n\r\nThis comparison is a little hard to follow as it requires reminding yourself of the effects of the waste score. It wasn't immediately obvious why the weight matters for this comparison. It seems like it would be simpler to just actually calculate the wastes and compare them.\r\n\r\n```suggestion\r\n            return (a.fee - a.long_term_fee) > (b.fee - b.long_term_fee);\r\n```",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-04T20:25:00Z",
      "diff_hunk" : "@@ -28,6 +28,14 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n     {\n+        if (a.GetSelectionAmount() == b.GetSelectionAmount()) {\n+            // Sort lower waste to front on tied effective_value\n+            if (a.long_term_fee < a.fee) {\n+                return a.m_weight < b.m_weight;\n+            } else {\n+                return a.m_weight > b.m_weight;\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414446693",
      "id" : 1414446693,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UTr5l",
      "original_commit_id" : "313d4df88360edf1bad1f3415166a96f0ee93f0a",
      "original_line" : 37,
      "original_position" : 10,
      "original_start_line" : 33,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1763330890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414446693/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-04T21:25:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414446693",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414455724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414455724"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In ec308d7873f7eb4d597c00708091ede55e9ff5a5 \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nI wish there was a better way to write feerate*3. This is kinda hard to read.",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-04T20:31:20Z",
      "diff_hunk" : "@@ -585,6 +585,13 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{coin_selection_params.m_long_term_feerate.GetFee(3000)}) { // Minimize input set for feerates of at least 3ÃLTFRE (default: 30â¯á¹©/vB+)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414455724",
      "id" : 1414455724,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UTuGs",
      "original_commit_id" : "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "original_line" : 588,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1763330890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414455724/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-04T21:25:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414455724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414479523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414479523"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In ec308d7873f7eb4d597c00708091ede55e9ff5a5 \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nSince this lambda is used in only one spot, I think it would be a bit easier to read to just have it inline.",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-04T20:50:35Z",
      "diff_hunk" : "@@ -191,6 +191,160 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414479523",
      "id" : 1414479523,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UTz6j",
      "original_commit_id" : "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "original_line" : 274,
      "original_position" : 84,
      "original_start_line" : 268,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1763330890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414479523/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-04T21:25:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414479523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414513187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414513187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 6ba9c1cd1032c75e618d8ca7b7aee6ebed16d22d \"opt: Cut if last addition was minimal weight\"\r\n\r\nWhy 2x `max_weight` instead of just `max_weight`?",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-04T21:20:06Z",
      "diff_hunk" : "@@ -257,17 +257,21 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n     // Sort the utxo_pool\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n     std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n \n     // Calculate lookahead and check that there are sufficient funds\n     CAmount total_available = 0;\n+    int min_group_weight = 2*max_weight;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414513187",
      "id" : 1414513187,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UT8Ij",
      "original_commit_id" : "6ba9c1cd1032c75e618d8ca7b7aee6ebed16d22d",
      "original_line" : 264,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1763330890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414513187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-04T21:25:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414513187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420936262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420936262"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, great suggestion. Adopted, but with turned around comparison, it needs to be less-than (I checked with a test).",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-08T19:33:07Z",
      "diff_hunk" : "@@ -28,6 +28,14 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n     {\n+        if (a.GetSelectionAmount() == b.GetSelectionAmount()) {\n+            // Sort lower waste to front on tied effective_value\n+            if (a.long_term_fee < a.fee) {\n+                return a.m_weight < b.m_weight;\n+            } else {\n+                return a.m_weight > b.m_weight;\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420936262",
      "id" : 1420936262,
      "in_reply_to_id" : 1414446693,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UscRG",
      "original_commit_id" : "313d4df88360edf1bad1f3415166a96f0ee93f0a",
      "original_line" : 37,
      "original_position" : 10,
      "original_start_line" : 33,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1773042003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420936262/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-08T20:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420936262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420947210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420947210"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added multiplication operator in https://github.com/bitcoin/bitcoin/pull/29037, and amended here",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-08T19:38:21Z",
      "diff_hunk" : "@@ -585,6 +585,13 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{coin_selection_params.m_long_term_feerate.GetFee(3000)}) { // Minimize input set for feerates of at least 3ÃLTFRE (default: 30â¯á¹©/vB+)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420947210",
      "id" : 1420947210,
      "in_reply_to_id" : 1414455724,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Use8K",
      "original_commit_id" : "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "original_line" : 588,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1773042003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420947210/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-08T20:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420947210",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420959370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420959370"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Inlined the `add_utxo_at_index` function",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-08T19:41:31Z",
      "diff_hunk" : "@@ -191,6 +191,160 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420959370",
      "id" : 1420959370,
      "in_reply_to_id" : 1414479523,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ush6K",
      "original_commit_id" : "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "original_line" : 274,
      "original_position" : 84,
      "original_start_line" : 268,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1773042003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420959370/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-08T20:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420959370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420968134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420968134"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I just need this to be as big as the largest or bigger than any of the actual groupsâ input weights. Changed to `std::numeric_limits<int>::max()`",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-08T19:47:52Z",
      "diff_hunk" : "@@ -257,17 +257,21 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n     // Sort the utxo_pool\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n     std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n \n     // Calculate lookahead and check that there are sufficient funds\n     CAmount total_available = 0;\n+    int min_group_weight = 2*max_weight;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420968134",
      "id" : 1420968134,
      "in_reply_to_id" : 1414513187,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UskDG",
      "original_commit_id" : "6ba9c1cd1032c75e618d8ca7b7aee6ebed16d22d",
      "original_line" : 264,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1773042003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420968134/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-08T20:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420968134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420971102"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420971102"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I dropped tracking whether the algorithm was able to exhaustively search the UTXO pool from BnB for now",
      "commit_id" : "7aa9d18320a384e99cec523371945055ba224ad0",
      "created_at" : "2023-12-08T19:51:51Z",
      "diff_hunk" : "@@ -174,6 +174,10 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n                 curr_selection_weight += utxo.m_weight;\n             }\n         }\n+        if (curr_try >= TOTAL_TRIES - 1) {\n+            // On last attempt and didnât break due to full traversal: solution is non-optimal\n+            result.SetAlgoCompleted(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420971102",
      "id" : 1420971102,
      "in_reply_to_id" : 1319031269,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Uskxe",
      "original_commit_id" : "cf14a72859a2eaf42a24a2ea3125bdadde5f6611",
      "original_line" : 191,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1773042003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420971102/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-08T20:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420971102",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Edit: Moved simulation result discussion to [Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279)",
      "created_at" : "2023-12-09T03:03:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1848150890",
      "id" : 1848150890,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585uKItq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1848150890/reactions"
      },
      "updated_at" : "2023-12-21T22:15:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1848150890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Edit: Moved simulation result discussion to [Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279)",
      "created_at" : "2023-12-09T03:08:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1848191242",
      "id" : 1848191242,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585uKSkK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1848191242/reactions"
      },
      "updated_at" : "2023-12-21T22:15:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1848191242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421777389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421777389"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "For consistency, I think this should read:\r\n\r\n`the 4th is deselected, the 2nd is deselected and the 3rd is selected`",
      "commit_id" : "ef8ed8c973b2a48ccff54e4443a88e876d210bcf",
      "created_at" : "2023-12-10T16:14:35Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421777389",
      "id" : 1421777389,
      "line" : 224,
      "node_id" : "PRRC_kwDOABII585Uvpnt",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 212,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 65,
      "pull_request_review_id" : 1774060383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421777389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-10T16:14:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421777389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1489460?v=4",
         "events_url" : "https://api.github.com/users/kashifs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kashifs/followers",
         "following_url" : "https://api.github.com/users/kashifs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kashifs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kashifs",
         "id" : 1489460,
         "login" : "kashifs",
         "node_id" : "MDQ6VXNlcjE0ODk0NjA=",
         "organizations_url" : "https://api.github.com/users/kashifs/orgs",
         "received_events_url" : "https://api.github.com/users/kashifs/received_events",
         "repos_url" : "https://api.github.com/users/kashifs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kashifs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kashifs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kashifs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421789507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421789507"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This should read:\r\n\r\n`@param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.`",
      "commit_id" : "ef8ed8c973b2a48ccff54e4443a88e876d210bcf",
      "created_at" : "2023-12-10T17:40:26Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421789507",
      "id" : 1421789507,
      "line" : 226,
      "node_id" : "PRRC_kwDOABII585UvslD",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 214,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 67,
      "pull_request_review_id" : 1774071212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421789507/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-10T17:40:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421789507",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1489460?v=4",
         "events_url" : "https://api.github.com/users/kashifs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kashifs/followers",
         "following_url" : "https://api.github.com/users/kashifs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kashifs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kashifs",
         "id" : 1489460,
         "login" : "kashifs",
         "node_id" : "MDQ6VXNlcjE0ODk0NjA=",
         "organizations_url" : "https://api.github.com/users/kashifs/orgs",
         "received_events_url" : "https://api.github.com/users/kashifs/received_events",
         "repos_url" : "https://api.github.com/users/kashifs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kashifs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kashifs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kashifs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421790528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421790528"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this should read:\r\n\r\n`@param CAmount change_target The minimum budget for creating a change output that we add to the selection_target.`",
      "commit_id" : "ef8ed8c973b2a48ccff54e4443a88e876d210bcf",
      "created_at" : "2023-12-10T17:47:49Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421790528",
      "id" : 1421790528,
      "line" : 231,
      "node_id" : "PRRC_kwDOABII585Uvs1A",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 219,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 72,
      "pull_request_review_id" : 1774072057,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421790528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-10T17:47:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421790528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1489460?v=4",
         "events_url" : "https://api.github.com/users/kashifs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kashifs/followers",
         "following_url" : "https://api.github.com/users/kashifs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kashifs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kashifs",
         "id" : 1489460,
         "login" : "kashifs",
         "node_id" : "MDQ6VXNlcjE0ODk0NjA=",
         "organizations_url" : "https://api.github.com/users/kashifs/orgs",
         "received_events_url" : "https://api.github.com/users/kashifs/received_events",
         "repos_url" : "https://api.github.com/users/kashifs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kashifs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kashifs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kashifs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1423095044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423095044"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "perhaps `change_target` could be `const CAmount&`?",
      "commit_id" : "ef8ed8c973b2a48ccff54e4443a88e876d210bcf",
      "created_at" : "2023-12-11T20:33:53Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1423095044",
      "id" : 1423095044,
      "in_reply_to_id" : 1421790528,
      "line" : 231,
      "node_id" : "PRRC_kwDOABII585U0rUE",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 219,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 72,
      "pull_request_review_id" : 1776118641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423095044/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T20:33:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423095044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1425998172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425998172"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps. That would make it consistent with const CAmount& selection_target. It's my understanding that the documentation should exactly match the function definition. Is there another way to look at this?",
      "commit_id" : "ef8ed8c973b2a48ccff54e4443a88e876d210bcf",
      "created_at" : "2023-12-13T23:45:10Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1425998172",
      "id" : 1425998172,
      "in_reply_to_id" : 1421790528,
      "line" : 231,
      "node_id" : "PRRC_kwDOABII585U_wFc",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 219,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 72,
      "pull_request_review_id" : 1780665941,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425998172/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-13T23:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425998172",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1489460?v=4",
         "events_url" : "https://api.github.com/users/kashifs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kashifs/followers",
         "following_url" : "https://api.github.com/users/kashifs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kashifs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kashifs",
         "id" : 1489460,
         "login" : "kashifs",
         "node_id" : "MDQ6VXNlcjE0ODk0NjA=",
         "organizations_url" : "https://api.github.com/users/kashifs/orgs",
         "received_events_url" : "https://api.github.com/users/kashifs/received_events",
         "repos_url" : "https://api.github.com/users/kashifs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kashifs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kashifs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kashifs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK [ef8ed8](https://github.com/bitcoin/bitcoin/commit/ef8ed8c973b2a48ccff54e4443a88e876d210bcf)",
      "created_at" : "2023-12-17T20:31:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1859275939",
      "id" : 1859275939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585u0kyj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1859275939/reactions"
      },
      "updated_at" : "2023-12-17T20:32:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1859275939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1489460?v=4",
         "events_url" : "https://api.github.com/users/kashifs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kashifs/followers",
         "following_url" : "https://api.github.com/users/kashifs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kashifs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kashifs",
         "id" : 1489460,
         "login" : "kashifs",
         "node_id" : "MDQ6VXNlcjE0ODk0NjA=",
         "organizations_url" : "https://api.github.com/users/kashifs/orgs",
         "received_events_url" : "https://api.github.com/users/kashifs/received_events",
         "repos_url" : "https://api.github.com/users/kashifs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kashifs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kashifs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kashifs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435191286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191286"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, Iâll fix that",
      "commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "created_at" : "2023-12-22T16:10:52Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435191286",
      "id" : 1435191286,
      "in_reply_to_id" : 1421777389,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vi0f2",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 212,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1794686545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191286/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-22T16:54:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435191774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191774"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks",
      "commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "created_at" : "2023-12-22T16:11:39Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435191774",
      "id" : 1435191774,
      "in_reply_to_id" : 1421789507,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vi0ne",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 214,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1794686545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191774/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-22T16:54:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435192987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435192987"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, Iâve amended the documentation",
      "commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "created_at" : "2023-12-22T16:13:37Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435192987",
      "id" : 1435192987,
      "in_reply_to_id" : 1421790528,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vi06b",
      "original_commit_id" : "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "original_line" : 219,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1794686545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435192987/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-22T16:54:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435192987",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438411775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps this explanation of the algorithm belongs more inside the body of the function than at the top, as it's explaining the implementation and not the interface?",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2023-12-29T21:11:38Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438411775",
      "id" : 1438411775,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VvGv_",
      "original_commit_id" : "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "original_line" : 198,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1799219103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411775/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-29T22:24:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438411976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It took me a while to figure out what the intent of each operation is. It may be worthwhile to document that here too. My belief is:\r\n* ADD: explore the current prefix further (by selecting the first undecided transaction, ignoring equal-value transactions if the last one was unselected).\r\n* SHIFT: skip the current prefix (just the selection branch).\r\n* CUT: skip the current prefix (both selection and non-selection branches).\r\n\r\nIt may also be helpful to explain for each of the operations how the \"current index\" is affected by them.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2023-12-29T21:12:21Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438411976",
      "id" : 1438411976,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VvGzI",
      "original_commit_id" : "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "original_line" : 201,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1799219103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411976/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-29T22:59:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In a [simulation](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279) comparing the `master` branch with the `CoinGrinder` branch playing through a scenario that performs 5â¯005 payments with feerates sampled from 2023, CoinGrinder reduces the total transaction fees by 9.5%.\r\n\r\nExcerpts from the result table:\r\n\r\n| Branch | Mean UTXO count | Total Fees paid | Change outputs created | Solutions found by |\r\n| ---- | --- | --- | --- | --- |\r\n| `master` | 165.36 | 0.44500219 | 3020 | knapsack: 610 ; srd: 2414 ; bnb: 1981 |\r\n| `CoinGrinder` | 230.68 | 0.40248296 | 3110 | knapsack: 520 ; bnb: 1894 ; cg: 1382â¯; srd: 1209 |\r\n\r\nAs can be seen, in this scenario in which the vast majority of transactions are created above the _long-term feerate estimate_, CoinGrinder significantly reduces the overall fee expenditures at the cost of creating change outputs slightly more often, and maintaining a larger UTXO pool. We do see the walletâs UTXO pool quickly contract whenever the feerates are reduced to lower levels: \r\n![image](https://github.com/bitcoin/bitcoin/assets/4060799/87223918-eb26-44da-ab23-a96fd72ab23a)\r\n\r\n\r\nWe can see in a second simulation that uses the same payment scenario but a series of much lower feerates (\"Peak and tail\") that the UTXO pool size is only slightly elevated when a larger portion of the transactions is performed at feerates below the _long-term feerate estimate_. We see that the addition of CoinGrinder reduces the total fees by about 4% due to better performance in the infrequent high feerate payments.\r\n\r\n| Branch | Mean UTXO count | Total Fees paid | Change outputs created | Solutions found by |\r\n| ---- | --- | --- | --- | --- |\r\n| `master` | 32.70 |0.10775743 | 4556 | knapsack: 3636 ; srd: 920 ; bnb: 449 |\r\n| `CoinGrinder` | 34.31 | 0.10326806 | 4538 | knapsack: 3593 ; srd: 554 ; bnb: 467;â¯cg: 391 |\r\n\r\nPlease see this [Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279) thread for the complete description of the simulation and results.",
      "created_at" : "2023-12-29T21:30:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1872346963",
      "id" : 1872346963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585vmb9T",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872346963/reactions"
      },
      "updated_at" : "2023-12-29T21:58:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872346963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438428556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438428556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Given that any of the {add, shift, cut} states ends with executing an add, and the end of the add operation (the block of code on this line and below) determines what the next iteration will be, I think it would be more natural to move this block to the beginning of the while loop, before the switch case. So then it becomes a processing loop that in every iteration decides what it will be doing (cut, shift, or add), without state carried between iterations? This doesn't work for \"done\", but that could be a boolean instead.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2023-12-29T22:08:27Z",
      "diff_hunk" : "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;\n+        min_tail_weight.at(i) = min_group_weight;\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo_pool.at(i).GetSelectionAmount() > 0);\n+        total_available += utxo_pool.at(i).GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool.at(i).m_weight);\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {\n+            result.SetAlgoCompleted(next_op == operations::done); // True if done, false if curr_try hit TOTAL_TRIES\n+            // Exhausted search space or reached limit\n+            break;\n+        }\n+        switch (next_op)\n+        {\n+        case cut:\n+        {\n+            // Deselect last selected, then shift last selected by one\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case shift:\n+        {\n+            // Deselect last selected, select UTXO group at next index instead\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            utxo_pool_index = curr_selection.back() + 1;\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case add:\n+        {\n+            if (utxo_pool_index > 0\n+                    && (curr_selection.empty() || curr_selection.back() != utxo_pool_index - 1)\n+                    && utxo_pool.at(utxo_pool_index - 1).GetSelectionAmount() == utxo_pool.at(utxo_pool_index).GetSelectionAmount()\n+                    && utxo_pool.at(utxo_pool_index - 1).fee == utxo_pool.at(utxo_pool_index).fee) {\n+                if (utxo_pool_index < utxo_pool.size() - 1) {\n+                    // Skip if previous UTXO is equivalent and unselected\n+                    next_op = operations::add;\n+                    ++utxo_pool_index;\n+                    break;\n+                } else {\n+                    // \"Skipping\" end of branch: SHIFT instead\n+                    next_op = operations::shift;\n+                    break;\n+                }\n+            }\n+            // Select next UTXO\n+            OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+            curr_amount += utxo.GetSelectionAmount();\n+            curr_weight += utxo.m_weight;\n+            curr_selection.push_back(utxo_pool_index);\n+            next_op = operations::add;\n+\n+            // Depending on evaluation of current selection, ADD next, SHIFT latest, or CUT latest and shift prior",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438428556",
      "id" : 1438428556,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VvK2M",
      "original_commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "original_line" : 338,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1799219103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438428556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-29T22:24:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438428556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438429769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438429769"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd avoid the `std::vector::at` everywhere and use `std::vector::operator[]` instead, as `at` involves conditional branches to detect out-of-bounds access (well-predicted ones, but for a tight loop like this I do expect it to still be impactful). It's generally better to crash than to have UB due to out-of-bounds access, but inside performance-critical algorithms I think it's worth the extra review effort to make sure there are no out-of-bounds accesses.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2023-12-29T22:15:02Z",
      "diff_hunk" : "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438429769",
      "id" : 1438429769,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VvLJJ",
      "original_commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "original_line" : 261,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1799219103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438429769/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-29T22:24:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438429769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438435912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438435912"
         }
      },
      "author_association" : "MEMBER",
      "body" : "One complication with the \"move decision for add/shift/cut to beginning of loop\" approach is that this skipping doesn't work anymore as-is. I'd suggest turning it into a while loop that increments `utxo_pool_index` until the skip condition is no longer satisfied.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2023-12-29T22:54:11Z",
      "diff_hunk" : "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;\n+        min_tail_weight.at(i) = min_group_weight;\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo_pool.at(i).GetSelectionAmount() > 0);\n+        total_available += utxo_pool.at(i).GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool.at(i).m_weight);\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {\n+            result.SetAlgoCompleted(next_op == operations::done); // True if done, false if curr_try hit TOTAL_TRIES\n+            // Exhausted search space or reached limit\n+            break;\n+        }\n+        switch (next_op)\n+        {\n+        case cut:\n+        {\n+            // Deselect last selected, then shift last selected by one\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case shift:\n+        {\n+            // Deselect last selected, select UTXO group at next index instead\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            utxo_pool_index = curr_selection.back() + 1;\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case add:\n+        {\n+            if (utxo_pool_index > 0\n+                    && (curr_selection.empty() || curr_selection.back() != utxo_pool_index - 1)\n+                    && utxo_pool.at(utxo_pool_index - 1).GetSelectionAmount() == utxo_pool.at(utxo_pool_index).GetSelectionAmount()\n+                    && utxo_pool.at(utxo_pool_index - 1).fee == utxo_pool.at(utxo_pool_index).fee) {\n+                if (utxo_pool_index < utxo_pool.size() - 1) {\n+                    // Skip if previous UTXO is equivalent and unselected",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438435912",
      "id" : 1438435912,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VvMpI",
      "original_commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "original_line" : 321,
      "original_position" : 162,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1799249817,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438435912/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-29T22:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438435912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1439793432"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439793432"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have reduced the description here to the interface and will add the remaining explanations to the corresponding spots of the function.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-02T20:28:43Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1439793432",
      "id" : 1439793432,
      "in_reply_to_id" : 1438411775,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585V0YEY",
      "original_commit_id" : "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "original_line" : 198,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1800970305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439793432/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T21:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439793432",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1439882229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439882229"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have completely rewritten my description. I hope itâs clearer now.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-02T21:29:14Z",
      "diff_hunk" : "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1439882229",
      "id" : 1439882229,
      "in_reply_to_id" : 1438411976,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585V0tv1",
      "original_commit_id" : "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "original_line" : 201,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1800970305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439882229/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T21:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439882229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "After discussing Pieterâs review comments further with him, I decided to restructure the algorithm proposed in this PR. Iâm returning the PR to draft for a few days while I rewrite the commits.",
      "created_at" : "2024-01-04T15:10:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1877253041",
      "id" : 1877253041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585v5Jux",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877253041/reactions"
      },
      "updated_at" : "2024-01-04T15:10:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877253041",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445276896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445276896"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I replaced all the `std::vector::at` with `std::vector::operator[]`.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-08T20:11:45Z",
      "diff_hunk" : "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445276896",
      "id" : 1445276896,
      "in_reply_to_id" : 1438429769,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WJSzg",
      "original_commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "original_line" : 261,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1800970305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445276896/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T21:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445276896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445277299"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445277299"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâve completely rewritten CoinGrinder to implement this suggestion.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-08T20:12:09Z",
      "diff_hunk" : "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * â¢ ADD: select the UTXO group at the current index into the input set\n+ * â¢ SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * â¢ CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * â¢ ADD:   010100 â 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * â¢ SHIFT: 010100 â 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * â¢ CUT:   010100 â 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;\n+        min_tail_weight.at(i) = min_group_weight;\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo_pool.at(i).GetSelectionAmount() > 0);\n+        total_available += utxo_pool.at(i).GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool.at(i).m_weight);\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {\n+            result.SetAlgoCompleted(next_op == operations::done); // True if done, false if curr_try hit TOTAL_TRIES\n+            // Exhausted search space or reached limit\n+            break;\n+        }\n+        switch (next_op)\n+        {\n+        case cut:\n+        {\n+            // Deselect last selected, then shift last selected by one\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case shift:\n+        {\n+            // Deselect last selected, select UTXO group at next index instead\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            utxo_pool_index = curr_selection.back() + 1;\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case add:\n+        {\n+            if (utxo_pool_index > 0\n+                    && (curr_selection.empty() || curr_selection.back() != utxo_pool_index - 1)\n+                    && utxo_pool.at(utxo_pool_index - 1).GetSelectionAmount() == utxo_pool.at(utxo_pool_index).GetSelectionAmount()\n+                    && utxo_pool.at(utxo_pool_index - 1).fee == utxo_pool.at(utxo_pool_index).fee) {\n+                if (utxo_pool_index < utxo_pool.size() - 1) {\n+                    // Skip if previous UTXO is equivalent and unselected\n+                    next_op = operations::add;\n+                    ++utxo_pool_index;\n+                    break;\n+                } else {\n+                    // \"Skipping\" end of branch: SHIFT instead\n+                    next_op = operations::shift;\n+                    break;\n+                }\n+            }\n+            // Select next UTXO\n+            OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+            curr_amount += utxo.GetSelectionAmount();\n+            curr_weight += utxo.m_weight;\n+            curr_selection.push_back(utxo_pool_index);\n+            next_op = operations::add;\n+\n+            // Depending on evaluation of current selection, ADD next, SHIFT latest, or CUT latest and shift prior",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445277299",
      "id" : 1445277299,
      "in_reply_to_id" : 1438428556,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WJS5z",
      "original_commit_id" : "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "original_line" : 338,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1800970305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445277299/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T21:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445277299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Mea culpa. Fixed the linter issue.\r\n\r\nReady for review",
      "created_at" : "2024-01-08T22:59:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1881954408",
      "id" : 1881954408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wLFho",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881954408/reactions"
      },
      "updated_at" : "2024-01-08T22:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881954408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added missing test title in overview of CoinGrinder tests",
      "created_at" : "2024-01-09T00:31:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1882055933",
      "id" : 1882055933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wLeT9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882055933/reactions"
      },
      "updated_at" : "2024-01-09T00:31:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882055933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445611288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445611288"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe this condition is always true (since it's inside a `while (... && should_shift)`).",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T04:23:36Z",
      "diff_hunk" : "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445611288",
      "id" : 1445611288,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WKkcY",
      "original_commit_id" : "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "original_line" : 343,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1810381270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445611288/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T04:50:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445611288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445616402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445616402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this `std::ceil` is doing anything. The `/` operator is an integer division here, which rounds down. Applying `std::ceil` to that just converts it to a floating point number. I don't think this is incorrect, as rounding down is just more conservative, but it's probably not what you intend.\r\n\r\nTo compute $\\lceil \\frac{a}{b} \\rceil$, you can use `(a+b-1)/b`. \r\n\r\n~~Also: I don't think `best_selection.empty()` is possible at this point; a UTXO was just added.~~ EDIT: I was confusing `best_selection` with `curr_selection`.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T04:35:23Z",
      "diff_hunk" : "@@ -336,6 +337,9 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_selection.back()] * std::ceil((selection_target + change_target - curr_amount) / utxo_pool[curr_selection.back()].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445616402",
      "id" : 1445616402,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WKlsS",
      "original_commit_id" : "840beb3f8fa61ca1f8ce791738eab71a4924f8de",
      "original_line" : 340,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1810381270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445616402/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T14:27:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445616402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445618541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445618541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're using `curr_selection.back()` several times in the evaluation logic here; would it make sense to have a `auto added_utxo = next_utxo++;` variable in the select logic, and then use `added_utxo` everywhere instead of `curr_selection.back()`? That makes it also clearer that you don't need to test for `curr_selection.empty()`.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T04:40:19Z",
      "diff_hunk" : "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.\n-        if (curr_weight > max_weight) {\n+        if (curr_amount + lookahead[curr_selection.back()] < selection_target + change_target) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445618541",
      "id" : 1445618541,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WKmNt",
      "original_commit_id" : "191a6e4d10accdb7390283f46cd23525e928aec3",
      "original_line" : 300,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1810381270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445618541/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T04:50:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445618541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445619181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445619181"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since the exploring will always happen (after SHIFT/CUT, possible), perhaps formulate it as \"EVALUATE current selection to see whether we can SHIFT or CUT the current selection before EXPLORING further\"?",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T04:41:41Z",
      "diff_hunk" : "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445619181",
      "id" : 1445619181,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WKmXt",
      "original_commit_id" : "191a6e4d10accdb7390283f46cd23525e928aec3",
      "original_line" : 299,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1810381270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445619181/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T04:50:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445619181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445622061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445622061"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's impossible that `next_utxo = 0` here (it was set to `curr_selection.back() + 1` above, and the loop only increments it).\r\n\r\n---\r\n\r\nVery nit: when this loop starts, `should_shift` will always be false, and it can only become true by reaching the `else` branch below. I think it can be simplified to:\r\n\r\n```c++\r\nwhile (...\r\n        && utxo_pool[next_utxo - 1].fee == utxo_pool[next_utxo],fee) {\r\n    if (next_utxo >= utxo_pool.size() - 1) {\r\n        // Reached end of UTXO pool skipping clones: SHIFT instead\r\n        should_shift = true;\r\n        break;\r\n    }\r\n    // Skip clone: previous UTXO is equivalent and unselected\r\n    ++next_utxo;\r\n}\r\n```\r\n\r\n",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T04:47:49Z",
      "diff_hunk" : "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {\n+                // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+                if (curr_selection.empty()) {\n+                    // Exhausted search space before running into attempt limit\n+                    is_done = true;\n+                    result.SetSelectionsEvaluated(curr_try);\n+                    result.SetAlgoCompleted(true);\n+                    break;\n+                }\n+                next_utxo = curr_selection.back() + 1;\n+                deselect_last();\n+                should_shift  = false;\n+            }\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n+            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n+            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n+            // differing amount or weight.\n+            while (!should_shift && next_utxo > 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445622061",
      "id" : 1445622061,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WKnEt",
      "original_commit_id" : "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "original_line" : 361,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1810381270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445622061/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T04:56:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445622061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446094975"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446094975"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I went with\r\n\r\n```// EVALUATE current selection: check for solutions and determine whether we can CUT or SHIFT before EXPLORING further```",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T13:33:48Z",
      "diff_hunk" : "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446094975",
      "id" : 1446094975,
      "in_reply_to_id" : 1445619181,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WMah_",
      "original_commit_id" : "191a6e4d10accdb7390283f46cd23525e928aec3",
      "original_line" : 299,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1811161257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446094975/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:18:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446094975",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446141597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446141597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good idea.\r\n\r\nIâve added ```auto curr_tail = curr_selection.back();``` to reference that instead throughout the evaluation block. ",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T14:15:00Z",
      "diff_hunk" : "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.\n-        if (curr_weight > max_weight) {\n+        if (curr_amount + lookahead[curr_selection.back()] < selection_target + change_target) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446141597",
      "id" : 1446141597,
      "in_reply_to_id" : 1445618541,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WMl6d",
      "original_commit_id" : "191a6e4d10accdb7390283f46cd23525e928aec3",
      "original_line" : 300,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1811161257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446141597/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:18:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446141597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446151655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446151655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, oops. Yes of course.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T14:22:59Z",
      "diff_hunk" : "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446151655",
      "id" : 1446151655,
      "in_reply_to_id" : 1445611288,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WMoXn",
      "original_commit_id" : "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "original_line" : 343,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1811161257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446151655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:18:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446151655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446186725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446186725"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I did some hard staring at this while-loop. I restructured it to use a `break` as you suggested, and was able to reduce the loopâs condition to:\r\n\r\n```diff\r\n-            while (!should_shift && next_utxo > 0\r\n-                    && (curr_selection.empty() || curr_selection.back() != next_utxo - 1)\r\n-                    && utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\r\n+            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\r\n                     && utxo_pool[next_utxo - 1].fee == utxo_pool[next_utxo].fee) {\r\n-                if (next_utxo < utxo_pool.size() - 1) {\r\n-                    // Skip clone: previous UTXO is equivalent and unselected\r\n-                    ++next_utxo;\r\n-                } else {\r\n+                if (next_utxo >= utxo_pool.size() - 1) {\r\n                     // Reached end of UTXO pool skipping clones: SHIFT instead\r\n                     should_shift = true;\r\n+                    break;\r\n                 }\r\n+                // Skip clone: previous UTXO is equivalent and unselected\r\n+                ++next_utxo;\r\n             }\r\n         }\r\n```\r\nOriginally, when I introduced clone skipping, I missed that it could only occur after a SHIFT, so there were some unnecessary checks here. Clearly `next_utxo` has to be greater than 0, since it was just incremented in the SHIFT. We also donât have to check whether the `current_selection.back()` is the last element of the UTXO pool, we would have cut if that were the case. So, we only have to check for clones.\r\n\r\nIâm actually just realizing that I might also be able to drop the `fee` comparison. We already break ties between UTXOs of the same selection amount in favor of less weight, so the preceding UTXO must always have the same fee or a lower fee. While a UTXO with a greater fee (i.e. greater weight) and the same selection amount would not strictly be a clone, it can only lead to a worse input set than the predecessor that we have already evaluated. Gonna ponder and test, will perhaps fix up later today.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T14:48:33Z",
      "diff_hunk" : "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {\n+                // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+                if (curr_selection.empty()) {\n+                    // Exhausted search space before running into attempt limit\n+                    is_done = true;\n+                    result.SetSelectionsEvaluated(curr_try);\n+                    result.SetAlgoCompleted(true);\n+                    break;\n+                }\n+                next_utxo = curr_selection.back() + 1;\n+                deselect_last();\n+                should_shift  = false;\n+            }\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n+            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n+            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n+            // differing amount or weight.\n+            while (!should_shift && next_utxo > 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446186725",
      "id" : 1446186725,
      "in_reply_to_id" : 1445622061,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WMw7l",
      "original_commit_id" : "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "original_line" : 361,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1811161257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446186725/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:18:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446186725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446479218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446479218"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, ~~Iâve adopted your proposed change.~~\r\nAfter more discussion, I realized why this is not correct and dropped the `std::ceil(â¦)` from my prior version.\r\n\r\nFor context on the `!best_selection.empty())`: we need to check whether we have found any solution so far, as we would otherwise no longer trigger the \"max weight exceeded\" failure message.",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-09T18:51:30Z",
      "diff_hunk" : "@@ -336,6 +337,9 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_selection.back()] * std::ceil((selection_target + change_target - curr_amount) / utxo_pool[curr_selection.back()].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446479218",
      "id" : 1446479218,
      "in_reply_to_id" : 1445616402,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN4Vy",
      "original_commit_id" : "840beb3f8fa61ca1f8ce791738eab71a4924f8de",
      "original_line" : 340,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1811161257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446479218/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:29:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446479218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20315937460</sub>",
      "created_at" : "2024-01-09T21:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1883832925",
      "id" : 1883832925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wSQJd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883832925/reactions"
      },
      "updated_at" : "2024-01-09T21:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883832925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1448210370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448210370"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n     *                             reach the target. We continue with the direct successor of our `next_utxo` for the\r\n```",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-11T02:26:53Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1448210370",
      "id" : 1448210370,
      "line" : 294,
      "node_id" : "PRRC_kwDOABII585WUe_C",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 244,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 135,
      "pull_request_review_id" : 1814544499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448210370/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-11T02:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448210370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1448211928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448211928"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            // Success, adding more weight cannot be better: SHIFT\r\n```",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-11T02:30:02Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1448211928",
      "id" : 1448211928,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII585WUfXY",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 300,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 202,
      "pull_request_review_id" : 1814544499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448211928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-11T02:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448211928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449406274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449406274"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In e38c150f6dff886c470ba993c1725112c1ee5093 \"coinselection: Add CoinGrinder algorithm \":\r\n\r\nShouldn't the comment be updated in the previous commit? ",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-11T21:19:10Z",
      "diff_hunk" : "@@ -25,7 +25,7 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n                          \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n }\n \n-// Descending order comparator\n+// Sort by descending (effective) value prefer lower waste on tie",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449406274",
      "id" : 1449406274,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII585WZC9C",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 28,
      "original_position" : 5,
      "original_start_line" : 28,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 5,
      "pull_request_review_id" : 1816719303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449406274/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-01-11T22:28:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449406274",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449421239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449421239"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In e38c150f6dff886c470ba993c1725112c1ee5093 \"coinselection: Add CoinGrinder algorithm\":\r\n\r\nThe comment describing `m_min_change_target` in `CoinSelectionParams` should be updated, because currently it describes this variable as being used in Knapsack solver. ",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-11T21:31:39Z",
      "diff_hunk" : "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3ÃLTFRE (default: 30â¯á¹©/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449421239",
      "id" : 1449421239,
      "line" : 713,
      "node_id" : "PRRC_kwDOABII585WZGm3",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 713,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 5,
      "pull_request_review_id" : 1816719303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449421239/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-11T22:28:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449421239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449443744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449443744"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In e38c150f6dff886c470ba993c1725112c1ee5093 \"coinselection: Add CoinGrinder algorithm\":\r\n\r\nWhy do the current and selection amounts matter if they would both result in change? Shouldn't the best selection only be updated if the current selection's waste is less than the best selection's waste?",
      "commit_id" : "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "created_at" : "2024-01-11T21:57:09Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || curr_amount < best_selection_amount) {\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449443744",
      "id" : 1449443744,
      "line" : 367,
      "node_id" : "PRRC_kwDOABII585WZMGg",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 306,
      "original_position" : 128,
      "original_start_line" : 302,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 208,
      "pull_request_review_id" : 1816719303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449443744/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 363,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-11T22:28:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449443744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449749043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449749043"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch, thanks. Fixed.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-12T03:08:18Z",
      "diff_hunk" : "@@ -25,7 +25,7 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n                          \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n }\n \n-// Descending order comparator\n+// Sort by descending (effective) value prefer lower waste on tie",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449749043",
      "id" : 1449749043,
      "in_reply_to_id" : 1449406274,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII585WaWoz",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 28,
      "original_position" : 5,
      "original_start_line" : 28,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 5,
      "pull_request_review_id" : 1817293438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449749043/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T15:42:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449749043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449754512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449754512"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Rephrased, especially given that there is no lookahead yet",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-12T03:16:26Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449754512",
      "id" : 1449754512,
      "in_reply_to_id" : 1448210370,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WaX-Q",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 244,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1817293438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449754512/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T15:42:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449754512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449756790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449756790"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-12T03:19:51Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449756790",
      "id" : 1449756790,
      "in_reply_to_id" : 1448211928,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WaYh2",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 300,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1817293438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449756790/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T15:42:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449756790",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449760026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449760026"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, starting a few commits later we will SHIFT when `curr_weight` exceeds the `best_selection_weight`, so the second part of this condition can only trigger on same weight. Since we do not have the SHIFT criteria here yet, this is a bug. Fixed by explicitly checking that weight is tied.\r\n\r\nMy argument for preferring an input set with less funds is that the walletâs confirmed balance is reduced less and therefore the wallet has more confirmed liquidity (that is not constrained by e.g. needing to bump a lower feerate parent transaction) in case this transaction doesnât get confirmed immediately.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-12T03:24:33Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || curr_amount < best_selection_amount) {\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449760026",
      "id" : 1449760026,
      "in_reply_to_id" : 1449443744,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WaZUa",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 348,
      "original_position" : 128,
      "original_start_line" : 302,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1817293438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449760026/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T15:43:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449760026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449762046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449762046"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point, thanks for pointing that out.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-12T03:27:32Z",
      "diff_hunk" : "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3ÃLTFRE (default: 30â¯á¹©/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449762046",
      "id" : 1449762046,
      "in_reply_to_id" : 1449421239,
      "line" : 713,
      "node_id" : "PRRC_kwDOABII585WaZz-",
      "original_commit_id" : "e38c150f6dff886c470ba993c1725112c1ee5093",
      "original_line" : 713,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 5,
      "pull_request_review_id" : 1817293438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449762046/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T15:42:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449762046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20430984764</sub>",
      "created_at" : "2024-01-12T16:38:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1889619610",
      "id" : 1889619610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585woU6a",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889619610/reactions"
      },
      "updated_at" : "2024-01-12T16:38:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889619610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâve added another fuzz target that validates the output of CoinGrinder against a bruteforce search for the smallest weight input set.",
      "created_at" : "2024-01-12T19:59:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1889878218",
      "id" : 1889878218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wpUDK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889878218/reactions"
      },
      "updated_at" : "2024-01-12T19:59:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889878218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "SFFO is such a pain in the neck.",
      "created_at" : "2024-01-12T21:58:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1890013810",
      "id" : 1890013810,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wp1Jy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890013810/reactions"
      },
      "updated_at" : "2024-01-17T19:53:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890013810",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed bug discovered with the optimality fuzz test: [opt: Skip over barren combinations of tiny UTXOs](https://github.com/bitcoin/bitcoin/pull/27877/commits/80bcee5c09fb68366645d6be62fdeab4bb3ec6f3), incorrectly was set to cut, but this could be premature in case that the last selected UTXO was heavier than later UTXOs in the pool.",
      "created_at" : "2024-01-12T23:12:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1890125580",
      "id" : 1890125580,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wqQcM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890125580/reactions"
      },
      "updated_at" : "2024-01-12T23:12:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890125580",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "CI failure is unrelated, see https://github.com/bitcoin/bitcoin/pull/29243",
      "created_at" : "2024-01-13T01:56:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1890248185",
      "id" : 1890248185,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wquX5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890248185/reactions"
      },
      "updated_at" : "2024-01-13T01:56:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890248185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on fix for CI issue",
      "created_at" : "2024-01-15T14:11:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1892249295",
      "id" : 1892249295,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585wyW7P",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1892249295/reactions"
      },
      "updated_at" : "2024-01-15T14:11:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1892249295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468513141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nNit: non-positive effective value (0 is not allowed either, apparently)",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T15:54:04Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468513141",
      "id" : 1468513141,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Xh7t1",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 211,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468513733"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513733"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nNot as much in this commit yet, but in the PR overall, almost everywhere the sum `selection_target + change_target` is used. Maybe it makes sense to have a `const auto total_target = selection_target + change_target`, and use `total_target` everywhere?",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T15:57:37Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468513733",
      "id" : 1468513733,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Xh73F",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 215,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513733/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468517854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468517854"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nI don't believe it's actually possible to not have a solution at this point, unless the maximum weight is exceeded because the two ways of achieving that are:\r\n* Not enough funds (but that is checked early in the function)\r\n* A solution exists, but wasn't found due to computation limits. However, with a UTXO set of $n$ elements/groups, *a* solution should always be found within $n$ iterations (and I think the number of iterations should be set at least as high as the number of UTXOs anyway).\r\n\r\nIf that is correct, then we can:\r\n* Drop `max_tx_weight_exceeded`.\r\n* Drop this conditional, and make it `if (best_selection.empty()) return ErrorMaxWeightExceeded();`\r\n* Drop `best_selection_weight`, and instead reuse `max_weight` for that.\r\n\r\nPatch:\r\n\r\n```diff\r\ndiff --git a/src/wallet/coinselection.cpp b/src/wallet/coinselection.cpp\r\nindex 63ba39cd0a0..7c48fc4e0f0 100644\r\n--- a/src/wallet/coinselection.cpp\r\n+++ b/src/wallet/coinselection.cpp\r\n@@ -242,8 +242,6 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n     // CoinGrinder tracks selection via the indices of the currently selected UTXOs\r\n     std::vector<size_t> best_selection;\r\n     CAmount best_selection_amount = MAX_MONEY;\r\n-    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\r\n-    bool max_tx_weight_exceeded = false;\r\n \r\n     std::vector<size_t> curr_selection;\r\n     CAmount curr_amount = 0;\r\n@@ -318,9 +316,7 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n         if (curr_amount + lookahead[curr_tail] < selection_target + change_target) {\r\n             // Insufficient funds with lookahead: CUT\r\n             should_cut = true;\r\n-        } else if (curr_weight > best_selection_weight) {\r\n-            // best_selection_weight is initialized to max_weight\r\n-            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\r\n+        } else if (curr_weight > max_weight) {\r\n             // Worse weight than best solution. More UTXOs only increase weight:\r\n             // CUT if last selected group had minimal weight, else SHIFT\r\n             if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\r\n@@ -331,13 +327,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n         } else if (curr_amount >= selection_target + change_target) {\r\n             // Success, adding more weight cannot be better: SHIFT\r\n             should_shift  = true;\r\n-            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\r\n+            if (curr_weight < max_weight || (curr_weight == max_weight && curr_amount < best_selection_amount)) {\r\n                 // New lowest weight, or same weight with fewer funds tied up\r\n                 best_selection = curr_selection;\r\n-                best_selection_weight = curr_weight;\r\n+                max_weight = curr_weight;\r\n                 best_selection_amount = curr_amount;\r\n             }\r\n-        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((selection_target + change_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\r\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((selection_target + change_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > max_weight) {\r\n             // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\r\n             if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\r\n                 should_cut = true;\r\n@@ -397,9 +393,7 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n         }\r\n     }\r\n \r\n-    if (best_selection.empty()) {\r\n-        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();\r\n-    }\r\n+    if (best_selection.empty()) ErrorMaxWeightExceeded();\r\n \r\n     for (const size_t& i : best_selection) {\r\n         result.AddInput(utxo_pool[i]);\r\n```\r\n",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T16:19:52Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468517854",
      "id" : 1468517854,
      "line" : 410,
      "node_id" : "PRRC_kwDOABII585Xh83e",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 410,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 251,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468517854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468517854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539058"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nPerhaps add a one-line comment for each of the 8 variables here.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T17:33:25Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539058",
      "id" : 1468539058,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiCCy",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 220,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539058/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539208"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\n\"state transactions\" -> \"state transitions\"?",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T17:34:23Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539208",
      "id" : 1468539208,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiCFI",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 241,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539208/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539271"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nexceeded **or** reached?",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T17:35:07Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539271",
      "id" : 1468539271,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiCGH",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 254,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539271/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539271",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\ndeselected -> deselect?",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T17:35:30Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539354",
      "id" : 1468539354,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiCHa",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 256,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539354/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468544154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468544154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"fuzz: Add CoinGrinder fuzz target\"\r\n\r\n`coin_params.m_min_change_target` is left at 0 here. Perhaps leave a comment about why that is ok?",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T18:07:38Z",
      "diff_hunk" : "@@ -77,6 +77,62 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468544154",
      "id" : 1468544154,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585XiDSa",
      "original_commit_id" : "168957a164fa5687aa698bedba5997e6ccdf35bd",
      "original_line" : 89,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 20,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468544154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468544154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nWould it make sense to construct the `group_pos` variable directly from the fuzzer? I think you only need to populate its `m_weight` and `m_effective_value`. As you don't use anything but `group_pos`, `target`, and `change_target` in the actual test, all fuzz information you use to construct other things is effectively wasted.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T19:15:40Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584127",
      "id" : 1468584127,
      "line" : 177,
      "node_id" : "PRRC_kwDOABII585XiNC_",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 177,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 108,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nOnly one coin selection algorithm is run here (unless you count the brute forcing).",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T19:17:17Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584354",
      "id" : 1468584354,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiNGi",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 178,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584354/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nSRD is not used in this test, so I think you can construct `change_target` from fuzz data directly.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T19:17:55Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that itâs comparable to SRD, we must use the same change_target",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584560",
      "id" : 1468584560,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiNJw",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 179,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584560/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584961"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nI think it would be better if you'd also construct `max_weight` from the fuzz data (and then take it into account in the brute force loop below).\r\n\r\nAs an alternative, run the brute force loop first (without any weight maximum restriction), and then run CG twice, once with a (fuzz-constructed) `max_weight` >= the brute force best solution (and check that CG finds it) and once with a (fuzz-constructed) `max_weight` < the brute force best solution (and check that CG does not find it).",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T19:20:47Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that itâs comparable to SRD, we must use the same change_target\n+    auto result_cg = CoinGrinder(group_pos, target, change_target, MAX_STANDARD_TX_WEIGHT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584961",
      "id" : 1468584961,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiNQB",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 180,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584961/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468585854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468585854"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nNegative amounts won't cause a crash or other UB, I believe (the result will just be suboptimal), so it's probably better to use `Assume` here instead of `assert`.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T19:23:57Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468585854",
      "id" : 1468585854,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiNd-",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 212,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468585854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468585854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468586333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468586333"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit opt: \"Skip evaluation of equivalent input sets\"\r\n\r\nThis `!is_done &&` here seems unnecessary, because a `break;` is invoked whenever `is_done` is set to `true`.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-27T19:26:55Z",
      "diff_hunk" : "@@ -338,17 +339,33 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n+        while (!is_done && should_shift) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468586333",
      "id" : 1468586333,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XiNld",
      "original_commit_id" : "27359ef47043da8cf641ffa65d69d79c7b0cba71",
      "original_line" : 342,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847107471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468586333/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-27T19:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468586333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939784"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Adopted. Yeah, OutputGroups with a single negative effective value would simply sort last and be skipped per the lookahead, while OutputGroups with an overall positive effective value but containing some negative effective value UTXOs would just cause some additional iterations up to making the result suboptimal.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T21:21:13Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939784",
      "id" : 1468939784,
      "in_reply_to_id" : 1468585854,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Xjj4I",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 212,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939784/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939798"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch, fixed.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T21:21:20Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939798",
      "id" : 1468939798,
      "in_reply_to_id" : 1468513141,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Xjj4W",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 211,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939798/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939922"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure, makes sense.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T21:22:41Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939922",
      "id" : 1468939922,
      "in_reply_to_id" : 1468513733,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Xjj6S",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 215,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939922/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941377"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added descriptions\r\n\r\n```cpp\r\n// The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\r\nstd::vector<size_t> curr_selection;\r\nstd::vector<size_t> best_selection;\r\n\r\n// The currently selected effective amount, and the effective amount of the best selection so far\r\nCAmount curr_amount = 0;\r\nCAmount best_selection_amount = MAX_MONEY;\r\n\r\n// The weight of the currently selected input set, and the weight of the best selection\r\nint curr_weight = 0;\r\nint best_selection_weight = std::numeric_limits<int>::max();\r\n\r\n// Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\r\nbool max_tx_weight_exceeded = false;\r\n\r\n// Index of the next UTXO to consider in utxo_pool\r\nsize_t next_utxo = 0;\r\n```",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T21:33:02Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941377",
      "id" : 1468941377,
      "in_reply_to_id" : 1468539058,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XjkRB",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 220,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941377/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941377",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941448"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hah, thanks, fixed.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T21:33:26Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941448",
      "id" : 1468941448,
      "in_reply_to_id" : 1468539208,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XjkSI",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 241,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941448/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941852"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, fixed up the sentence.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T21:37:13Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941852",
      "id" : 1468941852,
      "in_reply_to_id" : 1468539271,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XjkYc",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 254,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941852/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468947001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468947001"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems correct to me, and Iâve fuzzed it for five hours without failure for good measure. This changes a number of commits, in different ways, still pondering whether itâs best to put into the first implementation or to amend the commit that optimizes handling of max_weight. Will revisit.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T22:05:29Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468947001",
      "id" : 1468947001,
      "in_reply_to_id" : 1468517854,
      "line" : 410,
      "node_id" : "PRRC_kwDOABII585Xjlo5",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 410,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 251,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468947001/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468947001",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468949219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468949219"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I dropped `change_target` below and instead assigned `coin_params.m_min_change_target`, with a descriptive comment, and passed that below to the other algorithms.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T22:21:00Z",
      "diff_hunk" : "@@ -77,6 +77,62 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468949219",
      "id" : 1468949219,
      "in_reply_to_id" : 1468544154,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585XjmLj",
      "original_commit_id" : "168957a164fa5687aa698bedba5997e6ccdf35bd",
      "original_line" : 89,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 20,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468949219/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468949219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468950943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468950943"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, replaced with \r\n```cpp\r\ncoin_params.m_min_change_target = coin_params.m_change_fee + fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(CHANGE_LOWER, CHANGE_UPPER);\r\n```",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T22:31:56Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that itâs comparable to SRD, we must use the same change_target",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468950943",
      "id" : 1468950943,
      "in_reply_to_id" : 1468584560,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Xjmmf",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 179,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468950943/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468950943",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468960224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960224"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Great idea. Iâve amended the fuzz test to exit early if there are insufficient funds, otherwise brute force the solution, and then run CG twice.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T23:22:13Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that itâs comparable to SRD, we must use the same change_target\n+    auto result_cg = CoinGrinder(group_pos, target, change_target, MAX_STANDARD_TX_WEIGHT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468960224",
      "id" : 1468960224,
      "in_reply_to_id" : 1468584961,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Xjo3g",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 180,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960224/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468960861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960861"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That would be good, but that would take more time than I have right now. Will leave this open for the moment.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T23:25:41Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468960861",
      "id" : 1468960861,
      "in_reply_to_id" : 1468584127,
      "line" : 177,
      "node_id" : "PRRC_kwDOABII585XjpBd",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 177,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 108,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960861/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468966253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468966253"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch, thanks.",
      "commit_id" : "351db39619915173ee27c4947ba1e4bc8f5f2c8e",
      "created_at" : "2024-01-28T23:55:47Z",
      "diff_hunk" : "@@ -338,17 +339,33 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n+        while (!is_done && should_shift) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468966253",
      "id" : 1468966253,
      "in_reply_to_id" : 1468586333,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XjqVt",
      "original_commit_id" : "27359ef47043da8cf641ffa65d69d79c7b0cba71",
      "original_line" : 342,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1847632560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468966253/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T00:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468966253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1470113559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470113559"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I cleaned up the Optimality fuzz test a bit:\r\n\r\n- I have removed multiple CoinSelectionParams from being fuzzed that are not relevant to testing CoinGrinderâs optimality (SFFO, LTFRE, all change cost related quantities except `min_change_target`)\r\n- I now fuzz `min_change_target`\r\n- I just create up to 16 UTXOs that are each a separate OutputGroup\r\n- I now first run the brute force solution, then set a fuzzed max_weight greater than the best_weight and check that CoinGrinder finds the optimal solution, then set a lower max_weight and check that CoinGrinder provides no solution\r\n- I generate `target` to be below `max_spendable` instead of returning early",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-29T19:42:14Z",
      "diff_hunk" : "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1470113559",
      "id" : 1470113559,
      "in_reply_to_id" : 1468584127,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585XoCcX",
      "original_commit_id" : "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "original_line" : 177,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1849621597,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470113559/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T19:42:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470113559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1470115876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470115876"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have decided to defer this for the moment, since I do appreciate the clarity of distinguishing between the `best_selection_weight` and `max_weight`, and I anticipate that I will have to revisit this in the context of https://github.com/bitcoin/bitcoin/pull/29264 soon anyway.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-29T19:44:13Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1470115876",
      "id" : 1470115876,
      "in_reply_to_id" : 1468517854,
      "line" : 410,
      "node_id" : "PRRC_kwDOABII585XoDAk",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 410,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 251,
      "pull_request_review_id" : 1849624628,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470115876/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-29T19:44:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470115876",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "All review feedback is addressed, ready for review.",
      "created_at" : "2024-01-29T19:44:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1915438014",
      "id" : 1915438014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585yK0O-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1915438014/reactions"
      },
      "updated_at" : "2024-01-29T19:44:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1915438014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The `p2p_v2_earlykeyresponse.py` test is unrelated.",
      "created_at" : "2024-01-30T21:02:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1917887536",
      "id" : 1917887536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585yUKQw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1917887536/reactions"
      },
      "updated_at" : "2024-01-30T21:02:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1917887536",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472836168"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472836168"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sounds good.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T13:39:08Z",
      "diff_hunk" : "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472836168",
      "id" : 1472836168,
      "in_reply_to_id" : 1468517854,
      "line" : 410,
      "node_id" : "PRRC_kwDOABII585XybJI",
      "original_commit_id" : "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "original_line" : 410,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 251,
      "pull_request_review_id" : 1853755724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472836168/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T13:39:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472836168",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472848173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472848173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you should set the number of tries to be at least some multiple of the utxo_pool size, because (a) without it, you can't guarantee even considering every UTXO, and (b) the runtime of coin selection overall already contains a component proportional to the size of utxo_pool (simply the cost of constructing the pool in the first place) anyway. So I would suggest something like `const auto total_tries = max(TOTAL_TRIES_CG, 10 * utxo_pool.size());` or so.\r\n\r\nIt may be worth doing this as a follow-up, as other algorithms may benefit from a similar treatment. Still, I'd suggest using a separate constant `TOTAL_TRIES_CG`, even if you also set it to 100000 for now, because there is no inherent reason why BNB and CG should have the same iteration count limit (their time per iteration, and certainly their \"solving power\" per iteration, is possibly quite different).",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T13:48:14Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472848173",
      "id" : 1472848173,
      "line" : 358,
      "node_id" : "PRRC_kwDOABII585XyeEt",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 318,
      "original_position" : 131,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 199,
      "pull_request_review_id" : 1853774778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472848173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T15:25:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472848173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472849582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472849582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Did you mean \"then EXPLORE\" here?",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T13:49:11Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472849582",
      "id" : 1472849582,
      "line" : 373,
      "node_id" : "PRRC_kwDOABII585Xyeau",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 332,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 214,
      "pull_request_review_id" : 1853774778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472849582/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T15:25:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472849582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472864023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472864023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This `result.SetSelectionsEvaluated(curr_try); break;` is repeated in both exit conditions. The `result.SetSelectionsEvaluated(curr_try);` can be moved outside of the loop I believe.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T13:59:52Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472864023",
      "id" : 1472864023,
      "line" : 384,
      "node_id" : "PRRC_kwDOABII585Xyh8X",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 342,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 225,
      "pull_request_review_id" : 1853774778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472864023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T15:25:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472864023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472865513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472865513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Coding style nit:\r\n\r\n```c++\r\n} else {\r\n    append_error(cg_result);\r\n}\r\n```\r\n\r\n(conditional without braces/indent only allowed if it's of the `if (condition) statement;` form)",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T14:01:01Z",
      "diff_hunk" : "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3ÃLTFRE (default: 30â¯á¹©/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {\n+            cg_result->ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);\n+            results.push_back(*cg_result);\n+        } else append_error(cg_result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472865513",
      "id" : 1472865513,
      "line" : 716,
      "node_id" : "PRRC_kwDOABII585XyiTp",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 716,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 8,
      "pull_request_review_id" : 1853774778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472865513/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T21:00:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472865513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472986777"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472986777"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've experimented a bit with how far the range of inputs can be extended to cover extreme values (not because those extreme values are ones we care about in practice, but because they're more likely to expose bugs that do affect practical inputs):\r\n\r\n```diff\r\n--- a/src/wallet/test/fuzz/coinselection.cpp\r\n+++ b/src/wallet/test/fuzz/coinselection.cpp\r\n@@ -142,29 +142,25 @@ FUZZ_TARGET(coin_grinder_is_optimal)\r\n     FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\r\n     CoinSelectionParams coin_params{fast_random_context};\r\n     coin_params.m_subtract_fee_outputs = false;\r\n-    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n-    coin_params.m_min_change_target = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY);\r\n+    // Set effective feerate up to MAX_MONEY sats per 1000000 vB (21000 BTC per kvB).\r\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY)};\r\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\r\n \r\n     // Create some coins\r\n-    CAmount total_balance{0};\r\n     CAmount max_spendable{0};\r\n     int next_locktime{0};\r\n     unsigned max_output_groups = 16;\r\n     std::vector<OutputGroup> group_pos;\r\n     LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\r\n     {\r\n-        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\r\n+        // With maximum m_effective_feerate and n_input_bytes = 1000000, input_fee <= MAX_MONEY.\r\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1000000)};\r\n         // Only make UTXOs with positive effective value\r\n         const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\r\n-        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(input_fee + 1, MAX_MONEY)};\r\n-        if (total_balance + amount >= MAX_MONEY) {\r\n-            break;\r\n-        }\r\n-\r\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY - max_spendable)};\r\n+        const CAmount amount{eff_value + input_fee};\r\n         std::vector<COutput> temp_utxo_pool;\r\n         AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, temp_utxo_pool, coin_params.m_effective_feerate);\r\n-        total_balance += amount;\r\n-        CAmount eff_value = amount - input_fee;\r\n         max_spendable += eff_value;\r\n \r\n         auto output_group = OutputGroup(coin_params);\r\n@@ -195,9 +191,9 @@ FUZZ_TARGET(coin_grinder_is_optimal)\r\n         }\r\n     }\r\n \r\n-    if (best_weight <= MAX_STANDARD_TX_WEIGHT) {\r\n+    if (best_weight < std::numeric_limits<int>::max()) {\r\n         // Sufficient funds and acceptable weight: CoinGrinder should find at least one solution\r\n-        int high_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(best_weight, MAX_STANDARD_TX_WEIGHT);\r\n+        int high_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(best_weight, std::numeric_limits<int>::max());\r\n \r\n         auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, high_max_weight);\r\n         assert(result_cg);\r\n@@ -209,7 +205,7 @@ FUZZ_TARGET(coin_grinder_is_optimal)\r\n     }\r\n \r\n     // CoinGrinder cannot ever find a better solution than the brute-forced best, or there is none in the first place\r\n-    int low_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::min(best_weight - 1, MAX_STANDARD_TX_WEIGHT));\r\n+    int low_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, best_weight - 1);\r\n     auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, low_max_weight);\r\n     // Max_weight should have been exceeded, or there were insufficient funds\r\n     assert(!result_cg);\r\n```",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T15:18:26Z",
      "diff_hunk" : "@@ -134,6 +135,86 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472986777",
      "id" : 1472986777,
      "line" : 145,
      "node_id" : "PRRC_kwDOABII585Xy_6Z",
      "original_commit_id" : "e8115ac3402a1722f89f2a4e1907a7fe151622dc",
      "original_line" : 145,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 76,
      "pull_request_review_id" : 1853774778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472986777/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T15:25:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472986777",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473374021"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374021"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "While I agree that CoinGrinder already does work that scales with the size of the UTXO pool, I would argue that CoinGrinder should never need more than 100'000 tries to find _a_ solution. We can only use up to ~1740 inputs in a standard transaction, so if a wallet canât scrounge up enough funds after traversing 100'000 candidate input sets, Iâd say it has other issues.\r\n\r\nHappy to change both of these in a follow-up, but wouldnât consider it necessary for this PR to land.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T19:38:05Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473374021",
      "id" : 1473374021,
      "in_reply_to_id" : 1472848173,
      "line" : 358,
      "node_id" : "PRRC_kwDOABII585X0edF",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 318,
      "original_position" : 131,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 199,
      "pull_request_review_id" : 1854679982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374021/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T19:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374021",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473374818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374818"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, SHIFT is _deselect + explore_ and CUT is _deselect + deselect + explore_, so CUT is _deselect + SHIFT_.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T19:38:52Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473374818",
      "id" : 1473374818,
      "in_reply_to_id" : 1472849582,
      "line" : 373,
      "node_id" : "PRRC_kwDOABII585X0epi",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 332,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 214,
      "pull_request_review_id" : 1854679982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374818/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T19:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374818",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473376740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473376740"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, looks correct. I will move `result.SetSelectionsEvaluated(curr_try)` out of the loop next time Iâll push. I know there are some other reviews in flight right now.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T19:40:35Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473376740",
      "id" : 1473376740,
      "in_reply_to_id" : 1472864023,
      "line" : 384,
      "node_id" : "PRRC_kwDOABII585X0fHk",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 342,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 225,
      "pull_request_review_id" : 1854679982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473376740/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T19:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473376740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473377599"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473377599"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, will fix when I push next time.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T19:41:25Z",
      "diff_hunk" : "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3ÃLTFRE (default: 30â¯á¹©/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {\n+            cg_result->ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);\n+            results.push_back(*cg_result);\n+        } else append_error(cg_result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473377599",
      "id" : 1473377599,
      "in_reply_to_id" : 1472865513,
      "line" : 716,
      "node_id" : "PRRC_kwDOABII585X0fU_",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 716,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 8,
      "pull_request_review_id" : 1854679982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473377599/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T19:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473377599",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473380373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473380373"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay cool, sound great. Will adopt with the next push.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-01-31T19:44:24Z",
      "diff_hunk" : "@@ -134,6 +135,86 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473380373",
      "id" : 1473380373,
      "in_reply_to_id" : 1472986777,
      "line" : 145,
      "node_id" : "PRRC_kwDOABII585X0gAV",
      "original_commit_id" : "e8115ac3402a1722f89f2a4e1907a7fe151622dc",
      "original_line" : 145,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 76,
      "pull_request_review_id" : 1854679982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473380373/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-31T19:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473380373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1474434487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474434487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That said, your comment indicates that this could be phrased better, since it appears to be difficult to follow. Will improve.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-02-01T13:04:26Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1474434487",
      "id" : 1474434487,
      "in_reply_to_id" : 1472849582,
      "line" : 373,
      "node_id" : "PRRC_kwDOABII585X4hW3",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 332,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 214,
      "pull_request_review_id" : 1856442648,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474434487/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T13:04:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474434487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475072896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475072896"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(From IRL discussion)\r\n\r\nThe actually implemented optimization here is actually more powerful than what is described by the comment, because the weight isn't compared. Due to the fact that that among equal-value utxo groups, the lower weight ones sort first, higher weight ones are even worse, and can also be skipped.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-02-01T19:55:45Z",
      "diff_hunk" : "@@ -183,6 +200,223 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Î£(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead[i] = total_available;\n+        min_tail_weight[i] = min_group_weight;\n+        // UTXOs with non-positive effective value must have been filtered\n+        Assume(utxo_pool[i].GetSelectionAmount() > 0);\n+        total_available += utxo_pool[i].GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool[i].m_weight);\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    bool is_done = false;\n+    size_t curr_try = 0;\n+    while (!is_done) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        auto curr_tail = curr_selection.back();\n+        if (curr_amount + lookahead[curr_tail] < total_target) {\n+            // Insufficient funds with lookahead: CUT\n+            should_cut = true;\n+        } else if (curr_weight > best_selection_weight) {\n+            // best_selection_weight is initialized to max_weight\n+            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\n+            // Worse weight than best solution. More UTXOs only increase weight:\n+            // CUT if last selected group had minimal weight, else SHIFT\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift  = true;\n+            }\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\n+            // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift = true;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            result.SetAlgoCompleted(false);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        while (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                is_done = true;\n+                result.SetSelectionsEvaluated(curr_try);\n+                result.SetAlgoCompleted(true);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475072896",
      "id" : 1475072896,
      "line" : 392,
      "node_id" : "PRRC_kwDOABII585X69OA",
      "original_commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "original_line" : 392,
      "original_position" : 233,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 233,
      "pull_request_review_id" : 1857490482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475072896/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T19:55:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475072896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475073648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475073648"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yep, will update.",
      "commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "created_at" : "2024-02-01T19:56:32Z",
      "diff_hunk" : "@@ -183,6 +200,223 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Î£(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead[i] = total_available;\n+        min_tail_weight[i] = min_group_weight;\n+        // UTXOs with non-positive effective value must have been filtered\n+        Assume(utxo_pool[i].GetSelectionAmount() > 0);\n+        total_available += utxo_pool[i].GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool[i].m_weight);\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    bool is_done = false;\n+    size_t curr_try = 0;\n+    while (!is_done) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        auto curr_tail = curr_selection.back();\n+        if (curr_amount + lookahead[curr_tail] < total_target) {\n+            // Insufficient funds with lookahead: CUT\n+            should_cut = true;\n+        } else if (curr_weight > best_selection_weight) {\n+            // best_selection_weight is initialized to max_weight\n+            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\n+            // Worse weight than best solution. More UTXOs only increase weight:\n+            // CUT if last selected group had minimal weight, else SHIFT\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift  = true;\n+            }\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\n+            // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift = true;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            result.SetAlgoCompleted(false);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        while (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                is_done = true;\n+                result.SetSelectionsEvaluated(curr_try);\n+                result.SetAlgoCompleted(true);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475073648",
      "id" : 1475073648,
      "in_reply_to_id" : 1475072896,
      "line" : 392,
      "node_id" : "PRRC_kwDOABII585X69Zw",
      "original_commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "original_line" : 392,
      "original_position" : 233,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 233,
      "pull_request_review_id" : 1857491704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475073648/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T19:56:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475073648",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475094275"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475094275"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Moved `result.SetSelectionsEvaluated(curr_try)` after the loop",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T20:17:20Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475094275",
      "id" : 1475094275,
      "in_reply_to_id" : 1472864023,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7CcD",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 342,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475094275/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475094275",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475095394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475095394"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T20:18:28Z",
      "diff_hunk" : "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3ÃLTFRE (default: 30â¯á¹©/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {\n+            cg_result->ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);\n+            results.push_back(*cg_result);\n+        } else append_error(cg_result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475095394",
      "id" : 1475095394,
      "in_reply_to_id" : 1472865513,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7Cti",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 716,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475095394/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475095394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475100291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475100291"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Changed as follows:\r\n\r\n```diff\r\n-            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\r\n-            // last selected UTXO, then SHIFT)\r\n+            // find any solutions. Redirect to exploring the Omission branch of the penultimate selected UTXO (i.e.\r\n+            // set `next_utxo` to one after the penultimate selected, then deselect the last two selected UTXOs)\r\n```",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T20:22:46Z",
      "diff_hunk" : "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475100291",
      "id" : 1475100291,
      "in_reply_to_id" : 1472849582,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7D6D",
      "original_commit_id" : "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "original_line" : 332,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475100291/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475100291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475114260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475114260"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit: test: Add coin_grinder_tests\r\n\r\nI think clearing the expected result here is not necessary. You can get rid of this (and potentially also just move the declaration of `expected_result` here instead.",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T20:34:45Z",
      "diff_hunk" : "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475114260",
      "id" : 1475114260,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7HUU",
      "original_commit_id" : "e00d908ce1091c00389f978ee07c184ca91daacd",
      "original_line" : 1200,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1857573521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475114260/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T21:22:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475114260",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475116651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475116651"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit: test: Add coin_grinder_tests\r\n\r\nSame as per point 5)",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T20:35:20Z",
      "diff_hunk" : "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();\n+        add_coin(1 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 2, expected_result);\n+        BOOST_CHECK(EquivalentResult(expected_result, *res));\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 4;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 5) Test finding a solution in a UTXO pool with mixed weights\n+        // ################################################################################################################\n+        CAmount target = 30L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 5; ++j) {\n+                // Add heavy coins {3, 6, 9, 12, 15}\n+                add_coin(available_coins, wallet, CAmount((3 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 350);\n+                // Add medium coins {2, 5, 8, 11, 14}\n+                add_coin(available_coins, wallet, CAmount((2 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 250);\n+                // Add light coins {1, 4, 7, 10, 13}\n+                add_coin(available_coins, wallet, CAmount((1 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 150);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 2041;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 6) Test that the lightest solution among many clones is found\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  9.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            // Expected Result: 4 + 3 + 2 + 1 = 10 BTC at 400â¯vB\n+            add_coin(available_coins, wallet, CAmount(4 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(3 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            // Distracting clones:\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(8 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(7 * COIN), CFeeRate(5000), 144, false, 0, true, 800);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(6 * COIN), CFeeRate(5000), 144, false, 0, true, 600);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(5 * COIN), CFeeRate(5000), 144, false, 0, true, 400);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475116651",
      "id" : 1475116651,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7H5r",
      "original_commit_id" : "e00d908ce1091c00389f978ee07c184ca91daacd",
      "original_line" : 1262,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1857573521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475116651/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T21:22:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475116651",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475146550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475146550"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I had to make the following change to ensure that there is a positive effective value:\r\n\r\n```diff\r\n-        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY - max_spendable)};\r\n+        // Ensure that each UTXO has at least an effective value of 1 sat\r\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};\r\n```",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:03:30Z",
      "diff_hunk" : "@@ -134,6 +135,86 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475146550",
      "id" : 1475146550,
      "in_reply_to_id" : 1472986777,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7PM2",
      "original_commit_id" : "e8115ac3402a1722f89f2a4e1907a7fe151622dc",
      "original_line" : 145,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475146550/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475146550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475155882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475155882"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Instead of comparing fees, Iâm comparing weights here now. Iâll also add a commit to skip larger weights after tie-breaking the sort order with the weight.",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:13:15Z",
      "diff_hunk" : "@@ -183,6 +200,223 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Î£(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead[i] = total_available;\n+        min_tail_weight[i] = min_group_weight;\n+        // UTXOs with non-positive effective value must have been filtered\n+        Assume(utxo_pool[i].GetSelectionAmount() > 0);\n+        total_available += utxo_pool[i].GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool[i].m_weight);\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    bool is_done = false;\n+    size_t curr_try = 0;\n+    while (!is_done) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        auto curr_tail = curr_selection.back();\n+        if (curr_amount + lookahead[curr_tail] < total_target) {\n+            // Insufficient funds with lookahead: CUT\n+            should_cut = true;\n+        } else if (curr_weight > best_selection_weight) {\n+            // best_selection_weight is initialized to max_weight\n+            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\n+            // Worse weight than best solution. More UTXOs only increase weight:\n+            // CUT if last selected group had minimal weight, else SHIFT\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift  = true;\n+            }\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\n+            // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift = true;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            result.SetAlgoCompleted(false);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        while (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                is_done = true;\n+                result.SetSelectionsEvaluated(curr_try);\n+                result.SetAlgoCompleted(true);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475155882",
      "id" : 1475155882,
      "in_reply_to_id" : 1475072896,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7Req",
      "original_commit_id" : "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "original_line" : 392,
      "original_position" : 233,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475155882/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475155882",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475157115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475157115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In opt: Track remaining effective_value in lookahead:\r\n\r\nI wonder why this gets turned into a descending while loop instead of a descending for loop. Given the total number of iterations is known beforehand a for seems best suited (plus the scope of the counter is reduced to to scope of the loop)",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:14:41Z",
      "diff_hunk" : "@@ -204,13 +204,18 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n {\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Î£(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n \n-    // Check that there are sufficient funds\n+    // Calculate lookahead values, and check that there are sufficient funds\n     CAmount total_available = 0;\n-    for (const OutputGroup& utxo : utxo_pool) {\n-        // Assert UTXOs with non-positive effective value have been filtered\n-        Assume(utxo.GetSelectionAmount() > 0);\n-        total_available += utxo.GetSelectionAmount();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475157115",
      "id" : 1475157115,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7Rx7",
      "original_commit_id" : "b441b2cc02c4a72bcee32fc4083f1de3be17509e",
      "original_line" : 213,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1857573521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475157115/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T21:22:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475157115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475162152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475162152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in test: Exhaust search attempts with tiny UTXOs:\r\n\r\nSame as for cases 5) and 6), clearing is not needed",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:19:34Z",
      "diff_hunk" : "@@ -1269,6 +1270,33 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n         size_t expected_attempts = 42;\n         BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n     }\n+\n+    {\n+        // #################################################################################################################\n+        // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 40000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(1.8 * COIN), CFeeRate(5000), 144, false, 0, true, 2500);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            for (int j = 0; j < 100; ++j) {\n+                // make a 100 unique coins only differing by one sat\n+                add_coin(available_coins, wallet, CAmount(0.01 * COIN + j), CFeeRate(5000), 144, false, 0, true, 110);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475162152",
      "id" : 1475162152,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7TAo",
      "original_commit_id" : "89465b0551ea6001c69a3dd78957b4033b056bdd",
      "original_line" : 1292,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1857573521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475162152/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T21:22:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475162152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475183696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183696"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yep, moved declaration down there.",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:38:12Z",
      "diff_hunk" : "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475183696",
      "id" : 1475183696,
      "in_reply_to_id" : 1475114260,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7YRQ",
      "original_commit_id" : "e00d908ce1091c00389f978ee07c184ca91daacd",
      "original_line" : 1200,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183696/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183696",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475183856"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183856"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:38:22Z",
      "diff_hunk" : "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();\n+        add_coin(1 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 2, expected_result);\n+        BOOST_CHECK(EquivalentResult(expected_result, *res));\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 4;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 5) Test finding a solution in a UTXO pool with mixed weights\n+        // ################################################################################################################\n+        CAmount target = 30L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 5; ++j) {\n+                // Add heavy coins {3, 6, 9, 12, 15}\n+                add_coin(available_coins, wallet, CAmount((3 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 350);\n+                // Add medium coins {2, 5, 8, 11, 14}\n+                add_coin(available_coins, wallet, CAmount((2 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 250);\n+                // Add light coins {1, 4, 7, 10, 13}\n+                add_coin(available_coins, wallet, CAmount((1 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 150);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 2041;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 6) Test that the lightest solution among many clones is found\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  9.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            // Expected Result: 4 + 3 + 2 + 1 = 10 BTC at 400â¯vB\n+            add_coin(available_coins, wallet, CAmount(4 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(3 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            // Distracting clones:\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(8 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(7 * COIN), CFeeRate(5000), 144, false, 0, true, 800);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(6 * COIN), CFeeRate(5000), 144, false, 0, true, 600);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(5 * COIN), CFeeRate(5000), 144, false, 0, true, 400);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475183856",
      "id" : 1475183856,
      "in_reply_to_id" : 1475116651,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7YTw",
      "original_commit_id" : "e00d908ce1091c00389f978ee07c184ca91daacd",
      "original_line" : 1262,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183856/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475198825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475198825"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure, replaced with:\r\n\r\n```diff\r\n-    size_t i = utxo_pool.size();\r\n-    while (i > 0) {\r\n-        --i;\r\n+    for (int i = utxo_pool.size() - 1 ; i >= 0; --i) {\r\n```",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:51:41Z",
      "diff_hunk" : "@@ -204,13 +204,18 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n {\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Î£(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n \n-    // Check that there are sufficient funds\n+    // Calculate lookahead values, and check that there are sufficient funds\n     CAmount total_available = 0;\n-    for (const OutputGroup& utxo : utxo_pool) {\n-        // Assert UTXOs with non-positive effective value have been filtered\n-        Assume(utxo.GetSelectionAmount() > 0);\n-        total_available += utxo.GetSelectionAmount();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475198825",
      "id" : 1475198825,
      "in_reply_to_id" : 1475157115,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7b9p",
      "original_commit_id" : "b441b2cc02c4a72bcee32fc4083f1de3be17509e",
      "original_line" : 213,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475198825/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475198825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475202681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475202681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Absolutely. Fixed.",
      "commit_id" : "f607eabf9ca78f4d957340ea2180944c4613c8bc",
      "created_at" : "2024-02-01T21:55:20Z",
      "diff_hunk" : "@@ -1269,6 +1270,33 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n         size_t expected_attempts = 42;\n         BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n     }\n+\n+    {\n+        // #################################################################################################################\n+        // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 40000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(1.8 * COIN), CFeeRate(5000), 144, false, 0, true, 2500);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            for (int j = 0; j < 100; ++j) {\n+                // make a 100 unique coins only differing by one sat\n+                add_coin(available_coins, wallet, CAmount(0.01 * COIN + j), CFeeRate(5000), 144, false, 0, true, 110);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475202681",
      "id" : 1475202681,
      "in_reply_to_id" : 1475162152,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585X7c55",
      "original_commit_id" : "89465b0551ea6001c69a3dd78957b4033b056bdd",
      "original_line" : 1292,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1857527717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475202681/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-01T22:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475202681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1476745673"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1476745673"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Isn't this equivalent to:\r\n\r\n```\r\nfor (int i = utxo_pool.size()-1; i >= 0 ; --i) \r\n```\r\n\r\nI guess it's a matter of personal taste though, so feel free to disregard",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-02T21:23:20Z",
      "diff_hunk" : "@@ -183,6 +200,222 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Î£(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    for (size_t i = 0; i < utxo_pool.size(); ++i) {\n+        size_t index = utxo_pool.size() - 1 - i; // Loop over every element in reverse order",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1476745673",
      "id" : 1476745673,
      "line" : 338,
      "node_id" : "PRRC_kwDOABII585YBVnJ",
      "original_commit_id" : "40f9f7e123753e1eaafae1c1cab0fffc256105c0",
      "original_line" : 338,
      "original_position" : 69,
      "original_start_line" : 227,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 186,
      "pull_request_review_id" : 1860414829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1476745673/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 337,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-05T18:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1476745673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added a longer textual explanation on how the algorithm can be thought in terms of the search graph it walks.",
      "created_at" : "2024-02-04T21:02:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1925913171",
      "id" : 1925913171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585yyxpT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1925913171/reactions"
      },
      "updated_at" : "2024-02-04T21:02:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1925913171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477447553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477447553"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's linear, not constant? (`curr_selections` is $\\mathcal{O}(n)$ in the number of UTXOs/groups). I assume that the point you're trying to make is that it doesn't scale with the search space (which is exponential in the number of UTXOs), but as-is it can be misunderstood.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:30:09Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477447553",
      "id" : 1477447553,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YEA-B",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 224,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477447553/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477447553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477447986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477447986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you can drop `{}`, `{____}`, and the second `{__C}` here (you currently have 18, not 15, entries).",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:33:02Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477447986",
      "id" : 1477447986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YEBEy",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 234,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477447986/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477447986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477448371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448371"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add, \"thus we can SHIFT in this case\".",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:35:14Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477448371",
      "id" : 1477448371,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YEBKz",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 259,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448371/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448371",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477448598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448598"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add that this is the EXPLORE step, or the final addition part of SHIFT/CUT.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:36:43Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.\n+ *\n+ * Given the above UTXO set and a target of 11, using these initial observations, the basic implementation of\n+* CoinGrinder visits the following 10 nodes:\n+ *\n+ *     Node   [eff_val/weight]  Evaluation\n+ *     -------------------\n+ *     {A}    [10/2]   Insufficient funds: EXPLORE\n+ *     {AB}   [17/3]   Solution: SHIFT to omission branch\n+ *     {A_C}  [15/3]   Better solution: SHIFT to omission branch\n+ *     {A__D} [14/4]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {A__D}, i.e. SHIFT\n+ *                     to omission branch of {A}\n+ *     {_B}   [7/1]    Insufficient funds: EXPLORE\n+ *     {_BC}  [12/2]   Better solution: SHIFT to omission branch\n+ *     {_B_D} [11/3]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {_B_D}, i.e. SHIFT\n+ *                     to omission branch of {_B}\n+ *     {__C}  [5/1]    Insufficient funds: EXPLORE\n+ *     {__CD} [9/3]    Insufficient funds, leaf node: CUT\n+ *     {___D} [4/2]    Insufficient funds, leaf node, cannot CUT since only one UTXO selected: done.\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB}                       __\\_____                     {_B} __                    __\\_____\n+ *                                              /        \\                  /        \\                  /        \\\n+ * C=[5/1]                                 {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *                                                        /                           /             /             /\n+ * D=[4/2]                                           {A__D}                      {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We implement this tree walk in the following algorithm:\n+ * 1. Add `next_utxo`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477448598",
      "id" : 1477448598,
      "line" : 307,
      "node_id" : "PRRC_kwDOABII585YEBOW",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 307,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 155,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448598/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477448626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448626"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add that this corresponds to deciding whether SHIFT or CUT are appropriate.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:37:01Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.\n+ *\n+ * Given the above UTXO set and a target of 11, using these initial observations, the basic implementation of\n+* CoinGrinder visits the following 10 nodes:\n+ *\n+ *     Node   [eff_val/weight]  Evaluation\n+ *     -------------------\n+ *     {A}    [10/2]   Insufficient funds: EXPLORE\n+ *     {AB}   [17/3]   Solution: SHIFT to omission branch\n+ *     {A_C}  [15/3]   Better solution: SHIFT to omission branch\n+ *     {A__D} [14/4]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {A__D}, i.e. SHIFT\n+ *                     to omission branch of {A}\n+ *     {_B}   [7/1]    Insufficient funds: EXPLORE\n+ *     {_BC}  [12/2]   Better solution: SHIFT to omission branch\n+ *     {_B_D} [11/3]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {_B_D}, i.e. SHIFT\n+ *                     to omission branch of {_B}\n+ *     {__C}  [5/1]    Insufficient funds: EXPLORE\n+ *     {__CD} [9/3]    Insufficient funds, leaf node: CUT\n+ *     {___D} [4/2]    Insufficient funds, leaf node, cannot CUT since only one UTXO selected: done.\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB}                       __\\_____                     {_B} __                    __\\_____\n+ *                                              /        \\                  /        \\                  /        \\\n+ * C=[5/1]                                 {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *                                                        /                           /             /             /\n+ * D=[4/2]                                           {A__D}                      {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We implement this tree walk in the following algorithm:\n+ * 1. Add `next_utxo`\n+ * 2. Evaluate candidate input set\n+ * 3. Optionally backtrack, and determine `next_utxo`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477448626",
      "id" : 1477448626,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YEBOy",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448626/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477448626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477455976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477455976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can use the (test) global `g_insecure_rand_ctx` instead of creating your own RNG.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:47:24Z",
      "diff_hunk" : "@@ -1090,6 +1090,185 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477455976",
      "id" : 1477455976,
      "line" : 1116,
      "node_id" : "PRRC_kwDOABII585YEDBo",
      "original_commit_id" : "91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0",
      "original_line" : 1116,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 27,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477455976/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477455976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477456250"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477456250"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Document that this only holds for CG, or alternatively, set it in other algorithms were it applies too (only BNB, I assume)?",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:49:32Z",
      "diff_hunk" : "@@ -330,6 +330,8 @@ struct SelectionResult\n     bool m_use_effective{false};\n     /** The computed waste */\n     std::optional<CAmount> m_waste;\n+    /** False if algorithm was cut short by hitting limit of attempts and solution is non-optimal */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477456250",
      "id" : 1477456250,
      "line" : 333,
      "node_id" : "PRRC_kwDOABII585YEDF6",
      "original_commit_id" : "cc134b6b001aa9163872f19518eeab1bdbb66fea",
      "original_line" : 333,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : 25,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477456250/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477456250",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477456505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477456505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps point out that this makes it a branch-and-bound algorithm (https://en.wikipedia.org/wiki/Branch_and_bound): any branch which can only contain solutions worse than the best solution so far can be skipped.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T21:51:17Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477456505",
      "id" : 1477456505,
      "line" : 243,
      "node_id" : "PRRC_kwDOABII585YEDJ5",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 243,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 91,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477456505/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477456505",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477463744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477463744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `static constexpr unsigned MAX_OUTPUT_GROUPS{16};`.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T22:03:07Z",
      "diff_hunk" : "@@ -134,6 +135,84 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_output_groups = 16;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477463744",
      "id" : 1477463744,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YEE7A",
      "original_commit_id" : "a96b2db8fbeec8d61049281c203db1f1a00501fe",
      "original_line" : 152,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477463744/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477463744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477465223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477465223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you can actually do even better: it suffices that the next UTXO has a weight larger ~~or equal~~ to the first preceding omitted one. This is always the case when they have equal value (due to the tiebreak), but it may extend to further (lower) values too (if those have higher or equal weight).\r\n\nEDIT: as we aim for minimal overshoot of target value (after minimizing weight), it only works when the considered next utxo has weight *larger than* the first omitted one, or has the same value (and equal or larger weight, but that is implied by the sorting). That makes this suggestion much less applicable.\n\r\nFeel free to leave this for a follow-up.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T22:13:21Z",
      "diff_hunk" : "@@ -473,12 +473,12 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             deselect_last();\n             should_shift  = false;\n \n-            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n-            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n-            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n-            // differing amount or weight.\n-            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\n-                    && utxo_pool[next_utxo - 1].m_weight == utxo_pool[next_utxo].m_weight) {\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same effective value as the UTXO we\n+            // just omitted. Since lower weight is our tiebreaker on UTXOs with equal effective value for sorting, if it\n+            // ties on the effective value, it _must_ have the same weight (i.e. be a \"clone\" of the prior UTXO) or a\n+            // higher weight. If so, selecting `next_utxo` would produce an equivalent or worse selection as one we\n+            // previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a differing amount.\n+            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477465223",
      "id" : 1477465223,
      "line" : 504,
      "node_id" : "PRRC_kwDOABII585YEFSH",
      "original_commit_id" : "97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
      "original_line" : 504,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 352,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477465223/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T23:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477465223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477465413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477465413"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason not to add this test in the very beginning together with the other test cases?",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T22:15:13Z",
      "diff_hunk" : "@@ -1267,6 +1268,32 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n         size_t expected_attempts = 42;\n         BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n     }\n+\n+    {\n+        // #################################################################################################################",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477465413",
      "id" : 1477465413,
      "line" : 1273,
      "node_id" : "PRRC_kwDOABII585YEFVF",
      "original_commit_id" : "5055d3d20b5f2cd2cc92f05b0e618aaf713ad875",
      "original_line" : 1273,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 184,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477465413/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477465413",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477467836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477467836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not entirely convinced it's impossible to hit overflow in the multiplication here. I'd suggest upcasting first `int64_t{min_tail_weight[curr_tail]} * ...`.\r\n\r\nAlso two minor improvements here:\r\n* you can round up in the division, as you need integral transactions\r\n* the `!best_selection_empty()` is unnecessary (`best_selection_weight` is already initialized to `max_weight` here, and exceeding that is also a reason to shift/cut).\r\n\r\nOverall that means:\r\n\r\n```c++\r\n} else if (curr_weight + int64_t{min_tail_weight[curr_tail]} * ((total_target - curr_amount + utxo_pool[curr_tail].GetSelectionAmount() - 1) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {`\r\n```\r\n\r\n\r\n",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-04T22:31:31Z",
      "diff_hunk" : "@@ -448,6 +448,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1477467836",
      "id" : 1477467836,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YEF68",
      "original_commit_id" : "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_line" : 451,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1861568291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477467836/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-04T22:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1477467836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478362138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478362138"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, Iâve improved that sentence.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T14:41:23Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478362138",
      "id" : 1478362138,
      "in_reply_to_id" : 1477447553,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YHgQa",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 224,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478362138/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478362138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478371586"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478371586"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure, added the mention of that.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T14:48:07Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478371586",
      "id" : 1478371586,
      "in_reply_to_id" : 1477456505,
      "line" : 243,
      "node_id" : "PRRC_kwDOABII585YHikC",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 243,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 91,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478371586/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478371586",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478371817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478371817"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, good catch",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T14:48:16Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478371817",
      "id" : 1478371817,
      "in_reply_to_id" : 1477447986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YHinp",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 234,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478371817/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478371817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478374197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478374197"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added!",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T14:49:54Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478374197",
      "id" : 1478374197,
      "in_reply_to_id" : 1477448371,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YHjM1",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 259,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478374197/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478374197",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478375389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478375389"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T14:50:45Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.\n+ *\n+ * Given the above UTXO set and a target of 11, using these initial observations, the basic implementation of\n+* CoinGrinder visits the following 10 nodes:\n+ *\n+ *     Node   [eff_val/weight]  Evaluation\n+ *     -------------------\n+ *     {A}    [10/2]   Insufficient funds: EXPLORE\n+ *     {AB}   [17/3]   Solution: SHIFT to omission branch\n+ *     {A_C}  [15/3]   Better solution: SHIFT to omission branch\n+ *     {A__D} [14/4]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {A__D}, i.e. SHIFT\n+ *                     to omission branch of {A}\n+ *     {_B}   [7/1]    Insufficient funds: EXPLORE\n+ *     {_BC}  [12/2]   Better solution: SHIFT to omission branch\n+ *     {_B_D} [11/3]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {_B_D}, i.e. SHIFT\n+ *                     to omission branch of {_B}\n+ *     {__C}  [5/1]    Insufficient funds: EXPLORE\n+ *     {__CD} [9/3]    Insufficient funds, leaf node: CUT\n+ *     {___D} [4/2]    Insufficient funds, leaf node, cannot CUT since only one UTXO selected: done.\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB}                       __\\_____                     {_B} __                    __\\_____\n+ *                                              /        \\                  /        \\                  /        \\\n+ * C=[5/1]                                 {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *                                                        /                           /             /             /\n+ * D=[4/2]                                           {A__D}                      {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We implement this tree walk in the following algorithm:\n+ * 1. Add `next_utxo`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478375389",
      "id" : 1478375389,
      "in_reply_to_id" : 1477448598,
      "line" : 307,
      "node_id" : "PRRC_kwDOABII585YHjfd",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 307,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 155,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478375389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478375389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478391942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478391942"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Rephrased to mention again all three possible state transitions with example",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T15:00:56Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.\n+ *\n+ * Given the above UTXO set and a target of 11, using these initial observations, the basic implementation of\n+* CoinGrinder visits the following 10 nodes:\n+ *\n+ *     Node   [eff_val/weight]  Evaluation\n+ *     -------------------\n+ *     {A}    [10/2]   Insufficient funds: EXPLORE\n+ *     {AB}   [17/3]   Solution: SHIFT to omission branch\n+ *     {A_C}  [15/3]   Better solution: SHIFT to omission branch\n+ *     {A__D} [14/4]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {A__D}, i.e. SHIFT\n+ *                     to omission branch of {A}\n+ *     {_B}   [7/1]    Insufficient funds: EXPLORE\n+ *     {_BC}  [12/2]   Better solution: SHIFT to omission branch\n+ *     {_B_D} [11/3]   Worse solution, shift impossible due to leaf node: CUT to omission branch of {_B_D}, i.e. SHIFT\n+ *                     to omission branch of {_B}\n+ *     {__C}  [5/1]    Insufficient funds: EXPLORE\n+ *     {__CD} [9/3]    Insufficient funds, leaf node: CUT\n+ *     {___D} [4/2]    Insufficient funds, leaf node, cannot CUT since only one UTXO selected: done.\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB}                       __\\_____                     {_B} __                    __\\_____\n+ *                                              /        \\                  /        \\                  /        \\\n+ * C=[5/1]                                 {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *                                                        /                           /             /             /\n+ * D=[4/2]                                           {A__D}                      {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We implement this tree walk in the following algorithm:\n+ * 1. Add `next_utxo`\n+ * 2. Evaluate candidate input set\n+ * 3. Optionally backtrack, and determine `next_utxo`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478391942",
      "id" : 1478391942,
      "in_reply_to_id" : 1477448626,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YHniG",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478391942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478391942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478397733"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478397733"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâm not sure I follow. We also SHIFT after finding a solution, so we canât just go by any preceding omitted one. Also, isnât that just pre-empting the overweight check in the evaluation?\r\n\r\nNeed to think more about that one.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T15:05:09Z",
      "diff_hunk" : "@@ -473,12 +473,12 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             deselect_last();\n             should_shift  = false;\n \n-            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n-            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n-            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n-            // differing amount or weight.\n-            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\n-                    && utxo_pool[next_utxo - 1].m_weight == utxo_pool[next_utxo].m_weight) {\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same effective value as the UTXO we\n+            // just omitted. Since lower weight is our tiebreaker on UTXOs with equal effective value for sorting, if it\n+            // ties on the effective value, it _must_ have the same weight (i.e. be a \"clone\" of the prior UTXO) or a\n+            // higher weight. If so, selecting `next_utxo` would produce an equivalent or worse selection as one we\n+            // previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a differing amount.\n+            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478397733",
      "id" : 1478397733,
      "in_reply_to_id" : 1477465223,
      "line" : 504,
      "node_id" : "PRRC_kwDOABII585YHo8l",
      "original_commit_id" : "97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
      "original_line" : 504,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 352,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478397733/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478397733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478399611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478399611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I had also set it for BnB originally, but then I got the complaint that it wasn't being read anywhere yet. Iâll add it when I update BnB accordingly.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T15:06:31Z",
      "diff_hunk" : "@@ -330,6 +330,8 @@ struct SelectionResult\n     bool m_use_effective{false};\n     /** The computed waste */\n     std::optional<CAmount> m_waste;\n+    /** False if algorithm was cut short by hitting limit of attempts and solution is non-optimal */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478399611",
      "id" : 1478399611,
      "in_reply_to_id" : 1477456250,
      "line" : 333,
      "node_id" : "PRRC_kwDOABII585YHpZ7",
      "original_commit_id" : "cc134b6b001aa9163872f19518eeab1bdbb66fea",
      "original_line" : 333,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : 25,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478399611/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478399611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478573734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478573734"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"has not selected enough to fund a transaction\" -> enoguh \"elements\", \"coins\", ...?",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T16:51:50Z",
      "diff_hunk" : "@@ -183,6 +200,325 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478573734",
      "id" : 1478573734,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YIT6m",
      "original_commit_id" : "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_line" : 266,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1860414829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478573734/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-05T18:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478573734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478574051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478574051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: missing whitespace here",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T16:52:03Z",
      "diff_hunk" : "@@ -183,6 +200,325 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.\n+ *\n+ * Given the above UTXO set and a target of 11, using these initial observations, the basic implementation of\n+* CoinGrinder visits the following 10 nodes:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478574051",
      "id" : 1478574051,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YIT_j",
      "original_commit_id" : "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_line" : 274,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1860414829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478574051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-05T18:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478574051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478689644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478689644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this should be 16 though, not 15 as the comment claims:\r\n\r\n{} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A\\__D} {_B} {_BC} {_BCD} {_B_D} {\\_\\_C} {\\_\\_CD} ~{\\_\\_C}~{\\_\\_\\_D} ~{\\_\\_\\_\\_}~",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-05T18:16:35Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1478689644",
      "id" : 1478689644,
      "in_reply_to_id" : 1477447986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YIwNs",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 234,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1860414829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478689644/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-05T18:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1478689644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479813643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479813643"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@sr-gi: I did not count the root node, since we do not add a UTXO in the root node, so I did not count it among the inclusion branch nodes.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T13:39:25Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479813643",
      "id" : 1479813643,
      "in_reply_to_id" : 1477447986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YNCoL",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 234,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479813643/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479813643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479816822"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479816822"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Improved to \"If a candidate input set in a node has not selected sufficient funds to build the transaction, we continue directly along the next inclusion branch.\"",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T13:41:36Z",
      "diff_hunk" : "@@ -183,6 +200,325 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479816822",
      "id" : 1479816822,
      "in_reply_to_id" : 1478573734,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YNDZ2",
      "original_commit_id" : "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_line" : 266,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479816822/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479816822",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479825510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479825510"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed!",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T13:47:30Z",
      "diff_hunk" : "@@ -183,6 +200,325 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                ___________\\____________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} __                    __\\_____                     {_B} __                    __\\_____\n+ *                  /        \\                  /        \\                  /        \\                  /        \\\n+ * C=[5/1]     {ABC}          \\            {A_C}          \\            {_BC}          \\            {__C}          \\\n+ *              /             /             /             /             /             /             /             /\n+ * D=[4/2] {ABCD}        {AB_D}        {A_CD}        {A__D}        {_BCD}        {_B_D}        {__CD}        {___D}\n+ *\n+ *\n+ * We refer to the move from the inclusion branch {AB} via the omission branch {A_} to its inclusion-branch child {A_C}\n+ * as _shifting to the omission branch_ or just _SHIFT_. (The index of the ultimate element in the candidate input set\n+ * shifts right by one: {AB} â {A_C}.)\n+ * When we reach a leaf node in the last level of the tree, shifting to the omission branch is not possible. Instead we\n+ * go to the omission branch of the nodeâs last ancestor on an inclusion branch: from {ABCD}, we go to {AB_D}. From\n+ * {AB_D}, we go to {A_C}. We refer to this operation as a _CUT_. (The ultimate element in\n+ * the input set is deselected, and the penultimate element is shifted right by one: {AB_D} â {A_C}.)\n+ * If a candidate input set in a node has not selected enough to fund a transaction, we continue directly along the next\n+ * inclusion branch. We call this operation _EXPLORE_. (We go from one inclusion branch to the next inclusion branch:\n+ * {_B} â {_BC}.)\n+ * Further, any prefix that already has selected sufficient effective value to fund the transaction cannot be improved\n+ * by adding more UTXOs. If for example the candidate input set in {AB} is a valid solution, all potential descendant\n+ * solutions {ABC}, {ABCD}, and {AB_D} must have a higher weight.\n+ *\n+ * Given the above UTXO set and a target of 11, using these initial observations, the basic implementation of\n+* CoinGrinder visits the following 10 nodes:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479825510",
      "id" : 1479825510,
      "in_reply_to_id" : 1478574051,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YNFhm",
      "original_commit_id" : "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_line" : 274,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479825510/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479825510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479832383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479832383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes I think that would be equivalent.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T13:50:28Z",
      "diff_hunk" : "@@ -183,6 +200,222 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Î£(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    for (size_t i = 0; i < utxo_pool.size(); ++i) {\n+        size_t index = utxo_pool.size() - 1 - i; // Loop over every element in reverse order",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479832383",
      "id" : 1479832383,
      "in_reply_to_id" : 1476745673,
      "line" : 338,
      "node_id" : "PRRC_kwDOABII585YNHM_",
      "original_commit_id" : "40f9f7e123753e1eaafae1c1cab0fffc256105c0",
      "original_line" : 338,
      "original_position" : 69,
      "original_start_line" : 227,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 186,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479832383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 337,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479832383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479863558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479863558"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that applies to pretty much all coinselection tests, so Iâll leave that for a follow-up at the moment.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T14:03:59Z",
      "diff_hunk" : "@@ -1090,6 +1090,185 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479863558",
      "id" : 1479863558,
      "in_reply_to_id" : 1477455976,
      "line" : 1116,
      "node_id" : "PRRC_kwDOABII585YNO0G",
      "original_commit_id" : "91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0",
      "original_line" : 1116,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 27,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479863558/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479863558",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479866589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479866589"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Taken",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T14:05:39Z",
      "diff_hunk" : "@@ -134,6 +135,84 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_output_groups = 16;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479866589",
      "id" : 1479866589,
      "in_reply_to_id" : 1477463744,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YNPjd",
      "original_commit_id" : "a96b2db8fbeec8d61049281c203db1f1a00501fe",
      "original_line" : 152,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479866589/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479866589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479874746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479874746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nope, good point. Folded into `test: Add coin_grinder_tests`",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T14:10:44Z",
      "diff_hunk" : "@@ -1267,6 +1268,32 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n         size_t expected_attempts = 42;\n         BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n     }\n+\n+    {\n+        // #################################################################################################################",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479874746",
      "id" : 1479874746,
      "in_reply_to_id" : 1477465413,
      "line" : 1273,
      "node_id" : "PRRC_kwDOABII585YNRi6",
      "original_commit_id" : "5055d3d20b5f2cd2cc92f05b0e618aaf713ad875",
      "original_line" : 1273,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 184,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479874746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479874746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479885730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479885730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I used the suggestion to upcast and to round up, but Iâm leaving the `!best_selection.empty()` in, as we would otherwise not produce a `max_tx_weight_exceeded` error.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T14:15:54Z",
      "diff_hunk" : "@@ -448,6 +448,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479885730",
      "id" : 1479885730,
      "in_reply_to_id" : 1477467836,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YNUOi",
      "original_commit_id" : "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_line" : 451,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1862978564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479885730/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479885730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479906114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479906114"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fair",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T14:22:08Z",
      "diff_hunk" : "@@ -188,6 +188,280 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * TL;DR: Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * Full description: CoinGrinder can be thought of as a graph walking algorithm. It explores a binary tree\n+ * representation of the powerset of the UTXO pool. Each node in the tree represents a candidate input set. The treeâs\n+ * root is the empty set. Each node in the tree has two children which are formed by either adding or skipping the next\n+ * UTXO (\"inclusion/omission branch\"). Each level in the tree after the root corresponds to a decision\n+ * about one UTXO in the UTXO pool.\n+ *\n+ * Example:\n+ * We represent UTXOs as _alias=[effective_value/weight]_ and indicate omitted UTXOs with an underscore. Given a UTXO\n+ * pool {A=[10/2], B=[7/1], C=[5/1], D=[4/2]} sorted by descending effective value, our search tree looks as follows:\n+ *\n+ *                                       _______________________ {} ________________________\n+ *                                      /                                                   \\\n+ * A=[10/2]               __________ {A} _________                                __________ {_} _________\n+ *                       /                        \\                              /                        \\\n+ * B=[7/1]            {AB} _                      {A_} _                      {_B} _                      {__} _\n+ *                  /       \\                   /       \\                   /       \\                   /       \\\n+ * C=[5/1]     {ABC}         {AB_}         {A_C}         {A__}         {_BC}         {_B_}         {__C}         {___}\n+ *              / \\           / \\           / \\           / \\           / \\           / \\           / \\           / \\\n+ * D=[4/2] {ABCD} {ABC_} {AB_D} {AB__} {A_CD} {A_C_} {A__D} {A___} {_BCD} {_BC_} {_B_D} {_B__} {__CD} {__C_} {___D} {____}\n+ *\n+ *\n+ * CoinGrinder uses a depth-first search to walk the tree. It first tries inclusion branches, then omission branches. A\n+ * naive exploration of a tree with four UTXOs requires visiting all 31 nodes:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {ABC_} {AB_} {AB_D} {AB__} {A_} {A_C} {A_CD} {A_C_} {A__} {A__D} {A___} {_} {_B} {_BC}\n+ *     {_BCD} {_BC_} {_B_} {_B_D} {_B__} {__} {__C} {__CD} {__C} {___} {___D} {____}\n+ *\n+ * As powersets grow exponentially with the set size, walking the entire tree would quickly get computationally\n+ * infeasible with growing UTXO pools. We can represent the current state of the search with constant data thanks to\n+ * visiting the nodes in a deterministic order. We skip visiting as many nodes as possible by recognizing subtrees that\n+ * cannot yield any better solutions.\n+ * CoinGrinder is searching for the input set with lowest weight that can fund a transaction, so for example we can only\n+ * ever find a _better_ candidate input set in a node that adds a UTXO, but never in a node that skips a UTXO. After\n+ * visiting {A} and exploring the inclusion branch {AB} and its descendants, the candidate input set in the omission\n+ * branch {A_} is equivalent to the parent {A} in effective value and weight. While CoinGrinder does need to visit the\n+ * descendants of the omission branch {A_}, it is unnecessary to evaluate the candidate input set in the omission branch\n+ * itself. By skipping evaluation of all nodes on an omission branch we reduce the visited nodes to 15:\n+ *\n+ *     {} {A} {AB} {ABC} {ABCD} {AB_D} {A_C} {A_CD} {A__D} {_B} {_BC} {_BCD} {_B_D} {__C} {__CD} {__C} {___D} {____}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1479906114",
      "id" : 1479906114,
      "in_reply_to_id" : 1477447986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YNZNC",
      "original_commit_id" : "d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "original_line" : 234,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1865353723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479906114/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T14:22:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1479906114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/21275419357</sub>",
      "created_at" : "2024-02-06T14:24:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1929826532",
      "id" : 1929826532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585zBtDk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1929826532/reactions"
      },
      "updated_at" : "2024-02-06T14:24:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1929826532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480260826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480260826"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@murchandamus Let me elaborate for context, but no point in addressing this in this PR (after my edit, I don't think it's a particularly impactful improvement even).\r\n\r\nLet's say the transactions, in order after sorting are A,B,C,D,E,F. Imagine we've just processed `_BC`, and SHIFT after it (so, without clone skipping, the next exploration would be `_B_D`). If it happens to be the case that D is unambiguously worse than C, then D can be skipped as well. This happens when value(D)=value(C) AND weight(D)>=weight(C) (as your current PR does; the latter condition being implied by sorting), but it also happens when value(D)<value(C) AND weight(D)>weight(C). If we wouldn't care about minimizing value overshoot, it'd be even possible to skip whenever weight(D)>=weight(C) in general, which would be far more often applicable.\r\n\r\nOk, so let's say for any of the reasons above, `_B_D` was clone-skipped, so we're now considering E as next_utxo. It suffices to compare E with C, rather than with D, because it's possible that weight(E)>weight(C), but not weight(E)>weight(D).\r\n\r\nSo my belief is that the rule can be that whenever next_utxo is unambiguously worse than the first omitted UTXO *without intervening inclusions*, it can be skipped, as a generalization of clone skipping. I haven't tried it, though.\r\n\r\n> Also, isnât that just pre-empting the overweight check in the evaluation?\r\n\r\nPartially, but clone-skipping works on just individual UTXOs, not just when an entire subtree can be skipped. It's possible that after the clone-skipping another, includable, UTXO still needs to be considered.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T17:05:05Z",
      "diff_hunk" : "@@ -473,12 +473,12 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             deselect_last();\n             should_shift  = false;\n \n-            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n-            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n-            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n-            // differing amount or weight.\n-            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\n-                    && utxo_pool[next_utxo - 1].m_weight == utxo_pool[next_utxo].m_weight) {\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same effective value as the UTXO we\n+            // just omitted. Since lower weight is our tiebreaker on UTXOs with equal effective value for sorting, if it\n+            // ties on the effective value, it _must_ have the same weight (i.e. be a \"clone\" of the prior UTXO) or a\n+            // higher weight. If so, selecting `next_utxo` would produce an equivalent or worse selection as one we\n+            // previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a differing amount.\n+            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480260826",
      "id" : 1480260826,
      "in_reply_to_id" : 1477465223,
      "line" : 504,
      "node_id" : "PRRC_kwDOABII585YOvza",
      "original_commit_id" : "97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
      "original_line" : 504,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 352,
      "pull_request_review_id" : 1865880225,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480260826/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T17:06:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480260826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480392199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480392199"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Only if you do further touchups, but if so, perhaps you can add a test here that if a solution was returned, even if `GetAlgoCompleted` isn't true, that `result_cg->GetWeight() <= high_max_weight` and that `result_cg->GetSelectedEffectiveValue() <= target + coin_params.m_min_change_target`?\r\n\r\nAlso `best_weight > result_cg->GetWeight() || (best_weight == result_cg->GetWeight() && best_amount >= result_cg->GetSelectedEffectiveValue())` would be possible to test, though adds less (it failing would just imply the exhaustive search in the fuzz test was wrong).",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T18:44:43Z",
      "diff_hunk" : "@@ -134,6 +135,84 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    static constexpr unsigned max_output_groups{16};\n+    std::vector<OutputGroup> group_pos;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\n+    {\n+        // With maximum m_effective_feerate and n_input_bytes = 1'000'000, input_fee <= MAX_MONEY.\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1'000'000)};\n+        // Only make UTXOs with positive effective value\n+        const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        // Ensure that each UTXO has at least an effective value of 1 sat\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};\n+        const CAmount amount{eff_value + input_fee};\n+        std::vector<COutput> temp_utxo_pool;\n+\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, temp_utxo_pool, coin_params.m_effective_feerate);\n+        max_spendable += eff_value;\n+\n+        auto output_group = OutputGroup(coin_params);\n+        output_group.Insert(std::make_shared<COutput>(temp_utxo_pool.at(0)), /*ancestors=*/0, /*descendants=*/0);\n+        group_pos.push_back(output_group);\n+    }\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= max_output_groups);\n+\n+    // Only choose targets below max_spendable\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, std::max(CAmount{1}, max_spendable - coin_params.m_min_change_target))};\n+\n+    // Brute force optimal solution\n+    CAmount best_amount{MAX_MONEY};\n+    int best_weight{std::numeric_limits<int>::max()};\n+    for (uint32_t pattern = 1; (pattern >> num_groups) == 0; ++pattern) {\n+        CAmount subset_amount{0};\n+        int subset_weight{0};\n+        for (unsigned i = 0; i < num_groups; ++i) {\n+            if ((pattern >> i) & 1) {\n+                subset_amount += group_pos[i].GetSelectionAmount();\n+                subset_weight += group_pos[i].m_weight;\n+            }\n+        }\n+        if ((subset_amount >= target + coin_params.m_min_change_target) && (subset_weight < best_weight || (subset_weight == best_weight && subset_amount < best_amount))) {\n+            best_weight = subset_weight;\n+            best_amount = subset_amount;\n+        }\n+    }\n+\n+    if (best_weight < std::numeric_limits<int>::max()) {\n+        // Sufficient funds and acceptable weight: CoinGrinder should find at least one solution\n+        int high_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(best_weight, std::numeric_limits<int>::max());\n+\n+        auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, high_max_weight);\n+        assert(result_cg);\n+        if (result_cg->GetAlgoCompleted()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480392199",
      "id" : 1480392199,
      "line" : 202,
      "node_id" : "PRRC_kwDOABII585YPP4H",
      "original_commit_id" : "01e046b7bbb3fc22aa0731a6e3496ba79c5faffc",
      "original_line" : 202,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 133,
      "pull_request_review_id" : 1866075247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480392199/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T18:58:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480392199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480405237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480405237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`std::ceil` doesn't do anything here, the input to it is already a rounded-down integer. The proper way to compute a rounding-up integer division $\\lceil\\frac{a}{b}\\rceil$ is `(a + b - 1) / b`.\r\n\r\nAlso, can you drop the `!best_selection.empty() &&` here?",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T18:56:50Z",
      "diff_hunk" : "@@ -454,6 +455,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + int64_t{min_tail_weight[curr_tail]} * std::ceil((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480405237",
      "id" : 1480405237,
      "line" : 458,
      "node_id" : "PRRC_kwDOABII585YPTD1",
      "original_commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "original_line" : 458,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 12,
      "pull_request_review_id" : 1866075247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480405237/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T19:08:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480405237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480406547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480406547"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This test is modified in the last commit; it'd be more convincingly improving runtime if the final version of the test was already included in the commit that initially adds it.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T18:58:05Z",
      "diff_hunk" : "@@ -1287,11 +1287,11 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n             return available_coins;\n         });\n         SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n-        add_coin(1.8 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 1, expected_result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480406547",
      "id" : 1480406547,
      "line" : 1290,
      "node_id" : "PRRC_kwDOABII585YPTYT",
      "original_commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "original_line" : 1290,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 41,
      "pull_request_review_id" : 1866075247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480406547/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T18:58:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480406547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480554649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480554649"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In f770aff87279ba252f7b8fcadef0e9d1828ca031 \"test: Add coin_grinder_tests\"\r\n\r\nnit: A comment with the weight calculation like the ones in later test would be nice.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T21:21:52Z",
      "diff_hunk" : "@@ -1090,6 +1090,212 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+    // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480554649",
      "id" : 1480554649,
      "line" : 1157,
      "node_id" : "PRRC_kwDOABII585YP3iZ",
      "original_commit_id" : "f770aff87279ba252f7b8fcadef0e9d1828ca031",
      "original_line" : 1157,
      "original_position" : 68,
      "original_start_line" : 1156,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 68,
      "pull_request_review_id" : 1866342804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480554649/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1156,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-06T22:10:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480554649",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480558134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480558134"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In f770aff87279ba252f7b8fcadef0e9d1828ca031 \"test: Add coin_grinder_tests\"\r\n\r\nI think it would be useful to clarify that `expected_attempts` is the iteration limit.\r\n\r\nThe comment suggests that the check should be `<=` but the check looks for exactly this number of attempts. That seems fragile if there are further optimizations made that improve this.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T21:25:37Z",
      "diff_hunk" : "@@ -1090,6 +1090,212 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+    // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480558134",
      "id" : 1480558134,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YP4Y2",
      "original_commit_id" : "f770aff87279ba252f7b8fcadef0e9d1828ca031",
      "original_line" : 1184,
      "original_position" : 95,
      "original_start_line" : 1183,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1866342804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480558134/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-06T22:10:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480558134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480562396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480562396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In f770aff87279ba252f7b8fcadef0e9d1828ca031 \"test: Add coin_grinder_tests\"\r\n\r\nThis check implies that there is an exact solution at 2041 attempts, and we should be able to know what that solution is, so can we check for it?",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T21:30:26Z",
      "diff_hunk" : "@@ -1090,6 +1090,212 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+    // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        add_coin(1 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 2, expected_result);\n+        BOOST_CHECK(EquivalentResult(expected_result, *res));\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 4;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 5) Test finding a solution in a UTXO pool with mixed weights\n+        // ################################################################################################################\n+        CAmount target = 30L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 5; ++j) {\n+                // Add heavy coins {3, 6, 9, 12, 15}\n+                add_coin(available_coins, wallet, CAmount((3 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 350);\n+                // Add medium coins {2, 5, 8, 11, 14}\n+                add_coin(available_coins, wallet, CAmount((2 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 250);\n+                // Add light coins {1, 4, 7, 10, 13}\n+                add_coin(available_coins, wallet, CAmount((1 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 150);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 2041;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480562396",
      "id" : 1480562396,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YP5bc",
      "original_commit_id" : "f770aff87279ba252f7b8fcadef0e9d1828ca031",
      "original_line" : 1230,
      "original_position" : 141,
      "original_start_line" : 1228,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1866342804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480562396/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-06T22:10:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480562396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480563895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480563895"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 3e2a97bd4bb275e2f0827a3099a64222c6460ed9 \"coinselection: Track whether CG completed\"\r\n\r\nstyle nit: Open brace `{` should be on a new line for functions.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T21:32:05Z",
      "diff_hunk" : "@@ -794,6 +796,15 @@ void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const\n     }\n }\n \n+void SelectionResult::SetAlgoCompleted(bool algo_completed) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480563895",
      "id" : 1480563895,
      "line" : 855,
      "node_id" : "PRRC_kwDOABII585YP5y3",
      "original_commit_id" : "3e2a97bd4bb275e2f0827a3099a64222c6460ed9",
      "original_line" : 799,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 384,
      "pull_request_review_id" : 1866342804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480563895/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T22:10:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480563895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480564307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480564307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 04a043a973602bc74043f7c5767bcd55246913cb \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nstyle nit: Open brace `{` should be on a new line for functions.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-06T21:32:30Z",
      "diff_hunk" : "@@ -514,6 +794,15 @@ void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const\n     }\n }\n \n+void SelectionResult::SetSelectionsEvaluated(size_t attempts) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1480564307",
      "id" : 1480564307,
      "line" : 864,
      "node_id" : "PRRC_kwDOABII585YP55T",
      "original_commit_id" : "04a043a973602bc74043f7c5767bcd55246913cb",
      "original_line" : 797,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 393,
      "pull_request_review_id" : 1866342804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480564307/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-06T22:10:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1480564307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483975288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483975288"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see thanks for the explanation. It seems to me like most of these cases should be caught by the optimization to cut instead of shift when we exceed the weight:\r\n\r\n>  opt: Cut if last addition was minimal weight\r\n> \r\n> In situations where we have UTXO groups of various weight, we can CUT\r\n> rather than SHIFT when we exceeded the max_weight or the best\r\n> selectionâs weight while the last step was equal to the minimum weight\r\n> in the lookahead.\r\n\r\nIt would take more time to determine whether this would make another meaningful impact if implemented, so I would like to defer this to a potential follow-up.",
      "commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "created_at" : "2024-02-09T07:58:39Z",
      "diff_hunk" : "@@ -473,12 +473,12 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             deselect_last();\n             should_shift  = false;\n \n-            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n-            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n-            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n-            // differing amount or weight.\n-            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\n-                    && utxo_pool[next_utxo - 1].m_weight == utxo_pool[next_utxo].m_weight) {\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same effective value as the UTXO we\n+            // just omitted. Since lower weight is our tiebreaker on UTXOs with equal effective value for sorting, if it\n+            // ties on the effective value, it _must_ have the same weight (i.e. be a \"clone\" of the prior UTXO) or a\n+            // higher weight. If so, selecting `next_utxo` would produce an equivalent or worse selection as one we\n+            // previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a differing amount.\n+            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483975288",
      "id" : 1483975288,
      "in_reply_to_id" : 1477465223,
      "line" : 504,
      "node_id" : "PRRC_kwDOABII585Yc6p4",
      "original_commit_id" : "97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
      "original_line" : 504,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 352,
      "pull_request_review_id" : 1871830968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483975288/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T07:58:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483975288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483986603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483986603"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added a comment with the calculation",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T08:07:40Z",
      "diff_hunk" : "@@ -1090,6 +1090,212 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+    // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483986603",
      "id" : 1483986603,
      "in_reply_to_id" : 1480554649,
      "line" : 1157,
      "node_id" : "PRRC_kwDOABII585Yc9ar",
      "original_commit_id" : "f770aff87279ba252f7b8fcadef0e9d1828ca031",
      "original_line" : 1157,
      "original_position" : 68,
      "original_start_line" : 1156,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 68,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483986603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1156,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483986603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483991802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483991802"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This change just modifies the expected number of iterations and the `expected_result`. Before the last optimization CoinGrinder finds a suboptimal solution (1.8 BTC + 1 BTC), because it does not manage to exhaustively search the entire search space. With the \"sand skipping\" optimization, it skips over the tail of tiny UTXOs. This allows it to search all relevant combinations and find the preferred solution (1 BTC + 1 BTC).",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T08:14:07Z",
      "diff_hunk" : "@@ -1287,11 +1287,11 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n             return available_coins;\n         });\n         SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n-        add_coin(1.8 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 1, expected_result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483991802",
      "id" : 1483991802,
      "in_reply_to_id" : 1480406547,
      "line" : 1295,
      "node_id" : "PRRC_kwDOABII585Yc-r6",
      "original_commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "original_line" : 1295,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 206,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483991802/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483991802",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483995322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483995322"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T08:18:13Z",
      "diff_hunk" : "@@ -514,6 +794,15 @@ void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const\n     }\n }\n \n+void SelectionResult::SetSelectionsEvaluated(size_t attempts) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483995322",
      "id" : 1483995322,
      "in_reply_to_id" : 1480564307,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Yc_i6",
      "original_commit_id" : "04a043a973602bc74043f7c5767bcd55246913cb",
      "original_line" : 797,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483995322/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483995322",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483999681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483999681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâve improved the comment to clarify that this check is both used to highlight the improvements brought about by following optimizations and to catch future regressions.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T08:23:12Z",
      "diff_hunk" : "@@ -1090,6 +1090,212 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+    // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1483999681",
      "id" : 1483999681,
      "in_reply_to_id" : 1480558134,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YdAnB",
      "original_commit_id" : "f770aff87279ba252f7b8fcadef0e9d1828ca031",
      "original_line" : 1184,
      "original_position" : 95,
      "original_start_line" : 1183,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483999681/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1483999681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484028065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484028065"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, that would be possible. It looks like it would be the \"4, 13\" from the light coins and the \"14\" from the medium coins that should get found. I added a check.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T08:50:44Z",
      "diff_hunk" : "@@ -1090,6 +1090,212 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+    // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 Ã 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 Ã 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        add_coin(1 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 2, expected_result);\n+        BOOST_CHECK(EquivalentResult(expected_result, *res));\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 4;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 5) Test finding a solution in a UTXO pool with mixed weights\n+        // ################################################################################################################\n+        CAmount target = 30L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 5; ++j) {\n+                // Add heavy coins {3, 6, 9, 12, 15}\n+                add_coin(available_coins, wallet, CAmount((3 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 350);\n+                // Add medium coins {2, 5, 8, 11, 14}\n+                add_coin(available_coins, wallet, CAmount((2 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 250);\n+                // Add light coins {1, 4, 7, 10, 13}\n+                add_coin(available_coins, wallet, CAmount((1 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 150);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 2041;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484028065",
      "id" : 1484028065,
      "in_reply_to_id" : 1480562396,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YdHih",
      "original_commit_id" : "f770aff87279ba252f7b8fcadef0e9d1828ca031",
      "original_line" : 1235,
      "original_position" : 141,
      "original_start_line" : 1228,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484028065/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484028065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484030906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484030906"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T08:52:15Z",
      "diff_hunk" : "@@ -794,6 +796,15 @@ void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const\n     }\n }\n \n+void SelectionResult::SetAlgoCompleted(bool algo_completed) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484030906",
      "id" : 1484030906,
      "in_reply_to_id" : 1480563895,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YdIO6",
      "original_commit_id" : "3e2a97bd4bb275e2f0827a3099a64222c6460ed9",
      "original_line" : 799,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484030906/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484030906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484040731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484040731"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added all three checks you suggest as I understand them (some inequalities in different direction):\r\n\r\n```diff\r\n+         assert(result_cg->GetWeight() <= high_max_weight);\r\n+         assert(result_cg->GetSelectedEffectiveValue() >= target + coin_params.m_min_change_target);\r\n+         assert(best_weight < result_cg->GetWeight() || (best_weight == result_cg->GetWeight() && best_amount <= result_cg->GetSelectedEffectiveValue()));\r\n```\r\n\r\nNote that it is possible that CoinGrinder had found the best solution already, but didnât manage to exhaustively search the combination search. These three checks all pass on a single run of all my fuzz seeds.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T09:01:50Z",
      "diff_hunk" : "@@ -134,6 +135,84 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    static constexpr unsigned max_output_groups{16};\n+    std::vector<OutputGroup> group_pos;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\n+    {\n+        // With maximum m_effective_feerate and n_input_bytes = 1'000'000, input_fee <= MAX_MONEY.\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1'000'000)};\n+        // Only make UTXOs with positive effective value\n+        const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        // Ensure that each UTXO has at least an effective value of 1 sat\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};\n+        const CAmount amount{eff_value + input_fee};\n+        std::vector<COutput> temp_utxo_pool;\n+\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, temp_utxo_pool, coin_params.m_effective_feerate);\n+        max_spendable += eff_value;\n+\n+        auto output_group = OutputGroup(coin_params);\n+        output_group.Insert(std::make_shared<COutput>(temp_utxo_pool.at(0)), /*ancestors=*/0, /*descendants=*/0);\n+        group_pos.push_back(output_group);\n+    }\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= max_output_groups);\n+\n+    // Only choose targets below max_spendable\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, std::max(CAmount{1}, max_spendable - coin_params.m_min_change_target))};\n+\n+    // Brute force optimal solution\n+    CAmount best_amount{MAX_MONEY};\n+    int best_weight{std::numeric_limits<int>::max()};\n+    for (uint32_t pattern = 1; (pattern >> num_groups) == 0; ++pattern) {\n+        CAmount subset_amount{0};\n+        int subset_weight{0};\n+        for (unsigned i = 0; i < num_groups; ++i) {\n+            if ((pattern >> i) & 1) {\n+                subset_amount += group_pos[i].GetSelectionAmount();\n+                subset_weight += group_pos[i].m_weight;\n+            }\n+        }\n+        if ((subset_amount >= target + coin_params.m_min_change_target) && (subset_weight < best_weight || (subset_weight == best_weight && subset_amount < best_amount))) {\n+            best_weight = subset_weight;\n+            best_amount = subset_amount;\n+        }\n+    }\n+\n+    if (best_weight < std::numeric_limits<int>::max()) {\n+        // Sufficient funds and acceptable weight: CoinGrinder should find at least one solution\n+        int high_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(best_weight, std::numeric_limits<int>::max());\n+\n+        auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, high_max_weight);\n+        assert(result_cg);\n+        if (result_cg->GetAlgoCompleted()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484040731",
      "id" : 1484040731,
      "in_reply_to_id" : 1480392199,
      "line" : 205,
      "node_id" : "PRRC_kwDOABII585YdKob",
      "original_commit_id" : "01e046b7bbb3fc22aa0731a6e3496ba79c5faffc",
      "original_line" : 205,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 136,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484040731/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484040731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484076997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484076997"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Also, can you drop the `!best_selection.empty() &&` here?\r\n\r\nNo, dropping the `!best_selection_empty()` will prevent CoinGrinder from returning the `max_tx_weight_exceeded` error where expected. I fixed the rounding up as you described.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T09:35:53Z",
      "diff_hunk" : "@@ -454,6 +455,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + int64_t{min_tail_weight[curr_tail]} * std::ceil((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484076997",
      "id" : 1484076997,
      "in_reply_to_id" : 1480405237,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YdTfF",
      "original_commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "original_line" : 458,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1871848002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484076997/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T10:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484076997",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T18:44:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1936432223",
      "id" : 1936432223,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585za5xf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936432223/reactions"
      },
      "updated_at" : "2024-02-09T18:44:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936432223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484694946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484694946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, I see. That's unfortunate as it means this optimization isn't available before some solution was found, but probably doesn't matter much.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T18:55:57Z",
      "diff_hunk" : "@@ -454,6 +455,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + int64_t{min_tail_weight[curr_tail]} * std::ceil((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484694946",
      "id" : 1484694946,
      "in_reply_to_id" : 1480405237,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YfqWi",
      "original_commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "original_line" : 458,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1873019431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484694946/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T18:55:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484694946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484695646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484695646"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I missed that this was just changing the expected result, not the input. Sounds good.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-09T18:56:38Z",
      "diff_hunk" : "@@ -1287,11 +1287,11 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n             return available_coins;\n         });\n         SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n-        add_coin(1.8 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 1, expected_result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484695646",
      "id" : 1484695646,
      "in_reply_to_id" : 1480406547,
      "line" : 1295,
      "node_id" : "PRRC_kwDOABII585Yfqhe",
      "original_commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "original_line" : 1295,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 206,
      "pull_request_review_id" : 1873020489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484695646/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T18:56:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484695646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK [13161ec](https://github.com/bitcoin/bitcoin/pull/27877/commits/13161ecf032b7a850686e5942c12222c8f3d0d52)",
      "created_at" : "2024-02-09T21:25:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1936624217",
      "id" : 1936624217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
      "node_id" : "IC_kwDOABII585zbopZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936624217/reactions"
      },
      "updated_at" : "2024-02-09T21:25:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936624217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484980137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484980137"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Mh, it could also be turned on after max_weight was exceeded the first time. :thinking: Might follow-up on this.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-10T05:32:54Z",
      "diff_hunk" : "@@ -454,6 +455,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + int64_t{min_tail_weight[curr_tail]} * std::ceil((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1484980137",
      "id" : 1484980137,
      "in_reply_to_id" : 1480405237,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ygv-p",
      "original_commit_id" : "509564e05e1f221ca7ebfab6aa9e78a4e6e8c43d",
      "original_line" : 458,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 1873456259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484980137/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-10T05:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484980137",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1495735626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495735626"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n$ FUZZ=coin_grinder_is_optimal UBSAN_OPTIONS=\"suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\" ./src/test/fuzz/fuzz /tmp/b \r\n\r\nwallet/test/fuzz/coinselection.cpp:161:89: runtime error: implicit conversion from type 'CAmount' (aka 'long') of value -12 (64-bit, signed) to type 'size_type' (aka 'unsigned long') changed the value to 18446744073709551604 (64-bit, unsigned)\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: implicit-integer-sign-change wallet/test/fuzz/coinselection.cpp:161:89 in \r\n```\r\n\r\n```\r\n$ sha1sum /tmp/b\r\n1e498368746e08de512263b6eaf9b5e147a0ac60  /tmp/b\r\n```\r\n\r\n```\r\n$ base64 /tmp/b\r\nClWQ+///+f//////////sLCwsLCwsLCwsLCwsLCwsLCwsLD/////////////////k67NIWKV1P/v\r\n//////////8P//////////////////////////////////////////////////+Dg4ODg4PV1SiD\r\ng4ODg4ODenyDg///////////19fX19fX0tfXLtfX19fX19XX19fXHKw=\r\n",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-20T12:27:44Z",
      "diff_hunk" : "@@ -77,6 +78,144 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+    // For other results to be comparable to SRD, we must align the change_target with SRDâs hardcoded behavior\n+    coin_params.m_min_change_target = CHANGE_LOWER + coin_params.m_change_fee;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int n_input{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, n_input, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+\n+    // Run coinselection algorithms\n+    auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, MAX_STANDARD_TX_WEIGHT);\n+    if (target + coin_params.m_min_change_target > max_spendable || HasErrorMsg(result_cg)) return; // We only need to compare algorithms if CoinGrinder has a solution\n+    assert(result_cg);\n+    if (!result_cg->GetAlgoCompleted()) return; // Bail out if CoinGrinder solution is not optimal\n+\n+    auto result_srd = SelectCoinsSRD(group_pos, target, coin_params.m_change_fee, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_srd && result_srd->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any srd solutions that donât have change, err on excluding\n+        assert(result_srd->GetWeight() >= result_cg->GetWeight());\n+    }\n+\n+    auto result_knapsack = KnapsackSolver(group_pos, target, coin_params.m_min_change_target, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_knapsack && result_knapsack->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any knapsack solutions that donât have change, err on excluding\n+        assert(result_knapsack->GetWeight() >= result_cg->GetWeight());\n+    }\n+}\n+\n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    static constexpr unsigned max_output_groups{16};\n+    std::vector<OutputGroup> group_pos;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\n+    {\n+        // With maximum m_effective_feerate and n_input_bytes = 1'000'000, input_fee <= MAX_MONEY.\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1'000'000)};\n+        // Only make UTXOs with positive effective value\n+        const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        // Ensure that each UTXO has at least an effective value of 1 sat\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1495735626",
      "id" : 1495735626,
      "line" : 161,
      "node_id" : "PRRC_kwDOABII585ZJx1K",
      "original_commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "original_line" : 161,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 92,
      "pull_request_review_id" : 1890304914,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495735626/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T12:27:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495735626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1495827183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495827183"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Haven't tried, but I expect this will fix it:\r\n\r\n```patch\r\n         // Ensure that each UTXO has at least an effective value of 1 sat\r\n+        if (max_output_groups + max_spendable >= MAX_MONEY + group_pos.size()) break;\r\n         const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};\r\n```",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-20T13:28:53Z",
      "diff_hunk" : "@@ -77,6 +78,144 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+    // For other results to be comparable to SRD, we must align the change_target with SRDâs hardcoded behavior\n+    coin_params.m_min_change_target = CHANGE_LOWER + coin_params.m_change_fee;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int n_input{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, n_input, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+\n+    // Run coinselection algorithms\n+    auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, MAX_STANDARD_TX_WEIGHT);\n+    if (target + coin_params.m_min_change_target > max_spendable || HasErrorMsg(result_cg)) return; // We only need to compare algorithms if CoinGrinder has a solution\n+    assert(result_cg);\n+    if (!result_cg->GetAlgoCompleted()) return; // Bail out if CoinGrinder solution is not optimal\n+\n+    auto result_srd = SelectCoinsSRD(group_pos, target, coin_params.m_change_fee, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_srd && result_srd->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any srd solutions that donât have change, err on excluding\n+        assert(result_srd->GetWeight() >= result_cg->GetWeight());\n+    }\n+\n+    auto result_knapsack = KnapsackSolver(group_pos, target, coin_params.m_min_change_target, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_knapsack && result_knapsack->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any knapsack solutions that donât have change, err on excluding\n+        assert(result_knapsack->GetWeight() >= result_cg->GetWeight());\n+    }\n+}\n+\n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    static constexpr unsigned max_output_groups{16};\n+    std::vector<OutputGroup> group_pos;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\n+    {\n+        // With maximum m_effective_feerate and n_input_bytes = 1'000'000, input_fee <= MAX_MONEY.\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1'000'000)};\n+        // Only make UTXOs with positive effective value\n+        const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        // Ensure that each UTXO has at least an effective value of 1 sat\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1495827183",
      "id" : 1495827183,
      "in_reply_to_id" : 1495735626,
      "line" : 161,
      "node_id" : "PRRC_kwDOABII585ZKILv",
      "original_commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "original_line" : 161,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 92,
      "pull_request_review_id" : 1890434371,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495827183/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T13:28:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495827183",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1498264430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498264430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was unable to reproduce the error that @maflcko reported.\r\n\r\nAnalyzing the line, I donât see how the content of the parentheses could ever become negative. At most, it would become temporary negative, when `max_spendable` and `max_output_groups` have already been deducted, but `group_pos.size()` has not yet been added.\r\n\r\nWould it perhaps help if the addition were put to the front so it never even temporarily goes negative?\r\n\r\n```diff\r\n-const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};\r\n+const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY + group_pos.size() - max_spendable - max_output_groups)};\r\n```\r\n\r\nI donât see how the suggestion @sipa made would ever be triggered.\r\nI would expect that adding an unsigned to a long, would make the result a signed int, so Iâm a bit baffled what the issue here is. Would I perhaps need to cast explicitly?",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-21T20:26:40Z",
      "diff_hunk" : "@@ -77,6 +78,144 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+    // For other results to be comparable to SRD, we must align the change_target with SRDâs hardcoded behavior\n+    coin_params.m_min_change_target = CHANGE_LOWER + coin_params.m_change_fee;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int n_input{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, n_input, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+\n+    // Run coinselection algorithms\n+    auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, MAX_STANDARD_TX_WEIGHT);\n+    if (target + coin_params.m_min_change_target > max_spendable || HasErrorMsg(result_cg)) return; // We only need to compare algorithms if CoinGrinder has a solution\n+    assert(result_cg);\n+    if (!result_cg->GetAlgoCompleted()) return; // Bail out if CoinGrinder solution is not optimal\n+\n+    auto result_srd = SelectCoinsSRD(group_pos, target, coin_params.m_change_fee, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_srd && result_srd->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any srd solutions that donât have change, err on excluding\n+        assert(result_srd->GetWeight() >= result_cg->GetWeight());\n+    }\n+\n+    auto result_knapsack = KnapsackSolver(group_pos, target, coin_params.m_min_change_target, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_knapsack && result_knapsack->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any knapsack solutions that donât have change, err on excluding\n+        assert(result_knapsack->GetWeight() >= result_cg->GetWeight());\n+    }\n+}\n+\n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    static constexpr unsigned max_output_groups{16};\n+    std::vector<OutputGroup> group_pos;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\n+    {\n+        // With maximum m_effective_feerate and n_input_bytes = 1'000'000, input_fee <= MAX_MONEY.\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1'000'000)};\n+        // Only make UTXOs with positive effective value\n+        const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        // Ensure that each UTXO has at least an effective value of 1 sat\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1498264430",
      "id" : 1498264430,
      "in_reply_to_id" : 1495735626,
      "line" : 161,
      "node_id" : "PRRC_kwDOABII585ZTbNu",
      "original_commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "original_line" : 161,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 92,
      "pull_request_review_id" : 1894349555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498264430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T20:26:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498264430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1498323656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498323656"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I was unable to reproduce the error that @maflcko reported.\r\n\r\nI was able to reproduce if I enabled the integer sanitizer.\r\n\r\n> Would it perhaps help if the addition were put to the front so it never even temporarily goes negative?\r\n> \r\n> ```diff\r\n> -const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};\r\n> +const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY + group_pos.size() - max_spendable - max_output_groups)};\r\n> ```\r\n\r\nThis change appears to fix this particular issue.\r\n",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-21T21:18:51Z",
      "diff_hunk" : "@@ -77,6 +78,144 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+    // For other results to be comparable to SRD, we must align the change_target with SRDâs hardcoded behavior\n+    coin_params.m_min_change_target = CHANGE_LOWER + coin_params.m_change_fee;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int n_input{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, n_input, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+\n+    // Run coinselection algorithms\n+    auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, MAX_STANDARD_TX_WEIGHT);\n+    if (target + coin_params.m_min_change_target > max_spendable || HasErrorMsg(result_cg)) return; // We only need to compare algorithms if CoinGrinder has a solution\n+    assert(result_cg);\n+    if (!result_cg->GetAlgoCompleted()) return; // Bail out if CoinGrinder solution is not optimal\n+\n+    auto result_srd = SelectCoinsSRD(group_pos, target, coin_params.m_change_fee, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_srd && result_srd->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any srd solutions that donât have change, err on excluding\n+        assert(result_srd->GetWeight() >= result_cg->GetWeight());\n+    }\n+\n+    auto result_knapsack = KnapsackSolver(group_pos, target, coin_params.m_min_change_target, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_knapsack && result_knapsack->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any knapsack solutions that donât have change, err on excluding\n+        assert(result_knapsack->GetWeight() >= result_cg->GetWeight());\n+    }\n+}\n+\n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    static constexpr unsigned max_output_groups{16};\n+    std::vector<OutputGroup> group_pos;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\n+    {\n+        // With maximum m_effective_feerate and n_input_bytes = 1'000'000, input_fee <= MAX_MONEY.\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1'000'000)};\n+        // Only make UTXOs with positive effective value\n+        const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        // Ensure that each UTXO has at least an effective value of 1 sat\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1498323656",
      "id" : 1498323656,
      "in_reply_to_id" : 1495735626,
      "line" : 161,
      "node_id" : "PRRC_kwDOABII585ZTprI",
      "original_commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "original_line" : 161,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 92,
      "pull_request_review_id" : 1894432892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498323656/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T21:18:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498323656",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1498351205"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498351205"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I guess I misinterpreted `SUMMARY: UndefinedBehaviorSanitizer: implicit-integer-sign-change ../../src/wallet/test/fuzz/coinselection.cpp:161:89 in` as needing the \"undefined\" sanitizer, but didnât realize that there was one for \"integer\". I was able to reproduce and verify that changing the order of operations mitigates the issue here.",
      "commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "created_at" : "2024-02-21T21:44:17Z",
      "diff_hunk" : "@@ -77,6 +78,144 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+    // For other results to be comparable to SRD, we must align the change_target with SRDâs hardcoded behavior\n+    coin_params.m_min_change_target = CHANGE_LOWER + coin_params.m_change_fee;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int n_input{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, n_input, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+\n+    // Run coinselection algorithms\n+    auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, MAX_STANDARD_TX_WEIGHT);\n+    if (target + coin_params.m_min_change_target > max_spendable || HasErrorMsg(result_cg)) return; // We only need to compare algorithms if CoinGrinder has a solution\n+    assert(result_cg);\n+    if (!result_cg->GetAlgoCompleted()) return; // Bail out if CoinGrinder solution is not optimal\n+\n+    auto result_srd = SelectCoinsSRD(group_pos, target, coin_params.m_change_fee, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_srd && result_srd->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any srd solutions that donât have change, err on excluding\n+        assert(result_srd->GetWeight() >= result_cg->GetWeight());\n+    }\n+\n+    auto result_knapsack = KnapsackSolver(group_pos, target, coin_params.m_min_change_target, fast_random_context, MAX_STANDARD_TX_WEIGHT);\n+    if (result_knapsack && result_knapsack->GetChange(CHANGE_LOWER, coin_params.m_change_fee) > 0) { // exclude any knapsack solutions that donât have change, err on excluding\n+        assert(result_knapsack->GetWeight() >= result_cg->GetWeight());\n+    }\n+}\n+\n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    // Set effective feerate up to MAX_MONEY sats per 1'000'000 vB (2'100'000'000 sat/vB = 21'000 BTC/kvB).\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY), 1'000'000};\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\n+\n+    // Create some coins\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    static constexpr unsigned max_output_groups{16};\n+    std::vector<OutputGroup> group_pos;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\n+    {\n+        // With maximum m_effective_feerate and n_input_bytes = 1'000'000, input_fee <= MAX_MONEY.\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1'000'000)};\n+        // Only make UTXOs with positive effective value\n+        const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        // Ensure that each UTXO has at least an effective value of 1 sat\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1498351205",
      "id" : 1498351205,
      "in_reply_to_id" : 1495735626,
      "line" : 161,
      "node_id" : "PRRC_kwDOABII585ZTwZl",
      "original_commit_id" : "13161ecf032b7a850686e5942c12222c8f3d0d52",
      "original_line" : 161,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 92,
      "pull_request_review_id" : 1894475855,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498351205/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T21:44:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498351205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   }
]
