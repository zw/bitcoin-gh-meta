[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [murchandamus](https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1624254517), [ishaanam](https://github.com/bitcoin/bitcoin/pull/27286#pullrequestreview-1527016849), [remyers](https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1721009982) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#bitcoin-core/gui/733](https://github.com/bitcoin-core/gui/pull/733) (Deniability - a tool to automatically improve coin ownership privacy by denavila)\n* [#28453](https://github.com/bitcoin/bitcoin/pull/28453) (wallet: Receive silent payment transactions by achow101)\n* [#28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#27827](https://github.com/bitcoin/bitcoin/pull/27827) (Silent Payments: send and receive by josibake)\n* [#27792](https://github.com/bitcoin/bitcoin/pull/27792) (wallet: Deniability API (Unilateral Transaction Meta-Privacy) by denavila)\n* [#27307](https://github.com/bitcoin/bitcoin/pull/27307) (wallet: track mempool conflicts with wallet transactions by ishaanam)\n* [#26840](https://github.com/bitcoin/bitcoin/pull/26840) (refactor: importpubkey, importprivkey, importaddress, importmulti, and importdescriptors rpc by KolbyML)\n* [#26728](https://github.com/bitcoin/bitcoin/pull/26728) (wallet: Have the wallet store the key for automatically generated descriptors by achow101)\n* [#26008](https://github.com/bitcoin/bitcoin/pull/26008) (wallet: cache IsMine scriptPubKeys to improve performance of descriptor wallets by achow101)\n* [#25907](https://github.com/bitcoin/bitcoin/pull/25907) (wallet: rpc to add automatically generated descriptors by achow101)\n* [#25273](https://github.com/bitcoin/bitcoin/pull/25273) (wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction by achow101)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n* [#22341](https://github.com/bitcoin/bitcoin/pull/22341) (rpc: add getxpub by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-03-20T21:02:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1476930328",
      "id" : 1476930328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585YCCsY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476930328/reactions"
      },
      "updated_at" : "2023-09-15T10:01:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476930328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-05-01T12:51:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1529679663",
      "id" : 1529679663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585bLQ8v",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1529679663/reactions"
      },
      "updated_at" : "2023-05-01T12:51:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1529679663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-05-16T11:07:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1549455354",
      "id" : 1549455354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585cWs_6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1549455354/reactions"
      },
      "updated_at" : "2023-05-16T11:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1549455354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-05-18T16:26:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1553309877",
      "id" : 1553309877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585claC1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553309877/reactions"
      },
      "updated_at" : "2023-05-18T16:26:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553309877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-06-02T17:07:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1574055074",
      "id" : 1574055074,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585d0iyi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1574055074/reactions"
      },
      "updated_at" : "2023-06-02T17:07:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1574055074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-06-28T01:11:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1610433902",
      "id" : 1610433902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585f_UVu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1610433902/reactions"
      },
      "updated_at" : "2023-06-28T01:11:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1610433902",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-07-06T20:13:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1624254517",
      "id" : 1624254517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585g0Cg1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1624254517/reactions"
      },
      "updated_at" : "2023-07-06T20:13:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1624254517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1261601507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261601507"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 68bb1463dc1f995fbfdb75d3acef625bde104275 \"wallet: Change balance calculation to use m_txos \"\r\n\r\nnit: \r\n```suggestion\r\n            const bool is_trusted{CachedTxIsTrusted(wallet, txo.GetWalletTx())};\r\n```\r\n& also remove the unused `trusted_parents` from above. (for `GetAddressBalances` as well)",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-07-12T18:51:47Z",
      "diff_hunk" : "@@ -297,27 +298,41 @@ bool CachedTxIsTrusted(const CWallet& wallet, const CWalletTx& wtx)\n Balance GetBalance(const CWallet& wallet, const int min_depth, bool avoid_reuse)\n {\n     Balance ret;\n-    isminefilter reuse_filter = avoid_reuse ? ISMINE_NO : ISMINE_USED;\n+    bool allow_used_addresses = !avoid_reuse || !wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     {\n         LOCK(wallet.cs_wallet);\n         std::set<uint256> trusted_parents;\n-        for (const auto& entry : wallet.mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            const bool is_trusted{CachedTxIsTrusted(wallet, wtx, trusted_parents)};\n-            const int tx_depth{wallet.GetTxDepthInMainChain(wtx)};\n-            const CAmount tx_credit_mine{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_SPENDABLE | reuse_filter)};\n-            const CAmount tx_credit_watchonly{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_WATCH_ONLY | reuse_filter)};\n-            if (is_trusted && tx_depth >= min_depth) {\n-                ret.m_mine_trusted += tx_credit_mine;\n-                ret.m_watchonly_trusted += tx_credit_watchonly;\n-            }\n-            if (!is_trusted && tx_depth == 0 && wtx.InMempool()) {\n-                ret.m_mine_untrusted_pending += tx_credit_mine;\n-                ret.m_watchonly_untrusted_pending += tx_credit_watchonly;\n+        for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+            Assert(MoneyRange(txo.GetTxOut().nValue));\n+\n+            const bool is_trusted{CachedTxIsTrusted(wallet, txo.GetWalletTx(), trusted_parents)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1261601507",
      "id" : 1261601507,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LMoLj",
      "original_commit_id" : "68bb1463dc1f995fbfdb75d3acef625bde104275",
      "original_line" : 262,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/receive.cpp",
      "position" : null,
      "pull_request_review_id" : 1527016849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261601507/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-13T19:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261601507",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262844660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262844660"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 68bb1463dc1f995fbfdb75d3acef625bde104275 \" wallet: Change balance calculation to use m_txos \"\r\n\r\nnit: checking the tx depth is redundant here because if the transaction is `TxStateMempool` then `GetTxDepthInMainChain` will always return 0.\r\n```suggestion\r\n                } if (!is_trusted && txo.GetWalletTx().InMempool()) {\r\n```",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-07-13T17:10:37Z",
      "diff_hunk" : "@@ -297,27 +298,41 @@ bool CachedTxIsTrusted(const CWallet& wallet, const CWalletTx& wtx)\n Balance GetBalance(const CWallet& wallet, const int min_depth, bool avoid_reuse)\n {\n     Balance ret;\n-    isminefilter reuse_filter = avoid_reuse ? ISMINE_NO : ISMINE_USED;\n+    bool allow_used_addresses = !avoid_reuse || !wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     {\n         LOCK(wallet.cs_wallet);\n         std::set<uint256> trusted_parents;\n-        for (const auto& entry : wallet.mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            const bool is_trusted{CachedTxIsTrusted(wallet, wtx, trusted_parents)};\n-            const int tx_depth{wallet.GetTxDepthInMainChain(wtx)};\n-            const CAmount tx_credit_mine{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_SPENDABLE | reuse_filter)};\n-            const CAmount tx_credit_watchonly{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_WATCH_ONLY | reuse_filter)};\n-            if (is_trusted && tx_depth >= min_depth) {\n-                ret.m_mine_trusted += tx_credit_mine;\n-                ret.m_watchonly_trusted += tx_credit_watchonly;\n-            }\n-            if (!is_trusted && tx_depth == 0 && wtx.InMempool()) {\n-                ret.m_mine_untrusted_pending += tx_credit_mine;\n-                ret.m_watchonly_untrusted_pending += tx_credit_watchonly;\n+        for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+            Assert(MoneyRange(txo.GetTxOut().nValue));\n+\n+            const bool is_trusted{CachedTxIsTrusted(wallet, txo.GetWalletTx(), trusted_parents)};\n+            const int tx_depth{wallet.GetTxDepthInMainChain(txo.GetWalletTx())};\n+\n+            if (!wallet.IsSpent(outpoint) && (allow_used_addresses || !wallet.IsSpentKey(txo.GetTxOut().scriptPubKey))) {\n+                // Get the amounts for mine and watchonly\n+                CAmount credit_mine = 0;\n+                CAmount credit_watchonly = 0;\n+                if (txo.GetIsMine() == ISMINE_SPENDABLE) {\n+                    credit_mine = txo.GetTxOut().nValue;\n+                } else if (txo.GetIsMine() == ISMINE_WATCH_ONLY) {\n+                    credit_watchonly = txo.GetTxOut().nValue;\n+                } else {\n+                    // We shouldn't see any other isminetypes\n+                    Assume(false);\n+                }\n+\n+                // Set the amounts in the return object\n+                if (wallet.IsTxImmatureCoinBase(txo.GetWalletTx()) && wallet.IsTxInMainChain(txo.GetWalletTx())) {\n+                    ret.m_mine_immature += credit_mine;\n+                    ret.m_watchonly_immature += credit_watchonly;\n+                } else if (is_trusted && tx_depth >= min_depth) {\n+                    ret.m_mine_trusted += credit_mine;\n+                    ret.m_watchonly_trusted += credit_watchonly;\n+                } if (!is_trusted && tx_depth == 0 && txo.GetWalletTx().InMempool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262844660",
      "id" : 1262844660,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LRXr0",
      "original_commit_id" : "68bb1463dc1f995fbfdb75d3acef625bde104275",
      "original_line" : 285,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/wallet/receive.cpp",
      "position" : null,
      "pull_request_review_id" : 1527016849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262844660/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-13T19:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262844660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262864895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262864895"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 3f3246efe299552e450362a03c61c602a168f7de \"wallet: Recalculate the wallet's txos after any imports \"\r\n\r\nDoes this also need to be called during `sethdseed` and `keypoolrefill`.",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-07-13T17:27:37Z",
      "diff_hunk" : "@@ -480,6 +480,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     const std::unordered_map<COutPoint, WalletTXO, SaltedOutpointHasher>& GetTXOs() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return m_txos; };\n \n     void RefreshWalletTxTXOs(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void RefreshWalletTXOs() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262864895",
      "id" : 1262864895,
      "line" : 508,
      "node_id" : "PRRC_kwDOABII585LRcn_",
      "original_commit_id" : "3f3246efe299552e450362a03c61c602a168f7de",
      "original_line" : 508,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : 18,
      "pull_request_review_id" : 1527016849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262864895/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-13T19:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262864895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262869959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262869959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In https://github.com/bitcoin/bitcoin/commit/3f3246efe299552e450362a03c61c602a168f7de \"wallet: Recalculate the wallet's txos after any imports \"\r\n\r\nIs this needed if the wallet will rescan anyways? ",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-07-13T17:32:55Z",
      "diff_hunk" : "@@ -627,6 +631,7 @@ RPCHelpMan importwallet()\n \n             progress++;\n         }\n+        pwallet->RefreshWalletTXOs();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262869959",
      "id" : 1262869959,
      "line" : 634,
      "node_id" : "PRRC_kwDOABII585LRd3H",
      "original_commit_id" : "3f3246efe299552e450362a03c61c602a168f7de",
      "original_line" : 634,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/backup.cpp",
      "position" : 29,
      "pull_request_review_id" : 1527016849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262869959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-13T19:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262869959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262884442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262884442"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 881650ed319c6ed74e66ae56c34cdee93125231b \" wallet: Use wallet's TXO set in AvailableCoins \"\r\n\r\nShouldn't txos in `m_txos` never be `ISMINE_NO`?\r\n\r\n```suggestion\r\n        assert(mine != ISMINE_NO);\r\n```",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-07-13T17:47:05Z",
      "diff_hunk" : "@@ -217,133 +217,141 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     const bool can_grind_r = wallet.CanGrindR();\n \n     std::set<uint256> trusted_parents;\n-    for (const auto& entry : wallet.mapWallet)\n-    {\n-        const uint256& wtxid = entry.first;\n-        const CWalletTx& wtx = entry.second;\n+    // Cache for whether each tx passes the tx checks (first bool), and whether the transaction is \"safe\" (second bool)\n+    std::unordered_map<uint256, std::pair<bool, bool>, SaltedTxidHasher> tx_safe_cache;\n+    for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+        const CWalletTx& wtx = txo.GetWalletTx();\n+        const CTxOut& output = txo.GetTxOut();\n \n-        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n+        if (tx_safe_cache.count(outpoint.hash) > 0 && !tx_safe_cache.at(outpoint.hash).first) {\n             continue;\n+        }\n \n-        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n-        if (nDepth < 0)\n+        // Skip manually selected coins (the caller can fetch them directly)\n+        if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n             continue;\n \n-        // We should not consider coins which aren't at least in our mempool\n-        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !wtx.InMempool())\n+        if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n             continue;\n \n-        bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n-\n-        // We should not consider coins from transactions that are replacing\n-        // other transactions.\n-        //\n-        // Example: There is a transaction A which is replaced by bumpfee\n-        // transaction B. In this case, we want to prevent creation of\n-        // a transaction B' which spends an output of B.\n-        //\n-        // Reason: If transaction A were initially confirmed, transactions B\n-        // and B' would no longer be valid, so the user would have to create\n-        // a new transaction C to replace B'. However, in the case of a\n-        // one-block reorg, transactions B' and C might BOTH be accepted,\n-        // when the user only wanted one of them. Specifically, there could\n-        // be a 1-block reorg away from the chain where transactions A and C\n-        // were accepted to another chain where B, B', and C were all\n-        // accepted.\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n-            safeTx = false;\n-        }\n+        if (wallet.IsSpent(outpoint))\n+            continue;\n \n-        // Similarly, we should not consider coins from transactions that\n-        // have been replaced. In the example above, we would want to prevent\n-        // creation of a transaction A' spending an output of A, because if\n-        // transaction B were initially confirmed, conflicting with A and\n-        // A', we wouldn't want to the user to create a transaction D\n-        // intending to replace A', but potentially resulting in a scenario\n-        // where A, A', and D could all be accepted (instead of just B and\n-        // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n-            safeTx = false;\n-        }\n+        if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n+            continue;\n \n-        if (only_safe && !safeTx) {\n+        if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n             continue;\n         }\n \n-        if (nDepth < min_depth || nDepth > max_depth) {\n+        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n             continue;\n-        }\n \n-        bool tx_from_me = CachedTxIsFromMe(wallet, wtx, ISMINE_ALL);\n+        isminetype mine = wallet.IsMine(output);\n \n-        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n-            const CTxOut& output = wtx.tx->vout[i];\n-            const COutPoint outpoint(wtxid, i);\n+        if (mine == ISMINE_NO) {\n+            continue;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262884442",
      "id" : 1262884442,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LRhZa",
      "original_commit_id" : "881650ed319c6ed74e66ae56c34cdee93125231b",
      "original_line" : 352,
      "original_position" : 86,
      "original_start_line" : 252,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1527016849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262884442/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-13T19:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262884442",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262959018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262959018"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In https://github.com/bitcoin/bitcoin/commit/881650ed319c6ed74e66ae56c34cdee93125231b \" wallet: Use wallet's TXO set in AvailableCoins \"\r\n\r\nCan't `tx_ok` still be false at this point if a transaction that has a depth of 0 and is not in the mempool has two txos that belong to the wallet? Since then when the first txo is evaluated, a `{false, false}` entry will be created for that transaction hash, and then when the second txo is evaluated, that entry will be used because the mempool check will be skipped?",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-07-13T19:09:48Z",
      "diff_hunk" : "@@ -217,133 +217,141 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     const bool can_grind_r = wallet.CanGrindR();\n \n     std::set<uint256> trusted_parents;\n-    for (const auto& entry : wallet.mapWallet)\n-    {\n-        const uint256& wtxid = entry.first;\n-        const CWalletTx& wtx = entry.second;\n+    // Cache for whether each tx passes the tx checks (first bool), and whether the transaction is \"safe\" (second bool)\n+    std::unordered_map<uint256, std::pair<bool, bool>, SaltedTxidHasher> tx_safe_cache;\n+    for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+        const CWalletTx& wtx = txo.GetWalletTx();\n+        const CTxOut& output = txo.GetTxOut();\n \n-        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n+        if (tx_safe_cache.count(outpoint.hash) > 0 && !tx_safe_cache.at(outpoint.hash).first) {\n             continue;\n+        }\n \n-        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n-        if (nDepth < 0)\n+        // Skip manually selected coins (the caller can fetch them directly)\n+        if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n             continue;\n \n-        // We should not consider coins which aren't at least in our mempool\n-        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !wtx.InMempool())\n+        if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n             continue;\n \n-        bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n-\n-        // We should not consider coins from transactions that are replacing\n-        // other transactions.\n-        //\n-        // Example: There is a transaction A which is replaced by bumpfee\n-        // transaction B. In this case, we want to prevent creation of\n-        // a transaction B' which spends an output of B.\n-        //\n-        // Reason: If transaction A were initially confirmed, transactions B\n-        // and B' would no longer be valid, so the user would have to create\n-        // a new transaction C to replace B'. However, in the case of a\n-        // one-block reorg, transactions B' and C might BOTH be accepted,\n-        // when the user only wanted one of them. Specifically, there could\n-        // be a 1-block reorg away from the chain where transactions A and C\n-        // were accepted to another chain where B, B', and C were all\n-        // accepted.\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n-            safeTx = false;\n-        }\n+        if (wallet.IsSpent(outpoint))\n+            continue;\n \n-        // Similarly, we should not consider coins from transactions that\n-        // have been replaced. In the example above, we would want to prevent\n-        // creation of a transaction A' spending an output of A, because if\n-        // transaction B were initially confirmed, conflicting with A and\n-        // A', we wouldn't want to the user to create a transaction D\n-        // intending to replace A', but potentially resulting in a scenario\n-        // where A, A', and D could all be accepted (instead of just B and\n-        // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n-            safeTx = false;\n-        }\n+        if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n+            continue;\n \n-        if (only_safe && !safeTx) {\n+        if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n             continue;\n         }\n \n-        if (nDepth < min_depth || nDepth > max_depth) {\n+        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n             continue;\n-        }\n \n-        bool tx_from_me = CachedTxIsFromMe(wallet, wtx, ISMINE_ALL);\n+        isminetype mine = wallet.IsMine(output);\n \n-        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n-            const CTxOut& output = wtx.tx->vout[i];\n-            const COutPoint outpoint(wtxid, i);\n+        if (mine == ISMINE_NO) {\n+            continue;\n+        }\n \n-            if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n-                continue;\n+        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n+        if (nDepth < 0)\n+            continue;\n \n-            // Skip manually selected coins (the caller can fetch them directly)\n-            if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n-                continue;\n+        if (tx_safe_cache.count(outpoint.hash) == 0 ) {\n+            tx_safe_cache[outpoint.hash] = {false, false};\n \n-            if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n+            // We should not consider coins which aren't at least in our mempool\n+            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+            if (nDepth == 0 && !wtx.InMempool())\n                 continue;\n \n-            if (wallet.IsSpent(outpoint))\n-                continue;\n+            bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n+\n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n+                safeTx = false;\n+            }\n \n-            isminetype mine = wallet.IsMine(output);\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n+                safeTx = false;\n+            }\n \n-            if (mine == ISMINE_NO) {\n+            if (only_safe && !safeTx) {\n                 continue;\n             }\n \n-            if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n+            if (nDepth < min_depth || nDepth > max_depth) {\n                 continue;\n             }\n \n-            std::unique_ptr<SigningProvider> provider = wallet.GetSolvingProvider(output.scriptPubKey);\n-\n-            int input_bytes = CalculateMaximumSignedInputSize(output, COutPoint(), provider.get(), can_grind_r, coinControl);\n-            bool solvable = provider ? InferDescriptor(output.scriptPubKey, *provider)->IsSolvable() : false;\n-            bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n-\n-            // Filter by spendable outputs only\n-            if (!spendable && params.only_spendable) continue;\n-\n-            // Obtain script type\n-            std::vector<std::vector<uint8_t>> script_solutions;\n-            TxoutType type = Solver(output.scriptPubKey, script_solutions);\n-\n-            // If the output is P2SH and solvable, we want to know if it is\n-            // a P2SH (legacy) or one of P2SH-P2WPKH, P2SH-P2WSH (P2SH-Segwit). We can determine\n-            // this from the redeemScript. If the output is not solvable, it will be classified\n-            // as a P2SH (legacy), since we have no way of knowing otherwise without the redeemScript\n-            bool is_from_p2sh{false};\n-            if (type == TxoutType::SCRIPTHASH && solvable) {\n-                CScript script;\n-                if (!provider->GetCScript(CScriptID(uint160(script_solutions[0])), script)) continue;\n-                type = Solver(script, script_solutions);\n-                is_from_p2sh = true;\n-            }\n+            tx_safe_cache[outpoint.hash] = {true, safeTx};\n+        }\n+        const auto& [tx_ok, tx_safe] = tx_safe_cache.at(outpoint.hash);\n+        Assert(tx_ok);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1262959018",
      "id" : 1262959018,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LRzmq",
      "original_commit_id" : "881650ed319c6ed74e66ae56c34cdee93125231b",
      "original_line" : 410,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1527016849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262959018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-13T19:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262959018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The commit message for 68bb1463dc1f995fbfdb75d3acef625bde104275 should be updated because now that #27145 has gotten merged, the described issue has already been fixed.",
      "created_at" : "2023-07-20T22:57:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1644753444",
      "id" : 1644753444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585iCPIk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644753444/reactions"
      },
      "updated_at" : "2023-07-20T22:57:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644753444",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK\r\n\r\nMy preliminary testing confirmed that this PR will significantly speed up common operations like `fundrawtransaction` on wallets with many years of transaction history. A single `fundrawtransaction` RPC call that took 5 sec on a simulated large wallet now takes 50ms. Services providers with large wallets that need to make many RPC calls per minute will benefit from reduced lock contention on `cs_wallet`; for example, LSPs using bitcoin core wallets like Eclair.\r\n\r\nCaching the wallet's tx outputs in memory seems like a straight forward solution as long as the cache of tx outs in `m_txos` are always updated (or regenerated) if the underlying set of wallet txs in `mapWallet` or the `m_spk_managers` change. ",
      "created_at" : "2023-09-15T10:01:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1721009982",
      "id" : 1721009982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585mlIc-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721009982/reactions"
      },
      "updated_at" : "2023-09-15T10:01:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721009982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8568892?v=4",
         "events_url" : "https://api.github.com/users/remyers/events{/privacy}",
         "followers_url" : "https://api.github.com/users/remyers/followers",
         "following_url" : "https://api.github.com/users/remyers/following{/other_user}",
         "gists_url" : "https://api.github.com/users/remyers/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/remyers",
         "id" : 8568892,
         "login" : "remyers",
         "node_id" : "MDQ6VXNlcjg1Njg4OTI=",
         "organizations_url" : "https://api.github.com/users/remyers/orgs",
         "received_events_url" : "https://api.github.com/users/remyers/received_events",
         "repos_url" : "https://api.github.com/users/remyers/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/remyers/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/remyers/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/remyers"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Exposing `RefreshWalletTXOs()` as a public method puts the responsibility of knowing when it should be called outside of the `CWallet` scope. What do you think about making it private and clearing `m_txos` (or adding a new flag) to trigger `RefreshWalletTXOs()` at query time?\r\n\r\nThis alternate approach would require `GetTXO(const COutPoint& outpoint)` and `GetTXOs()` to first call `RefreshWalletTXOs()` if `m_txos` is empty.  There are only a few methods that change `m_spk_managers` that would need to clear `m_txos` to trigger a one time `RefreshWalletTXOs()`:\r\n - `ImportPrivKeys`\r\n - `ImportPublicKeys`\r\n - `ImportScriptPubKeys`\r\n - `AddScriptPubKeyMan`\r\n\r\nIt's also only a small set of places where keys are imported in `backup.cpp`, so the question of leaving `RefreshWalletTXOs()` public might just be a matter of which approach would be less foot-gunny in the future and if there are disadvantages to delaying the regeneration of txos.\r\n\r\nI think you can safely make `RefreshWalletTxTXOs(const CWalletTx& wtx)` a private method now though because it is only called by wallet methods that add a wtx to `mapWallet` like `LoadToWallet` and `AddToWallet`.",
      "created_at" : "2023-09-15T10:50:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1721070639",
      "id" : 1721070639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585mlXQv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721070639/reactions"
      },
      "updated_at" : "2023-09-15T10:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721070639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8568892?v=4",
         "events_url" : "https://api.github.com/users/remyers/events{/privacy}",
         "followers_url" : "https://api.github.com/users/remyers/followers",
         "following_url" : "https://api.github.com/users/remyers/following{/other_user}",
         "gists_url" : "https://api.github.com/users/remyers/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/remyers",
         "id" : 8568892,
         "login" : "remyers",
         "node_id" : "MDQ6VXNlcjg1Njg4OTI=",
         "organizations_url" : "https://api.github.com/users/remyers/orgs",
         "received_events_url" : "https://api.github.com/users/remyers/received_events",
         "repos_url" : "https://api.github.com/users/remyers/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/remyers/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/remyers/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/remyers"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Exposing `RefreshWalletTXOs()` as a public method puts the responsibility of knowing when it should be called outside of the `CWallet` scope. What do you think about making it private and clearing `m_txos` (or adding a new flag) to trigger `RefreshWalletTXOs()` at query time?\r\n\r\nI'm not sure that's meaningfully different. The caller still needs to know when to clear `m_txos` in order to trigger a future `RefreshWalletTXOs()`. The way it is now also provides a better UX as the slow part of refreshing the TXOs occurs during slow import operations rather than the first time those TXOs are needed after the import.",
      "created_at" : "2023-09-15T16:40:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1721562368",
      "id" : 1721562368,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585mnPUA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721562368/reactions"
      },
      "updated_at" : "2023-09-15T16:40:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721562368",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327654362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327654362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-09-15T18:35:37Z",
      "diff_hunk" : "@@ -297,27 +298,41 @@ bool CachedTxIsTrusted(const CWallet& wallet, const CWalletTx& wtx)\n Balance GetBalance(const CWallet& wallet, const int min_depth, bool avoid_reuse)\n {\n     Balance ret;\n-    isminefilter reuse_filter = avoid_reuse ? ISMINE_NO : ISMINE_USED;\n+    bool allow_used_addresses = !avoid_reuse || !wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     {\n         LOCK(wallet.cs_wallet);\n         std::set<uint256> trusted_parents;\n-        for (const auto& entry : wallet.mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            const bool is_trusted{CachedTxIsTrusted(wallet, wtx, trusted_parents)};\n-            const int tx_depth{wallet.GetTxDepthInMainChain(wtx)};\n-            const CAmount tx_credit_mine{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_SPENDABLE | reuse_filter)};\n-            const CAmount tx_credit_watchonly{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_WATCH_ONLY | reuse_filter)};\n-            if (is_trusted && tx_depth >= min_depth) {\n-                ret.m_mine_trusted += tx_credit_mine;\n-                ret.m_watchonly_trusted += tx_credit_watchonly;\n-            }\n-            if (!is_trusted && tx_depth == 0 && wtx.InMempool()) {\n-                ret.m_mine_untrusted_pending += tx_credit_mine;\n-                ret.m_watchonly_untrusted_pending += tx_credit_watchonly;\n+        for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+            Assert(MoneyRange(txo.GetTxOut().nValue));\n+\n+            const bool is_trusted{CachedTxIsTrusted(wallet, txo.GetWalletTx(), trusted_parents)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327654362",
      "id" : 1327654362,
      "in_reply_to_id" : 1261601507,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PImXa",
      "original_commit_id" : "68bb1463dc1f995fbfdb75d3acef625bde104275",
      "original_line" : 262,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/receive.cpp",
      "position" : null,
      "pull_request_review_id" : 1629521706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327654362/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-15T18:35:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327654362",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327654424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327654424"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-09-15T18:35:41Z",
      "diff_hunk" : "@@ -297,27 +298,41 @@ bool CachedTxIsTrusted(const CWallet& wallet, const CWalletTx& wtx)\n Balance GetBalance(const CWallet& wallet, const int min_depth, bool avoid_reuse)\n {\n     Balance ret;\n-    isminefilter reuse_filter = avoid_reuse ? ISMINE_NO : ISMINE_USED;\n+    bool allow_used_addresses = !avoid_reuse || !wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     {\n         LOCK(wallet.cs_wallet);\n         std::set<uint256> trusted_parents;\n-        for (const auto& entry : wallet.mapWallet)\n-        {\n-            const CWalletTx& wtx = entry.second;\n-            const bool is_trusted{CachedTxIsTrusted(wallet, wtx, trusted_parents)};\n-            const int tx_depth{wallet.GetTxDepthInMainChain(wtx)};\n-            const CAmount tx_credit_mine{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_SPENDABLE | reuse_filter)};\n-            const CAmount tx_credit_watchonly{CachedTxGetAvailableCredit(wallet, wtx, ISMINE_WATCH_ONLY | reuse_filter)};\n-            if (is_trusted && tx_depth >= min_depth) {\n-                ret.m_mine_trusted += tx_credit_mine;\n-                ret.m_watchonly_trusted += tx_credit_watchonly;\n-            }\n-            if (!is_trusted && tx_depth == 0 && wtx.InMempool()) {\n-                ret.m_mine_untrusted_pending += tx_credit_mine;\n-                ret.m_watchonly_untrusted_pending += tx_credit_watchonly;\n+        for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+            Assert(MoneyRange(txo.GetTxOut().nValue));\n+\n+            const bool is_trusted{CachedTxIsTrusted(wallet, txo.GetWalletTx(), trusted_parents)};\n+            const int tx_depth{wallet.GetTxDepthInMainChain(txo.GetWalletTx())};\n+\n+            if (!wallet.IsSpent(outpoint) && (allow_used_addresses || !wallet.IsSpentKey(txo.GetTxOut().scriptPubKey))) {\n+                // Get the amounts for mine and watchonly\n+                CAmount credit_mine = 0;\n+                CAmount credit_watchonly = 0;\n+                if (txo.GetIsMine() == ISMINE_SPENDABLE) {\n+                    credit_mine = txo.GetTxOut().nValue;\n+                } else if (txo.GetIsMine() == ISMINE_WATCH_ONLY) {\n+                    credit_watchonly = txo.GetTxOut().nValue;\n+                } else {\n+                    // We shouldn't see any other isminetypes\n+                    Assume(false);\n+                }\n+\n+                // Set the amounts in the return object\n+                if (wallet.IsTxImmatureCoinBase(txo.GetWalletTx()) && wallet.IsTxInMainChain(txo.GetWalletTx())) {\n+                    ret.m_mine_immature += credit_mine;\n+                    ret.m_watchonly_immature += credit_watchonly;\n+                } else if (is_trusted && tx_depth >= min_depth) {\n+                    ret.m_mine_trusted += credit_mine;\n+                    ret.m_watchonly_trusted += credit_watchonly;\n+                } if (!is_trusted && tx_depth == 0 && txo.GetWalletTx().InMempool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327654424",
      "id" : 1327654424,
      "in_reply_to_id" : 1262844660,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PImYY",
      "original_commit_id" : "68bb1463dc1f995fbfdb75d3acef625bde104275",
      "original_line" : 285,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/wallet/receive.cpp",
      "position" : null,
      "pull_request_review_id" : 1629521785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327654424/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-15T18:35:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327654424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327656315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327656315"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmm, good point. The expected usage of these is that only new keys will be generated/added, so it shouldn't have any effect on the existing transactions in the wallet. However, I suppose they could be used in a way that does result in existing txs having their IsMine changed. I've also added this to `addmultisigaddress` and `newkeypool` since they could be used in the same way.",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-09-15T18:38:01Z",
      "diff_hunk" : "@@ -480,6 +480,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     const std::unordered_map<COutPoint, WalletTXO, SaltedOutpointHasher>& GetTXOs() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return m_txos; };\n \n     void RefreshWalletTxTXOs(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void RefreshWalletTXOs() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327656315",
      "id" : 1327656315,
      "in_reply_to_id" : 1262864895,
      "line" : 508,
      "node_id" : "PRRC_kwDOABII585PIm17",
      "original_commit_id" : "3f3246efe299552e450362a03c61c602a168f7de",
      "original_line" : 508,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : 18,
      "pull_request_review_id" : 1629524562,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327656315/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-15T18:38:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327656315",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327656948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327656948"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The wallet may not rescan every transaction in the wallet since it does look at the given key birthdays.",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-09-15T18:38:46Z",
      "diff_hunk" : "@@ -627,6 +631,7 @@ RPCHelpMan importwallet()\n \n             progress++;\n         }\n+        pwallet->RefreshWalletTXOs();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327656948",
      "id" : 1327656948,
      "in_reply_to_id" : 1262869959,
      "line" : 634,
      "node_id" : "PRRC_kwDOABII585PIm_0",
      "original_commit_id" : "3f3246efe299552e450362a03c61c602a168f7de",
      "original_line" : 634,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/backup.cpp",
      "position" : 29,
      "pull_request_review_id" : 1629525521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327656948/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-15T18:38:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327656948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327657164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327657164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-09-15T18:39:01Z",
      "diff_hunk" : "@@ -217,133 +217,141 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     const bool can_grind_r = wallet.CanGrindR();\n \n     std::set<uint256> trusted_parents;\n-    for (const auto& entry : wallet.mapWallet)\n-    {\n-        const uint256& wtxid = entry.first;\n-        const CWalletTx& wtx = entry.second;\n+    // Cache for whether each tx passes the tx checks (first bool), and whether the transaction is \"safe\" (second bool)\n+    std::unordered_map<uint256, std::pair<bool, bool>, SaltedTxidHasher> tx_safe_cache;\n+    for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+        const CWalletTx& wtx = txo.GetWalletTx();\n+        const CTxOut& output = txo.GetTxOut();\n \n-        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n+        if (tx_safe_cache.count(outpoint.hash) > 0 && !tx_safe_cache.at(outpoint.hash).first) {\n             continue;\n+        }\n \n-        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n-        if (nDepth < 0)\n+        // Skip manually selected coins (the caller can fetch them directly)\n+        if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n             continue;\n \n-        // We should not consider coins which aren't at least in our mempool\n-        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !wtx.InMempool())\n+        if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n             continue;\n \n-        bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n-\n-        // We should not consider coins from transactions that are replacing\n-        // other transactions.\n-        //\n-        // Example: There is a transaction A which is replaced by bumpfee\n-        // transaction B. In this case, we want to prevent creation of\n-        // a transaction B' which spends an output of B.\n-        //\n-        // Reason: If transaction A were initially confirmed, transactions B\n-        // and B' would no longer be valid, so the user would have to create\n-        // a new transaction C to replace B'. However, in the case of a\n-        // one-block reorg, transactions B' and C might BOTH be accepted,\n-        // when the user only wanted one of them. Specifically, there could\n-        // be a 1-block reorg away from the chain where transactions A and C\n-        // were accepted to another chain where B, B', and C were all\n-        // accepted.\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n-            safeTx = false;\n-        }\n+        if (wallet.IsSpent(outpoint))\n+            continue;\n \n-        // Similarly, we should not consider coins from transactions that\n-        // have been replaced. In the example above, we would want to prevent\n-        // creation of a transaction A' spending an output of A, because if\n-        // transaction B were initially confirmed, conflicting with A and\n-        // A', we wouldn't want to the user to create a transaction D\n-        // intending to replace A', but potentially resulting in a scenario\n-        // where A, A', and D could all be accepted (instead of just B and\n-        // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n-            safeTx = false;\n-        }\n+        if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n+            continue;\n \n-        if (only_safe && !safeTx) {\n+        if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n             continue;\n         }\n \n-        if (nDepth < min_depth || nDepth > max_depth) {\n+        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n             continue;\n-        }\n \n-        bool tx_from_me = CachedTxIsFromMe(wallet, wtx, ISMINE_ALL);\n+        isminetype mine = wallet.IsMine(output);\n \n-        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n-            const CTxOut& output = wtx.tx->vout[i];\n-            const COutPoint outpoint(wtxid, i);\n+        if (mine == ISMINE_NO) {\n+            continue;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327657164",
      "id" : 1327657164,
      "in_reply_to_id" : 1262884442,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PInDM",
      "original_commit_id" : "881650ed319c6ed74e66ae56c34cdee93125231b",
      "original_line" : 352,
      "original_position" : 86,
      "original_start_line" : 252,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1629525867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327657164/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-09-15T18:39:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327657164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327657382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327657382"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point, changed to an `if`.",
      "commit_id" : "9199832d4440a875a150aa3ba3bc1bc201d3fd72",
      "created_at" : "2023-09-15T18:39:15Z",
      "diff_hunk" : "@@ -217,133 +217,141 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     const bool can_grind_r = wallet.CanGrindR();\n \n     std::set<uint256> trusted_parents;\n-    for (const auto& entry : wallet.mapWallet)\n-    {\n-        const uint256& wtxid = entry.first;\n-        const CWalletTx& wtx = entry.second;\n+    // Cache for whether each tx passes the tx checks (first bool), and whether the transaction is \"safe\" (second bool)\n+    std::unordered_map<uint256, std::pair<bool, bool>, SaltedTxidHasher> tx_safe_cache;\n+    for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+        const CWalletTx& wtx = txo.GetWalletTx();\n+        const CTxOut& output = txo.GetTxOut();\n \n-        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n+        if (tx_safe_cache.count(outpoint.hash) > 0 && !tx_safe_cache.at(outpoint.hash).first) {\n             continue;\n+        }\n \n-        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n-        if (nDepth < 0)\n+        // Skip manually selected coins (the caller can fetch them directly)\n+        if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n             continue;\n \n-        // We should not consider coins which aren't at least in our mempool\n-        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !wtx.InMempool())\n+        if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n             continue;\n \n-        bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n-\n-        // We should not consider coins from transactions that are replacing\n-        // other transactions.\n-        //\n-        // Example: There is a transaction A which is replaced by bumpfee\n-        // transaction B. In this case, we want to prevent creation of\n-        // a transaction B' which spends an output of B.\n-        //\n-        // Reason: If transaction A were initially confirmed, transactions B\n-        // and B' would no longer be valid, so the user would have to create\n-        // a new transaction C to replace B'. However, in the case of a\n-        // one-block reorg, transactions B' and C might BOTH be accepted,\n-        // when the user only wanted one of them. Specifically, there could\n-        // be a 1-block reorg away from the chain where transactions A and C\n-        // were accepted to another chain where B, B', and C were all\n-        // accepted.\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n-            safeTx = false;\n-        }\n+        if (wallet.IsSpent(outpoint))\n+            continue;\n \n-        // Similarly, we should not consider coins from transactions that\n-        // have been replaced. In the example above, we would want to prevent\n-        // creation of a transaction A' spending an output of A, because if\n-        // transaction B were initially confirmed, conflicting with A and\n-        // A', we wouldn't want to the user to create a transaction D\n-        // intending to replace A', but potentially resulting in a scenario\n-        // where A, A', and D could all be accepted (instead of just B and\n-        // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n-            safeTx = false;\n-        }\n+        if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n+            continue;\n \n-        if (only_safe && !safeTx) {\n+        if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n             continue;\n         }\n \n-        if (nDepth < min_depth || nDepth > max_depth) {\n+        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n             continue;\n-        }\n \n-        bool tx_from_me = CachedTxIsFromMe(wallet, wtx, ISMINE_ALL);\n+        isminetype mine = wallet.IsMine(output);\n \n-        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n-            const CTxOut& output = wtx.tx->vout[i];\n-            const COutPoint outpoint(wtxid, i);\n+        if (mine == ISMINE_NO) {\n+            continue;\n+        }\n \n-            if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n-                continue;\n+        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n+        if (nDepth < 0)\n+            continue;\n \n-            // Skip manually selected coins (the caller can fetch them directly)\n-            if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n-                continue;\n+        if (tx_safe_cache.count(outpoint.hash) == 0 ) {\n+            tx_safe_cache[outpoint.hash] = {false, false};\n \n-            if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n+            // We should not consider coins which aren't at least in our mempool\n+            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+            if (nDepth == 0 && !wtx.InMempool())\n                 continue;\n \n-            if (wallet.IsSpent(outpoint))\n-                continue;\n+            bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n+\n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n+                safeTx = false;\n+            }\n \n-            isminetype mine = wallet.IsMine(output);\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n+                safeTx = false;\n+            }\n \n-            if (mine == ISMINE_NO) {\n+            if (only_safe && !safeTx) {\n                 continue;\n             }\n \n-            if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n+            if (nDepth < min_depth || nDepth > max_depth) {\n                 continue;\n             }\n \n-            std::unique_ptr<SigningProvider> provider = wallet.GetSolvingProvider(output.scriptPubKey);\n-\n-            int input_bytes = CalculateMaximumSignedInputSize(output, COutPoint(), provider.get(), can_grind_r, coinControl);\n-            bool solvable = provider ? InferDescriptor(output.scriptPubKey, *provider)->IsSolvable() : false;\n-            bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n-\n-            // Filter by spendable outputs only\n-            if (!spendable && params.only_spendable) continue;\n-\n-            // Obtain script type\n-            std::vector<std::vector<uint8_t>> script_solutions;\n-            TxoutType type = Solver(output.scriptPubKey, script_solutions);\n-\n-            // If the output is P2SH and solvable, we want to know if it is\n-            // a P2SH (legacy) or one of P2SH-P2WPKH, P2SH-P2WSH (P2SH-Segwit). We can determine\n-            // this from the redeemScript. If the output is not solvable, it will be classified\n-            // as a P2SH (legacy), since we have no way of knowing otherwise without the redeemScript\n-            bool is_from_p2sh{false};\n-            if (type == TxoutType::SCRIPTHASH && solvable) {\n-                CScript script;\n-                if (!provider->GetCScript(CScriptID(uint160(script_solutions[0])), script)) continue;\n-                type = Solver(script, script_solutions);\n-                is_from_p2sh = true;\n-            }\n+            tx_safe_cache[outpoint.hash] = {true, safeTx};\n+        }\n+        const auto& [tx_ok, tx_safe] = tx_safe_cache.at(outpoint.hash);\n+        Assert(tx_ok);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1327657382",
      "id" : 1327657382,
      "in_reply_to_id" : 1262959018,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PInGm",
      "original_commit_id" : "881650ed319c6ed74e66ae56c34cdee93125231b",
      "original_line" : 410,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1629526153,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327657382/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-15T18:39:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327657382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> I'm not sure that's meaningfully different. The caller still needs to know when to clear `m_txos` in order to trigger a future `RefreshWalletTXOs()`. The way it is now also provides a better UX as the slow part of refreshing the TXOs occurs during slow import operations rather than the first time those TXOs are needed after the import.\r\n\r\nJust to clarify, I mean that a reviewer, but not method caller, would need to make sure every method in CWallet that invalidates `m_txos` also clears it. I agree with your point though that forcing the refresh at import time makes sense. I also notice that there are a number of places where a `ScriptPubKeyMan` gets added or updated outside of CWallet, so I understand now why it's not really possible to make `RefreshWalletTXOs()` something internal to `CWallet`.",
      "created_at" : "2023-09-16T08:38:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#issuecomment-1722178128",
      "id" : 1722178128,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
      "node_id" : "IC_kwDOABII585mplpQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1722178128/reactions"
      },
      "updated_at" : "2023-09-16T08:38:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1722178128",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8568892?v=4",
         "events_url" : "https://api.github.com/users/remyers/events{/privacy}",
         "followers_url" : "https://api.github.com/users/remyers/followers",
         "following_url" : "https://api.github.com/users/remyers/following{/other_user}",
         "gists_url" : "https://api.github.com/users/remyers/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/remyers",
         "id" : 8568892,
         "login" : "remyers",
         "node_id" : "MDQ6VXNlcjg1Njg4OTI=",
         "organizations_url" : "https://api.github.com/users/remyers/orgs",
         "received_events_url" : "https://api.github.com/users/remyers/received_events",
         "repos_url" : "https://api.github.com/users/remyers/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/remyers/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/remyers/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/remyers"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1359995170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1359995170"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In fdf3ab0579be6d6f2be31907e3451a830e25291e \"wallet: Change balance calculation to use m_txos \":\r\n\r\nnit: This no longer needs to be changed in this commit. ",
      "commit_id" : "275ad95669be5a82a552ecb56b3c4d37f65243af",
      "created_at" : "2023-10-16T00:44:18Z",
      "diff_hunk" : "@@ -231,7 +231,8 @@ def run_test(self):\n         assert_equal(newbalance, balance + Decimal(\"20\"))\n         balance = newbalance\n \n-        # Invalidate the block with the double spend. B & C's 10 BTC outputs should no longer be available\n+        # Invalidate the block with the double spend and both B and C's 10 BTC output should no longer be available\n+        # AB1 and ABC2's outputs are also not available since neither of those txs are in the mempool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1359995170",
      "id" : 1359995170,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RD-Ei",
      "original_commit_id" : "fdf3ab0579be6d6f2be31907e3451a830e25291e",
      "original_line" : 235,
      "original_position" : 6,
      "original_start_line" : 234,
      "path" : "test/functional/wallet_abandonconflict.py",
      "position" : null,
      "pull_request_review_id" : 1657907650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1359995170/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-10-16T12:06:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1359995170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1359998074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1359998074"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In d7b3603822663fbc713970bf37dc010904aaa583 \"wallet: Recalculate the wallet's txos after any imports \":\r\n\r\n`RefreshWalletTXOs` looks similar to `RefreshWalletTxTXOs` and it is not immediately clear what the distinction is without actually reading the functions. I would suggest s/RefreshWalletTXOs/RefreshAllTXOs (putting \"Wallet\" seems redundant here because the method belongs to wallet anyways, and `GetTXOs` doesn't mention \"Wallet\" in the function name).",
      "commit_id" : "275ad95669be5a82a552ecb56b3c4d37f65243af",
      "created_at" : "2023-10-16T00:54:34Z",
      "diff_hunk" : "@@ -504,6 +504,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     const std::unordered_map<COutPoint, WalletTXO, SaltedOutpointHasher>& GetTXOs() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return m_txos; };\n \n     void RefreshWalletTxTXOs(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void RefreshWalletTXOs() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1359998074",
      "id" : 1359998074,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RD-x6",
      "original_commit_id" : "d7b3603822663fbc713970bf37dc010904aaa583",
      "original_line" : 508,
      "original_position" : 4,
      "original_start_line" : 506,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1657907650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1359998074/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-10-16T12:06:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1359998074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1360011012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360011012"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Looking at this again, I think I mislead you here. In the scenario I described above, `tx_ok` won't be false at this point, because if a `{false, false}` entry has already been created for a txid, then it would not reach this point because it would already get removed here (https://github.com/bitcoin/bitcoin/pull/27286/commits/9315bb7872210dc767dfd7ea01febb13fca5525b#diff-6e06b309cd494ef5da4e78aa0929a980767edd12342137f268b9219167064d13R328-R329)",
      "commit_id" : "275ad95669be5a82a552ecb56b3c4d37f65243af",
      "created_at" : "2023-10-16T01:38:50Z",
      "diff_hunk" : "@@ -217,133 +217,141 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     const bool can_grind_r = wallet.CanGrindR();\n \n     std::set<uint256> trusted_parents;\n-    for (const auto& entry : wallet.mapWallet)\n-    {\n-        const uint256& wtxid = entry.first;\n-        const CWalletTx& wtx = entry.second;\n+    // Cache for whether each tx passes the tx checks (first bool), and whether the transaction is \"safe\" (second bool)\n+    std::unordered_map<uint256, std::pair<bool, bool>, SaltedTxidHasher> tx_safe_cache;\n+    for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+        const CWalletTx& wtx = txo.GetWalletTx();\n+        const CTxOut& output = txo.GetTxOut();\n \n-        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n+        if (tx_safe_cache.count(outpoint.hash) > 0 && !tx_safe_cache.at(outpoint.hash).first) {\n             continue;\n+        }\n \n-        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n-        if (nDepth < 0)\n+        // Skip manually selected coins (the caller can fetch them directly)\n+        if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n             continue;\n \n-        // We should not consider coins which aren't at least in our mempool\n-        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !wtx.InMempool())\n+        if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n             continue;\n \n-        bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n-\n-        // We should not consider coins from transactions that are replacing\n-        // other transactions.\n-        //\n-        // Example: There is a transaction A which is replaced by bumpfee\n-        // transaction B. In this case, we want to prevent creation of\n-        // a transaction B' which spends an output of B.\n-        //\n-        // Reason: If transaction A were initially confirmed, transactions B\n-        // and B' would no longer be valid, so the user would have to create\n-        // a new transaction C to replace B'. However, in the case of a\n-        // one-block reorg, transactions B' and C might BOTH be accepted,\n-        // when the user only wanted one of them. Specifically, there could\n-        // be a 1-block reorg away from the chain where transactions A and C\n-        // were accepted to another chain where B, B', and C were all\n-        // accepted.\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n-            safeTx = false;\n-        }\n+        if (wallet.IsSpent(outpoint))\n+            continue;\n \n-        // Similarly, we should not consider coins from transactions that\n-        // have been replaced. In the example above, we would want to prevent\n-        // creation of a transaction A' spending an output of A, because if\n-        // transaction B were initially confirmed, conflicting with A and\n-        // A', we wouldn't want to the user to create a transaction D\n-        // intending to replace A', but potentially resulting in a scenario\n-        // where A, A', and D could all be accepted (instead of just B and\n-        // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n-            safeTx = false;\n-        }\n+        if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n+            continue;\n \n-        if (only_safe && !safeTx) {\n+        if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n             continue;\n         }\n \n-        if (nDepth < min_depth || nDepth > max_depth) {\n+        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n             continue;\n-        }\n \n-        bool tx_from_me = CachedTxIsFromMe(wallet, wtx, ISMINE_ALL);\n+        isminetype mine = wallet.IsMine(output);\n \n-        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n-            const CTxOut& output = wtx.tx->vout[i];\n-            const COutPoint outpoint(wtxid, i);\n+        if (mine == ISMINE_NO) {\n+            continue;\n+        }\n \n-            if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n-                continue;\n+        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n+        if (nDepth < 0)\n+            continue;\n \n-            // Skip manually selected coins (the caller can fetch them directly)\n-            if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n-                continue;\n+        if (tx_safe_cache.count(outpoint.hash) == 0 ) {\n+            tx_safe_cache[outpoint.hash] = {false, false};\n \n-            if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n+            // We should not consider coins which aren't at least in our mempool\n+            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+            if (nDepth == 0 && !wtx.InMempool())\n                 continue;\n \n-            if (wallet.IsSpent(outpoint))\n-                continue;\n+            bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n+\n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n+                safeTx = false;\n+            }\n \n-            isminetype mine = wallet.IsMine(output);\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n+                safeTx = false;\n+            }\n \n-            if (mine == ISMINE_NO) {\n+            if (only_safe && !safeTx) {\n                 continue;\n             }\n \n-            if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n+            if (nDepth < min_depth || nDepth > max_depth) {\n                 continue;\n             }\n \n-            std::unique_ptr<SigningProvider> provider = wallet.GetSolvingProvider(output.scriptPubKey);\n-\n-            int input_bytes = CalculateMaximumSignedInputSize(output, COutPoint(), provider.get(), can_grind_r, coinControl);\n-            bool solvable = provider ? InferDescriptor(output.scriptPubKey, *provider)->IsSolvable() : false;\n-            bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n-\n-            // Filter by spendable outputs only\n-            if (!spendable && params.only_spendable) continue;\n-\n-            // Obtain script type\n-            std::vector<std::vector<uint8_t>> script_solutions;\n-            TxoutType type = Solver(output.scriptPubKey, script_solutions);\n-\n-            // If the output is P2SH and solvable, we want to know if it is\n-            // a P2SH (legacy) or one of P2SH-P2WPKH, P2SH-P2WSH (P2SH-Segwit). We can determine\n-            // this from the redeemScript. If the output is not solvable, it will be classified\n-            // as a P2SH (legacy), since we have no way of knowing otherwise without the redeemScript\n-            bool is_from_p2sh{false};\n-            if (type == TxoutType::SCRIPTHASH && solvable) {\n-                CScript script;\n-                if (!provider->GetCScript(CScriptID(uint160(script_solutions[0])), script)) continue;\n-                type = Solver(script, script_solutions);\n-                is_from_p2sh = true;\n-            }\n+            tx_safe_cache[outpoint.hash] = {true, safeTx};\n+        }\n+        const auto& [tx_ok, tx_safe] = tx_safe_cache.at(outpoint.hash);\n+        Assert(tx_ok);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1360011012",
      "id" : 1360011012,
      "in_reply_to_id" : 1262959018,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585REB8E",
      "original_commit_id" : "881650ed319c6ed74e66ae56c34cdee93125231b",
      "original_line" : 410,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1657907650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360011012/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T12:06:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360011012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1361317075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317075"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "275ad95669be5a82a552ecb56b3c4d37f65243af",
      "created_at" : "2023-10-16T22:14:49Z",
      "diff_hunk" : "@@ -231,7 +231,8 @@ def run_test(self):\n         assert_equal(newbalance, balance + Decimal(\"20\"))\n         balance = newbalance\n \n-        # Invalidate the block with the double spend. B & C's 10 BTC outputs should no longer be available\n+        # Invalidate the block with the double spend and both B and C's 10 BTC output should no longer be available\n+        # AB1 and ABC2's outputs are also not available since neither of those txs are in the mempool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1361317075",
      "id" : 1361317075,
      "in_reply_to_id" : 1359995170,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RJAzT",
      "original_commit_id" : "fdf3ab0579be6d6f2be31907e3451a830e25291e",
      "original_line" : 235,
      "original_position" : 6,
      "original_start_line" : 234,
      "path" : "test/functional/wallet_abandonconflict.py",
      "position" : null,
      "pull_request_review_id" : 1681041652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317075/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-10-16T22:14:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317075",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1361317158"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317158"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed as suggested.",
      "commit_id" : "275ad95669be5a82a552ecb56b3c4d37f65243af",
      "created_at" : "2023-10-16T22:14:56Z",
      "diff_hunk" : "@@ -504,6 +504,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     const std::unordered_map<COutPoint, WalletTXO, SaltedOutpointHasher>& GetTXOs() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return m_txos; };\n \n     void RefreshWalletTxTXOs(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void RefreshWalletTXOs() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1361317158",
      "id" : 1361317158,
      "in_reply_to_id" : 1359998074,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RJA0m",
      "original_commit_id" : "d7b3603822663fbc713970bf37dc010904aaa583",
      "original_line" : 508,
      "original_position" : 4,
      "original_start_line" : 506,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1681041766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317158/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-10-16T22:14:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317158",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1361317356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed. I've left the `if` there anyways as a belt-and-suspenders, and changed it to also `Assume`.",
      "commit_id" : "275ad95669be5a82a552ecb56b3c4d37f65243af",
      "created_at" : "2023-10-16T22:15:19Z",
      "diff_hunk" : "@@ -217,133 +217,141 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     const bool can_grind_r = wallet.CanGrindR();\n \n     std::set<uint256> trusted_parents;\n-    for (const auto& entry : wallet.mapWallet)\n-    {\n-        const uint256& wtxid = entry.first;\n-        const CWalletTx& wtx = entry.second;\n+    // Cache for whether each tx passes the tx checks (first bool), and whether the transaction is \"safe\" (second bool)\n+    std::unordered_map<uint256, std::pair<bool, bool>, SaltedTxidHasher> tx_safe_cache;\n+    for (const auto& [outpoint, txo] : wallet.GetTXOs()) {\n+        const CWalletTx& wtx = txo.GetWalletTx();\n+        const CTxOut& output = txo.GetTxOut();\n \n-        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n+        if (tx_safe_cache.count(outpoint.hash) > 0 && !tx_safe_cache.at(outpoint.hash).first) {\n             continue;\n+        }\n \n-        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n-        if (nDepth < 0)\n+        // Skip manually selected coins (the caller can fetch them directly)\n+        if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n             continue;\n \n-        // We should not consider coins which aren't at least in our mempool\n-        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !wtx.InMempool())\n+        if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n             continue;\n \n-        bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n-\n-        // We should not consider coins from transactions that are replacing\n-        // other transactions.\n-        //\n-        // Example: There is a transaction A which is replaced by bumpfee\n-        // transaction B. In this case, we want to prevent creation of\n-        // a transaction B' which spends an output of B.\n-        //\n-        // Reason: If transaction A were initially confirmed, transactions B\n-        // and B' would no longer be valid, so the user would have to create\n-        // a new transaction C to replace B'. However, in the case of a\n-        // one-block reorg, transactions B' and C might BOTH be accepted,\n-        // when the user only wanted one of them. Specifically, there could\n-        // be a 1-block reorg away from the chain where transactions A and C\n-        // were accepted to another chain where B, B', and C were all\n-        // accepted.\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n-            safeTx = false;\n-        }\n+        if (wallet.IsSpent(outpoint))\n+            continue;\n \n-        // Similarly, we should not consider coins from transactions that\n-        // have been replaced. In the example above, we would want to prevent\n-        // creation of a transaction A' spending an output of A, because if\n-        // transaction B were initially confirmed, conflicting with A and\n-        // A', we wouldn't want to the user to create a transaction D\n-        // intending to replace A', but potentially resulting in a scenario\n-        // where A, A', and D could all be accepted (instead of just B and\n-        // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n-            safeTx = false;\n-        }\n+        if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n+            continue;\n \n-        if (only_safe && !safeTx) {\n+        if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n             continue;\n         }\n \n-        if (nDepth < min_depth || nDepth > max_depth) {\n+        if (wallet.IsTxImmatureCoinBase(wtx) && !params.include_immature_coinbase)\n             continue;\n-        }\n \n-        bool tx_from_me = CachedTxIsFromMe(wallet, wtx, ISMINE_ALL);\n+        isminetype mine = wallet.IsMine(output);\n \n-        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n-            const CTxOut& output = wtx.tx->vout[i];\n-            const COutPoint outpoint(wtxid, i);\n+        if (mine == ISMINE_NO) {\n+            continue;\n+        }\n \n-            if (output.nValue < params.min_amount || output.nValue > params.max_amount)\n-                continue;\n+        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n+        if (nDepth < 0)\n+            continue;\n \n-            // Skip manually selected coins (the caller can fetch them directly)\n-            if (coinControl && coinControl->HasSelected() && coinControl->IsSelected(outpoint))\n-                continue;\n+        if (tx_safe_cache.count(outpoint.hash) == 0 ) {\n+            tx_safe_cache[outpoint.hash] = {false, false};\n \n-            if (wallet.IsLockedCoin(outpoint) && params.skip_locked)\n+            // We should not consider coins which aren't at least in our mempool\n+            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+            if (nDepth == 0 && !wtx.InMempool())\n                 continue;\n \n-            if (wallet.IsSpent(outpoint))\n-                continue;\n+            bool safeTx = CachedTxIsTrusted(wallet, wtx, trusted_parents);\n+\n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n+                safeTx = false;\n+            }\n \n-            isminetype mine = wallet.IsMine(output);\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n+                safeTx = false;\n+            }\n \n-            if (mine == ISMINE_NO) {\n+            if (only_safe && !safeTx) {\n                 continue;\n             }\n \n-            if (!allow_used_addresses && wallet.IsSpentKey(output.scriptPubKey)) {\n+            if (nDepth < min_depth || nDepth > max_depth) {\n                 continue;\n             }\n \n-            std::unique_ptr<SigningProvider> provider = wallet.GetSolvingProvider(output.scriptPubKey);\n-\n-            int input_bytes = CalculateMaximumSignedInputSize(output, COutPoint(), provider.get(), can_grind_r, coinControl);\n-            bool solvable = provider ? InferDescriptor(output.scriptPubKey, *provider)->IsSolvable() : false;\n-            bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n-\n-            // Filter by spendable outputs only\n-            if (!spendable && params.only_spendable) continue;\n-\n-            // Obtain script type\n-            std::vector<std::vector<uint8_t>> script_solutions;\n-            TxoutType type = Solver(output.scriptPubKey, script_solutions);\n-\n-            // If the output is P2SH and solvable, we want to know if it is\n-            // a P2SH (legacy) or one of P2SH-P2WPKH, P2SH-P2WSH (P2SH-Segwit). We can determine\n-            // this from the redeemScript. If the output is not solvable, it will be classified\n-            // as a P2SH (legacy), since we have no way of knowing otherwise without the redeemScript\n-            bool is_from_p2sh{false};\n-            if (type == TxoutType::SCRIPTHASH && solvable) {\n-                CScript script;\n-                if (!provider->GetCScript(CScriptID(uint160(script_solutions[0])), script)) continue;\n-                type = Solver(script, script_solutions);\n-                is_from_p2sh = true;\n-            }\n+            tx_safe_cache[outpoint.hash] = {true, safeTx};\n+        }\n+        const auto& [tx_ok, tx_safe] = tx_safe_cache.at(outpoint.hash);\n+        Assert(tx_ok);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1361317356",
      "id" : 1361317356,
      "in_reply_to_id" : 1262959018,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RJA3s",
      "original_commit_id" : "881650ed319c6ed74e66ae56c34cdee93125231b",
      "original_line" : 410,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1681042072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317356/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T22:15:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361317356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1369755368"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369755368"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\nbench/wallet_create_tx.cpp:58:26: error: use emplace_back instead of push_back [modernize-use-emplace,-warnings-as-errors]\r\n   58 |         coinbase_tx.vout.push_back(CTxOut(1 * COIN / 50, CScript(OP_TRUE)));\r\n      |                          ^~~~~~~~~~~~~~~~~                               ~\r\n      |                          emplace_back(",
      "commit_id" : "dd411d9d209fe1eacfcb21baba178aa31809f7cf",
      "created_at" : "2023-10-24T07:51:16Z",
      "diff_hunk" : "@@ -47,10 +47,17 @@ void generateFakeBlock(const CChainParams& params,\n     coinbase_tx.vin[0].prevout.SetNull();\n     coinbase_tx.vout.resize(2);\n     coinbase_tx.vout[0].scriptPubKey = coinbase_out_script;\n-    coinbase_tx.vout[0].nValue = 49 * COIN;\n+    coinbase_tx.vout[0].nValue = 48 * COIN;\n     coinbase_tx.vin[0].scriptSig = CScript() << ++tip.tip_height << OP_0;\n     coinbase_tx.vout[1].scriptPubKey = coinbase_out_script; // extra output\n     coinbase_tx.vout[1].nValue = 1 * COIN;\n+\n+    // Fill the coinbase with outputs that don't belong to the wallet in order to benchmark\n+    // AvailableCoins' behavior with unnecessary TXOs\n+    for (int i = 0; i < 50; ++i) {\n+        coinbase_tx.vout.push_back(CTxOut(1 * COIN / 50, CScript(OP_TRUE)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1369755368",
      "id" : 1369755368,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RpM7o",
      "original_commit_id" : "9292951f0c2a05a79280e4feb8c1557586681105",
      "original_line" : 58,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/bench/wallet_create_tx.cpp",
      "position" : null,
      "pull_request_review_id" : 1694219823,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369755368/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T07:51:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369755368",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1370428946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370428946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "dd411d9d209fe1eacfcb21baba178aa31809f7cf",
      "created_at" : "2023-10-24T15:41:43Z",
      "diff_hunk" : "@@ -47,10 +47,17 @@ void generateFakeBlock(const CChainParams& params,\n     coinbase_tx.vin[0].prevout.SetNull();\n     coinbase_tx.vout.resize(2);\n     coinbase_tx.vout[0].scriptPubKey = coinbase_out_script;\n-    coinbase_tx.vout[0].nValue = 49 * COIN;\n+    coinbase_tx.vout[0].nValue = 48 * COIN;\n     coinbase_tx.vin[0].scriptSig = CScript() << ++tip.tip_height << OP_0;\n     coinbase_tx.vout[1].scriptPubKey = coinbase_out_script; // extra output\n     coinbase_tx.vout[1].nValue = 1 * COIN;\n+\n+    // Fill the coinbase with outputs that don't belong to the wallet in order to benchmark\n+    // AvailableCoins' behavior with unnecessary TXOs\n+    for (int i = 0; i < 50; ++i) {\n+        coinbase_tx.vout.push_back(CTxOut(1 * COIN / 50, CScript(OP_TRUE)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27286#discussion_r1370428946",
      "id" : 1370428946,
      "in_reply_to_id" : 1369755368,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RrxYS",
      "original_commit_id" : "9292951f0c2a05a79280e4feb8c1557586681105",
      "original_line" : 58,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/bench/wallet_create_tx.cpp",
      "position" : null,
      "pull_request_review_id" : 1695267006,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370428946/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T15:41:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370428946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
