[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28311).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [aceofbitcoin](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1697913869), [RicYashiroLee](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1698057367), [amtriorix](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1700913429), [petertodd](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1809045700) |\n| Concept ACK | [psztorc](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688540988), [CheemsCommander](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1690244473), [skydogenet](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1736445209) |\n| Approach ACK | [jaybny](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688825978) |\n| Approach NACK | [russeree](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1687311408), [ns-xvrn](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688401439), [ChrisMartl](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1689307554) |\n| Ignored review | [john-light](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1687421696) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28438](https://github.com/bitcoin/bitcoin/pull/28438) (Use serialization parameters for CTransaction by ajtowns)\n* [#28051](https://github.com/bitcoin/bitcoin/pull/28051) (Get rid of shutdown.cpp/shutdown.h, use SignalInterrupt directly by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-08-22T01:17:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1687269373",
      "id" : 1687269373,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kka_9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687269373/reactions"
      },
      "updated_at" : "2023-11-15T13:37:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687269373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Approach NACK; using bip300 `OP_DRIVECHAIN` to achieve consensus about the validity of a spend is prone to errors or manipulation by miners as to the state of the sidechain thus introducing additional incentives into bitcoin.\r\n\r\nPlease don't take this personally, I love the work you do, personally I want to see a more 'trustless' method of pegouts before adding sidechain communication and spend conditions into Bitcoin Core.",
      "created_at" : "2023-08-22T02:15:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1687311408",
      "id" : 1687311408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kklQw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 5,
         "-1" : 0,
         "confused" : 2,
         "eyes" : 1,
         "heart" : 2,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 10,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687311408/reactions"
      },
      "updated_at" : "2023-08-22T04:26:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687311408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1300852973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1300852973"
         }
      },
      "author_association" : "NONE",
      "body" : "if you had the tx commit to the sidechain number somewhere, I think you could remove it from `CalculateDrivechainWithdrawInternalHash`? ",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T03:04:05Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];\n+            // TODO: Implement formats 3+? Or at least validate\n+                // NOTE data_format 2 changed to 0 FIXME\n+                // TODO: (new) data format 2 sets it to the ACKs from the previous block - but those aren't known, have the same cost, and encourages blind upvoting; so can we get rid of it?\n+                // TODO: data format 3 upvotes any bundle leading its rivals by at least 50 ACKs -- also encourages blind upvoting :/\n+            // TODO: How is vote vector actually encoded?\n+            // TODO: Block is invalid if there are no bundles proposed at all\n+            // FIXME: Presumably blocks should only be able to vote once - this is missing in the BIP\n+            for (int sidechain_id = 0; sidechain_id < 0x100; ++sidechain_id) {\n+                // FIXME: bounds checking\n+                // FIXME: skip votes for sidechains with no proposals\n+                uint16_t vote = out.scriptPubKey[6 + (sidechain_id * data_format)];\n+                if (data_format == 2) {\n+                    vote |= uint16_t{out.scriptPubKey[6 + (sidechain_id * data_format) + 1]} << 8;\n+                } else if (vote >= 0xfe) {\n+                    vote |= 0xff00;\n+                }\n+\n+                if (vote == 0xffff) continue;  // abstain\n+\n+                // FIXME: what if it's missing?\n+                CDataStream withdraw_proposals = GetDBEntry(view, {uint256{(uint8_t)sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST});\n+                uint256 bundle_hash;\n+                bool found_bundle{false};\n+                for (uint16_t bundle_hash_num = 0; !withdraw_proposals.eof(); ++bundle_hash_num) {\n+                    withdraw_proposals >> bundle_hash;\n+                    if (bundle_hash_num == vote) found_bundle = true;\n+                    IncrementDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, (bundle_hash_num == vote) ? 1 : -1);\n+                }\n+                if ((!found_bundle) && vote != 0xfffe) {\n+                    return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-ack-nonexistent\");\n+                }\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_PROPOSE)) {\n+            if (out.scriptPubKey.size() != 0x26) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            uint256 bundle_hash;\n+            uint8_t sidechain_id;\n+            try {\n+                s >> bundle_hash;\n+                s >> sidechain_id;\n+            } catch (...) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+\n+            if (GetDBEntry(view, {uint256{sidechain_id}, DBIDX_SIDECHAIN_DATA}).empty()) {\n+                // \"M3 is ignored...if it is for a sidechain that doesn't exist.\"\n+                continue;\n+            }\n+\n+            // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+            // TODO: maybe define this in the BIP and M3 ?\n+            bundle_hash = CalculateDrivechainWithdrawInternalHash(bundle_hash, sidechain_id);\n+\n+            // \"M3 is invalid if...This block already has an M3 for that nSidechain.\"\n+            if (saw_withdraw_proposed_for_sidechain.find(sidechain_id) != saw_withdraw_proposed_for_sidechain.end()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-multiple\");\n+            }\n+            saw_withdraw_proposed_for_sidechain.insert(sidechain_id);\n+\n+            // FIXME: \"M3 is invalid if...A bundle with this hash already paid out. A bundle with this hash was rejected in the past.\" is not practical to track!\n+\n+            if (!GetDBEntry(view, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}).empty()) {\n+                // Withdraw has already been proposed, invalid\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-duplicate\");\n+            }\n+\n+            ModifyDBEntry(view, txundo, block_height, {uint256{sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST}, [&bundle_hash](CDataStream& withdraw_proposals){\n+                withdraw_proposals << bundle_hash;\n+            });\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, s);\n+\n+            withdraw_proposal_list.resize(withdraw_proposal_list.size() + bundle_hash.size());\n+            memcpy(&withdraw_proposal_list.data()[withdraw_proposal_list.size() - bundle_hash.size()], bundle_hash.data(), bundle_hash.size());  // FIXME: C++ify\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_ACK)) {\n+            if (saw_sidechain_acks) {\n+                // FIXME: shouldn't it be possible to ACK multiple proposals for different sidechain ids??\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-multiple\");\n+            }\n+            saw_sidechain_acks = true;\n+\n+            if (out.scriptPubKey.size() != 0x25) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unparsable\");\n+            }\n+            const uint256 sidechain_proposal_hash{Span{&out.scriptPubKey[5], 0x20}};\n+            try {\n+                IncrementDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, 1);\n+            } catch (...) {  // TODO: make this explicitly for a non-existent entry\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unknown\");\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_PROPOSE)) {\n+            if (proposed_a_sidechain) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-multiple\");\n+            }\n+            proposed_a_sidechain = true;\n+\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            Sidechain proposed;\n+            try {\n+                s >> proposed;\n+            } catch (...) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-unparsable\");\n+            }\n+\n+            // TODO: block is invalid if proposed matches the current sidechain\n+\n+            uint256 sidechain_proposal_hash;\n+            CSHA256().Write(out.scriptPubKey.data() + 5, out.scriptPubKey.size() - 5).Finalize(sidechain_proposal_hash.data());\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL}, s);\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, s);\n+\n+            sidechain_proposal_list.resize(sidechain_proposal_list.size() + sidechain_proposal_hash.size());\n+            memcpy(&sidechain_proposal_list.data()[sidechain_proposal_list.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+        }\n+    }\n+\n+    if (!(sidechain_proposal_list.empty() && withdraw_proposal_list.empty())) {\n+        CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+        proposal_list << sidechain_proposal_list;\n+        proposal_list << withdraw_proposal_list;\n+        CreateDBEntry(view, txundo, block_height, {ArithToUint256(arith_uint256{(uint64_t)block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST}, proposal_list);\n+    }\n+\n+    // Perform sidechain overwriting/expiry and withdraw expiry\n+    int completed_block_height = block_height - (SIDECHAIN_WITHDRAW_PERIOD - 1);\n+    COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+    CDataStream completed_proposal_list = GetDBEntry(view, record_id);\n+    if (!completed_proposal_list.empty()) {\n+        DeleteDBEntry(view, txundo, record_id);\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_WITHDRAW_THRESHOLD) {\n+                // Overwrite an existing sidechain with a new one\n+                CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+                Assert(!proposal_s.empty());\n+                Sidechain proposal;\n+                proposal_s >> proposal;\n+\n+                COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+                DeleteDBEntry(view, txundo, sidechain_record_id);\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        for (size_t i = 0; i < withdraw_proposal_list.size(); i += uint256::size()) {\n+            uint256 withdraw_proposal_hash{Span{&withdraw_proposal_list[i], uint256::size()}};\n+            // FIXME: remove from DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST\n+            DeleteDBEntry(view, txundo, {withdraw_proposal_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS});\n+        }\n+    }\n+\n+    // New sidechain activation\n+    completed_block_height = block_height - (SIDECHAIN_ACTIVATION_PERIOD - 1);\n+    completed_proposal_list = GetDBEntry(view, {ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST});\n+    if (!completed_proposal_list.empty()) {\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        std::vector<unsigned char> sidechain_proposal_list_new;\n+        std::set<uint8_t> new_sidechains_activated;\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+            Assert(!proposal_s.empty());\n+            Sidechain proposal;\n+            proposal_s >> proposal;\n+\n+            COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+            CDataStream old_sidechain_s = GetDBEntry(view, sidechain_record_id);\n+            if (!old_sidechain_s.empty()) {\n+                // This would be an overwrite, so it must wait for the final completion after SIDECHAIN_WITHDRAW_PERIOD\n+                sidechain_proposal_list_new.resize(sidechain_proposal_list_new.size() + sidechain_proposal_hash.size());\n+                memcpy(&sidechain_proposal_list_new.data()[sidechain_proposal_list_new.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+                continue;\n+            }\n+\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_ACTIVATION_THRESHOLD) {\n+                // Activate new sidechain\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+                new_sidechains_activated.insert(proposal.idnum);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        if (!new_sidechains_activated.empty()) {\n+            Assume(sidechain_proposal_list.size() != sidechain_proposal_list_new.size());\n+            // Assign CTIPs\n+            for (size_t output_index = 0; output_index < tx.vout.size(); ++output_index) {\n+                if (!tx.vout[output_index].scriptPubKey.IsDrivechain()) continue;\n+\n+                const uint8_t sidechain_id = tx.vout[output_index].scriptPubKey[DRIVECHAIN_SCRIPT_SIDECHAIN_ID_OFFSET];\n+                if (new_sidechains_activated.find(sidechain_id) == new_sidechains_activated.end()) {\n+                    // TODO: OP_DRIVECHAIN (or OP_NOP5) for a non-activating sidechain id; should this be invalid??\n+                    continue;\n+                }\n+\n+                CDataStream ctip_info(SER_NETWORK, PROTOCOL_VERSION);\n+                ctip_info << sidechain_id;\n+                CreateDBEntry(view, txundo, block_height, {tx.GetHash(), DBIDX_SIDECHAIN_CTIP_INFO}, ctip_info);\n+            }\n+            if (!new_sidechains_activated.empty()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-activated-without-ctip\");\n+            }\n+        }\n+\n+        if (sidechain_proposal_list.size() != sidechain_proposal_list_new.size()) {\n+            Assume(!new_sidechains_activated.empty());\n+            COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+            DeleteDBEntry(view, txundo, record_id);\n+\n+            if (!(sidechain_proposal_list_new.empty() && withdraw_proposal_list.empty())) {\n+                CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+                proposal_list << sidechain_proposal_list_new;\n+                proposal_list << withdraw_proposal_list;\n+                CreateDBEntry(view, txundo, block_height, record_id, proposal_list);\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool VerifyDrivechainSpend(const CTransaction& tx, const unsigned int sidechain_input_n, const std::vector<CTxOut>& spent_outputs, const CCoinsViewCache& view, TxValidationState& state) {\n+    const CTxIn& sidechain_input = tx.vin[sidechain_input_n];\n+    // TODO: Do we want to verify there's only one sidechain involved? BIP300 says yes, but why?\n+\n+    // Lookup sidechain number from CTIP and ensure this is in fact a CTIP to begin with\n+    // FIXME: It might be a good idea to include the sidechain # in the tx itself somewhere?",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1300852973",
      "id" : 1300852973,
      "line" : 363,
      "node_id" : "PRRC_kwDOABII585NiXDt",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 363,
      "original_position" : 363,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 363,
      "pull_request_review_id" : 1588200210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 3,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1300852973/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T03:04:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1300852973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@russeree \r\n\r\n> Approach NACK; using bip300 OP_DRIVECHAIN to achieve consensus about the validity of a spend is prone to errors or manipulation by miners as to the state of the sidechain thus introducing additional incentives into bitcoin... personally I want to see a more 'trustless' method of pegouts before adding sidechain communication and spend conditions into BitcoinCore.\r\n\r\nThis comment seems to me like a \"Concept NACK\", not an \"Approach NACK\". Per @luke-jr's [request](https://github.com/bitcoin/bitcoin/pull/28311#issue-1860387785):\r\n\r\n> Many people seem to have opinions, but please keep them to other forums... not looking for concept ACKs/NACKs, just Approach ACKs / constructive criticism.\r\n\r\nIn case this request was missed, or there was a misunderstanding about the request, by \"just Approach ACK / constructive criticism\" Luke is saying he only wants feedback on his specific _approach_ taken to implement BIP300 in this PR. If a reviewer likes this approach, or does not like this approach and can suggest a better approach to implementing the BIP300 spec, then that is the kind of feedback Luke is looking for. On the other hand, if a reviewer has feedback about the _general concept_ of BIP300 then Luke requests that that feedback be shared elsewhere -- may I suggest the [bitcoin-dev](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev) mailing list or the new [Delving Bitcoin](https://delvingbitcoin.org) forum?",
      "created_at" : "2023-08-22T04:57:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1687421696",
      "id" : 1687421696,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585klAMA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 13,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 1,
         "rocket" : 0,
         "total_count" : 15,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687421696/reactions"
      },
      "updated_at" : "2023-08-22T04:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687421696",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9424721?v=4",
         "events_url" : "https://api.github.com/users/john-light/events{/privacy}",
         "followers_url" : "https://api.github.com/users/john-light/followers",
         "following_url" : "https://api.github.com/users/john-light/following{/other_user}",
         "gists_url" : "https://api.github.com/users/john-light/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/john-light",
         "id" : 9424721,
         "login" : "john-light",
         "node_id" : "MDQ6VXNlcjk0MjQ3MjE=",
         "organizations_url" : "https://api.github.com/users/john-light/orgs",
         "received_events_url" : "https://api.github.com/users/john-light/received_events",
         "repos_url" : "https://api.github.com/users/john-light/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/john-light/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/john-light/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/john-light"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Approach NACK: given that drivechains has [fundamental flaws unrelated to the exact implementation](https://petertodd.org/2023/drivechains), there's no reason to distract Bitcoin Core development with this pull-req, even in draft form. What's holding Drivechains back is the idea itself, not the code.\r\n\r\nYou haven't even bothered to write or link a high-level BIP-style overview of this take on the idea. Writing a bunch of detailed code is a waste of time.",
      "created_at" : "2023-08-22T10:27:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1687922922",
      "id" : 1687922922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585km6jq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 12,
         "-1" : 13,
         "confused" : 0,
         "eyes" : 4,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 30,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687922922/reactions"
      },
      "updated_at" : "2023-11-13T20:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1687922922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I refute the claim by Storkz and his fan boys that there are no risks or that all MEV risks are solved by Blind Merge Mining. \r\n\r\nPlus the peg out reintroduces having to trust, doesn't that seem scammy?",
      "created_at" : "2023-08-22T13:10:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688160759",
      "id" : 1688160759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kn0n3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 5,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 5,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688160759/reactions"
      },
      "updated_at" : "2023-08-22T13:10:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688160759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/120573631?v=4",
         "events_url" : "https://api.github.com/users/Gudnessuche/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Gudnessuche/followers",
         "following_url" : "https://api.github.com/users/Gudnessuche/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Gudnessuche/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Gudnessuche",
         "id" : 120573631,
         "login" : "Gudnessuche",
         "node_id" : "U_kgDOBy_Ovw",
         "organizations_url" : "https://api.github.com/users/Gudnessuche/orgs",
         "received_events_url" : "https://api.github.com/users/Gudnessuche/received_events",
         "repos_url" : "https://api.github.com/users/Gudnessuche/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Gudnessuche/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Gudnessuche/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Gudnessuche"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "\"Despite providing and continuing this implementation, I myself do not thereby endorse or otherwise comment on the proposal itself.\"\r\n\r\nHow do you reconcile this statement Luke. Pls don't support this misallocation of time, funds and energy. FUCK SYNTHETIC BITCOIN!!!",
      "created_at" : "2023-08-22T13:14:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688166989",
      "id" : 1688166989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kn2JN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 5,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 6,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688166989/reactions"
      },
      "updated_at" : "2023-08-22T13:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688166989",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/120573631?v=4",
         "events_url" : "https://api.github.com/users/Gudnessuche/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Gudnessuche/followers",
         "following_url" : "https://api.github.com/users/Gudnessuche/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Gudnessuche/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Gudnessuche",
         "id" : 120573631,
         "login" : "Gudnessuche",
         "node_id" : "U_kgDOBy_Ovw",
         "organizations_url" : "https://api.github.com/users/Gudnessuche/orgs",
         "received_events_url" : "https://api.github.com/users/Gudnessuche/received_events",
         "repos_url" : "https://api.github.com/users/Gudnessuche/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Gudnessuche/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Gudnessuche/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Gudnessuche"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301640710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301640710"
         }
      },
      "author_association" : "NONE",
      "body" : "OP_NOP2 is no longer here because of CLTV. should we have the `case OP_NOP5:` in the same arm of the switch as `OP_DRIVECHAIN`? Would make it more clear to future readers that OP_NOP5 is the same",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:21:36Z",
      "diff_hunk" : "@@ -591,6 +591,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n+                // NOTE: OP_DRIVECHAIN (OP_NOP5) is enforced in VerifyDrivechainSpend\n+\n                 case OP_NOP1: case OP_NOP4: case OP_NOP5:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301640710",
      "id" : 1301640710,
      "line" : 596,
      "node_id" : "PRRC_kwDOABII585NlXYG",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 596,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 6,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 3,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 1,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 4,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301640710/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301640710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301644600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301644600"
         }
      },
      "author_association" : "NONE",
      "body" : "do we also need to unwind sidechain db operations (like incrementing of `DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS`) in the undo data?",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:24:24Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301644600",
      "id" : 1301644600,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII585NlYU4",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 19,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 19,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301644600/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301644600",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301649645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301649645"
         }
      },
      "author_association" : "NONE",
      "body" : "I read the intent here as: the counter will never be < 0. If that's an important correctness property for the sidechain voting, would be nice to spell it out in a comment and/or reify it in an assert after the counter change on line 65",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:27:53Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301649645",
      "id" : 1301649645,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII585NlZjt",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 64,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301649645/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301649645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301656272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301656272"
         }
      },
      "author_association" : "NONE",
      "body" : "between this comment and the fact that the first in/out of the tx are nulled for computing the hash, it sounds like the same withdrawal tx could be provided for multiple sidechains. Is that desired?",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:32:24Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301656272",
      "id" : 1301656272,
      "line" : 79,
      "node_id" : "PRRC_kwDOABII585NlbLQ",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 79,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301656272/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301656272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301660385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301660385"
         }
      },
      "author_association" : "NONE",
      "body" : "probably something like `out.scriptPubKey.size() >= 6 + (0x100 * data_format)`  before we start counting votes",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:35:20Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];\n+            // TODO: Implement formats 3+? Or at least validate\n+                // NOTE data_format 2 changed to 0 FIXME\n+                // TODO: (new) data format 2 sets it to the ACKs from the previous block - but those aren't known, have the same cost, and encourages blind upvoting; so can we get rid of it?\n+                // TODO: data format 3 upvotes any bundle leading its rivals by at least 50 ACKs -- also encourages blind upvoting :/\n+            // TODO: How is vote vector actually encoded?\n+            // TODO: Block is invalid if there are no bundles proposed at all\n+            // FIXME: Presumably blocks should only be able to vote once - this is missing in the BIP\n+            for (int sidechain_id = 0; sidechain_id < 0x100; ++sidechain_id) {\n+                // FIXME: bounds checking",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301660385",
      "id" : 1301660385,
      "line" : 111,
      "node_id" : "PRRC_kwDOABII585NlcLh",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 111,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 111,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301660385/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301660385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301663764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301663764"
         }
      },
      "author_association" : "NONE",
      "body" : "why is `data_format` variable? if it was something fixed, we could statically determine the block weight increase and also check the size of the scriptpubkey above (after line 94) and bail early if ifs not well-formed",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:37:46Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301663764",
      "id" : 1301663764,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII585NldAU",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 102,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301663764/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301663764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301667255"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301667255"
         }
      },
      "author_association" : "NONE",
      "body" : "ah, I see now that `CreateDbEntry` and `DeleteDbEntry` create undo data, and `ModifyDbEntry` calls both of them. Nevermind. Leaving this comment here for future reviewers",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:40:10Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301667255",
      "id" : 1301667255,
      "in_reply_to_id" : 1301644600,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII585Nld23",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 19,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 19,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301667255/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301667255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301673754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301673754"
         }
      },
      "author_association" : "NONE",
      "body" : "do we want to also explicitly delete any lingering `DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST` entries for the deleted sidechain?",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T13:44:47Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];\n+            // TODO: Implement formats 3+? Or at least validate\n+                // NOTE data_format 2 changed to 0 FIXME\n+                // TODO: (new) data format 2 sets it to the ACKs from the previous block - but those aren't known, have the same cost, and encourages blind upvoting; so can we get rid of it?\n+                // TODO: data format 3 upvotes any bundle leading its rivals by at least 50 ACKs -- also encourages blind upvoting :/\n+            // TODO: How is vote vector actually encoded?\n+            // TODO: Block is invalid if there are no bundles proposed at all\n+            // FIXME: Presumably blocks should only be able to vote once - this is missing in the BIP\n+            for (int sidechain_id = 0; sidechain_id < 0x100; ++sidechain_id) {\n+                // FIXME: bounds checking\n+                // FIXME: skip votes for sidechains with no proposals\n+                uint16_t vote = out.scriptPubKey[6 + (sidechain_id * data_format)];\n+                if (data_format == 2) {\n+                    vote |= uint16_t{out.scriptPubKey[6 + (sidechain_id * data_format) + 1]} << 8;\n+                } else if (vote >= 0xfe) {\n+                    vote |= 0xff00;\n+                }\n+\n+                if (vote == 0xffff) continue;  // abstain\n+\n+                // FIXME: what if it's missing?\n+                CDataStream withdraw_proposals = GetDBEntry(view, {uint256{(uint8_t)sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST});\n+                uint256 bundle_hash;\n+                bool found_bundle{false};\n+                for (uint16_t bundle_hash_num = 0; !withdraw_proposals.eof(); ++bundle_hash_num) {\n+                    withdraw_proposals >> bundle_hash;\n+                    if (bundle_hash_num == vote) found_bundle = true;\n+                    IncrementDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, (bundle_hash_num == vote) ? 1 : -1);\n+                }\n+                if ((!found_bundle) && vote != 0xfffe) {\n+                    return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-ack-nonexistent\");\n+                }\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_PROPOSE)) {\n+            if (out.scriptPubKey.size() != 0x26) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            uint256 bundle_hash;\n+            uint8_t sidechain_id;\n+            try {\n+                s >> bundle_hash;\n+                s >> sidechain_id;\n+            } catch (...) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+\n+            if (GetDBEntry(view, {uint256{sidechain_id}, DBIDX_SIDECHAIN_DATA}).empty()) {\n+                // \"M3 is ignored...if it is for a sidechain that doesn't exist.\"\n+                continue;\n+            }\n+\n+            // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+            // TODO: maybe define this in the BIP and M3 ?\n+            bundle_hash = CalculateDrivechainWithdrawInternalHash(bundle_hash, sidechain_id);\n+\n+            // \"M3 is invalid if...This block already has an M3 for that nSidechain.\"\n+            if (saw_withdraw_proposed_for_sidechain.find(sidechain_id) != saw_withdraw_proposed_for_sidechain.end()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-multiple\");\n+            }\n+            saw_withdraw_proposed_for_sidechain.insert(sidechain_id);\n+\n+            // FIXME: \"M3 is invalid if...A bundle with this hash already paid out. A bundle with this hash was rejected in the past.\" is not practical to track!\n+\n+            if (!GetDBEntry(view, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}).empty()) {\n+                // Withdraw has already been proposed, invalid\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-duplicate\");\n+            }\n+\n+            ModifyDBEntry(view, txundo, block_height, {uint256{sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST}, [&bundle_hash](CDataStream& withdraw_proposals){\n+                withdraw_proposals << bundle_hash;\n+            });\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, s);\n+\n+            withdraw_proposal_list.resize(withdraw_proposal_list.size() + bundle_hash.size());\n+            memcpy(&withdraw_proposal_list.data()[withdraw_proposal_list.size() - bundle_hash.size()], bundle_hash.data(), bundle_hash.size());  // FIXME: C++ify\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_ACK)) {\n+            if (saw_sidechain_acks) {\n+                // FIXME: shouldn't it be possible to ACK multiple proposals for different sidechain ids??\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-multiple\");\n+            }\n+            saw_sidechain_acks = true;\n+\n+            if (out.scriptPubKey.size() != 0x25) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unparsable\");\n+            }\n+            const uint256 sidechain_proposal_hash{Span{&out.scriptPubKey[5], 0x20}};\n+            try {\n+                IncrementDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, 1);\n+            } catch (...) {  // TODO: make this explicitly for a non-existent entry\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unknown\");\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_PROPOSE)) {\n+            if (proposed_a_sidechain) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-multiple\");\n+            }\n+            proposed_a_sidechain = true;\n+\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            Sidechain proposed;\n+            try {\n+                s >> proposed;\n+            } catch (...) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-unparsable\");\n+            }\n+\n+            // TODO: block is invalid if proposed matches the current sidechain\n+\n+            uint256 sidechain_proposal_hash;\n+            CSHA256().Write(out.scriptPubKey.data() + 5, out.scriptPubKey.size() - 5).Finalize(sidechain_proposal_hash.data());\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL}, s);\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, s);\n+\n+            sidechain_proposal_list.resize(sidechain_proposal_list.size() + sidechain_proposal_hash.size());\n+            memcpy(&sidechain_proposal_list.data()[sidechain_proposal_list.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+        }\n+    }\n+\n+    if (!(sidechain_proposal_list.empty() && withdraw_proposal_list.empty())) {\n+        CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+        proposal_list << sidechain_proposal_list;\n+        proposal_list << withdraw_proposal_list;\n+        CreateDBEntry(view, txundo, block_height, {ArithToUint256(arith_uint256{(uint64_t)block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST}, proposal_list);\n+    }\n+\n+    // Perform sidechain overwriting/expiry and withdraw expiry\n+    int completed_block_height = block_height - (SIDECHAIN_WITHDRAW_PERIOD - 1);\n+    COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+    CDataStream completed_proposal_list = GetDBEntry(view, record_id);\n+    if (!completed_proposal_list.empty()) {\n+        DeleteDBEntry(view, txundo, record_id);\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_WITHDRAW_THRESHOLD) {\n+                // Overwrite an existing sidechain with a new one",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1301673754",
      "id" : 1301673754,
      "line" : 255,
      "node_id" : "PRRC_kwDOABII585Nlfca",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 255,
      "original_position" : 255,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 255,
      "pull_request_review_id" : 1589433555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301673754/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T13:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1301673754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Approach NACK\r\n\r\nYou yourself have said that this will not work \"without significant additional changes to handle an activation\". So what's the point of writing, reviewing and merging this code without completely knowing those \"significant changes\" ahead of time?\r\n\r\nAnd surely people have opinions about Drivechain in general because the big debate around it is about mining pool centralization and valid perverse incentives(and since this will lead a way for that to happen on the Bitcoin system instead of an independent sidechain implementation those opinions are also somewhat valid given this is incomplete work).",
      "created_at" : "2023-08-22T15:21:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688401439",
      "id" : 1688401439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kovYf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 3,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 5,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688401439/reactions"
      },
      "updated_at" : "2023-08-22T15:22:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688401439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/120062368?v=4",
         "events_url" : "https://api.github.com/users/ns-xvrn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ns-xvrn/followers",
         "following_url" : "https://api.github.com/users/ns-xvrn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ns-xvrn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ns-xvrn",
         "id" : 120062368,
         "login" : "ns-xvrn",
         "node_id" : "U_kgDOBygBoA",
         "organizations_url" : "https://api.github.com/users/ns-xvrn/orgs",
         "received_events_url" : "https://api.github.com/users/ns-xvrn/received_events",
         "repos_url" : "https://api.github.com/users/ns-xvrn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ns-xvrn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ns-xvrn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ns-xvrn"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Approach NACK: given that drivechains has fundamental flaws unrelated to the exact implementation, there's no reason to distract Bitcoin Core development with this pull-req, even in draft form. What's holding Drivechains back is the idea itself, not the code.\r\n\r\nI have engaged Peter (and compensated him financially) to write a report on these \"fundamental flaws\", but I have not yet heard or seen anything.\r\n\r\nPeter, until you publish these flaws, we have no way of evaluating them. (Nor would this be the place to do that, even if you had. Per Luke's comment on Concept ACK/NACKs.)",
      "created_at" : "2023-08-22T16:26:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688540988",
      "id" : 1688540988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kpRc8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 8,
         "-1" : 2,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 11,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688540988/reactions"
      },
      "updated_at" : "2023-08-22T16:26:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688540988",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3165891?v=4",
         "events_url" : "https://api.github.com/users/psztorc/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psztorc/followers",
         "following_url" : "https://api.github.com/users/psztorc/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psztorc/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psztorc",
         "id" : 3165891,
         "login" : "psztorc",
         "node_id" : "MDQ6VXNlcjMxNjU4OTE=",
         "organizations_url" : "https://api.github.com/users/psztorc/orgs",
         "received_events_url" : "https://api.github.com/users/psztorc/received_events",
         "repos_url" : "https://api.github.com/users/psztorc/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psztorc/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psztorc/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psztorc"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> I want to see a more 'trustless' method of pegouts\r\n\r\nwhat exactly do you mean by trustless? what can be more trustless than hash-rate escrow? After years of research, all other approaches rely on actual centralized custodians like liquid does. Hash rate escrow leverages the assumption that sha256 hash rate is sufficiently distributed for bitcoin censorship resistance properties. \r\n",
      "created_at" : "2023-08-22T19:21:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688790502",
      "id" : 1688790502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kqOXm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 5,
         "-1" : 2,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 7,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688790502/reactions"
      },
      "updated_at" : "2023-08-22T19:46:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688790502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/777326?v=4",
         "events_url" : "https://api.github.com/users/jaybny/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaybny/followers",
         "following_url" : "https://api.github.com/users/jaybny/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaybny/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaybny",
         "id" : 777326,
         "login" : "jaybny",
         "node_id" : "MDQ6VXNlcjc3NzMyNg==",
         "organizations_url" : "https://api.github.com/users/jaybny/orgs",
         "received_events_url" : "https://api.github.com/users/jaybny/received_events",
         "repos_url" : "https://api.github.com/users/jaybny/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaybny/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaybny"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1302103707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1302103707"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree. I'm not sure what the intent is for it. It seems to be based on a mistaken assumption that serialized bytes are a resource to minimise. But for now, this implements [most of] the current BIP draft.",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-08-22T19:32:30Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1302103707",
      "id" : 1302103707,
      "in_reply_to_id" : 1301663764,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII585NnIab",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 102,
      "pull_request_review_id" : 1590185947,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1302103707/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-22T19:32:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1302103707",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Meta Approach ACK - i like the approach of developing an implementation, independent of the concept ack/nack \r\n\r\nhaving said that, regarding the concept.. We need to be laser focused (no pun intended) on scaling bitcoins utxo p2p money utility, and while the idea of a 2way peg sidechains using hash rate escrow via `bip300` is one such solution, (in addition to larger block size,` bip119` and other covenants), the abstract bling merged mining in `bip301`, opens bitcoin incentives to things other than p2p money bitcoin. \r\n\r\nthe solution here is to \"_limit_\" sidechains to the p2p money utility. this will keep miner incentives as is, and scale bitcoin with bitcoin script. such a solution can be achieved, but first requires this explicit social consensus intent and explicit designer and implementor intent. \r\n\r\nwith such intent in place, the miners _Nash_ equilibrium is to follow intent, due to the implied `UASF` which already implicitly secures `bip300` in the first place. ",
      "created_at" : "2023-08-22T19:45:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1688825978",
      "id" : 1688825978,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kqXB6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 4,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 6,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688825978/reactions"
      },
      "updated_at" : "2023-08-22T19:45:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688825978",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/777326?v=4",
         "events_url" : "https://api.github.com/users/jaybny/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaybny/followers",
         "following_url" : "https://api.github.com/users/jaybny/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaybny/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaybny",
         "id" : 777326,
         "login" : "jaybny",
         "node_id" : "MDQ6VXNlcjc3NzMyNg==",
         "organizations_url" : "https://api.github.com/users/jaybny/orgs",
         "received_events_url" : "https://api.github.com/users/jaybny/received_events",
         "repos_url" : "https://api.github.com/users/jaybny/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaybny/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaybny"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Cheemsburger ACK!",
      "created_at" : "2023-08-23T16:11:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1690244473",
      "id" : 1690244473,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585kvxV5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 1,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1690244473/reactions"
      },
      "updated_at" : "2023-08-23T16:11:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1690244473",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/138122743?v=4",
         "events_url" : "https://api.github.com/users/CheemsCommander/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CheemsCommander/followers",
         "following_url" : "https://api.github.com/users/CheemsCommander/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CheemsCommander/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CheemsCommander",
         "id" : 138122743,
         "login" : "CheemsCommander",
         "node_id" : "U_kgDOCDuV9w",
         "organizations_url" : "https://api.github.com/users/CheemsCommander/orgs",
         "received_events_url" : "https://api.github.com/users/CheemsCommander/received_events",
         "repos_url" : "https://api.github.com/users/CheemsCommander/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CheemsCommander/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CheemsCommander/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CheemsCommander"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "NACK.  I say NJET, NADA, NIENTE, NOPE, NO, ããã  I quote @__B__T__C__  \"... the miners mine on the layer based & hold it & the users get some shit tokens or shit coins on the drive... \"  personally I totally agree with Pete Todd This BIP300 should not be accepted for several reasons.  Another reason, the rewards system looks like a pyramid scheme if this get through.  This will have technical, legal and ethical implications.  This is a trojan horse code injection to fundamental things of bitcoin.  And yes, belief what You want who I am.  Satoshin",
      "created_at" : "2023-08-29T18:11:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1697913869",
      "id" : 1697913869,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lNBwN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697913869/reactions"
      },
      "updated_at" : "2023-08-29T18:31:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697913869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16897964?v=4",
         "events_url" : "https://api.github.com/users/aceofbitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aceofbitcoin/followers",
         "following_url" : "https://api.github.com/users/aceofbitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aceofbitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aceofbitcoin",
         "id" : 16897964,
         "login" : "aceofbitcoin",
         "node_id" : "MDQ6VXNlcjE2ODk3OTY0",
         "organizations_url" : "https://api.github.com/users/aceofbitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/aceofbitcoin/received_events",
         "repos_url" : "https://api.github.com/users/aceofbitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aceofbitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aceofbitcoin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aceofbitcoin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Look drivechains are good for only a couple of things such as security, and\r\ndeploying a token possibly while being backed by Bitcoin. It's not a good\r\nidea as a side chain to run simultaneously because it would slow\r\ntransactions as well as screw with the parsing and verification. How ever\r\ncreating a personal drive chain can add a layer of security but can be\r\nmessed up if you don't pay attention to how the drive chain is configured.\r\n\r\nOn Mon, Aug 21, 2023, 6:20 PM Luke Dashjr ***@***.***> wrote:\r\n\r\n> This is a (rough draft) clean rewrite of BIP300 (Drivechain)\r\n> consensus-level code.\r\n>\r\n> Instead of a separate sidechain database (which may be prone to\r\n> hard-to-review/test consistency issues), instead the unusable 8 MSB of the\r\n> UTXO index are reserved for non-UTXO database entries, and the existing\r\n> UTXO db and caching layer is shared. This can be refactored in the future,\r\n> but I think it is the cleanest and most reviewable approach initially -\r\n> open to other ideas, though. There's also some ugliness in the undo data to\r\n> handle restoring the new data, but it's abstracted and shouldn't be too\r\n> hard to reason about.\r\n>\r\n> Using these new primitives, Drivechains can be reimplemented with a\r\n> UTXO-like model. Note that there is zero activation logic in the current\r\n> PR: the protocol changes are *always* active. Therefore, this will *not*\r\n> work (at least not safely) on Bitcoin today, and cannot be deployed without\r\n> significant additional changes to handle an activation.\r\n>\r\n> A new SERIALIZE_TRANSACTION_FOR_WEIGHT serialization flag is also added,\r\n> that is meant only for weight counting. This allows for adjusting weight\r\n> (upward) to fit additional resource requirements by new functionality. In\r\n> this case, several Drivechain \"messages\" are expected to have a larger\r\n> burden than their OP_RETURN encoding would otherwise weigh. However, the\r\n> specific adjustments are not implemented in this draft.\r\n>\r\n> As a consensus change, this can only be implemented with community\r\n> support. Many people seem to have opinions, but please keep them to other\r\n> forums. Despite providing and continuing this implementation, I myself do\r\n> not thereby endorse or otherwise comment on the proposal itself.\r\n>\r\n> Therefore, not looking for concept ACKs/NACKs, just *Approach* ACKs /\r\n> constructive criticism.\r\n> ------------------------------\r\n> You can view, comment on, or merge this pull request online at:\r\n>\r\n>   https://github.com/bitcoin/bitcoin/pull/28311\r\n> Commit Summary\r\n>\r\n>    - 7ee7f6e\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/7ee7f6e615e55f94c6f1453ed8a7cd6c2c30c623>\r\n>    dbwrapper: Restore `CDBIterator::GetValueSize()`\r\n>    - bc6a2e1\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/bc6a2e14b380906ce3eb7db28ac3e1d05bf0ec4c>\r\n>    txdb: Support for flags which prevent opening with incompatible software\r\n>    - e0a51eb\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/e0a51ebde49fb37ca5baa3cfd129b5d8b0dab605>\r\n>    Hide COutPoint with n > 0x00ffffff from consensus/transaction handling\r\n>    - df2c012\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/df2c01207f1ba1bd93492e3d00b6e84015f36278>\r\n>    WIP Drivechain via UTXOs\r\n>    - eca69c4\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/eca69c4affeb26ee6f596f96ed51b667d08cdf7f>\r\n>    primitives/transaction: Implement CTxIn::SetNull\r\n>    - d4eb444\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/d4eb444f6ba630f0ef009999b73282c5068ef4fd>\r\n>    Implement OP_DRIVECHAIN-based sidechain deposits/withdraws\r\n>    - 2493b15\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/2493b15cb096393789932c7ca2370fe8cfb310f3>\r\n>    Add SERIALIZE_TRANSACTION_FOR_WEIGHT flag\r\n>    - ecd75f5\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/ecd75f55cfefdd441bc1505208cfc5b6da5ce035>\r\n>    primitives/transaction: Stub weight increases for drivechains\r\n>    - 4c02190\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/4c02190487910c416ab3423213e867d26dbbd83f>\r\n>    sidechain: Expire sidechain/withdraw proposals\r\n>    - 04783a9\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/04783a9b0f7376dd1d2aa6aa05f4ba8dccd70df2>\r\n>    fixups, simplify record_id confusion in various places\r\n>    - d886713\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/d88671327a869f03a3eec82c891c45d6e2f1b9d9>\r\n>    sidechain: Hash blinded withdraw hashes with the sidechain id to avoid\r\n>    conflicts\r\n>    - 7c8d7e2\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/7c8d7e2d65f3601b6b859698cec85cd667c1ed49>\r\n>    sidechain: INCOMPLETE sidechain activation\r\n>    - f544581\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/f54458150cd27343f8842b4fe50953d4c341b7f5>\r\n>    fixups, cast changes to avoid narrowing conversion warnings\r\n>    - 2192ba1\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/2192ba123d283fee199ed59a240a2ab80275240e>\r\n>    sidechain: Detect several invalid conditions\r\n>    - ff9815a\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/ff9815a98da2c1f4dbdd9c75295b0650e9b19101>\r\n>    Add push1[sidechain id] OP_TRUE after OP_DRIVECHAIN\r\n>    - ea8c1a9\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/ea8c1a960445bd2529e39d58b00be136ccdf34d9>\r\n>    sidechain: Setup DBIDX_SIDECHAIN_CTIP_INFO\r\n>    - afc975b\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/commits/afc975bb6029e982e2bd5420d18e7ca0d4f4413e>\r\n>    sidechain: Detect more edge cases and document TODOs\r\n>\r\n> File Changes\r\n>\r\n> (23 files <https://github.com/bitcoin/bitcoin/pull/28311/files>)\r\n>\r\n>    - *M* src/Makefile.am\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-4cb884d03ebb901069e4ee5de5d02538c40dd9b39919c615d8eaa9d364bbbd77>\r\n>    (3)\r\n>    - *M* src/coins.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-f0ed73d62dae6ca28ebd3045e5fc0d5d02eaaacadb4c2a292985a3fbd7e1c77c>\r\n>    (24)\r\n>    - *M* src/coins.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-095ce1081a930998a10b37358fae5499ac47f8cb6f25f5df5d88e920a54e0341>\r\n>    (26)\r\n>    - *M* src/consensus/validation.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-829bb21fff2a0d0648adb348a52928b2227f1cd05a54f44ce78d84091f8060d4>\r\n>    (6)\r\n>    - *M* src/dbwrapper.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-44bef8fa93d168379ef331d9e11d333be06ce98a8f37ec65f8a987846b90a151>\r\n>    (5)\r\n>    - *M* src/dbwrapper.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-ac5fbeb5de6f28370bc348a579fc465fe7f7b91df0e0483c6edbf10273278c0d>\r\n>    (3)\r\n>    - *M* src/primitives/transaction.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-32f83e93b123235079fbadc3f68f8158c56c67d031a579475e16c6857edbecbf>\r\n>    (30)\r\n>    - *M* src/rpc/blockchain.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0b>\r\n>    (1)\r\n>    - *M* src/script/interpreter.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-a0337ffd7259e8c7c9a7786d6dbd420c80abfa1afdb34ebae3261109d9ae3c19>\r\n>    (2)\r\n>    - *M* src/script/script.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-6da39bed8a76fcaae51f021f0cdd906748aa99fdbf2d41981947f6a1b18fbe7b>\r\n>    (11)\r\n>    - *M* src/script/script.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-93c5ddf703879287802d651b68c9c6199644afe23db0dd3ff77e8d1ce3c20045>\r\n>    (4)\r\n>    - *A* src/sidechain.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-068cca671b293f3ee6f24c0a950c8357fc42518631e8409876c810da7c03ebb9>\r\n>    (466)\r\n>    - *A* src/sidechain.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-c5edaee37a176f59597dc09ce65d926090bca357709bcfd7466f4c239ceb5d6c>\r\n>    (65)\r\n>    - *M* src/test/coins_tests.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-3d0856e8b7f136c588b229e0cbd3b2e2c309cd097ade0879521daba4e1bb2a33>\r\n>    (29)\r\n>    - *M* src/test/fuzz/coins_view.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-1ef3b6a1936b50f3d5ec4a1786d9e2d63d1a3e1815b103e67f20601995f355b4>\r\n>    (14)\r\n>    - *M* src/test/fuzz/coinscache_sim.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-a8f78513bc27f9bf679eead54819a8e5be720401c6ae40858da226a66ca002e2>\r\n>    (10)\r\n>    - *M* src/test/fuzz/tx_pool.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-07fe07ecfff4dd7c233a453006567140ff20d226fd73a20406df14982b1e415b>\r\n>    (2)\r\n>    - *M* src/txdb.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-cafbe1353eff6084b73fd3b6c3dee603e0827348fdd2fe12dfad1e01003a84ed>\r\n>    (36)\r\n>    - *M* src/txdb.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-d102b6032635ce90158c1e6e614f03b50e4449aa46ce23370da5387a658342fd>\r\n>    (6)\r\n>    - *M* src/txmempool.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-c065d4cd2398ad0dbcef393c5dfc53f465bf44723348892395fffd2fb3bac522>\r\n>    (4)\r\n>    - *M* src/txmempool.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-8a2230436880b65a205db9299ab2e4e4adb1d4069146791b5db566f3fb752ada>\r\n>    (2)\r\n>    - *M* src/undo.h\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-75c400fd71ce89e9dab36f9fc4d079746981836b474c2e868135c37eb5139555>\r\n>    (2)\r\n>    - *M* src/validation.cpp\r\n>    <https://github.com/bitcoin/bitcoin/pull/28311/files#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98>\r\n>    (51)\r\n>\r\n> Patch Links:\r\n>\r\n>    - https://github.com/bitcoin/bitcoin/pull/28311.patch\r\n>    - https://github.com/bitcoin/bitcoin/pull/28311.diff\r\n>\r\n> â\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bitcoin/bitcoin/pull/28311>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AORL367L5NQUE7TACLIEHOTXWQCODANCNFSM6AAAAAA3ZE4L3M>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n",
      "created_at" : "2023-08-29T18:34:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1697942392",
      "id" : 1697942392,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lNIt4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697942392/reactions"
      },
      "updated_at" : "2023-08-29T18:34:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697942392",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/60997115?v=4",
         "events_url" : "https://api.github.com/users/Satoshin-Btc/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Satoshin-Btc/followers",
         "following_url" : "https://api.github.com/users/Satoshin-Btc/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Satoshin-Btc/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Satoshin-Btc",
         "id" : 60997115,
         "login" : "Satoshin-Btc",
         "node_id" : "MDQ6VXNlcjYwOTk3MTE1",
         "organizations_url" : "https://api.github.com/users/Satoshin-Btc/orgs",
         "received_events_url" : "https://api.github.com/users/Satoshin-Btc/received_events",
         "repos_url" : "https://api.github.com/users/Satoshin-Btc/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Satoshin-Btc/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Satoshin-Btc/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Satoshin-Btc"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@luke-jr @petertodd As someone that can claim to be your technical peer and with experience in consensus development, I would appreciate if you can publish on the communication space of your convenience the contractual commitment excerpts linking your work on drivechain to the proposal authors themselves . The amount and all personal matters are no public business, though at the very least I hope you have minimal provisions protecting the autonomy of your creative work or ensuring the intellectual outcome respect FOSS licenses.\r\n\r\nWith all my respect, Iâm not questioning the legitimacy as an independent technical expert who has accumulated years of hard works of being paid to offer a grounded and in-depth technical opinion on a subject in the scope of its competence. Here Iâm just asking for transparency on potential conflict of interest that one would request in all walk of life (law, health, energy) when experts are expressing themselves on a complex subject with potential large-scale and serious impact on the end-users (financial) life.\r\n\r\nPersonally, I have the competence and knowledge to evaluate the proposal both in code and its associated documentation without relying on âdomain expertsâ, though I think other folks in the community would appreciate the ethical effort. \r\n\r\nI understand itâs delicate as a remark though as Rusty Russell [observed](https://rusty-lightning.medium.com/the-corrosion-of-ethics-in-cryptocurrencies-f7ba77e9dfc3) a while back in matters of open-source cryptocurrency development ethics, weâre keeping each other in check as peers. Iâve been in the same situation early last year when Iâve been approached to do a paid security review of the CTV soft-fork and I politely declined. My professional policy for years have been to decline any work commitment related to consensus changes to preserve the independence of my views.\r\n\r\nIf you would like feedback on how to construct ethically and legally such agreement, Iâm staying available out of band to provide my viewpoint and relevant information. I donât think the discussion is appropriate for the GH repository. Iâm staying available to discuss the ethics and ideal development process of consensus changes on the mailing list or other forum of discussions. As a community, I think weâre still paying the trauma of a group of Bitcoin dev experts raising millions in VC-funding almost a decade ago to promise new technology and corresponding consensus changes and finding themselves in a massive situation of conflict of interests with the rest of the ecosystem, whatever the great achievements they have realized on a lot of significant fronts.",
      "created_at" : "2023-08-29T18:51:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1697964685",
      "id" : 1697964685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lNOKN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697964685/reactions"
      },
      "updated_at" : "2023-08-29T18:51:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697964685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> This is a (rough draft) clean rewrite of BIP300 (Drivechain) consensus-level code.\r\n> \r\n> Instead of a separate sidechain database (which may be prone to hard-to-review/test consistency issues), instead the unusable 8 MSB of the UTXO index are reserved for non-UTXO database entries, and the existing UTXO db and caching layer is shared. This can be refactored in the future, but I think it is the cleanest and most reviewable approach initially - open to other ideas, though. There's also some ugliness in the undo data to handle restoring the new data, but it's abstracted and shouldn't be too hard to reason about.\r\n> \r\n> Using these new primitives, Drivechains can be reimplemented with a UTXO-like model. Note that there is zero activation logic in the current PR: the protocol changes are _always_ active. Therefore, this will _not_ work (at least not safely) on Bitcoin today, and cannot be deployed without significant additional changes to handle an activation.\r\n> \r\n> A new `SERIALIZE_TRANSACTION_FOR_WEIGHT` serialization flag is also added, that is meant only for weight counting. This allows for adjusting weight (upward) to fit additional resource requirements by new functionality. In this case, several Drivechain \"messages\" are expected to have a larger burden than their `OP_RETURN` encoding would otherwise weigh. However, the specific adjustments are not implemented in this draft.\r\n> \r\n> As a consensus change, this can only be implemented with community support. Many people seem to have opinions, but please keep them to other forums. Despite providing and continuing this implementation, I myself do not thereby endorse or otherwise comment on the proposal itself.\r\n> \r\n> Therefore, not looking for concept ACKs/NACKs (ie, about Drivechains), just _Approach_ ACKs / constructive criticism (ie, about _how_ I'm implementing it).\r\n\r\nNACK, concept, approach, all. IMV Bitcoin is NOT made for the BIP/PR mania, Core Devs profit absolutely from. Any Core Devs, are by definition, not the ones to decide anything due to lack of exemption as service providers in Bitcoin, not unbiased customers/node operators(the only unbiased who must decide about their OWN property). It is for long been that Devs keep pushing node operators out of the decisions that belong solely to them as owners of Bitcoin, NOT to Devs, NOT to miners. Instead of coding every time an OPTION in full nodes software to allow (UN)SUPPORT for each non-stop new BIP/PR mania non-bug fixing CHANGE to Bitcoin, they discretely discuss things in a 'only for the experts central Hub' environment, like this one in GitHub and less user friendly, MS-DOS/command prompt like and as geeky as possible, JUST LIKE ALTCOINERS DID when inventing a lot of weird new jargon for things that always existed, so that all the idiots could eat their very shady technical jargon in speculative marvel and fiat dollar signs in their eyes.",
      "created_at" : "2023-08-29T20:06:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1698057367",
      "id" : 1698057367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lNkyX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698057367/reactions"
      },
      "updated_at" : "2023-08-29T20:06:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698057367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/111360343?v=4",
         "events_url" : "https://api.github.com/users/RicYashiroLee/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RicYashiroLee/followers",
         "following_url" : "https://api.github.com/users/RicYashiroLee/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RicYashiroLee/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RicYashiroLee",
         "id" : 111360343,
         "login" : "RicYashiroLee",
         "node_id" : "U_kgDOBqM5Vw",
         "organizations_url" : "https://api.github.com/users/RicYashiroLee/orgs",
         "received_events_url" : "https://api.github.com/users/RicYashiroLee/received_events",
         "repos_url" : "https://api.github.com/users/RicYashiroLee/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RicYashiroLee/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RicYashiroLee/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RicYashiroLee"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I emphatically do not support this Pull request.",
      "created_at" : "2023-08-29T20:17:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1698069523",
      "id" : 1698069523,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lNnwT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698069523/reactions"
      },
      "updated_at" : "2023-08-29T20:17:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698069523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/55191248?v=4",
         "events_url" : "https://api.github.com/users/curly60e/events{/privacy}",
         "followers_url" : "https://api.github.com/users/curly60e/followers",
         "following_url" : "https://api.github.com/users/curly60e/following{/other_user}",
         "gists_url" : "https://api.github.com/users/curly60e/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/curly60e",
         "id" : 55191248,
         "login" : "curly60e",
         "node_id" : "MDQ6VXNlcjU1MTkxMjQ4",
         "organizations_url" : "https://api.github.com/users/curly60e/orgs",
         "received_events_url" : "https://api.github.com/users/curly60e/received_events",
         "repos_url" : "https://api.github.com/users/curly60e/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/curly60e/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/curly60e/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/curly60e"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Liquid Network, SLP, Omni Layer... what differentiates this one?  \r\n\r\nOther than making bitcoin explicity a security.  Not based on the Howey test, the Howey test is not a law.\r\n\r\nUnder Section 4 of the Securities Act this would make bitcoin a non-compliant regulated private security.  And the layer 2 operators technically breaking AMLD5.  Lots of people are getting away with it right now though so it might be fine.\r\n",
      "created_at" : "2023-08-29T21:25:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1698166558",
      "id" : 1698166558,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lN_ce",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698166558/reactions"
      },
      "updated_at" : "2023-08-29T21:25:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698166558",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48937881?v=4",
         "events_url" : "https://api.github.com/users/amritabithi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amritabithi/followers",
         "following_url" : "https://api.github.com/users/amritabithi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amritabithi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amritabithi",
         "id" : 48937881,
         "login" : "amritabithi",
         "node_id" : "MDQ6VXNlcjQ4OTM3ODgx",
         "organizations_url" : "https://api.github.com/users/amritabithi/orgs",
         "received_events_url" : "https://api.github.com/users/amritabithi/received_events",
         "repos_url" : "https://api.github.com/users/amritabithi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amritabithi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amritabithi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amritabithi"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Approach NACK.  Also the promotor does block people who debate on this issue on twitter.  If You propose a BIP You defend it with arguments, not with money and propaganda.  This proposal paves the way to abuse the reward system.  People who contribute to mine bitcoin have the right to receive real bitcoin not some reward on a sidechain.  And what happens if the sidechain gets issues with the mainchain to merge etc.  This idea is totally unsafe and my eye is on stratum.",
      "created_at" : "2023-08-30T06:21:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1698560268",
      "id" : 1698560268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lPfkM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698560268/reactions"
      },
      "updated_at" : "2023-08-30T06:21:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698560268",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39158975?v=4",
         "events_url" : "https://api.github.com/users/amtriorix/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amtriorix/followers",
         "following_url" : "https://api.github.com/users/amtriorix/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amtriorix/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amtriorix",
         "id" : 39158975,
         "login" : "amtriorix",
         "node_id" : "MDQ6VXNlcjM5MTU4OTc1",
         "organizations_url" : "https://api.github.com/users/amtriorix/orgs",
         "received_events_url" : "https://api.github.com/users/amtriorix/received_events",
         "repos_url" : "https://api.github.com/users/amtriorix/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amtriorix/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amtriorix/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amtriorix"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I thought that this part was admirably clear:\n\n> Many people seem to have opinions, but please keep them to other forums. Despite providing and continuing this implementation, I myself do not thereby endorse or otherwise comment on the proposal itself.\n> \n> Therefore, not looking for concept ACKs/NACKs (ie, about Drivechains), just Approach ACKs / constructive criticism (ie, about how I'm implementing it).\n\nThis area is for discussing the Approach/Implementation. Everything else is off-topic.\n\nAny skeptics or opponents of DC should at least pretend to want to see a real implementation, before dismissing it. After all, pre-implementation the idea is inherently unfinished.",
      "created_at" : "2023-08-30T07:09:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1698616829",
      "id" : 1698616829,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lPtX9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698616829/reactions"
      },
      "updated_at" : "2023-08-30T07:09:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698616829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3165891?v=4",
         "events_url" : "https://api.github.com/users/psztorc/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psztorc/followers",
         "following_url" : "https://api.github.com/users/psztorc/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psztorc/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psztorc",
         "id" : 3165891,
         "login" : "psztorc",
         "node_id" : "MDQ6VXNlcjMxNjU4OTE=",
         "organizations_url" : "https://api.github.com/users/psztorc/orgs",
         "received_events_url" : "https://api.github.com/users/psztorc/received_events",
         "repos_url" : "https://api.github.com/users/psztorc/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psztorc/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psztorc/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psztorc"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@psztorc\r\n\r\n> This area is for discussing the Approach/Implementation. Everything else is off-topic.\r\n\r\nThere is an uncertainty on the open-source status of the technical contributions due to the apparent mode of financial compensation of the \"champions\" developers, among other issues. While this might be acceptable for a lot of contributions in other areas of the Bitcoin ecosystem, here we're talking about consensus changes in a $500B ecosystem, any exposure due to uncertain license on key components might taint the rest of the open-source Bitcoin software. I think we've already enough issues with CSW lawsuits from now on to minimize the legal exposure of all ecosystem stakeholders, in my reasonable opinion.\r\n\r\nThis type of discussion happens, among other forums, on the Github repository. E.g #28175.\r\n\r\n> Any skeptics or opponents of DC should at least pretend to want to see a real implementation, before dismissing it. After all, pre-implementation the idea is inherently unfinished.\r\n\r\nI've never seen any Bitcoin Core commit or substantial review on delicate critical components realized under your pseudonym, or even substantial technical contributions on deployed and with real-world usage multi-party applications or contracting protocols (e.g payment channels), so I don't know your level of understanding of the Bitcoin network, protocols architecture and ecosystem. Even when an idea is fully fleshed out in code and once it deployed you have unmeasurable security, safety and compatibility maintenance costs beared by the whole ecosystem ad vitam aeternam (i.e\r\nas long as Bitcoin is around for the next decaces/centuries hopefully). Additionally, it also increases the development cost on all the affected Bitcoin systems: miner stack, mempool and transaction-relay, lightning, vaults, data carriage cost as investigating for the lack or the finding of potentially harmful interactions due to modified miner incentives is a very high technical bar.\r\n\r\nPersonally, I don't have strong technical opinion on DC / sidechains, as with any complex technical matter this is far from being a \"binary\" subject. All I know is we're Aug 30 (depending your timezone) and there is far enough hard technical issues to review and test for the coming year (package relay, assumeutxo, libitcoinkernel, bip324, _maybe maybe_ APO, transaction-relay policy improvement for data carriage usage). Speaking for myself and myself only, this is not worthy to allocate high-caliber technical review time (in a pure FOSS fashion without financial compensation to preserve independence of my judgement) on a consensus changes project with that level of uncertainty in its development process, at the very least until next year Aug 30 2024. By then, I hope project champions will have clarified the development and technical evaluation process of DC.\r\n\r\nIf you would like to discuss in depth the ethics of Bitcoin consensus changes, what lessons can be sketched out from the failed activation of CTV by its champion Jeremy Rubin last year or the best development practices of critical Bitcoin components, I'm staying available to discuss it during in person at a panel or another public format at a Bitcoin conference during the coming years.",
      "created_at" : "2023-08-30T15:56:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1699442534",
      "id" : 1699442534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lS29m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699442534/reactions"
      },
      "updated_at" : "2023-08-30T15:56:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699442534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> There is an uncertainty on the open-source status...\r\n\r\nNot to me. The source code is in the pull request.\r\n\r\n> ....due to the apparent mode of financial compensation of the \"champions\" developers\r\n\r\nYou are referring to *disclosed* financial compensation, only. But everyone here may have undisclosed financial compensation, including [you](https://blog.okcoin.com/okcoin-bitcoin-developer-grant-antoine-riard/). Plus, we all own different amounts of Bitcoin.\r\n\r\nThe appropriate way to handle such un-resolv-able issues, is to discuss the idea on its merits only.\r\n\r\n>  I think we've already enough issues with CSW lawsuits \r\n\r\nFYI I personally donated thousands of $ to fight such lawsuits, some of which provably so -- in public at Bitcoin events.\r\n\r\n> Speaking for myself and myself only, this is not worthy to allocate high-caliber technical review time\r\n\r\nWhy not speak openly, of whatever is really on your mind? Clearly we don't expect a review from every single person on Earth -- as you must know. So either say whatever it is you want to say, or go back to reviewing whatever you think is important.",
      "created_at" : "2023-08-30T18:02:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1699618656",
      "id" : 1699618656,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lTh9g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699618656/reactions"
      },
      "updated_at" : "2023-08-30T18:02:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699618656",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3165891?v=4",
         "events_url" : "https://api.github.com/users/psztorc/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psztorc/followers",
         "following_url" : "https://api.github.com/users/psztorc/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psztorc/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psztorc",
         "id" : 3165891,
         "login" : "psztorc",
         "node_id" : "MDQ6VXNlcjMxNjU4OTE=",
         "organizations_url" : "https://api.github.com/users/psztorc/orgs",
         "received_events_url" : "https://api.github.com/users/psztorc/received_events",
         "repos_url" : "https://api.github.com/users/psztorc/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psztorc/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psztorc/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psztorc"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > There is an uncertainty on the open-source status...\r\n> \r\n> Not to me. The source code is in the pull request.\r\n\r\nAnyone who can read your code can see this is pretty dangerous for bitcoin.\r\n\r\nBitcoin is not only about the award system for miners.  In future mining will be done for a big part by pools.\r\nCreating drivechains and give them the possibility to create their own chain, pegged on the mainchain,\r\ncan create huge legal implications.  Pools can also ask contributing miners to cooperate, give them a reward\r\non their sidechain but hodl the bitcoin for themselves.  Then about voting.  A minority of them can just push changes\r\nthrough on their chain.  This is pretty much centralisation.\r\n\r\nYou are clearly affiliated with RogerVer having bitcoincash.  Well You have another path to go with this altcoin imo\r\n\r\n> \r\n> > ....due to the apparent mode of financial compensation of the \"champions\" developers\r\n> \r\n> You are referring to _disclosed_ financial compensation, only. But everyone here may have undisclosed financial compensation, including [you](https://blog.okcoin.com/okcoin-bitcoin-developer-grant-antoine-riard/). Plus, we all own different amounts of Bitcoin.\r\n> \r\n> The appropriate way to handle such un-resolv-able issues, is to discuss the idea on its merits only.\r\n> \r\n> > I think we've already enough issues with CSW lawsuits\r\n> \r\n> FYI I personally donated thousands of $ to fight such lawsuits, some of which provably so -- in public at Bitcoin events.\r\n\r\nThis is not a free ticket or a BUY IN so to speak to push your own agenda through the bitcoin core project.\r\nBitcoin is not for sale it is an open source project.  Refering to this can be translated as, look I donated in the defensive\r\ncase against faketoshi CSW.\r\n\r\nWe all know that Craig Wright does hoax.  Clearly not Satoshi Nakamoto, because he lacks not only the technical skills but also he has NO SINGLE private key related to the genesisblock (block 0), block 1 and not even the PGP key.  \r\nSigning is key.  And he has for sure not the mentality of an open source developer...\r\n\r\nIt was very generous of You to help that teacher in the trails seen he was clearly bullied by CSW who's intention is clearly to grab income from legal pursuits, while the same time he seems not to pay his lawyers or when he loses his case.\r\nThat all is possible in the UK, maybe the USA, but I want to see that happen in West-Europe...\r\n\r\nBut that does not mean You can push through, imo, a pretty dirty hack to centralise bitcoin, to peg on the blockchain and to leak away bitcoin in a sidechain.\r\n\r\nThat is like to use a cherry trunk, branch other fruit on it...when the fruit is rotten or the branch is rot....cut.\r\nAnd those on the branch end up with a trash reward...\r\n\r\nEveryone can fork bitcoin and create their own altcoin.  But to create drivechains, to have indirectly an altcoin,\r\nown rules, own power, own votes, piggy backing on bitcoin...until there is a huge issue and they will all claim. it's bitcoin core that made the error.... I am totally against that idea\r\n\r\n\r\n> \r\n> > Speaking for myself and myself only, this is not worthy to allocate high-caliber technical review time\r\n> \r\n> Why not speak openly, of whatever is really on your mind? Clearly we don't expect a review from every single person on Earth -- as you must know. So either say whatever it is you want to say, or go back to reviewing whatever you think is important.\r\n\r\nFirst **Stratum** improvement....  \r\n\r\nBTW why all those people like You want always change things and 'improve' things?!  Currently bitcoin is safe, robust and all those new idea's clearly not well thought through, experimental, **unsafe** like Peter Todd said, we can miss this totally.\r\n\r\nPersonally I also see this as a very dangerous way to ruin bitcoin.  I explain in detail.\r\n\r\nAnd I quote Satoshi (whatever you think about this claim, and it's not CSW)\r\n\r\n_They can create a #drivechain, convince, force (by law) people to move their bitcoin to the sidechain.  Now their terms.  That's like creating fiat backed by gold so to speak, an altcoin or CBDC.  Then force people by law or defacto to use theirs ?!_\r\n\r\nBTW You did block that account on twitter, i hope there will be no digital sign or You will look like a...,  including a big amount of people inside the bitcoin  community. You push like a merchant with full force propaganda your idea...\r\nMany did state already...this is stinky.\r\n\r\nSo is your purpose to leak out bitcoin to a sidechain to finally have your own terms, control, tracking, whatever?\r\nThis is IMO a major attack (again) on bitcoin just like the blocksize war was, reason Satoshi did revoke his repo key at that time, if nobody did notice.\r\n\r\nI warn you personnally, if bitcoin is again attacked in such way, some will not deal with the ridiculous claims of\r\nCraig Wright but You will have your answer in text SIGNED with the genesis block. And when this need to happen,\r\nyou and those people should provide a huge budget to defend their case because the whale wallet of the early blocks is pretty useful in such case to defend bitcoin.\r\n\r\n**Bitcoin is not to hijack for commercial reasons**, to soft or hard fork in a centralised solution **to finally leak out bitcoin** to an alternative form of an altcoin, but now on a drivechain.\r\n\r\nThanks for your proposal but my vote is, as you know, **NACK** including the one of Ace of Bitcoin You did block btw.\r\n\r\nBtw when You mine have a full node... **`bitcoin-cli -generate 1 2147483647`**\r\n\r\n\r\n\r\n\r\n",
      "created_at" : "2023-08-31T12:06:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1700913429",
      "id" : 1700913429,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lYeEV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 2,
         "heart" : 2,
         "hooray" : 2,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 9,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1700913429/reactions"
      },
      "updated_at" : "2023-08-31T12:46:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1700913429",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39158975?v=4",
         "events_url" : "https://api.github.com/users/amtriorix/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amtriorix/followers",
         "following_url" : "https://api.github.com/users/amtriorix/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amtriorix/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amtriorix",
         "id" : 39158975,
         "login" : "amtriorix",
         "node_id" : "MDQ6VXNlcjM5MTU4OTc1",
         "organizations_url" : "https://api.github.com/users/amtriorix/orgs",
         "received_events_url" : "https://api.github.com/users/amtriorix/received_events",
         "repos_url" : "https://api.github.com/users/amtriorix/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amtriorix/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amtriorix/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amtriorix"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "How do I run/test on my local machine using local chain ? ",
      "created_at" : "2023-08-31T12:32:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1700949928",
      "id" : 1700949928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lYm-o",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1700949928/reactions"
      },
      "updated_at" : "2023-08-31T12:32:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1700949928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/96443776?v=4",
         "events_url" : "https://api.github.com/users/krisgrm/events{/privacy}",
         "followers_url" : "https://api.github.com/users/krisgrm/followers",
         "following_url" : "https://api.github.com/users/krisgrm/following{/other_user}",
         "gists_url" : "https://api.github.com/users/krisgrm/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/krisgrm",
         "id" : 96443776,
         "login" : "krisgrm",
         "node_id" : "U_kgDOBb-dgA",
         "organizations_url" : "https://api.github.com/users/krisgrm/orgs",
         "received_events_url" : "https://api.github.com/users/krisgrm/received_events",
         "repos_url" : "https://api.github.com/users/krisgrm/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/krisgrm/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/krisgrm/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/krisgrm"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> How do I run/test on my local machine using local chain ?\r\n* https://layertwolabs.com/download\r\n* https://github.com/LayerTwo-Labs/bitcoin/tree/drivechain",
      "created_at" : "2023-08-31T13:06:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701006485",
      "id" : 1701006485,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lY0yV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701006485/reactions"
      },
      "updated_at" : "2023-08-31T13:12:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701006485",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1982447?v=4",
         "events_url" : "https://api.github.com/users/JackJin2014/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JackJin2014/followers",
         "following_url" : "https://api.github.com/users/JackJin2014/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JackJin2014/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JackJin2014",
         "id" : 1982447,
         "login" : "JackJin2014",
         "node_id" : "MDQ6VXNlcjE5ODI0NDc=",
         "organizations_url" : "https://api.github.com/users/JackJin2014/orgs",
         "received_events_url" : "https://api.github.com/users/JackJin2014/received_events",
         "repos_url" : "https://api.github.com/users/JackJin2014/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JackJin2014/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JackJin2014/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JackJin2014"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "But the code here is a new implementation of the same thing ? I'd like to\r\nrun both and compare\r\n\r\nOn Thu, Aug 31, 2023, 15:07 JackJin ***@***.***> wrote:\r\n\r\n> How do I run/test on my local machine using local chain ?\r\n> https://layertwolabs.com/download\r\n>\r\n> â\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701006485>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AW7Z3AFMHBP4AQB6GIXSQBTXYCD7RANCNFSM6AAAAAA3ZE4L3M>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n\r\n-- \r\nCONFIDENTIAL: The information and any files contained in this e-mail are \r\nconfidential and intended solely for the addressee. If you have received it \r\nin error, please notify us immediately by reply e-mail and then delete this \r\nmessage from your system. Please do not copy it or use it for any purposes, \r\nor disclose its contents to any other person. If you are not the intended \r\nrecipient you are notified that disclosing, copying, distributing or taking \r\naction in reliance on the contents of this information is strictly \r\nprohibited. Thank you for your cooperation.\r\n",
      "created_at" : "2023-08-31T13:30:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701043860",
      "id" : 1701043860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lY96U",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701043860/reactions"
      },
      "updated_at" : "2023-08-31T13:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701043860",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/96443776?v=4",
         "events_url" : "https://api.github.com/users/krisgrm/events{/privacy}",
         "followers_url" : "https://api.github.com/users/krisgrm/followers",
         "following_url" : "https://api.github.com/users/krisgrm/following{/other_user}",
         "gists_url" : "https://api.github.com/users/krisgrm/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/krisgrm",
         "id" : 96443776,
         "login" : "krisgrm",
         "node_id" : "U_kgDOBb-dgA",
         "organizations_url" : "https://api.github.com/users/krisgrm/orgs",
         "received_events_url" : "https://api.github.com/users/krisgrm/received_events",
         "repos_url" : "https://api.github.com/users/krisgrm/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/krisgrm/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/krisgrm/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/krisgrm"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@psztorc \r\n\r\n> Not to me. The source code is in the pull request.\r\n\r\nPublishing the code is in the open does not minimize intellectual property hostile claims towards the project in the future. Whatever one think about the philosophical legitimacy of patent and intellectual property, especially in the Internet world, under US patent law, software _might_ sadly be eligible_ to patent protection. If this consensus change and the corresponding source code has been funded by incorporated entities they can very claim resulting licensing to enter into their corporate assets, and from then make a lot of claims. I donât assume hostile intentions, though in case of future dispute with shareholders in this DC project, itâs hard to predict what can happen.\r\n\r\nAt the very least, I think a reasonable and ethical practice could be for any affiliated corporate entity sponsoring the project to pledge any intellectual rights arising from DC development to be pledged in an open patent organization, e.g https://www.opencrypto.org/about/\r\n\r\n> You are referring to disclosed financial compensation, only. But everyone here may have undisclosed financial\r\n> compensation, including [you](https://blog.okcoin.com/okcoin-bitcoin-developer-grant-antoine-riard/). Plus, we all own\r\n> different amounts of Bitcoin.\r\n\r\n_Undisclosed_ financial compensation is the ethical issue at stake. If youâre have or expect financial compensation (equity valuation or capital investment) from the successful deployment of DC (which might have technical and economics risks on the stability of the Bitcoin network and therefore the value of the coins themselves), I think you're in a situation of _conflict of interests_ with all the _passive_ intelligent Bitcoin investors, of which the financial portfolio strategy can be to wait a slow appreciation of their Bitcoin digital assets. Without playing wizardry with the fundamentals of the system.\r\n\r\nOn the past okcoin funding grant, this contract framework explicitly includes a provision of technical autonomy in the area of Bitcoin consensus changes, on the model of Bitmex bitcoin developer grant agreement (cf. 2.2): https://github.com/jonathanbier/Bitcoin-Developer-Grant-Agreement/blob/master/Bitcoin-Developer-Grant-Agreement.md \r\nThough I can take opportunity to say, in matters of technical neutrality open-source funding, from the viewpoint of a developer I can only recommend to work with the set of historical people Iâve been collaborating with at okcoin as part of their open-source funding program. From my knowledge some historical developers at Blockstream had a similar legal provision of autonomy in their employment agreement.\r\n\r\nEthics and integrity of scientific research are quite well understood in established scientific and software engineering practice. The IETF has rules on [conflict of interests](https://www.ietf.org/about/administration/policies-procedures/conflict-interest/), the NASA has guidelines for promoting [scientific and research integrity](https://www.nasa.gov/sites/default/files/atoms/files/nasa_guidelines_for_promoting_scientific_and_research_integrity-july_2018.pdf) and the ACM has a pretty well-reasoned [code of ethics](https://www.acm.org/code-of-ethics).  Of course ethics is evolutionary, and there is always a sense of proportion and contextualization to keep.\r\n\r\n> The appropriate way to handle such un-resolv-able issues, is to discuss the idea on its merits only.\r\n\r\nI think this is a hard issue where weâre diverging. While those issues are \"un-resolv-ableâ (âMen are not angelsâ - James Madison iirc), though it doesnât mean principles and ethics have nevertheless been developed and nurtured by technical and scientific communities all around the world, as decades of history is showing it (cf. examples above).\r\n\r\nDiscussing in depth an idea as complex as a Bitcoin consensus changes related to miners incentives would consume hundreds of hours of review time, if you have high-caliber technical eyes and you do not wish to give a simple âbinaryâ answer. A displayed low-level of ethics by a technical idea propoent is not appealing and it appears as a hint of a potential waste of time, when such open-source time could be invested in the review of other sensible technical projects such as package relay, bip324 or libbitcoinkernel.\r\n\r\n> FYI I personally donated thousands of $ to fight such lawsuits, some of which provably so -- in public at Bitcoin events.\r\n\r\nI think this is appreciated by the community and you have my own thanks for it, sincerely. Iâm not defendant on the CSW lawsuits (at least for now - fingers crossed) though from my looking on the database rights case this is crazy how someone can make such dubious claims on weak materials. And this is a reason of concern from my point above establishing clear open-source and no-patent/defensive patent status of all technical contributions on critical areas like consensus changes.\r\n\r\nAnd as it sounds you have been in Bitcoin since a while, I think you also remember the [ASICBOOST scandal](https://bitcoinmagazine.com/business/breaking-down-bitcoins-asicboost-scandal-solutions), and related issues about patent.\r\n\r\n> Why not speak openly, of whatever is really on your mind? Clearly we don't expect a review from every single person on\r\n> Earth -- as you must know. So either say whatever it is you want to say, or go back to reviewing whatever you think is\r\n> important.\r\n \r\nI would appreciate a more respectful tone from someone (to the best of my knowledge) who has never contributed a line of cpp or find a noteworthy bug in the sensible areas of Bitcoin Core, or equivalent full-node software so far.\r\n\r\nTo speak my mind, I think this will be more efficient in term of review, testing and quality assurance of the proposed consensus changes to have this BIP300 PR be opened in bitcoin-inquisition fork: https://github.com/bitcoin-inquisition/bitcoin/wiki Bitcoin inquisition purpose as a community R&D platform has been discussed here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\r\n\r\nAdditionally, about reviewing Bitcoin consensus changes in 2023, I think this is pointless to review only the consensus primitives changes, without proof-of-concept on associated application software (at least an experimental side-chain, wallet, nodes) to enable giving a judgement on the whole end-to-end usage. Such end-to-end technical bar is at least experimentally followed for APO: https://github.com/instagibbs/lightning/commits/eltoo_support\r\n\r\nBeyond on the ethics of Bitcoin consensus changes, and a wish in the community to have a flat development from centralized companies and their own time agenda ensuring we âgive a chance and timeâ to maybe-not-every-single-person -on-Earth though to as much people has we can to have their say on a consensus change, I think it has been discussed here: \r\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-August/020819.html\r\n\r\nAll that said, Iâm maintaining that personally I wonât have time to review proposed DC consensus changes before August 2024 as doing it correctly would take at least 3 months of intense review work, and I think this is quite invariant for any skilled Bitcoin reviewers I know. From my appreciation, there has been a trend to have a more public list (package relay / bip324 / libbitcoinkernel) of shared technical priorities in Bitcoin Core and an aim to follow them. I think this is a waste of time and the door towards _real_ ossification of the protocol if skilled technical eyes have to interrupt their monthly-long review cycle every time someone shows up with a consensus change idea, neither build serenity of conservations.\r\n\r\nMy invitation to discuss in person about the topic of Bitcoin consensus change at a conference during the coming years stays open, or on the mailing list if itâs a communication medium you think itâs better suited. I wonât have time to comment or reply further on this PR at least until December of this year.",
      "created_at" : "2023-08-31T18:34:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701566509",
      "id" : 1701566509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585la9gt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701566509/reactions"
      },
      "updated_at" : "2023-08-31T18:34:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701566509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> @psztorc\r\n> \r\n> > Not to me. The source code is in the pull request.\r\n> \r\n> Publishing the code is in the open does not minimize intellectual property hostile claims towards the project in the future. Whatever one think about the philosophical legitimacy of patent and intellectual property, especially in the Internet world, under US patent law, software _might_ sadly be eligible_ to patent protection. If this consensus change and the corresponding source code has been funded by incorporated entities they can very claim resulting licensing to enter into their corporate assets, and from then make a lot of claims. I donât assume hostile intentions, though in case of future dispute with shareholders in this DC project, itâs hard to predict what can happen.\r\n> \r\n> At the very least, I think a reasonable and ethical practice could be for any affiliated corporate entity sponsoring the project to pledge any intellectual rights arising from DC development to be pledged in an open patent organization, e.g https://www.opencrypto.org/about/\r\n> \r\n> > You are referring to disclosed financial compensation, only. But everyone here may have undisclosed financial\r\n> > compensation, including [you](https://blog.okcoin.com/okcoin-bitcoin-developer-grant-antoine-riard/). Plus, we all own\r\n> > different amounts of Bitcoin.\r\n> \r\n> _Undisclosed_ financial compensation is the ethical issue at stake. If youâre have or expect financial compensation (equity valuation or capital investment) from the successful deployment of DC (which might have technical and economics risks on the stability of the Bitcoin network and therefore the value of the coins themselves), I think you're in a situation of _conflict of interests_ with all the _passive_ intelligent Bitcoin investors, of which the financial portfolio strategy can be to wait a slow appreciation of their Bitcoin digital assets. Without playing wizardry with the fundamentals of the system.\r\n> \r\n> On the past okcoin funding grant, this contract framework explicitly includes a provision of technical autonomy in the area of Bitcoin consensus changes, on the model of Bitmex bitcoin developer grant agreement (cf. 2.2): https://github.com/jonathanbier/Bitcoin-Developer-Grant-Agreement/blob/master/Bitcoin-Developer-Grant-Agreement.md Though I can take opportunity to say, in matters of technical neutrality open-source funding, from the viewpoint of a developer I can only recommend to work with the set of historical people Iâve been collaborating with at okcoin as part of their open-source funding program. From my knowledge some historical developers at Blockstream had a similar legal provision of autonomy in their employment agreement.\r\n> \r\n> Ethics and integrity of scientific research are quite well understood in established scientific and software engineering practice. The IETF has rules on [conflict of interests](https://www.ietf.org/about/administration/policies-procedures/conflict-interest/), the NASA has guidelines for promoting [scientific and research integrity](https://www.nasa.gov/sites/default/files/atoms/files/nasa_guidelines_for_promoting_scientific_and_research_integrity-july_2018.pdf) and the ACM has a pretty well-reasoned [code of ethics](https://www.acm.org/code-of-ethics). Of course ethics is evolutionary, and there is always a sense of proportion and contextualization to keep.\r\n> \r\n> > The appropriate way to handle such un-resolv-able issues, is to discuss the idea on its merits only.\r\n> \r\n> I think this is a hard issue where weâre diverging. While those issues are \"un-resolv-ableâ (âMen are not angelsâ - James Madison iirc), though it doesnât mean principles and ethics have nevertheless been developed and nurtured by technical and scientific communities all around the world, as decades of history is showing it (cf. examples above).\r\n> \r\n> Discussing in depth an idea as complex as a Bitcoin consensus changes related to miners incentives would consume hundreds of hours of review time, if you have high-caliber technical eyes and you do not wish to give a simple âbinaryâ answer. A displayed low-level of ethics by a technical idea propoent is not appealing and it appears as a hint of a potential waste of time, when such open-source time could be invested in the review of other sensible technical projects such as package relay, bip324 or libbitcoinkernel.\r\n> \r\n> > FYI I personally donated thousands of $ to fight such lawsuits, some of which provably so -- in public at Bitcoin events.\r\n> \r\n> I think this is appreciated by the community and you have my own thanks for it, sincerely. Iâm not defendant on the CSW lawsuits (at least for now - fingers crossed) though from my looking on the database rights case this is crazy how someone can make such dubious claims on weak materials. And this is a reason of concern from my point above establishing clear open-source and no-patent/defensive patent status of all technical contributions on critical areas like consensus changes.\r\n> \r\n> And as it sounds you have been in Bitcoin since a while, I think you also remember the [ASICBOOST scandal](https://bitcoinmagazine.com/business/breaking-down-bitcoins-asicboost-scandal-solutions), and related issues about patent.\r\n> \r\n> > Why not speak openly, of whatever is really on your mind? Clearly we don't expect a review from every single person on\r\n> > Earth -- as you must know. So either say whatever it is you want to say, or go back to reviewing whatever you think is\r\n> > important.\r\n> \r\n> I would appreciate a more respectful tone from someone (to the best of my knowledge) who has never contributed a line of cpp or find a noteworthy bug in the sensible areas of Bitcoin Core, or equivalent full-node software so far.\r\n> \r\n> To speak my mind, I think this will be more efficient in term of review, testing and quality assurance of the proposed consensus changes to have this BIP300 PR be opened in bitcoin-inquisition fork: https://github.com/bitcoin-inquisition/bitcoin/wiki Bitcoin inquisition purpose as a community R&D platform has been discussed here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\r\n> \r\n> Additionally, about reviewing Bitcoin consensus changes in 2023, I think this is pointless to review only the consensus primitives changes, without proof-of-concept on associated application software (at least an experimental side-chain, wallet, nodes) to enable giving a judgement on the whole end-to-end usage. Such end-to-end technical bar is at least experimentally followed for APO: https://github.com/instagibbs/lightning/commits/eltoo_support\r\n> \r\n> Beyond on the ethics of Bitcoin consensus changes, and a wish in the community to have a flat development from centralized companies and their own time agenda ensuring we âgive a chance and timeâ to maybe-not-every-single-person -on-Earth though to as much people has we can to have their say on a consensus change, I think it has been discussed here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-August/020819.html\r\n> \r\n> All that said, Iâm maintaining that personally I wonât have time to review proposed DC consensus changes before August 2024 as doing it correctly would take at least 3 months of intense review work, and I think this is quite invariant for any skilled Bitcoin reviewers I know. From my appreciation, there has been a trend to have a more public list (package relay / bip324 / libbitcoinkernel) of shared technical priorities in Bitcoin Core and an aim to follow them. I think this is a waste of time and the door towards _real_ ossification of the protocol if skilled technical eyes have to interrupt their monthly-long review cycle every time someone shows up with a consensus change idea, neither build serenity of conservations.\r\n> \r\n> My invitation to discuss in person about the topic of Bitcoin consensus change at a conference during the coming years stays open, or on the mailing list if itâs a communication medium you think itâs better suited. I wonât have time to comment or reply further on this PR at least until December of this year.\r\n\r\nAlthough I agree with at least half of what you are saying namely against this IMV insane BIP300, you have my aplause in that part, you are though also still a Dev, also implicitly in permanent conflict of interests, together with miners, as both groups are service providers for Bitcoin(ers). The only ones to decide ANYTHING about their own property, ARE bitcoiners, by operating their own full node, BUT are being for long pushed away from that role/vote by a CENTRAL HUB of Core Devs, using shady/techy/nerdy platforms such as this one (GitHub) where most bitcoiners do not log to discuss or get awareness of what Devs are conspiring next. For example, with the BIP9 and BIP8 scandalous attack to Bitcoin, known as 'SPEEDY TRIAL' (a CATAPULT for many other BIP mania to start being FORCEFED to Bitcoiners without their decision (as it seems for example doing BIP119 - covenants, using such GATE for BIP mania EXPLOITS) taking decisions away from Bitcoin owners, into service providers insteadð¤¡ð¤¡ð¤¡. It is like if a company, thru their board of directors, decided to hand their strategic decisions to suppliers ð¤¡ ð¤¡ð¤¡Hello! Adding more op_codes create a 'world computer' like altcoin. That is NOT what Bitcoin is about...! In order to have value its scope must be kept tyranically (Satoshi's term) TINY. Bitcoin is about THE LEAST op_codes possible just enough to address its TINY SCOPE. THAT IS IT. Still altcoiners in Bitcoin, self-entitled bitcoiners, cannot get this after so many years of Devs brainwashing them, as if there was ANY need for continuous non-bug fixing BIP mania. So, definetely, NOT more and more op_codes promoted by the BIP mania, which is profitable only for Devs projects, but in detriment of Bitcoin, by turning it into an altcoin, filled up with unneeded op_code complexity, 'world computer' alike of another altcoin, full of wonderful 'features', which ARE NEITHER TO BE ACHIEVED ON-CHAIN, neither we lack of enough ALTCOIN examples WHICH DID EXACTLY THAT. Devs can only become an exempt role, when only about coding either bug-fixes paid by companies using Bitcoin, and coding MORE OPTIONS in full nodes software to let node operators themselves DECIDE, by (UN)support, WHAT IS CORE=CONSENSUS and what it is not. BUT NEVER service providers, who took over dictatorily UNTIL TODAY such decision role, as currently is still the case in Bitcoin. That is NOT DECENTRALIZATION.",
      "created_at" : "2023-08-31T19:17:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701633111",
      "id" : 1701633111,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lbNxX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701633111/reactions"
      },
      "updated_at" : "2023-08-31T19:34:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701633111",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/111360343?v=4",
         "events_url" : "https://api.github.com/users/RicYashiroLee/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RicYashiroLee/followers",
         "following_url" : "https://api.github.com/users/RicYashiroLee/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RicYashiroLee/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RicYashiroLee",
         "id" : 111360343,
         "login" : "RicYashiroLee",
         "node_id" : "U_kgDOBqM5Vw",
         "organizations_url" : "https://api.github.com/users/RicYashiroLee/orgs",
         "received_events_url" : "https://api.github.com/users/RicYashiroLee/received_events",
         "repos_url" : "https://api.github.com/users/RicYashiroLee/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RicYashiroLee/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RicYashiroLee/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RicYashiroLee"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> @psztorc\r\n> \r\n> > Not to me. The source code is in the pull request.\r\n> \r\n> Publishing the code is in the open does not minimize intellectual property hostile claims towards the project in the future. Whatever one think about the philosophical legitimacy of patent and intellectual property, especially in the Internet world, under US patent law, software _might_ sadly be eligible_ to patent protection. If this consensus change and the corresponding source code has been funded by incorporated entities they can very claim resulting licensing to enter into their corporate assets, and from then make a lot of claims. I donât assume hostile intentions, though in case of future dispute with shareholders in this DC project, itâs hard to predict what can happen.\r\n> \r\n> At the very least, I think a reasonable and ethical practice could be for any affiliated corporate entity sponsoring the project to pledge any intellectual rights arising from DC development to be pledged in an open patent organization, e.g https://www.opencrypto.org/about/\r\n> \r\n> > You are referring to disclosed financial compensation, only. But everyone here may have undisclosed financial\r\n> > compensation, including [you](https://blog.okcoin.com/okcoin-bitcoin-developer-grant-antoine-riard/). Plus, we all own\r\n> > different amounts of Bitcoin.\r\n> \r\n> _Undisclosed_ financial compensation is the ethical issue at stake. If youâre have or expect financial compensation (equity valuation or capital investment) from the successful deployment of DC (which might have technical and economics risks on the stability of the Bitcoin network and therefore the value of the coins themselves), I think you're in a situation of _conflict of interests_ with all the _passive_ intelligent Bitcoin investors, of which the financial portfolio strategy can be to wait a slow appreciation of their Bitcoin digital assets. Without playing wizardry with the fundamentals of the system.\r\n> \r\n> On the past okcoin funding grant, this contract framework explicitly includes a provision of technical autonomy in the area of Bitcoin consensus changes, on the model of Bitmex bitcoin developer grant agreement (cf. 2.2): https://github.com/jonathanbier/Bitcoin-Developer-Grant-Agreement/blob/master/Bitcoin-Developer-Grant-Agreement.md Though I can take opportunity to say, in matters of technical neutrality open-source funding, from the viewpoint of a developer I can only recommend to work with the set of historical people Iâve been collaborating with at okcoin as part of their open-source funding program. From my knowledge some historical developers at Blockstream had a similar legal provision of autonomy in their employment agreement.\r\n> \r\n> Ethics and integrity of scientific research are quite well understood in established scientific and software engineering practice. The IETF has rules on [conflict of interests](https://www.ietf.org/about/administration/policies-procedures/conflict-interest/), the NASA has guidelines for promoting [scientific and research integrity](https://www.nasa.gov/sites/default/files/atoms/files/nasa_guidelines_for_promoting_scientific_and_research_integrity-july_2018.pdf) and the ACM has a pretty well-reasoned [code of ethics](https://www.acm.org/code-of-ethics). Of course ethics is evolutionary, and there is always a sense of proportion and contextualization to keep.\r\n> \r\n> > The appropriate way to handle such un-resolv-able issues, is to discuss the idea on its merits only.\r\n> \r\n> I think this is a hard issue where weâre diverging. While those issues are \"un-resolv-ableâ (âMen are not angelsâ - James Madison iirc), though it doesnât mean principles and ethics have nevertheless been developed and nurtured by technical and scientific communities all around the world, as decades of history is showing it (cf. examples above).\r\n> \r\n> Discussing in depth an idea as complex as a Bitcoin consensus changes related to miners incentives would consume hundreds of hours of review time, if you have high-caliber technical eyes and you do not wish to give a simple âbinaryâ answer. A displayed low-level of ethics by a technical idea propoent is not appealing and it appears as a hint of a potential waste of time, when such open-source time could be invested in the review of other sensible technical projects such as package relay, bip324 or libbitcoinkernel.\r\n> \r\n> > FYI I personally donated thousands of $ to fight such lawsuits, some of which provably so -- in public at Bitcoin events.\r\n> \r\n> I think this is appreciated by the community and you have my own thanks for it, sincerely. Iâm not defendant on the CSW lawsuits (at least for now - fingers crossed) though from my looking on the database rights case this is crazy how someone can make such dubious claims on weak materials. And this is a reason of concern from my point above establishing clear open-source and no-patent/defensive patent status of all technical contributions on critical areas like consensus changes.\r\n> \r\n> And as it sounds you have been in Bitcoin since a while, I think you also remember the [ASICBOOST scandal](https://bitcoinmagazine.com/business/breaking-down-bitcoins-asicboost-scandal-solutions), and related issues about patent.\r\n> \r\n> > Why not speak openly, of whatever is really on your mind? Clearly we don't expect a review from every single person on\r\n> > Earth -- as you must know. So either say whatever it is you want to say, or go back to reviewing whatever you think is\r\n> > important.\r\n> \r\n> I would appreciate a more respectful tone from someone (to the best of my knowledge) who has never contributed a line of cpp or find a noteworthy bug in the sensible areas of Bitcoin Core, or equivalent full-node software so far.\r\n> \r\n> To speak my mind, I think this will be more efficient in term of review, testing and quality assurance of the proposed consensus changes to have this BIP300 PR be opened in bitcoin-inquisition fork: https://github.com/bitcoin-inquisition/bitcoin/wiki Bitcoin inquisition purpose as a community R&D platform has been discussed here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\r\n> \r\n> Additionally, about reviewing Bitcoin consensus changes in 2023, I think this is pointless to review only the consensus primitives changes, without proof-of-concept on associated application software (at least an experimental side-chain, wallet, nodes) to enable giving a judgement on the whole end-to-end usage. Such end-to-end technical bar is at least experimentally followed for APO: https://github.com/instagibbs/lightning/commits/eltoo_support\r\n> \r\n> Beyond on the ethics of Bitcoin consensus changes, and a wish in the community to have a flat development from centralized companies and their own time agenda ensuring we âgive a chance and timeâ to maybe-not-every-single-person -on-Earth though to as much people has we can to have their say on a consensus change, I think it has been discussed here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-August/020819.html\r\n> \r\n> All that said, Iâm maintaining that personally I wonât have time to review proposed DC consensus changes before August 2024 as doing it correctly would take at least 3 months of intense review work, and I think this is quite invariant for any skilled Bitcoin reviewers I know. From my appreciation, there has been a trend to have a more public list (package relay / bip324 / libbitcoinkernel) of shared technical priorities in Bitcoin Core and an aim to follow them. I think this is a waste of time and the door towards _real_ ossification of the protocol if skilled technical eyes have to interrupt their monthly-long review cycle every time someone shows up with a consensus change idea, neither build serenity of conservations.\r\n> \r\n> My invitation to discuss in person about the topic of Bitcoin consensus change at a conference during the coming years stays open, or on the mailing list if itâs a communication medium you think itâs better suited. I wonât have time to comment or reply further on this PR at least until December of this year.\r\n\r\nI totally agree with this.  We need to be aware of hostile take over of the project bitcoin.  \r\nI was also surprised to see such weak legal system in the USA, the UK that someone who\r\nclaims to be someone, without providing any kind of technical and legal proof, can harm\r\nother people in a legal way.\r\n\r\nFor what it is worth, CSW did contact me in the early days not only on IRC, but also on instant messenging,\r\nI think it was ICQ.  Whatever, we had some chats and that is the reason he knows some info.  In my perception,\r\nhe was highly bipolar, narcissistic and insisted i would come forward.  Whatever you belief, but I did and do not\r\nwant this for a lot of reasons, one is I don't take away the sunlight of others who did even more than me in \r\nthe project bitcoin.  This IS an opensource project, where we collaborate.  Not a playground of EGO.\r\nTo get rid of that man, I did deliver at that time an empty wallet.  Probably he did messed up that one seen his \r\ndefense in the court cases.  The man has no single, but no single private key of block 0 (genesis) or block 1 and for \r\nsure not the pgp key associated with the handle of Satoshi Nakamoto.\r\n\r\nWhy I tell this.  I wake up when Gavin was clearly pretty motivated to support, initially, the claims of CSW.  Remember the blocksize war...BitcoinXT....Larger blocksized do lead to centralisation.  Now I see since 0.13 Gavin did also remove\r\nthe option setgenerate... Knowing we have now almost a centralised mining with the pools, this look to me as a big concern.  We need more decentralised mining... One of my close friends does yell \"We need solo mining or core setgenerate...all nodes should have a symbolic hash power by default, that's the solution\"... use `bitcoin-cli -generate 1 2147483647` Well...\r\n\r\nAgain I see this all as again another dangerous and violent attempt to undermine the project.\r\n\r\nAnd I really hope I do not need to post a digital signed message to make my point.  Because I do not want to be an\r\nattack vector for the project in any way.  Everyone who is deeply involved in this project since day one knows deep inside, bitcoin is much more than the financial aspect.   Some do dedicate their lives on it, some like Adam paved\r\nthe way for it.  So to all who contribute in any kind, don't mess it up and don't be lured into a path that has no\r\ngood end.\r\n\r\nFor what it is worth and Yes I have cr.ppy English, Hal is not there anymore to review and edit my posts.\r\n\r\nAll the best.\r\n\r\n",
      "created_at" : "2023-08-31T20:27:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701735753",
      "id" : 1701735753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lbm1J",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701735753/reactions"
      },
      "updated_at" : "2023-08-31T20:35:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701735753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16897964?v=4",
         "events_url" : "https://api.github.com/users/aceofbitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aceofbitcoin/followers",
         "following_url" : "https://api.github.com/users/aceofbitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aceofbitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aceofbitcoin",
         "id" : 16897964,
         "login" : "aceofbitcoin",
         "node_id" : "MDQ6VXNlcjE2ODk3OTY0",
         "organizations_url" : "https://api.github.com/users/aceofbitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/aceofbitcoin/received_events",
         "repos_url" : "https://api.github.com/users/aceofbitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aceofbitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aceofbitcoin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aceofbitcoin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > @psztorc\r\n> > > Not to me. The source code is in the pull request.\r\n> > \r\n> > \r\n> > Publishing the code is in the open does not minimize intellectual property hostile claims towards the project in the future. Whatever one think about the philosophical legitimacy of patent and intellectual property, especially in the Internet world, under US patent law, software _might_ sadly be eligible_ to patent protection. If this consensus change and the corresponding source code has been funded by incorporated entities they can very claim resulting licensing to enter into their corporate assets, and from then make a lot of claims. I donât assume hostile intentions, though in case of future dispute with shareholders in this DC project, itâs hard to predict what can happen.\r\n> > At the very least, I think a reasonable and ethical practice could be for any affiliated corporate entity sponsoring the project to pledge any intellectual rights arising from DC development to be pledged in an open patent organization, e.g https://www.opencrypto.org/about/\r\n> > > You are referring to disclosed financial compensation, only. But everyone here may have undisclosed financial\r\n> > > compensation, including [you](https://blog.okcoin.com/okcoin-bitcoin-developer-grant-antoine-riard/). Plus, we all own\r\n> > > different amounts of Bitcoin.\r\n> > \r\n> > \r\n> > _Undisclosed_ financial compensation is the ethical issue at stake. If youâre have or expect financial compensation (equity valuation or capital investment) from the successful deployment of DC (which might have technical and economics risks on the stability of the Bitcoin network and therefore the value of the coins themselves), I think you're in a situation of _conflict of interests_ with all the _passive_ intelligent Bitcoin investors, of which the financial portfolio strategy can be to wait a slow appreciation of their Bitcoin digital assets. Without playing wizardry with the fundamentals of the system.\r\n> > On the past okcoin funding grant, this contract framework explicitly includes a provision of technical autonomy in the area of Bitcoin consensus changes, on the model of Bitmex bitcoin developer grant agreement (cf. 2.2): https://github.com/jonathanbier/Bitcoin-Developer-Grant-Agreement/blob/master/Bitcoin-Developer-Grant-Agreement.md Though I can take opportunity to say, in matters of technical neutrality open-source funding, from the viewpoint of a developer I can only recommend to work with the set of historical people Iâve been collaborating with at okcoin as part of their open-source funding program. From my knowledge some historical developers at Blockstream had a similar legal provision of autonomy in their employment agreement.\r\n> > Ethics and integrity of scientific research are quite well understood in established scientific and software engineering practice. The IETF has rules on [conflict of interests](https://www.ietf.org/about/administration/policies-procedures/conflict-interest/), the NASA has guidelines for promoting [scientific and research integrity](https://www.nasa.gov/sites/default/files/atoms/files/nasa_guidelines_for_promoting_scientific_and_research_integrity-july_2018.pdf) and the ACM has a pretty well-reasoned [code of ethics](https://www.acm.org/code-of-ethics). Of course ethics is evolutionary, and there is always a sense of proportion and contextualization to keep.\r\n> > > The appropriate way to handle such un-resolv-able issues, is to discuss the idea on its merits only.\r\n> > \r\n> > \r\n> > I think this is a hard issue where weâre diverging. While those issues are \"un-resolv-ableâ (âMen are not angelsâ - James Madison iirc), though it doesnât mean principles and ethics have nevertheless been developed and nurtured by technical and scientific communities all around the world, as decades of history is showing it (cf. examples above).\r\n> > Discussing in depth an idea as complex as a Bitcoin consensus changes related to miners incentives would consume hundreds of hours of review time, if you have high-caliber technical eyes and you do not wish to give a simple âbinaryâ answer. A displayed low-level of ethics by a technical idea propoent is not appealing and it appears as a hint of a potential waste of time, when such open-source time could be invested in the review of other sensible technical projects such as package relay, bip324 or libbitcoinkernel.\r\n> > > FYI I personally donated thousands of $ to fight such lawsuits, some of which provably so -- in public at Bitcoin events.\r\n> > \r\n> > \r\n> > I think this is appreciated by the community and you have my own thanks for it, sincerely. Iâm not defendant on the CSW lawsuits (at least for now - fingers crossed) though from my looking on the database rights case this is crazy how someone can make such dubious claims on weak materials. And this is a reason of concern from my point above establishing clear open-source and no-patent/defensive patent status of all technical contributions on critical areas like consensus changes.\r\n> > And as it sounds you have been in Bitcoin since a while, I think you also remember the [ASICBOOST scandal](https://bitcoinmagazine.com/business/breaking-down-bitcoins-asicboost-scandal-solutions), and related issues about patent.\r\n> > > Why not speak openly, of whatever is really on your mind? Clearly we don't expect a review from every single person on\r\n> > > Earth -- as you must know. So either say whatever it is you want to say, or go back to reviewing whatever you think is\r\n> > > important.\r\n> > \r\n> > \r\n> > I would appreciate a more respectful tone from someone (to the best of my knowledge) who has never contributed a line of cpp or find a noteworthy bug in the sensible areas of Bitcoin Core, or equivalent full-node software so far.\r\n> > To speak my mind, I think this will be more efficient in term of review, testing and quality assurance of the proposed consensus changes to have this BIP300 PR be opened in bitcoin-inquisition fork: https://github.com/bitcoin-inquisition/bitcoin/wiki Bitcoin inquisition purpose as a community R&D platform has been discussed here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\r\n> > Additionally, about reviewing Bitcoin consensus changes in 2023, I think this is pointless to review only the consensus primitives changes, without proof-of-concept on associated application software (at least an experimental side-chain, wallet, nodes) to enable giving a judgement on the whole end-to-end usage. Such end-to-end technical bar is at least experimentally followed for APO: https://github.com/instagibbs/lightning/commits/eltoo_support\r\n> > Beyond on the ethics of Bitcoin consensus changes, and a wish in the community to have a flat development from centralized companies and their own time agenda ensuring we âgive a chance and timeâ to maybe-not-every-single-person -on-Earth though to as much people has we can to have their say on a consensus change, I think it has been discussed here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-August/020819.html\r\n> > All that said, Iâm maintaining that personally I wonât have time to review proposed DC consensus changes before August 2024 as doing it correctly would take at least 3 months of intense review work, and I think this is quite invariant for any skilled Bitcoin reviewers I know. From my appreciation, there has been a trend to have a more public list (package relay / bip324 / libbitcoinkernel) of shared technical priorities in Bitcoin Core and an aim to follow them. I think this is a waste of time and the door towards _real_ ossification of the protocol if skilled technical eyes have to interrupt their monthly-long review cycle every time someone shows up with a consensus change idea, neither build serenity of conservations.\r\n> > My invitation to discuss in person about the topic of Bitcoin consensus change at a conference during the coming years stays open, or on the mailing list if itâs a communication medium you think itâs better suited. I wonât have time to comment or reply further on this PR at least until December of this year.\r\n> \r\n> I totally agree with this. We need to be aware of hostile take over of the project bitcoin. I was also surprised to see such weak legal system in the USA, the UK that someone who claims to be someone, without providing any kind of technical and legal proof, can harm other people in a legal way.\r\n> \r\n> For what it is worth, CSW did contact me in the early days not only on IRC, but also on instant messenging, I think it was ICQ. Whatever, we had some chats and that is the reason he knows some info. In my perception, he was highly bipolar, narcissistic and insisted i would come forward. Whatever you belief, but I did and do not want this for a lot of reasons, one is I don't take away the sunlight of others who did even more than me in the project bitcoin. This IS an opensource project, where we collaborate. Not a playground of EGO. To get rid of that man, I did deliver at that time an empty wallet. Probably he did messed up that one seen his defense in the court cases. The man has no single, but no single private key of block 0 (genesis) or block 1 and for sure not the pgp key associated with the handle of Satoshi Nakamoto.\r\n> \r\n> Why I tell this. I wake up when Gavin was clearly pretty motivated to support, initially, the claims of CSW. Remember the blocksize war...BitcoinXT....Larger blocksized do lead to centralisation. Now I see since 0.13 Gavin did also remove the option setgenerate... Knowing we have now almost a centralised mining with the pools, this look to me as a big concern. We need more decentralised mining... One of my close friends does yell \"We need solo mining or core setgenerate...all nodes should have a symbolic hash power by default, that's the solution\"... use `bitcoin-cli -generate 1 2147483647` Well...\r\n> \r\n> Again I see this all as again another dangerous and violent attempt to undermine the project.\r\n> \r\n> And I really hope I do not need to post a digital signed message to make my point. Because I do not want to be an attack vector for the project in any way. Everyone who is deeply involved in this project since day one knows deep inside, bitcoin is much more than the financial aspect. Some do dedicate their lives on it, some like Adam paved the way for it. So to all who contribute in any kind, don't mess it up and don't be lured into a path that has no good end.\r\n> \r\n> For what it is worth and Yes I have cr.ppy English, Hal is not there anymore to review and edit my posts.\r\n> \r\n> All the best.\r\nI only needed to read the first sentence, to understand you are not Satoshi :) ",
      "created_at" : "2023-08-31T20:42:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701753797",
      "id" : 1701753797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lbrPF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701753797/reactions"
      },
      "updated_at" : "2023-08-31T20:42:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701753797",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/111360343?v=4",
         "events_url" : "https://api.github.com/users/RicYashiroLee/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RicYashiroLee/followers",
         "following_url" : "https://api.github.com/users/RicYashiroLee/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RicYashiroLee/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RicYashiroLee",
         "id" : 111360343,
         "login" : "RicYashiroLee",
         "node_id" : "U_kgDOBqM5Vw",
         "organizations_url" : "https://api.github.com/users/RicYashiroLee/orgs",
         "received_events_url" : "https://api.github.com/users/RicYashiroLee/received_events",
         "repos_url" : "https://api.github.com/users/RicYashiroLee/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RicYashiroLee/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RicYashiroLee/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RicYashiroLee"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n\r\nI have no problem with that at all.  \r\n\r\nEnglish was never my native language, that is why I used a GMX mailservice in Germany.\r\nAnd all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n\r\nBesides all that we used shared mailboxes at vistomail except the known GMX mb that was\r\nmine only.  And about coding and the plenty of posts on bitcointalk I could also say things\r\nI will not reveal here.\r\n\r\nBut I tell You this.  I don't bluff when I say I have the private keys of the genesis (block 0), block 1\r\nand the well known pgp key 0x18C09E865EC948A1\r\n\r\nI revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree.\r\nBecause that key was linked to MY key.\r\n\r\nAnd I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008.\r\nThat is why Craig Wright CSW will never have the b.lls to challenge me in court.\r\nBecause he knows he would go down when I am forced to proof.\r\n\r\nI don't want to end up like Elon with a bunch of bodyguards after me.\r\nI really have no single benefit to proof myself or to sign.\r\nIn fact mathematically the probability what I claim is one in a billion or even less. \r\n\r\nI have really no time to convince people.  In fact my claims did harm me more as they did bring advantage to me.\r\nBut I had no other choice after the BBC interview to do something to alert the community.\r\n\r\nBut if I need I will digital sign.  So print this out, maybe You come in history books.\r\n\r\nRead what I say, and don't attack people in person. \r\n\r\n So far in logic a claim is true, false or inconclusive.\r\n\r\nIf you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something\r\nbut do not make judgements based on things you can't proof or statements in an emotional \r\nway without having all facts.\r\n\r\nI really do not care what You or anyone else think about me and my claims.\r\nRead what I did want to say about this BIP\r\n\r\nBTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n\r\n\r\n\r\n",
      "created_at" : "2023-08-31T20:58:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1701772752",
      "id" : 1701772752,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lbv3Q",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701772752/reactions"
      },
      "updated_at" : "2023-08-31T21:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701772752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16897964?v=4",
         "events_url" : "https://api.github.com/users/aceofbitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aceofbitcoin/followers",
         "following_url" : "https://api.github.com/users/aceofbitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aceofbitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aceofbitcoin",
         "id" : 16897964,
         "login" : "aceofbitcoin",
         "node_id" : "MDQ6VXNlcjE2ODk3OTY0",
         "organizations_url" : "https://api.github.com/users/aceofbitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/aceofbitcoin/received_events",
         "repos_url" : "https://api.github.com/users/aceofbitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aceofbitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aceofbitcoin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aceofbitcoin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thank you for the proposed BIP on drivechains. I have some concerns regarding the approach:\r\n\r\n1. Coins held in hashrate escrow might become enticing for miners as time progresses.\r\n2. Over time, users could develop a misplaced confidence when seeing drive chain coins in BTC denomination. Any coin losses might prompt calls for forks, with users naturally wanting to recover their funds.\r\n\r\nA potentially more robust solution could be inspired by the demurrage concept from @petertodd. Consider incorporating an escrow fee of 0.01% per day (144 blocks) into the coinbase, possibly emulated as a transaction self-spent with FLOOR(satoshis / 10000). This could ensure:\r\n\r\n- A consistent income stream for miners, enhancing the coinbase indefinitely without favoring individual miners.\r\n- Managed user expectations, promoting chain utility and transaction volume. A reduced market cap on the chain could also yield a more game-theoretically stable environment. Moreover, users might be inclined to transact with their coins on the sidechain and regard L1 as a secure value store.\r\n\r\nJust a suggestion. Appreciate the work being done here!",
      "created_at" : "2023-09-03T21:18:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704406417",
      "id" : 1704406417,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lly2R",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704406417/reactions"
      },
      "updated_at" : "2023-09-03T21:19:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704406417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/65864?v=4",
         "events_url" : "https://api.github.com/users/melvincarvalho/events{/privacy}",
         "followers_url" : "https://api.github.com/users/melvincarvalho/followers",
         "following_url" : "https://api.github.com/users/melvincarvalho/following{/other_user}",
         "gists_url" : "https://api.github.com/users/melvincarvalho/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/melvincarvalho",
         "id" : 65864,
         "login" : "melvincarvalho",
         "node_id" : "MDQ6VXNlcjY1ODY0",
         "organizations_url" : "https://api.github.com/users/melvincarvalho/orgs",
         "received_events_url" : "https://api.github.com/users/melvincarvalho/received_events",
         "repos_url" : "https://api.github.com/users/melvincarvalho/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/melvincarvalho/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/melvincarvalho/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/melvincarvalho"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> \r\n> I have no problem with that at all.\r\n> \r\n> English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> \r\n> Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> \r\n> But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> \r\n> I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> \r\n> And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> \r\n> I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> \r\n> I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> \r\n> But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> \r\n> Read what I say, and don't attack people in person.\r\n> \r\n> So far in logic a claim is true, false or inconclusive.\r\n> \r\n> If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> \r\n> I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> \r\n> BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n\r\nThere is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...",
      "created_at" : "2023-09-04T02:25:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704524554",
      "id" : 1704524554,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lmPsK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704524554/reactions"
      },
      "updated_at" : "2023-09-04T02:25:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704524554",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48937881?v=4",
         "events_url" : "https://api.github.com/users/amritabithi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amritabithi/followers",
         "following_url" : "https://api.github.com/users/amritabithi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amritabithi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amritabithi",
         "id" : 48937881,
         "login" : "amritabithi",
         "node_id" : "MDQ6VXNlcjQ4OTM3ODgx",
         "organizations_url" : "https://api.github.com/users/amritabithi/orgs",
         "received_events_url" : "https://api.github.com/users/amritabithi/received_events",
         "repos_url" : "https://api.github.com/users/amritabithi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amritabithi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amritabithi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amritabithi"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > \r\n> > \r\n> > I have no problem with that at all.\r\n> > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > Read what I say, and don't attack people in person.\r\n> > So far in logic a claim is true, false or inconclusive.\r\n> > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> \r\n> There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n\r\nI can sign messages with the genesis block (zero 0), You have no clue what You are talking about...\r\nWhat I did paste manually, is not random, there is also signing involved with a key\r\nto have the final result. I hope you are not a bitcoin dev.\r\nRead a book bitcoin for dummies...",
      "created_at" : "2023-09-04T06:14:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704671959",
      "id" : 1704671959,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lmzrX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704671959/reactions"
      },
      "updated_at" : "2023-09-04T06:28:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704671959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16897964?v=4",
         "events_url" : "https://api.github.com/users/aceofbitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aceofbitcoin/followers",
         "following_url" : "https://api.github.com/users/aceofbitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aceofbitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aceofbitcoin",
         "id" : 16897964,
         "login" : "aceofbitcoin",
         "node_id" : "MDQ6VXNlcjE2ODk3OTY0",
         "organizations_url" : "https://api.github.com/users/aceofbitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/aceofbitcoin/received_events",
         "repos_url" : "https://api.github.com/users/aceofbitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aceofbitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aceofbitcoin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aceofbitcoin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Satoshi speaking through me\r\n\r\nOn Mon, Sep 4, 2023, 1:19 AM Satoshi Nakamoto ***@***.***>\r\nwrote:\r\n\r\n> I only needed to read the first sentence, to understand you are not\r\n> Satoshi :)\r\n>\r\n> I have no problem with that at all.\r\n> English was never my native language, that is why I used a GMX mailservice\r\n> in Germany. And all my posts I did on bitcointalk, on metzdowd, except a\r\n> few, were reviewed by Hal Finney.\r\n> Besides all that we used shared mailboxes at vistomail except the known\r\n> GMX mb that was mine only. And about coding and the plenty of posts on\r\n> bitcointalk I could also say things I will not reveal here.\r\n> But I tell You this. I don't bluff when I say I have the private keys of\r\n> the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> I revoked personally the repo key when Gavin was bamboozled by CSW so he\r\n> would knew I did not agree. Because that key was linked to MY key.\r\n> And I have a notary depot in a sealed envelope of MY whitepaper\r\n> bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never\r\n> have the b.lls to challenge me in court. Because he knows he would go down\r\n> when I am forced to proof.\r\n> I don't want to end up like Elon with a bunch of bodyguards after me. I\r\n> really have no single benefit to proof myself or to sign. In fact\r\n> mathematically the probability what I claim is one in a billion or even\r\n> less.\r\n> I have really no time to convince people. In fact my claims did harm me\r\n> more as they did bring advantage to me. But I had no other choice after the\r\n> BBC interview to do something to alert the community.\r\n> But if I need I will digital sign. So print this out, maybe You come in\r\n> history books.\r\n> Read what I say, and don't attack people in person.\r\n> So far in logic a claim is true, false or inconclusive.\r\n> If you can't hold yourself to that simple scientific thing, You should\r\n> join a cafÃ© or something but do not make judgements based on things you\r\n> can't proof or statements in an emotional way without having all facts.\r\n> I really do not care what You or anyone else think about me and my claims.\r\n> Read what I did want to say about this BIP\r\n> BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n>\r\n> There is no private key from block zero, there couldn't be, because block\r\n> zero is manually pasted in to the source after the initial run crashes, and\r\n> recompiled before putting the network online, a block zero key doesn't make\r\n> sense to say for the person who did the build...\r\n>\r\n> I can sign messages with the genesis block (zero 0), You have no clue what\r\n> You are talking about...\r\n> Read a book bitcoin for dummies...\r\n>\r\n> â\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704671959>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/A7JWUW5MIJHX7WOWRKAGC5DXYVXIPANCNFSM6AAAAAA3ZE4L3M>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n",
      "created_at" : "2023-09-04T06:23:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704680421",
      "id" : 1704680421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lm1vl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704680421/reactions"
      },
      "updated_at" : "2023-09-04T06:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704680421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/131295835?v=4",
         "events_url" : "https://api.github.com/users/joeyvee1986/events{/privacy}",
         "followers_url" : "https://api.github.com/users/joeyvee1986/followers",
         "following_url" : "https://api.github.com/users/joeyvee1986/following{/other_user}",
         "gists_url" : "https://api.github.com/users/joeyvee1986/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/joeyvee1986",
         "id" : 131295835,
         "login" : "joeyvee1986",
         "node_id" : "U_kgDOB9NqWw",
         "organizations_url" : "https://api.github.com/users/joeyvee1986/orgs",
         "received_events_url" : "https://api.github.com/users/joeyvee1986/received_events",
         "repos_url" : "https://api.github.com/users/joeyvee1986/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/joeyvee1986/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/joeyvee1986/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/joeyvee1986"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Satoshi speaking through me\r\n> [â¦](#)\r\n> On Mon, Sep 4, 2023, 1:19 AM Satoshi Nakamoto ***@***.***> wrote: I only needed to read the first sentence, to understand you are not Satoshi :) I have no problem with that at all. English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney. Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here. But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1 I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key. And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof. I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less. I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community. But if I need I will digital sign. So print this out, maybe You come in history books. Read what I say, and don't attack people in person. So far in logic a claim is true, false or inconclusive. If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts. I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP BTW: https://twitter.com/oasis_work/status/1579877366050213888 There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build... I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... Read a book bitcoin for dummies... â Reply to this email directly, view it on GitHub <[#28311 (comment)](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704671959)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/A7JWUW5MIJHX7WOWRKAGC5DXYVXIPANCNFSM6AAAAAA3ZE4L3M> . You are receiving this because you are subscribed to this thread.Message ID: ***@***.***>\r\n\r\n\r\n\r\n> Satoshi speaking through me\r\n> [â¦](#)\r\n> On Mon, Sep 4, 2023, 1:19 AM Satoshi Nakamoto ***@***.***> wrote: I only needed to read the first sentence, to understand you are not Satoshi :) I have no problem with that at all. English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney. Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here. But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1 I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key. And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof. I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less. I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community. But if I need I will digital sign. So print this out, maybe You come in history books. Read what I say, and don't attack people in person. So far in logic a claim is true, false or inconclusive. If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts. I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP BTW: https://twitter.com/oasis_work/status/1579877366050213888 There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build... I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... Read a book bitcoin for dummies... â Reply to this email directly, view it on GitHub <[#28311 (comment)](https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704671959)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/A7JWUW5MIJHX7WOWRKAGC5DXYVXIPANCNFSM6AAAAAA3ZE4L3M> . You are receiving this because you are subscribed to this thread.Message ID: ***@***.***>\r\n\r\nHal Finney and someone else did partly use my mailbox, handle and did also do some review and work for me,\r\nbut both are not me in terms of the originator and the one who did generate the genesisblock, the one who\r\nhad the satoshin@gmx.net mailbox and the one who did ask help from PGP Corp in this project.  I will not disclose \r\nmore information now, I am not CSW, but some can have a private chat with Phil Zimmermann, he knows much more as you all think.  I am not here to lead, to proof myself.  \r\n\r\nI only want the project is decentralised, safe and even You all belief I am Pinochio, I really do not care.\r\nBut if I feel bitcoin becomes rotten because some code centralised mechanism of incentives into\r\nthe project I WILL use my signing power and my whale wallet.\r\n\r\n ",
      "created_at" : "2023-09-04T06:33:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1704690397",
      "id" : 1704690397,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585lm4Ld",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704690397/reactions"
      },
      "updated_at" : "2023-09-04T06:33:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704690397",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16897964?v=4",
         "events_url" : "https://api.github.com/users/aceofbitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aceofbitcoin/followers",
         "following_url" : "https://api.github.com/users/aceofbitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aceofbitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aceofbitcoin",
         "id" : 16897964,
         "login" : "aceofbitcoin",
         "node_id" : "MDQ6VXNlcjE2ODk3OTY0",
         "organizations_url" : "https://api.github.com/users/aceofbitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/aceofbitcoin/received_events",
         "repos_url" : "https://api.github.com/users/aceofbitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aceofbitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aceofbitcoin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aceofbitcoin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-09-05T11:36:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1706452339",
      "id" : 1706452339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585ltmVz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1706452339/reactions"
      },
      "updated_at" : "2023-09-05T11:36:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1706452339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > > \r\n> > > \r\n> > > I have no problem with that at all.\r\n> > > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > > Read what I say, and don't attack people in person.\r\n> > > So far in logic a claim is true, false or inconclusive.\r\n> > > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> > \r\n> > \r\n> > There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n> \r\n> I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... What I did paste manually, is not random, there is also signing involved with a key to have the final result. I hope you are not a bitcoin dev. Read a book bitcoin for dummies...\r\n\r\nI have compiled Bitcoin from scratch and started a brand new network from a new genesis block and put the network online, if that equals a dummies book.  When the genesis hash is generated the client is halted and crashes, so there is no write to the database, etc., and so if you had hashed in an additional transaction that included a signature that would still not matter as it would never have been saved to the database, it would be as useful as any random private key to an address that does not exist as a saved record to be interacted with.  The client must be completely re-compiled after the genesis block solution is discovered, it doesn't just keep going.  New transactions are then seeded with that hash value so purposefully engineering it in some way to \"be that address\" would mean that you had found some novel way of defeating ECC in 2009.\r\n\r\nAnd about the revoking of keys, this meme explains it well:\r\n![bsv24](https://github.com/bitcoin/bitcoin/assets/48937881/30fdd3a1-3827-47c4-add7-1c9b21da3e7e)\r\n",
      "created_at" : "2023-09-06T07:34:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1707823158",
      "id" : 1707823158,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585ly1A2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707823158/reactions"
      },
      "updated_at" : "2023-09-06T07:34:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707823158",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48937881?v=4",
         "events_url" : "https://api.github.com/users/amritabithi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amritabithi/followers",
         "following_url" : "https://api.github.com/users/amritabithi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amritabithi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amritabithi",
         "id" : 48937881,
         "login" : "amritabithi",
         "node_id" : "MDQ6VXNlcjQ4OTM3ODgx",
         "organizations_url" : "https://api.github.com/users/amritabithi/orgs",
         "received_events_url" : "https://api.github.com/users/amritabithi/received_events",
         "repos_url" : "https://api.github.com/users/amritabithi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amritabithi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amritabithi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amritabithi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1317992472"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317992472"
         }
      },
      "author_association" : "NONE",
      "body" : "It seems here that one has to spend the CTIP in order to deposit to a sidechain. And if there are multiple deposits in a block then each deposit after the first one must spend the previous unconfirmed CTIP in order to be accepted.\r\n\r\nIf the fee rate required to be included in a block is higher than the minimum fee to be included in miner mempools, this seems to open the door for \"freeloaders\" who pay the minimum fee to be included in the mempool, hoping to be subsidised by subsequent depositors within the same block - as subsequent depositors are forced to spend the freeloader's unconfirmed CTIP in order to be accepted into mempools. This seems like it could result in a bad user experience.\r\n\r\nIs it not possible to make it so that deposits do not have to spend the CTIP, but rather make an additional output to the sidechain address? Then, when a block is mined, there can be a different rule where the miner is forced to make a consolidation transaction merging all the sidechain UTXOs into one. So essentially, the \"only one CTIP allowed\" rule is only checked based on the final state once all transactions in the block are accounted for.\r\n\r\nI'm not sure how this would affect the overall size of the deposits, but it seems that it would be minimal. There'd be 1 more transaction, 1 more input and 1 more output in total compared to the current method. We could also allow both methods of depositing and users can choose based on the circumstances.",
      "commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "created_at" : "2023-09-07T01:42:05Z",
      "diff_hunk" : "@@ -171,4 +179,116 @@ void UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &t\n     proposal_list << withdraw_proposal_list;\n     COutPoint record_id{ArithToUint256(arith_uint256{uint64_t{block_height}}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n     CreateDBEntry(view, txundo, block_height, record_id, MakeByteSpan(proposal_list));\n+\n+    // TODO: clean up expiring stuff\n+    // TODO: activate sidechains and assign CTIPs\n+}\n+\n+bool VerifyDrivechainSpend(const CTransaction& tx, const unsigned int sidechain_input_n, const std::vector<CTxOut>& spent_outputs, const CCoinsViewCache& view, TxValidationState& state) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1317992472",
      "id" : 1317992472,
      "line" : 358,
      "node_id" : "PRRC_kwDOABII585OjvgY",
      "original_commit_id" : "d4eb444f6ba630f0ef009999b73282c5068ef4fd",
      "original_line" : 187,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 358,
      "pull_request_review_id" : 1614445702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317992472/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T01:42:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1317992472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/34688989?v=4",
         "events_url" : "https://api.github.com/users/MurrMcK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MurrMcK/followers",
         "following_url" : "https://api.github.com/users/MurrMcK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MurrMcK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MurrMcK",
         "id" : 34688989,
         "login" : "MurrMcK",
         "node_id" : "MDQ6VXNlcjM0Njg4OTg5",
         "organizations_url" : "https://api.github.com/users/MurrMcK/orgs",
         "received_events_url" : "https://api.github.com/users/MurrMcK/received_events",
         "repos_url" : "https://api.github.com/users/MurrMcK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MurrMcK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MurrMcK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MurrMcK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1318512848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318512848"
         }
      },
      "author_association" : "NONE",
      "body" : "I think we need to update DBIDX_SIDECHAIN_CTIP_INFO with the new CTIP identified below either after deposit (L409) or withdrawal (L464). Otherwise we won't get the `ctip_info` here. \r\n\r\nAlso, if we spend the current ctip to do a deposit, then that would mean a deposit would invalidate any current withdrawals in-flight because the withdrawal also has to spend the ctip?",
      "commit_id" : "3fda7b30aecc19271e56607d301b697a56ae7b5c",
      "created_at" : "2023-09-07T12:11:59Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];\n+            // TODO: Implement formats 3+? Or at least validate\n+                // NOTE data_format 2 changed to 0 FIXME\n+                // TODO: (new) data format 2 sets it to the ACKs from the previous block - but those aren't known, have the same cost, and encourages blind upvoting; so can we get rid of it?\n+                // TODO: data format 3 upvotes any bundle leading its rivals by at least 50 ACKs -- also encourages blind upvoting :/\n+            // TODO: How is vote vector actually encoded?\n+            // TODO: Block is invalid if there are no bundles proposed at all\n+            // FIXME: Presumably blocks should only be able to vote once - this is missing in the BIP\n+            for (int sidechain_id = 0; sidechain_id < 0x100; ++sidechain_id) {\n+                // FIXME: bounds checking\n+                // FIXME: skip votes for sidechains with no proposals\n+                uint16_t vote = out.scriptPubKey[6 + (sidechain_id * data_format)];\n+                if (data_format == 2) {\n+                    vote |= uint16_t{out.scriptPubKey[6 + (sidechain_id * data_format) + 1]} << 8;\n+                } else if (vote >= 0xfe) {\n+                    vote |= 0xff00;\n+                }\n+\n+                if (vote == 0xffff) continue;  // abstain\n+\n+                // FIXME: what if it's missing?\n+                CDataStream withdraw_proposals = GetDBEntry(view, {uint256{(uint8_t)sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST});\n+                uint256 bundle_hash;\n+                bool found_bundle{false};\n+                for (uint16_t bundle_hash_num = 0; !withdraw_proposals.eof(); ++bundle_hash_num) {\n+                    withdraw_proposals >> bundle_hash;\n+                    if (bundle_hash_num == vote) found_bundle = true;\n+                    IncrementDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, (bundle_hash_num == vote) ? 1 : -1);\n+                }\n+                if ((!found_bundle) && vote != 0xfffe) {\n+                    return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-ack-nonexistent\");\n+                }\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_PROPOSE)) {\n+            if (out.scriptPubKey.size() != 0x26) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            uint256 bundle_hash;\n+            uint8_t sidechain_id;\n+            try {\n+                s >> bundle_hash;\n+                s >> sidechain_id;\n+            } catch (...) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+\n+            if (GetDBEntry(view, {uint256{sidechain_id}, DBIDX_SIDECHAIN_DATA}).empty()) {\n+                // \"M3 is ignored...if it is for a sidechain that doesn't exist.\"\n+                continue;\n+            }\n+\n+            // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+            // TODO: maybe define this in the BIP and M3 ?\n+            bundle_hash = CalculateDrivechainWithdrawInternalHash(bundle_hash, sidechain_id);\n+\n+            // \"M3 is invalid if...This block already has an M3 for that nSidechain.\"\n+            if (saw_withdraw_proposed_for_sidechain.find(sidechain_id) != saw_withdraw_proposed_for_sidechain.end()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-multiple\");\n+            }\n+            saw_withdraw_proposed_for_sidechain.insert(sidechain_id);\n+\n+            // FIXME: \"M3 is invalid if...A bundle with this hash already paid out. A bundle with this hash was rejected in the past.\" is not practical to track!\n+\n+            if (!GetDBEntry(view, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}).empty()) {\n+                // Withdraw has already been proposed, invalid\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-duplicate\");\n+            }\n+\n+            ModifyDBEntry(view, txundo, block_height, {uint256{sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST}, [&bundle_hash](CDataStream& withdraw_proposals){\n+                withdraw_proposals << bundle_hash;\n+            });\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, s);\n+\n+            withdraw_proposal_list.resize(withdraw_proposal_list.size() + bundle_hash.size());\n+            memcpy(&withdraw_proposal_list.data()[withdraw_proposal_list.size() - bundle_hash.size()], bundle_hash.data(), bundle_hash.size());  // FIXME: C++ify\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_ACK)) {\n+            if (saw_sidechain_acks) {\n+                // FIXME: shouldn't it be possible to ACK multiple proposals for different sidechain ids??\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-multiple\");\n+            }\n+            saw_sidechain_acks = true;\n+\n+            if (out.scriptPubKey.size() != 0x25) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unparsable\");\n+            }\n+            const uint256 sidechain_proposal_hash{Span{&out.scriptPubKey[5], 0x20}};\n+            try {\n+                IncrementDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, 1);\n+            } catch (...) {  // TODO: make this explicitly for a non-existent entry\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unknown\");\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_PROPOSE)) {\n+            if (proposed_a_sidechain) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-multiple\");\n+            }\n+            proposed_a_sidechain = true;\n+\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            Sidechain proposed;\n+            try {\n+                s >> proposed;\n+            } catch (...) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-unparsable\");\n+            }\n+\n+            // TODO: block is invalid if proposed matches the current sidechain\n+\n+            uint256 sidechain_proposal_hash;\n+            CSHA256().Write(out.scriptPubKey.data() + 5, out.scriptPubKey.size() - 5).Finalize(sidechain_proposal_hash.data());\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL}, s);\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, s);\n+\n+            sidechain_proposal_list.resize(sidechain_proposal_list.size() + sidechain_proposal_hash.size());\n+            memcpy(&sidechain_proposal_list.data()[sidechain_proposal_list.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+        }\n+    }\n+\n+    if (!(sidechain_proposal_list.empty() && withdraw_proposal_list.empty())) {\n+        CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+        proposal_list << sidechain_proposal_list;\n+        proposal_list << withdraw_proposal_list;\n+        CreateDBEntry(view, txundo, block_height, {ArithToUint256(arith_uint256{(uint64_t)block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST}, proposal_list);\n+    }\n+\n+    // Perform sidechain overwriting/expiry and withdraw expiry\n+    int completed_block_height = block_height - (SIDECHAIN_WITHDRAW_PERIOD - 1);\n+    COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+    CDataStream completed_proposal_list = GetDBEntry(view, record_id);\n+    if (!completed_proposal_list.empty()) {\n+        DeleteDBEntry(view, txundo, record_id);\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_WITHDRAW_THRESHOLD) {\n+                // Overwrite an existing sidechain with a new one\n+                CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+                Assert(!proposal_s.empty());\n+                Sidechain proposal;\n+                proposal_s >> proposal;\n+\n+                COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+                DeleteDBEntry(view, txundo, sidechain_record_id);\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        for (size_t i = 0; i < withdraw_proposal_list.size(); i += uint256::size()) {\n+            uint256 withdraw_proposal_hash{Span{&withdraw_proposal_list[i], uint256::size()}};\n+            // FIXME: remove from DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST\n+            DeleteDBEntry(view, txundo, {withdraw_proposal_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS});\n+        }\n+    }\n+\n+    // New sidechain activation\n+    completed_block_height = block_height - (SIDECHAIN_ACTIVATION_PERIOD - 1);\n+    completed_proposal_list = GetDBEntry(view, {ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST});\n+    if (!completed_proposal_list.empty()) {\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        std::vector<unsigned char> sidechain_proposal_list_new;\n+        std::set<uint8_t> new_sidechains_activated;\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+            Assert(!proposal_s.empty());\n+            Sidechain proposal;\n+            proposal_s >> proposal;\n+\n+            COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+            CDataStream old_sidechain_s = GetDBEntry(view, sidechain_record_id);\n+            if (!old_sidechain_s.empty()) {\n+                // This would be an overwrite, so it must wait for the final completion after SIDECHAIN_WITHDRAW_PERIOD\n+                sidechain_proposal_list_new.resize(sidechain_proposal_list_new.size() + sidechain_proposal_hash.size());\n+                memcpy(&sidechain_proposal_list_new.data()[sidechain_proposal_list_new.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+                continue;\n+            }\n+\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_ACTIVATION_THRESHOLD) {\n+                // Activate new sidechain\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+                new_sidechains_activated.insert(proposal.idnum);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        if (!new_sidechains_activated.empty()) {\n+            Assume(sidechain_proposal_list.size() != sidechain_proposal_list_new.size());\n+            // Assign CTIPs\n+            for (size_t output_index = 0; output_index < tx.vout.size(); ++output_index) {\n+                if (!tx.vout[output_index].scriptPubKey.IsDrivechain()) continue;\n+\n+                const uint8_t sidechain_id = tx.vout[output_index].scriptPubKey[DRIVECHAIN_SCRIPT_SIDECHAIN_ID_OFFSET];\n+                if (new_sidechains_activated.find(sidechain_id) == new_sidechains_activated.end()) {\n+                    // TODO: OP_DRIVECHAIN (or OP_NOP5) for a non-activating sidechain id; should this be invalid??\n+                    continue;\n+                }\n+\n+                CDataStream ctip_info(SER_NETWORK, PROTOCOL_VERSION);\n+                ctip_info << sidechain_id;\n+                CreateDBEntry(view, txundo, block_height, {tx.GetHash(), DBIDX_SIDECHAIN_CTIP_INFO}, ctip_info);\n+            }\n+            if (!new_sidechains_activated.empty()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-activated-without-ctip\");\n+            }\n+        }\n+\n+        if (sidechain_proposal_list.size() != sidechain_proposal_list_new.size()) {\n+            Assume(!new_sidechains_activated.empty());\n+            COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+            DeleteDBEntry(view, txundo, record_id);\n+\n+            if (!(sidechain_proposal_list_new.empty() && withdraw_proposal_list.empty())) {\n+                CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+                proposal_list << sidechain_proposal_list_new;\n+                proposal_list << withdraw_proposal_list;\n+                CreateDBEntry(view, txundo, block_height, record_id, proposal_list);\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool VerifyDrivechainSpend(const CTransaction& tx, const unsigned int sidechain_input_n, const std::vector<CTxOut>& spent_outputs, const CCoinsViewCache& view, TxValidationState& state) {\n+    const CTxIn& sidechain_input = tx.vin[sidechain_input_n];\n+    // TODO: Do we want to verify there's only one sidechain involved? BIP300 says yes, but why?\n+\n+    // Lookup sidechain number from CTIP and ensure this is in fact a CTIP to begin with\n+    // FIXME: It might be a good idea to include the sidechain # in the tx itself somewhere?\n+    uint8_t sidechain_id;\n+    {\n+        CDataStream ctip_info = GetDBEntry(view, {sidechain_input.prevout.hash, DBIDX_SIDECHAIN_CTIP_INFO});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1318512848",
      "id" : 1318512848,
      "line" : 370,
      "node_id" : "PRRC_kwDOABII585OlujQ",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 370,
      "original_position" : 366,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 370,
      "pull_request_review_id" : 1615286414,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318512848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T12:12:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318512848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1318523328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318523328"
         }
      },
      "author_association" : "NONE",
      "body" : "No, to the second question. The withdrawal has a version of APO (called the \"blinded hash\", with the CTIP input zeroed out).",
      "commit_id" : "3fda7b30aecc19271e56607d301b697a56ae7b5c",
      "created_at" : "2023-09-07T12:20:39Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];\n+            // TODO: Implement formats 3+? Or at least validate\n+                // NOTE data_format 2 changed to 0 FIXME\n+                // TODO: (new) data format 2 sets it to the ACKs from the previous block - but those aren't known, have the same cost, and encourages blind upvoting; so can we get rid of it?\n+                // TODO: data format 3 upvotes any bundle leading its rivals by at least 50 ACKs -- also encourages blind upvoting :/\n+            // TODO: How is vote vector actually encoded?\n+            // TODO: Block is invalid if there are no bundles proposed at all\n+            // FIXME: Presumably blocks should only be able to vote once - this is missing in the BIP\n+            for (int sidechain_id = 0; sidechain_id < 0x100; ++sidechain_id) {\n+                // FIXME: bounds checking\n+                // FIXME: skip votes for sidechains with no proposals\n+                uint16_t vote = out.scriptPubKey[6 + (sidechain_id * data_format)];\n+                if (data_format == 2) {\n+                    vote |= uint16_t{out.scriptPubKey[6 + (sidechain_id * data_format) + 1]} << 8;\n+                } else if (vote >= 0xfe) {\n+                    vote |= 0xff00;\n+                }\n+\n+                if (vote == 0xffff) continue;  // abstain\n+\n+                // FIXME: what if it's missing?\n+                CDataStream withdraw_proposals = GetDBEntry(view, {uint256{(uint8_t)sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST});\n+                uint256 bundle_hash;\n+                bool found_bundle{false};\n+                for (uint16_t bundle_hash_num = 0; !withdraw_proposals.eof(); ++bundle_hash_num) {\n+                    withdraw_proposals >> bundle_hash;\n+                    if (bundle_hash_num == vote) found_bundle = true;\n+                    IncrementDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, (bundle_hash_num == vote) ? 1 : -1);\n+                }\n+                if ((!found_bundle) && vote != 0xfffe) {\n+                    return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-ack-nonexistent\");\n+                }\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_PROPOSE)) {\n+            if (out.scriptPubKey.size() != 0x26) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            uint256 bundle_hash;\n+            uint8_t sidechain_id;\n+            try {\n+                s >> bundle_hash;\n+                s >> sidechain_id;\n+            } catch (...) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+\n+            if (GetDBEntry(view, {uint256{sidechain_id}, DBIDX_SIDECHAIN_DATA}).empty()) {\n+                // \"M3 is ignored...if it is for a sidechain that doesn't exist.\"\n+                continue;\n+            }\n+\n+            // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+            // TODO: maybe define this in the BIP and M3 ?\n+            bundle_hash = CalculateDrivechainWithdrawInternalHash(bundle_hash, sidechain_id);\n+\n+            // \"M3 is invalid if...This block already has an M3 for that nSidechain.\"\n+            if (saw_withdraw_proposed_for_sidechain.find(sidechain_id) != saw_withdraw_proposed_for_sidechain.end()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-multiple\");\n+            }\n+            saw_withdraw_proposed_for_sidechain.insert(sidechain_id);\n+\n+            // FIXME: \"M3 is invalid if...A bundle with this hash already paid out. A bundle with this hash was rejected in the past.\" is not practical to track!\n+\n+            if (!GetDBEntry(view, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}).empty()) {\n+                // Withdraw has already been proposed, invalid\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-duplicate\");\n+            }\n+\n+            ModifyDBEntry(view, txundo, block_height, {uint256{sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST}, [&bundle_hash](CDataStream& withdraw_proposals){\n+                withdraw_proposals << bundle_hash;\n+            });\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, s);\n+\n+            withdraw_proposal_list.resize(withdraw_proposal_list.size() + bundle_hash.size());\n+            memcpy(&withdraw_proposal_list.data()[withdraw_proposal_list.size() - bundle_hash.size()], bundle_hash.data(), bundle_hash.size());  // FIXME: C++ify\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_ACK)) {\n+            if (saw_sidechain_acks) {\n+                // FIXME: shouldn't it be possible to ACK multiple proposals for different sidechain ids??\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-multiple\");\n+            }\n+            saw_sidechain_acks = true;\n+\n+            if (out.scriptPubKey.size() != 0x25) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unparsable\");\n+            }\n+            const uint256 sidechain_proposal_hash{Span{&out.scriptPubKey[5], 0x20}};\n+            try {\n+                IncrementDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, 1);\n+            } catch (...) {  // TODO: make this explicitly for a non-existent entry\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unknown\");\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_PROPOSE)) {\n+            if (proposed_a_sidechain) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-multiple\");\n+            }\n+            proposed_a_sidechain = true;\n+\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            Sidechain proposed;\n+            try {\n+                s >> proposed;\n+            } catch (...) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-unparsable\");\n+            }\n+\n+            // TODO: block is invalid if proposed matches the current sidechain\n+\n+            uint256 sidechain_proposal_hash;\n+            CSHA256().Write(out.scriptPubKey.data() + 5, out.scriptPubKey.size() - 5).Finalize(sidechain_proposal_hash.data());\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL}, s);\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, s);\n+\n+            sidechain_proposal_list.resize(sidechain_proposal_list.size() + sidechain_proposal_hash.size());\n+            memcpy(&sidechain_proposal_list.data()[sidechain_proposal_list.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+        }\n+    }\n+\n+    if (!(sidechain_proposal_list.empty() && withdraw_proposal_list.empty())) {\n+        CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+        proposal_list << sidechain_proposal_list;\n+        proposal_list << withdraw_proposal_list;\n+        CreateDBEntry(view, txundo, block_height, {ArithToUint256(arith_uint256{(uint64_t)block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST}, proposal_list);\n+    }\n+\n+    // Perform sidechain overwriting/expiry and withdraw expiry\n+    int completed_block_height = block_height - (SIDECHAIN_WITHDRAW_PERIOD - 1);\n+    COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+    CDataStream completed_proposal_list = GetDBEntry(view, record_id);\n+    if (!completed_proposal_list.empty()) {\n+        DeleteDBEntry(view, txundo, record_id);\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_WITHDRAW_THRESHOLD) {\n+                // Overwrite an existing sidechain with a new one\n+                CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+                Assert(!proposal_s.empty());\n+                Sidechain proposal;\n+                proposal_s >> proposal;\n+\n+                COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+                DeleteDBEntry(view, txundo, sidechain_record_id);\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        for (size_t i = 0; i < withdraw_proposal_list.size(); i += uint256::size()) {\n+            uint256 withdraw_proposal_hash{Span{&withdraw_proposal_list[i], uint256::size()}};\n+            // FIXME: remove from DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST\n+            DeleteDBEntry(view, txundo, {withdraw_proposal_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS});\n+        }\n+    }\n+\n+    // New sidechain activation\n+    completed_block_height = block_height - (SIDECHAIN_ACTIVATION_PERIOD - 1);\n+    completed_proposal_list = GetDBEntry(view, {ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST});\n+    if (!completed_proposal_list.empty()) {\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        std::vector<unsigned char> sidechain_proposal_list_new;\n+        std::set<uint8_t> new_sidechains_activated;\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+            Assert(!proposal_s.empty());\n+            Sidechain proposal;\n+            proposal_s >> proposal;\n+\n+            COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+            CDataStream old_sidechain_s = GetDBEntry(view, sidechain_record_id);\n+            if (!old_sidechain_s.empty()) {\n+                // This would be an overwrite, so it must wait for the final completion after SIDECHAIN_WITHDRAW_PERIOD\n+                sidechain_proposal_list_new.resize(sidechain_proposal_list_new.size() + sidechain_proposal_hash.size());\n+                memcpy(&sidechain_proposal_list_new.data()[sidechain_proposal_list_new.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+                continue;\n+            }\n+\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_ACTIVATION_THRESHOLD) {\n+                // Activate new sidechain\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+                new_sidechains_activated.insert(proposal.idnum);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        if (!new_sidechains_activated.empty()) {\n+            Assume(sidechain_proposal_list.size() != sidechain_proposal_list_new.size());\n+            // Assign CTIPs\n+            for (size_t output_index = 0; output_index < tx.vout.size(); ++output_index) {\n+                if (!tx.vout[output_index].scriptPubKey.IsDrivechain()) continue;\n+\n+                const uint8_t sidechain_id = tx.vout[output_index].scriptPubKey[DRIVECHAIN_SCRIPT_SIDECHAIN_ID_OFFSET];\n+                if (new_sidechains_activated.find(sidechain_id) == new_sidechains_activated.end()) {\n+                    // TODO: OP_DRIVECHAIN (or OP_NOP5) for a non-activating sidechain id; should this be invalid??\n+                    continue;\n+                }\n+\n+                CDataStream ctip_info(SER_NETWORK, PROTOCOL_VERSION);\n+                ctip_info << sidechain_id;\n+                CreateDBEntry(view, txundo, block_height, {tx.GetHash(), DBIDX_SIDECHAIN_CTIP_INFO}, ctip_info);\n+            }\n+            if (!new_sidechains_activated.empty()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-activated-without-ctip\");\n+            }\n+        }\n+\n+        if (sidechain_proposal_list.size() != sidechain_proposal_list_new.size()) {\n+            Assume(!new_sidechains_activated.empty());\n+            COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+            DeleteDBEntry(view, txundo, record_id);\n+\n+            if (!(sidechain_proposal_list_new.empty() && withdraw_proposal_list.empty())) {\n+                CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+                proposal_list << sidechain_proposal_list_new;\n+                proposal_list << withdraw_proposal_list;\n+                CreateDBEntry(view, txundo, block_height, record_id, proposal_list);\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool VerifyDrivechainSpend(const CTransaction& tx, const unsigned int sidechain_input_n, const std::vector<CTxOut>& spent_outputs, const CCoinsViewCache& view, TxValidationState& state) {\n+    const CTxIn& sidechain_input = tx.vin[sidechain_input_n];\n+    // TODO: Do we want to verify there's only one sidechain involved? BIP300 says yes, but why?\n+\n+    // Lookup sidechain number from CTIP and ensure this is in fact a CTIP to begin with\n+    // FIXME: It might be a good idea to include the sidechain # in the tx itself somewhere?\n+    uint8_t sidechain_id;\n+    {\n+        CDataStream ctip_info = GetDBEntry(view, {sidechain_input.prevout.hash, DBIDX_SIDECHAIN_CTIP_INFO});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1318523328",
      "id" : 1318523328,
      "in_reply_to_id" : 1318512848,
      "line" : 370,
      "node_id" : "PRRC_kwDOABII585OlxHA",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 370,
      "original_position" : 366,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 370,
      "pull_request_review_id" : 1615301275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318523328/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T12:20:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318523328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3165891?v=4",
         "events_url" : "https://api.github.com/users/psztorc/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psztorc/followers",
         "following_url" : "https://api.github.com/users/psztorc/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psztorc/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psztorc",
         "id" : 3165891,
         "login" : "psztorc",
         "node_id" : "MDQ6VXNlcjMxNjU4OTE=",
         "organizations_url" : "https://api.github.com/users/psztorc/orgs",
         "received_events_url" : "https://api.github.com/users/psztorc/received_events",
         "repos_url" : "https://api.github.com/users/psztorc/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psztorc/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psztorc/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psztorc"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1318534420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318534420"
         }
      },
      "author_association" : "NONE",
      "body" : "Yep, youâre right",
      "commit_id" : "3fda7b30aecc19271e56607d301b697a56ae7b5c",
      "created_at" : "2023-09-07T12:30:10Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+    uint256 internal_hash;\n+    CSHA256().Write(blinded_hash.data(), blinded_hash.size()).Write(&sidechain_id, sizeof(sidechain_id)).Finalize(internal_hash.data());\n+    return internal_hash;\n+}\n+\n+bool UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &txundo, int block_height, BlockValidationState& state)\n+{\n+    Assert(tx.IsCoinBase());\n+\n+    std::vector<unsigned char> sidechain_proposal_list, withdraw_proposal_list;\n+    std::set<uint8_t> saw_withdraw_proposed_for_sidechain;\n+    bool proposed_a_sidechain{false}, saw_sidechain_acks{false};\n+\n+    for (auto& out : tx.vout) {\n+        if (out.scriptPubKey.size() < 5) continue;\n+        if (out.scriptPubKey[0] != OP_RETURN) continue;\n+        // FIXME: The rest should probably be serialised, but neither BIP300 nor its reference implementation does that\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_PROPOSE[] = {0xd5, 0xe0, 0xc4, 0xaf};  // n.b. 20 sigops\n+        static constexpr uint8_t BIP300_HEADER_SIDECHAIN_ACK[]     = {0xd6, 0xe1, 0xc5, 0xbf};\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_PROPOSE[]  = {0xd4, 0x5a, 0xa9, 0x43};  // n.b. 67 byte push followed by only 32 bytes\n+        static constexpr uint8_t BIP300_HEADER_WITHDRAW_ACK[]      = {0xd7, 0x7d, 0x17, 0x76};  // n.b. 23-byte push followed by variable bytes\n+        if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_ACK)) {\n+            const uint8_t data_format = out.scriptPubKey[6];\n+            // TODO: Implement formats 3+? Or at least validate\n+                // NOTE data_format 2 changed to 0 FIXME\n+                // TODO: (new) data format 2 sets it to the ACKs from the previous block - but those aren't known, have the same cost, and encourages blind upvoting; so can we get rid of it?\n+                // TODO: data format 3 upvotes any bundle leading its rivals by at least 50 ACKs -- also encourages blind upvoting :/\n+            // TODO: How is vote vector actually encoded?\n+            // TODO: Block is invalid if there are no bundles proposed at all\n+            // FIXME: Presumably blocks should only be able to vote once - this is missing in the BIP\n+            for (int sidechain_id = 0; sidechain_id < 0x100; ++sidechain_id) {\n+                // FIXME: bounds checking\n+                // FIXME: skip votes for sidechains with no proposals\n+                uint16_t vote = out.scriptPubKey[6 + (sidechain_id * data_format)];\n+                if (data_format == 2) {\n+                    vote |= uint16_t{out.scriptPubKey[6 + (sidechain_id * data_format) + 1]} << 8;\n+                } else if (vote >= 0xfe) {\n+                    vote |= 0xff00;\n+                }\n+\n+                if (vote == 0xffff) continue;  // abstain\n+\n+                // FIXME: what if it's missing?\n+                CDataStream withdraw_proposals = GetDBEntry(view, {uint256{(uint8_t)sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST});\n+                uint256 bundle_hash;\n+                bool found_bundle{false};\n+                for (uint16_t bundle_hash_num = 0; !withdraw_proposals.eof(); ++bundle_hash_num) {\n+                    withdraw_proposals >> bundle_hash;\n+                    if (bundle_hash_num == vote) found_bundle = true;\n+                    IncrementDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, (bundle_hash_num == vote) ? 1 : -1);\n+                }\n+                if ((!found_bundle) && vote != 0xfffe) {\n+                    return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-ack-nonexistent\");\n+                }\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_WITHDRAW_PROPOSE)) {\n+            if (out.scriptPubKey.size() != 0x26) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            uint256 bundle_hash;\n+            uint8_t sidechain_id;\n+            try {\n+                s >> bundle_hash;\n+                s >> sidechain_id;\n+            } catch (...) {\n+                // \"M3 is ignored if it does not parse\"\n+                continue;\n+            }\n+\n+            if (GetDBEntry(view, {uint256{sidechain_id}, DBIDX_SIDECHAIN_DATA}).empty()) {\n+                // \"M3 is ignored...if it is for a sidechain that doesn't exist.\"\n+                continue;\n+            }\n+\n+            // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains\n+            // TODO: maybe define this in the BIP and M3 ?\n+            bundle_hash = CalculateDrivechainWithdrawInternalHash(bundle_hash, sidechain_id);\n+\n+            // \"M3 is invalid if...This block already has an M3 for that nSidechain.\"\n+            if (saw_withdraw_proposed_for_sidechain.find(sidechain_id) != saw_withdraw_proposed_for_sidechain.end()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-multiple\");\n+            }\n+            saw_withdraw_proposed_for_sidechain.insert(sidechain_id);\n+\n+            // FIXME: \"M3 is invalid if...A bundle with this hash already paid out. A bundle with this hash was rejected in the past.\" is not practical to track!\n+\n+            if (!GetDBEntry(view, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}).empty()) {\n+                // Withdraw has already been proposed, invalid\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-withdraw-propose-duplicate\");\n+            }\n+\n+            ModifyDBEntry(view, txundo, block_height, {uint256{sidechain_id}, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST}, [&bundle_hash](CDataStream& withdraw_proposals){\n+                withdraw_proposals << bundle_hash;\n+            });\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {bundle_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS}, s);\n+\n+            withdraw_proposal_list.resize(withdraw_proposal_list.size() + bundle_hash.size());\n+            memcpy(&withdraw_proposal_list.data()[withdraw_proposal_list.size() - bundle_hash.size()], bundle_hash.data(), bundle_hash.size());  // FIXME: C++ify\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_ACK)) {\n+            if (saw_sidechain_acks) {\n+                // FIXME: shouldn't it be possible to ACK multiple proposals for different sidechain ids??\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-multiple\");\n+            }\n+            saw_sidechain_acks = true;\n+\n+            if (out.scriptPubKey.size() != 0x25) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unparsable\");\n+            }\n+            const uint256 sidechain_proposal_hash{Span{&out.scriptPubKey[5], 0x20}};\n+            try {\n+                IncrementDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, 1);\n+            } catch (...) {  // TODO: make this explicitly for a non-existent entry\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-ack-unknown\");\n+            }\n+        } else if (std::equal(&out.scriptPubKey[1], &out.scriptPubKey[5], BIP300_HEADER_SIDECHAIN_PROPOSE)) {\n+            if (proposed_a_sidechain) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-multiple\");\n+            }\n+            proposed_a_sidechain = true;\n+\n+            CDataStream s(MakeByteSpan(out.scriptPubKey).subspan(5), SER_NETWORK, PROTOCOL_VERSION);\n+            Sidechain proposed;\n+            try {\n+                s >> proposed;\n+            } catch (...) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-sidechain-propose-unparsable\");\n+            }\n+\n+            // TODO: block is invalid if proposed matches the current sidechain\n+\n+            uint256 sidechain_proposal_hash;\n+            CSHA256().Write(out.scriptPubKey.data() + 5, out.scriptPubKey.size() - 5).Finalize(sidechain_proposal_hash.data());\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL}, s);\n+\n+            s.clear();\n+            s << uint16_t{0};\n+            CreateDBEntry(view, txundo, block_height, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL_ACKS}, s);\n+\n+            sidechain_proposal_list.resize(sidechain_proposal_list.size() + sidechain_proposal_hash.size());\n+            memcpy(&sidechain_proposal_list.data()[sidechain_proposal_list.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+        }\n+    }\n+\n+    if (!(sidechain_proposal_list.empty() && withdraw_proposal_list.empty())) {\n+        CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+        proposal_list << sidechain_proposal_list;\n+        proposal_list << withdraw_proposal_list;\n+        CreateDBEntry(view, txundo, block_height, {ArithToUint256(arith_uint256{(uint64_t)block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST}, proposal_list);\n+    }\n+\n+    // Perform sidechain overwriting/expiry and withdraw expiry\n+    int completed_block_height = block_height - (SIDECHAIN_WITHDRAW_PERIOD - 1);\n+    COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+    CDataStream completed_proposal_list = GetDBEntry(view, record_id);\n+    if (!completed_proposal_list.empty()) {\n+        DeleteDBEntry(view, txundo, record_id);\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_WITHDRAW_THRESHOLD) {\n+                // Overwrite an existing sidechain with a new one\n+                CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+                Assert(!proposal_s.empty());\n+                Sidechain proposal;\n+                proposal_s >> proposal;\n+\n+                COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+                DeleteDBEntry(view, txundo, sidechain_record_id);\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        for (size_t i = 0; i < withdraw_proposal_list.size(); i += uint256::size()) {\n+            uint256 withdraw_proposal_hash{Span{&withdraw_proposal_list[i], uint256::size()}};\n+            // FIXME: remove from DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_LIST\n+            DeleteDBEntry(view, txundo, {withdraw_proposal_hash, DBIDX_SIDECHAIN_WITHDRAW_PROPOSAL_ACKS});\n+        }\n+    }\n+\n+    // New sidechain activation\n+    completed_block_height = block_height - (SIDECHAIN_ACTIVATION_PERIOD - 1);\n+    completed_proposal_list = GetDBEntry(view, {ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST});\n+    if (!completed_proposal_list.empty()) {\n+        completed_proposal_list >> sidechain_proposal_list;\n+        completed_proposal_list >> withdraw_proposal_list;\n+\n+        std::vector<unsigned char> sidechain_proposal_list_new;\n+        std::set<uint8_t> new_sidechains_activated;\n+        for (size_t i = 0; i < sidechain_proposal_list.size(); i += uint256::size()) {\n+            uint256 sidechain_proposal_hash{Span{&sidechain_proposal_list[i], uint256::size()}};\n+            CDataStream proposal_s = GetDBEntry(view, {sidechain_proposal_hash, DBIDX_SIDECHAIN_PROPOSAL});\n+            Assert(!proposal_s.empty());\n+            Sidechain proposal;\n+            proposal_s >> proposal;\n+\n+            COutPoint sidechain_record_id{uint256{proposal.idnum}, DBIDX_SIDECHAIN_DATA};\n+            CDataStream old_sidechain_s = GetDBEntry(view, sidechain_record_id);\n+            if (!old_sidechain_s.empty()) {\n+                // This would be an overwrite, so it must wait for the final completion after SIDECHAIN_WITHDRAW_PERIOD\n+                sidechain_proposal_list_new.resize(sidechain_proposal_list_new.size() + sidechain_proposal_hash.size());\n+                memcpy(&sidechain_proposal_list_new.data()[sidechain_proposal_list_new.size() - sidechain_proposal_hash.size()], sidechain_proposal_hash.data(), sidechain_proposal_hash.size());  // FIXME: C++ify\n+                continue;\n+            }\n+\n+            record_id.hash = sidechain_proposal_hash;\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL_ACKS;\n+            uint16_t acks;\n+            {\n+                CDataStream acks_s = GetDBEntry(view, record_id);\n+                Assert(!acks_s.empty());\n+                acks_s >> acks;\n+            }\n+            if (acks >= SIDECHAIN_ACTIVATION_THRESHOLD) {\n+                // Activate new sidechain\n+                CreateDBEntry(view, txundo, block_height, sidechain_record_id, proposal_s);\n+                new_sidechains_activated.insert(proposal.idnum);\n+            }\n+            DeleteDBEntry(view, txundo, record_id);\n+            record_id.n = DBIDX_SIDECHAIN_PROPOSAL;\n+            DeleteDBEntry(view, txundo, record_id);\n+        }\n+\n+        if (!new_sidechains_activated.empty()) {\n+            Assume(sidechain_proposal_list.size() != sidechain_proposal_list_new.size());\n+            // Assign CTIPs\n+            for (size_t output_index = 0; output_index < tx.vout.size(); ++output_index) {\n+                if (!tx.vout[output_index].scriptPubKey.IsDrivechain()) continue;\n+\n+                const uint8_t sidechain_id = tx.vout[output_index].scriptPubKey[DRIVECHAIN_SCRIPT_SIDECHAIN_ID_OFFSET];\n+                if (new_sidechains_activated.find(sidechain_id) == new_sidechains_activated.end()) {\n+                    // TODO: OP_DRIVECHAIN (or OP_NOP5) for a non-activating sidechain id; should this be invalid??\n+                    continue;\n+                }\n+\n+                CDataStream ctip_info(SER_NETWORK, PROTOCOL_VERSION);\n+                ctip_info << sidechain_id;\n+                CreateDBEntry(view, txundo, block_height, {tx.GetHash(), DBIDX_SIDECHAIN_CTIP_INFO}, ctip_info);\n+            }\n+            if (!new_sidechains_activated.empty()) {\n+                return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-drivechain-activated-without-ctip\");\n+            }\n+        }\n+\n+        if (sidechain_proposal_list.size() != sidechain_proposal_list_new.size()) {\n+            Assume(!new_sidechains_activated.empty());\n+            COutPoint record_id{ArithToUint256(arith_uint256{(uint64_t)completed_block_height}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n+            DeleteDBEntry(view, txundo, record_id);\n+\n+            if (!(sidechain_proposal_list_new.empty() && withdraw_proposal_list.empty())) {\n+                CDataStream proposal_list(SER_NETWORK, PROTOCOL_VERSION);\n+                proposal_list << sidechain_proposal_list_new;\n+                proposal_list << withdraw_proposal_list;\n+                CreateDBEntry(view, txundo, block_height, record_id, proposal_list);\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool VerifyDrivechainSpend(const CTransaction& tx, const unsigned int sidechain_input_n, const std::vector<CTxOut>& spent_outputs, const CCoinsViewCache& view, TxValidationState& state) {\n+    const CTxIn& sidechain_input = tx.vin[sidechain_input_n];\n+    // TODO: Do we want to verify there's only one sidechain involved? BIP300 says yes, but why?\n+\n+    // Lookup sidechain number from CTIP and ensure this is in fact a CTIP to begin with\n+    // FIXME: It might be a good idea to include the sidechain # in the tx itself somewhere?\n+    uint8_t sidechain_id;\n+    {\n+        CDataStream ctip_info = GetDBEntry(view, {sidechain_input.prevout.hash, DBIDX_SIDECHAIN_CTIP_INFO});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1318534420",
      "id" : 1318534420,
      "in_reply_to_id" : 1318512848,
      "line" : 370,
      "node_id" : "PRRC_kwDOABII585Olz0U",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 370,
      "original_position" : 366,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 370,
      "pull_request_review_id" : 1615320096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318534420/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T12:30:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318534420",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/115941166?v=4",
         "events_url" : "https://api.github.com/users/rot13maxi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rot13maxi/followers",
         "following_url" : "https://api.github.com/users/rot13maxi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rot13maxi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rot13maxi",
         "id" : 115941166,
         "login" : "rot13maxi",
         "node_id" : "U_kgDOBukfLg",
         "organizations_url" : "https://api.github.com/users/rot13maxi/orgs",
         "received_events_url" : "https://api.github.com/users/rot13maxi/received_events",
         "repos_url" : "https://api.github.com/users/rot13maxi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rot13maxi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rot13maxi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rot13maxi"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> and the one\r\n\r\nIts so funny that you think that zero block has a key to it... maybe you should give up the satoshi act you're making too many mistakes already.  \r\n\r\n> > > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > > \r\n> > > \r\n> > > I have no problem with that at all.\r\n> > > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > > Read what I say, and don't attack people in person.\r\n> > > So far in logic a claim is true, false or inconclusive.\r\n> > > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> > \r\n> > \r\n> > There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n> \r\n> I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... What I did paste manually, is not random, there is also signing involved with a key to have the final result. I hope you are not a bitcoin dev. Read a book bitcoin for dummies...\r\n\r\n\r\n\r\n> > > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > > \r\n> > > \r\n> > > I have no problem with that at all.\r\n> > > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > > Read what I say, and don't attack people in person.\r\n> > > So far in logic a claim is true, false or inconclusive.\r\n> > > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> > \r\n> > \r\n> > There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n> \r\n> I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... What I did paste manually, is not random, there is also signing involved with a key to have the final result. I hope you are not a bitcoin dev. Read a book bitcoin for dummies...\r\n\r\nIt is funny that you think that zero block has a key to it... maybe you should give up the satoshi act you're making too many mistakes already.  Maybe you are relying on the explorer for your facts, which has a placeholder transaction added a few years ago for block zero, there is none actually there lol, because it is physically impossible.  Also multisig wasn't added until after satoshi stopped posting, and the first wallet that supported multisig came out in 2013, so you could not have revoked any key either.  \r\n\r\nAnd you will be pleased to know I am not a dev, but I was there at the start.  I will check out the bitcoin for dummies book you recommend though thank you for the tip.",
      "created_at" : "2023-09-10T20:08:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1712925925",
      "id" : 1712925925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585mGSzl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1712925925/reactions"
      },
      "updated_at" : "2023-09-10T20:08:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1712925925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48937881?v=4",
         "events_url" : "https://api.github.com/users/amritabithi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amritabithi/followers",
         "following_url" : "https://api.github.com/users/amritabithi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amritabithi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amritabithi",
         "id" : 48937881,
         "login" : "amritabithi",
         "node_id" : "MDQ6VXNlcjQ4OTM3ODgx",
         "organizations_url" : "https://api.github.com/users/amritabithi/orgs",
         "received_events_url" : "https://api.github.com/users/amritabithi/received_events",
         "repos_url" : "https://api.github.com/users/amritabithi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amritabithi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amritabithi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amritabithi"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > and the one\r\n> \r\n> Its so funny that you think that zero block has a key to it... maybe you should give up the satoshi act you're making too many mistakes already.\r\n> \r\n> > > > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > > > \r\n> > > > \r\n> > > > I have no problem with that at all.\r\n> > > > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > > > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > > > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > > > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > > > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > > > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > > > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > > > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > > > Read what I say, and don't attack people in person.\r\n> > > > So far in logic a claim is true, false or inconclusive.\r\n> > > > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > > > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > > > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> > > \r\n> > > \r\n> > > There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n> > \r\n> > \r\n> > I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... What I did paste manually, is not random, there is also signing involved with a key to have the final result. I hope you are not a bitcoin dev. Read a book bitcoin for dummies...\r\n> \r\n> > > > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > > > \r\n> > > > \r\n> > > > I have no problem with that at all.\r\n> > > > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > > > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > > > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > > > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > > > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > > > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > > > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > > > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > > > Read what I say, and don't attack people in person.\r\n> > > > So far in logic a claim is true, false or inconclusive.\r\n> > > > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > > > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > > > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> > > \r\n> > > \r\n> > > There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n> > \r\n> > \r\n> > I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... What I did paste manually, is not random, there is also signing involved with a key to have the final result. I hope you are not a bitcoin dev. Read a book bitcoin for dummies...\r\n> \r\n> It is funny that you think that zero block has a key to it... maybe you should give up the satoshi act you're making too many mistakes already. Maybe you are relying on the explorer for your facts, which has a placeholder transaction added a few years ago for block zero, there is none actually there lol, because it is physically impossible. Also multisig wasn't added until after satoshi stopped posting, and the first wallet that supported multisig came out in 2013, so you could not have revoked any key either.\r\n> \r\n> And you will be pleased to know I am not a dev, but I was there at the start. I will check out the bitcoin for dummies book you recommend though thank you for the tip.\r\n\r\nYes the zero block has indeed a key assigned to it.  It is actually possible to digital sign messages with block 0\r\naka the genesis block.\r\n\r\nThe genesis block is not generated with bitcoind, it is generated with my own scripts.\r\n\r\nSo far Your excellent knowledge in the field.\r\n\r\nI will really close this debate.\r\n\r\nBut I warn people.  Some do know I am on twitter using the same handle.\r\nI was forced to do 'something' when Gavin want to make the blocksize larger with his 'BitcoinXT\r\nLater on I saw he blindly belief a hoaxer who could not even digital sign, however that hoaxer\r\ndid follow me on IRC, ICQ at that time and to get rid of him, I gave him an empty wallet.\r\nThat is the reason he could also inform some inside information.\r\n\r\nI warned that person, if he keeps to attack the Bitcoin Core Dev and if COOPA fails,\r\nhe will deal with me personally.  I do not bluff when I state I have the private keys of the \r\nGenesis (Yes Block 0) and (Block 1) and Yes, the private key of PGP key  0x18C09E865EC948A1\r\nAnd I have 20 keys more, I have keys since 1997\r\n\r\nI told many times , my native language is not English, most of my communication was reviewed\r\nby  Hal and some others who could speak perfectly British English.  The fact I am not from the UK,\r\nYou can find out I gave in bitcointalk an example using the currency 'euro'  and I used the German\r\nMailbox service.  Most mail to Hal was signed with PGP and I did use Mutt to strip headers.\r\nI used a chain of openproxies and tor to hide my IP and a anon mailforwarder.   I did buy bitcoin.org\r\nwith a very specific method as well I will not disclose...But Sirius knows what I talk about probably.\r\nI can not disclose too much inside information, because I do not want to arm my hoaxer to have more\r\ninfo to attack the project.  But I can say those keywords already mountainbike and poker.\r\n\r\nBesides this I warn that hoaxer, scammer Craig Wright again.  Before I did distribute the whitepaper,\r\nI used the technique many software writers do in my country.  They go to the notary office.  They give\r\na sealed envelope.  That content is unknown to the notary office.  Inside there are papers and a DVD.\r\nThat depot is legally made and registered and that stays in the vaults of the notary.  Only a judge can\r\nopen this to check content or of course it is void if someone else does.  Inside that envelope is my\r\nwhitepaper bitcoin.pdf...The original version before I did distribute it... Additionally Sato Shi Naka Moto\r\nare indeed 4 words in Japanse language with a meaning to explain that the real insight, wisdom is in\r\nanyones heart (center)  it is based a variation of a caeserian cypher I made from my firstname, middlename of my grandfather and my family name.  And finally, where all of you think there are some random bits here and there,\r\nwhen creating the genesisblock I did inject encrypted my name.  Actually that was Hal's idea because we did cooperate pretty close.  But I say this again.  Craig Wright will never, never sign with the genesisblock (block 0) and block 1.\r\nAnd if CSW reads this well, in ICQ/IRC chat we did talk about Freud and why I had totally no intention to come forward and claim (what Craig did suggest) the noble price.\r\n\r\nBitcoin is a decentralised project.  That is the reason the blocksize need to be minimal.  So everyone can be a fullnode.\r\nI am totally against that miners are not full nodes.  I do not agree either with the fact setgenerate was removed in version 0.13.... And I do not agree at all the ideas in BIP300.  Sidechaining can be an option but that option takes\r\na lot of preparion and study.  You simply can't run broken code or make decisions that mining becomes centralised.\r\n\r\nMany who did mine became rich, wealthy because of the use of GPU and later on ASIC.  I did mine only temporary\r\nusing CPU and actually Hal did mine faster as I did seen he used a mainframe...  Later on Hal shared bitcoin with me\r\nsimply transfering the wallets with IRC...\r\n\r\nBut I say this.  The project is decentralised.  Belief what You want about me.  If I had a choice I would not be here to talk, neither I would done something 10 years ago so the community could wake up.\r\n\r\nBut the legal game of CSW will fail.  But if I see the code, protocol of bitcoin changes in that way that I see centralisation, greed, whatever or safety issues and this is pushed through, I will act.  Then I will if needed digital sign, proof without doubt that I am the one and I FORK the project.\r\n\r\nYou all forget I have also a whale wallet that I currently use to stabilize bitcoin so to speak like a keel of a ship.  \r\nThe purpose of this wallet is to put later on mostly in a foundation to support free speech, innovation and so on.\r\nBecause I do not need fame, I do not need to drive a lambo.  I did realize with Hal and others of You, bitcoin. \r\nThat is my life project and much more valuable than all the money in the world.  You can not tame the Mammon\r\n(god of money) if you are the slave of it...  Some people have higher goals in their lives...\r\n\r\nDon't mess up bitcoin.  That's all I ask.  You may mock with me as much you want.  Tell people I speak crappy English,\r\nbut I code since I was 12, I did generate the genesisblock, I am the keyholder and sorry, but I am Satoshi Nakamoto.\r\nSorry I disappoint some of You.  I am not from the USA, the UK, Japan...I am not AI or part of the secret services.\r\n\r\nI am only a coder with a vision to bring the best to this world full of greed, exploitation and lies.  Especially\r\nwhen it is related to fiat money what needs to be pure after all and not manipulated by printing it behind the back\r\nof people to steal their purchasing power or actually their energy they did put into society...\r\n\r\nThanks for all those people who did contribute on the project.  Stay pure.\r\n\r\nSatoshin\r\n\r\n\r\n\r\nAll the Best,",
      "created_at" : "2023-09-11T13:59:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1713948162",
      "id" : 1713948162,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585mKMYC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1713948162/reactions"
      },
      "updated_at" : "2023-09-11T14:08:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1713948162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16897964?v=4",
         "events_url" : "https://api.github.com/users/aceofbitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aceofbitcoin/followers",
         "following_url" : "https://api.github.com/users/aceofbitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aceofbitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aceofbitcoin",
         "id" : 16897964,
         "login" : "aceofbitcoin",
         "node_id" : "MDQ6VXNlcjE2ODk3OTY0",
         "organizations_url" : "https://api.github.com/users/aceofbitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/aceofbitcoin/received_events",
         "repos_url" : "https://api.github.com/users/aceofbitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aceofbitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aceofbitcoin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aceofbitcoin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > and the one\r\n> \r\n> Its so funny that you think that zero block has a key to it... maybe you should give up the satoshi act you're making too many mistakes already.\r\n> \r\n> > > > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > > > \r\n> > > > \r\n> > > > I have no problem with that at all.\r\n> > > > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > > > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > > > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > > > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > > > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > > > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > > > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > > > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > > > Read what I say, and don't attack people in person.\r\n> > > > So far in logic a claim is true, false or inconclusive.\r\n> > > > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > > > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > > > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> > > \r\n> > > \r\n> > > There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n> > \r\n> > \r\n> > I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... What I did paste manually, is not random, there is also signing involved with a key to have the final result. I hope you are not a bitcoin dev. Read a book bitcoin for dummies...\r\n> \r\n> > > > > > I only needed to read the first sentence, to understand you are not Satoshi :)\r\n> > > > \r\n> > > > \r\n> > > > I have no problem with that at all.\r\n> > > > English was never my native language, that is why I used a GMX mailservice in Germany. And all my posts I did on bitcointalk, on metzdowd, except a few, were reviewed by Hal Finney.\r\n> > > > Besides all that we used shared mailboxes at vistomail except the known GMX mb that was mine only. And about coding and the plenty of posts on bitcointalk I could also say things I will not reveal here.\r\n> > > > But I tell You this. I don't bluff when I say I have the private keys of the genesis (block 0), block 1 and the well known pgp key 0x18C09E865EC948A1\r\n> > > > I revoked personally the repo key when Gavin was bamboozled by CSW so he would knew I did not agree. Because that key was linked to MY key.\r\n> > > > And I have a notary depot in a sealed envelope of MY whitepaper bitcoin.pdf before oct, 31 2008. That is why Craig Wright CSW will never have the b.lls to challenge me in court. Because he knows he would go down when I am forced to proof.\r\n> > > > I don't want to end up like Elon with a bunch of bodyguards after me. I really have no single benefit to proof myself or to sign. In fact mathematically the probability what I claim is one in a billion or even less.\r\n> > > > I have really no time to convince people. In fact my claims did harm me more as they did bring advantage to me. But I had no other choice after the BBC interview to do something to alert the community.\r\n> > > > But if I need I will digital sign. So print this out, maybe You come in history books.\r\n> > > > Read what I say, and don't attack people in person.\r\n> > > > So far in logic a claim is true, false or inconclusive.\r\n> > > > If you can't hold yourself to that simple scientific thing, You should join a cafÃ© or something but do not make judgements based on things you can't proof or statements in an emotional way without having all facts.\r\n> > > > I really do not care what You or anyone else think about me and my claims. Read what I did want to say about this BIP\r\n> > > > BTW: https://twitter.com/oasis_work/status/1579877366050213888\r\n> > > \r\n> > > \r\n> > > There is no private key from block zero, there couldn't be, because block zero is manually pasted in to the source after the initial run crashes, and recompiled before putting the network online, a block zero key doesn't make sense to say for the person who did the build...\r\n> > \r\n> > \r\n> > I can sign messages with the genesis block (zero 0), You have no clue what You are talking about... What I did paste manually, is not random, there is also signing involved with a key to have the final result. I hope you are not a bitcoin dev. Read a book bitcoin for dummies...\r\n> \r\n> It is funny that you think that zero block has a key to it... maybe you should give up the satoshi act you're making too many mistakes already. Maybe you are relying on the explorer for your facts, which has a placeholder transaction added a few years ago for block zero, there is none actually there lol, because it is physically impossible. Also multisig wasn't added until after satoshi stopped posting, and the first wallet that supported multisig came out in 2013, so you could not have revoked any key either.\r\n> \r\n> And you will be pleased to know I am not a dev, but I was there at the start. I will check out the bitcoin for dummies book you recommend though thank you for the tip.\r\n\r\nThe genesis has indeed a key assigned to it.\r\nYou can sign messages with block 0.\r\nHowever the genesis block is immutable, You can not transact it so to speak and there is your confusion.\r\n\r\nI did generate the genesis myself with my own scripts.\r\nAfterwards the result was hardcoded inside the daemon...",
      "created_at" : "2023-09-13T10:01:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1717326560",
      "id" : 1717326560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585mXFLg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717326560/reactions"
      },
      "updated_at" : "2023-09-13T10:04:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717326560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16897964?v=4",
         "events_url" : "https://api.github.com/users/aceofbitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aceofbitcoin/followers",
         "following_url" : "https://api.github.com/users/aceofbitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aceofbitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aceofbitcoin",
         "id" : 16897964,
         "login" : "aceofbitcoin",
         "node_id" : "MDQ6VXNlcjE2ODk3OTY0",
         "organizations_url" : "https://api.github.com/users/aceofbitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/aceofbitcoin/received_events",
         "repos_url" : "https://api.github.com/users/aceofbitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aceofbitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aceofbitcoin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aceofbitcoin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> You can sign messages with block 0.\r\n\r\nWhy don't you stop with all this BS and just post a couple messages signed with key of blocks #0 and #1?",
      "created_at" : "2023-09-13T10:39:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1717380856",
      "id" : 1717380856,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585mXSb4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717380856/reactions"
      },
      "updated_at" : "2023-09-13T10:39:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717380856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/29581654?v=4",
         "events_url" : "https://api.github.com/users/Pheromon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Pheromon/followers",
         "following_url" : "https://api.github.com/users/Pheromon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Pheromon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Pheromon",
         "id" : 29581654,
         "login" : "Pheromon",
         "node_id" : "MDQ6VXNlcjI5NTgxNjU0",
         "organizations_url" : "https://api.github.com/users/Pheromon/orgs",
         "received_events_url" : "https://api.github.com/users/Pheromon/received_events",
         "repos_url" : "https://api.github.com/users/Pheromon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Pheromon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Pheromon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Pheromon"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Oh. I thought you were claiming to be Satoshi.\r\n\r\nOn Wed, Sep 13, 2023, 5:39 AM Pheromon ***@***.***> wrote:\r\n\r\n> You can sign messages with block 0.\r\n>\r\n> Why don't you stop with all this BS and just post a couple messages signed\r\n> with key of blocks #0 and #1 <https://github.com/bitcoin/bitcoin/issues/1>\r\n> ?\r\n>\r\n> â\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1717380856>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/A7JWUW24BZRIXNZURGUSDTLX2GEOFANCNFSM6AAAAAA3ZE4L3M>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n",
      "created_at" : "2023-09-13T11:54:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1717482690",
      "id" : 1717482690,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585mXrTC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717482690/reactions"
      },
      "updated_at" : "2023-09-13T11:54:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717482690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/131295835?v=4",
         "events_url" : "https://api.github.com/users/joeyvee1986/events{/privacy}",
         "followers_url" : "https://api.github.com/users/joeyvee1986/followers",
         "following_url" : "https://api.github.com/users/joeyvee1986/following{/other_user}",
         "gists_url" : "https://api.github.com/users/joeyvee1986/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/joeyvee1986",
         "id" : 131295835,
         "login" : "joeyvee1986",
         "node_id" : "U_kgDOB9NqWw",
         "organizations_url" : "https://api.github.com/users/joeyvee1986/orgs",
         "received_events_url" : "https://api.github.com/users/joeyvee1986/received_events",
         "repos_url" : "https://api.github.com/users/joeyvee1986/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/joeyvee1986/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/joeyvee1986/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/joeyvee1986"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "As the first mainnet implementation of Drivechain, we are proud to say that we support BIP300 and BIP301 activation on Bitcoin!\r\n\r\nCheemsburgerking ACK!",
      "created_at" : "2023-09-26T23:39:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1736445209",
      "id" : 1736445209,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585ngA0Z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1736445209/reactions"
      },
      "updated_at" : "2023-09-26T23:39:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1736445209",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/87064980?v=4",
         "events_url" : "https://api.github.com/users/skydogenet/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skydogenet/followers",
         "following_url" : "https://api.github.com/users/skydogenet/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skydogenet/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skydogenet",
         "id" : 87064980,
         "login" : "skydogenet",
         "node_id" : "MDQ6VXNlcjg3MDY0OTgw",
         "organizations_url" : "https://api.github.com/users/skydogenet/orgs",
         "received_events_url" : "https://api.github.com/users/skydogenet/received_events",
         "repos_url" : "https://api.github.com/users/skydogenet/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skydogenet/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skydogenet/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skydogenet"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--13523179cfe9479db18ec6c5d236f789-->\r\nThere hasn't been much activity lately and the patch still needs rebase. What is the status here?\r\n\r\n* Is it still relevant? â¡ï¸ Please solve the conflicts to make it ready for review and to ensure the CI passes.\r\n* Is it no longer relevant? â¡ï¸ Please close.\r\n* Did the author lose interest or time to work on this? â¡ï¸ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\r\n",
      "created_at" : "2023-09-27T06:36:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1736788671",
      "id" : 1736788671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585nhUq_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1736788671/reactions"
      },
      "updated_at" : "2023-09-27T06:36:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1736788671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1362660430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362660430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There is no OP_DRIVECHAIN in the switch, and nothing different to be done here. The comment is added simply to ensure clarity in this code.",
      "commit_id" : "3fda7b30aecc19271e56607d301b697a56ae7b5c",
      "created_at" : "2023-10-17T19:32:40Z",
      "diff_hunk" : "@@ -591,6 +591,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n+                // NOTE: OP_DRIVECHAIN (OP_NOP5) is enforced in VerifyDrivechainSpend\n+\n                 case OP_NOP1: case OP_NOP4: case OP_NOP5:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1362660430",
      "id" : 1362660430,
      "in_reply_to_id" : 1301640710,
      "line" : 596,
      "node_id" : "PRRC_kwDOABII585ROIxO",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 596,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 6,
      "pull_request_review_id" : 1683212571,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362660430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T19:32:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362660430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1362668494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362668494"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It could be voted on because we only see the hash at that stage. But it would never be valid for more than one.",
      "commit_id" : "3fda7b30aecc19271e56607d301b697a56ae7b5c",
      "created_at" : "2023-10-17T19:41:47Z",
      "diff_hunk" : "@@ -0,0 +1,466 @@\n+// Copyright (c) 2017-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sidechain.h>\n+\n+#include <arith_uint256.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+\n+void CreateDBUndoData(CTxUndo &txundo, const uint8_t type, const COutPoint& record_id, const Coin& encoded_data) {\n+    Assert(record_id.n <= COutPoint::MAX_INDEX);\n+    Coin& undo = txundo.vprevout.emplace_back();\n+    undo = encoded_data;\n+    CDataStream s(SER_NETWORK, PROTOCOL_VERSION);\n+    s << record_id;\n+    Assert(s.size() == 0x24);\n+    auto& undo_data = undo.out.scriptPubKey;\n+    undo_data.insert(undo_data.begin(), 1 + s.size(), type);\n+    memcpy(&undo_data[1], &s[0], s.size());  // TODO: figure out how to jump through C++'s hoops to do this right\n+}\n+\n+void CreateDBEntry(CCoinsViewCache& cache, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const Span<const std::byte>& record_data) {\n+    CScript scriptPubKey(UCharCast(record_data.begin()), UCharCast(record_data.end()));\n+    cache.AddCoin(record_id, Coin(CTxOut{0, scriptPubKey}, block_height, /*fCoinbase=*/false), /*overwrite=*/false);\n+\n+    // Create undo data to tell DisconnectBlock to delete it\n+    Coin undo;\n+    CreateDBUndoData(txundo, 1, record_id, undo);\n+}\n+\n+void DeleteDBEntry(CCoinsViewCache& inputs, CTxUndo &txundo, const COutPoint& record_id) {\n+    Coin undo;\n+    bool is_spent = inputs.SpendCoin(record_id, &undo);\n+    assert(is_spent);\n+    CreateDBUndoData(txundo, 0, record_id, undo);\n+}\n+\n+CDataStream GetDBEntry(const CCoinsViewCache& inputs, const COutPoint& record_id) {\n+    const Coin& coin = inputs.AccessCoin(record_id);\n+    return CDataStream(MakeByteSpan(coin.out.scriptPubKey), SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+void ModifyDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const std::function<void(CDataStream&)>& modify_func) {\n+    CDataStream s = GetDBEntry(view, record_id);\n+    const bool new_entry = s.empty();\n+    modify_func(s);\n+    if (!new_entry) DeleteDBEntry(view, txundo, record_id);\n+    CreateDBEntry(view, txundo, block_height, record_id, s);\n+}\n+\n+void IncrementDBEntry(CCoinsViewCache& view, CTxUndo &txundo, const int block_height, const COutPoint& record_id, const int change) {\n+    ModifyDBEntry(view, txundo, block_height, record_id, [change](CDataStream& s){\n+        uint16_t counter;\n+        s >> counter;\n+        if (change < 0 && !counter) return;  // may be surprising if change is <-1\n+        counter += change;\n+        s.clear();\n+        s << counter;\n+    });\n+}\n+\n+uint256 CalculateDrivechainWithdrawBlindedHash(const CTransaction& tx) {\n+    CMutableTransaction mtx(tx);\n+    mtx.vin[0].SetNull();\n+    mtx.vout[0].SetNull();\n+    return mtx.GetHash();\n+}\n+\n+uint256 CalculateDrivechainWithdrawInternalHash(const uint256& blinded_hash, const uint8_t sidechain_id) {\n+    // Internally, we hash the bundle_hash with the sidechain_id to avoid conflicts between sidechains",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1362668494",
      "id" : 1362668494,
      "in_reply_to_id" : 1301656272,
      "line" : 79,
      "node_id" : "PRRC_kwDOABII585ROKvO",
      "original_commit_id" : "afc975bb6029e982e2bd5420d18e7ca0d4f4413e",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 79,
      "pull_request_review_id" : 1683225326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362668494/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T19:41:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362668494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1362676263"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362676263"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe the end goal, if Bitcoin moves forward with this, is to have miners rewrite deposits on the fly to update the CTIP as appropriate.",
      "commit_id" : "3fda7b30aecc19271e56607d301b697a56ae7b5c",
      "created_at" : "2023-10-17T19:48:58Z",
      "diff_hunk" : "@@ -171,4 +179,116 @@ void UpdateDrivechains(const CTransaction& tx, CCoinsViewCache& view, CTxUndo &t\n     proposal_list << withdraw_proposal_list;\n     COutPoint record_id{ArithToUint256(arith_uint256{uint64_t{block_height}}), DBIDX_SIDECHAIN_PROPOSAL_LIST};\n     CreateDBEntry(view, txundo, block_height, record_id, MakeByteSpan(proposal_list));\n+\n+    // TODO: clean up expiring stuff\n+    // TODO: activate sidechains and assign CTIPs\n+}\n+\n+bool VerifyDrivechainSpend(const CTransaction& tx, const unsigned int sidechain_input_n, const std::vector<CTxOut>& spent_outputs, const CCoinsViewCache& view, TxValidationState& state) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#discussion_r1362676263",
      "id" : 1362676263,
      "in_reply_to_id" : 1317992472,
      "line" : 362,
      "node_id" : "PRRC_kwDOABII585ROMon",
      "original_commit_id" : "d4eb444f6ba630f0ef009999b73282c5068ef4fd",
      "original_line" : 362,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/sidechain.cpp",
      "position" : 362,
      "pull_request_review_id" : 1683237820,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28311",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362676263/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T19:48:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362676263",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and added some fixes",
      "created_at" : "2023-10-17T20:42:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1767143205",
      "id" : 1767143205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585pVHcl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1767143205/reactions"
      },
      "updated_at" : "2023-10-17T20:42:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1767143205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Note that BIP-301 suffers from an [equivocation attack](https://petertodd.org/2023/drivechains#equivocation-attack). While there are [many other reasons](https://petertodd.org/2023/drivechains) to NACK this pull-req, at minimum the equivocation attack is a sufficient reason alone.",
      "created_at" : "2023-11-13T20:33:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1809045700",
      "id" : 1809045700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585r09jE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809045700/reactions"
      },
      "updated_at" : "2023-11-13T20:33:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809045700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Note that BIP-301 suffers from an [equivocation attack](https://petertodd.org/2023/drivechains#equivocation-attack). While there are [many other reasons](https://petertodd.org/2023/drivechains) to NACK this pull-req, at minimum the equivocation attack is a sufficient reason alone.\r\n\r\nIf that was an issue then we would add 1 byte... as you mention yourself \"An obvious solution would be to tag the OP_Return outputs with some kind of merge-mined chain identifier, and implement a strict rule consensus rule in the blind-merge-mined chain where the first matching tag wins.\"  It isn't an issue though. h* can and in our examples does include information about which chain it belongs to. ",
      "created_at" : "2023-11-13T23:46:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1809311749",
      "id" : 1809311749,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585r1-gF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809311749/reactions"
      },
      "updated_at" : "2023-11-13T23:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809311749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8107318?v=4",
         "events_url" : "https://api.github.com/users/CryptAxe/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CryptAxe/followers",
         "following_url" : "https://api.github.com/users/CryptAxe/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CryptAxe/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CryptAxe",
         "id" : 8107318,
         "login" : "CryptAxe",
         "node_id" : "MDQ6VXNlcjgxMDczMTg=",
         "organizations_url" : "https://api.github.com/users/CryptAxe/orgs",
         "received_events_url" : "https://api.github.com/users/CryptAxe/received_events",
         "repos_url" : "https://api.github.com/users/CryptAxe/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CryptAxe/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CryptAxe"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It isn't an issue though. h* can and in our examples does include information about which chain it belongs to.\r\n\r\nAs BIP-301 states, h* is a 32 byte hash digest. The problem is you can have two valid h*'s in the same coinbase, for the same chain, and without access to the data behind h*, you have no way of detecting that.",
      "created_at" : "2023-11-14T04:49:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1809545337",
      "id" : 1809545337,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585r23h5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809545337/reactions"
      },
      "updated_at" : "2023-11-14T04:49:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809545337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The sidechains have access to the data behind h*. The mainchain doesn't care but it can also tell: https://github.com/LayerTwo-Labs/mainchain/blob/3f4d632a90ebd5eb5f94dba24384235043c34a69/src/validation.cpp#L3952-L3990 This is an example of one part of the BMM h* validation from the old version of our code but you get the idea.",
      "created_at" : "2023-11-14T05:07:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1809556633",
      "id" : 1809556633,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585r26SZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809556633/reactions"
      },
      "updated_at" : "2023-11-14T05:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809556633",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8107318?v=4",
         "events_url" : "https://api.github.com/users/CryptAxe/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CryptAxe/followers",
         "following_url" : "https://api.github.com/users/CryptAxe/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CryptAxe/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CryptAxe",
         "id" : 8107318,
         "login" : "CryptAxe",
         "node_id" : "MDQ6VXNlcjgxMDczMTg=",
         "organizations_url" : "https://api.github.com/users/CryptAxe/orgs",
         "received_events_url" : "https://api.github.com/users/CryptAxe/received_events",
         "repos_url" : "https://api.github.com/users/CryptAxe/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CryptAxe/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CryptAxe"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The sidechains have access to the data behind h*. The mainchain doesn't care but it can also tell: https://github.com/LayerTwo-Labs/mainchain/blob/3f4d632a90ebd5eb5f94dba24384235043c34a69/src/validation.cpp#L3952-L3990 This is an example of one part of the BMM h* validation from the old version of our code but you get the idea.\r\n\r\nThat code allows for additional OP_Returns with the special BMM marker to be put in the set of coinbase outputs, beyond the set of BMMs that should be present due to txs in the block itself. ",
      "created_at" : "2023-11-14T05:49:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1809586628",
      "id" : 1809586628,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585r3BnE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809586628/reactions"
      },
      "updated_at" : "2023-11-14T05:49:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1809586628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-11-15T15:33:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1812756954",
      "id" : 1812756954,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585sDHna",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1812756954/reactions"
      },
      "updated_at" : "2023-11-15T15:33:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1812756954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Peter's \"equivocation attack\" is just him misunderstanding BMM -- specifically wrongly assuming it is like Namecoin (as he says in his linked article).\n\nUnlike Namecoin, which is its own Blockchain and can survive on its own, BMM assumes that L1 can be found -- the L2 therefore has full access to all of L1 already. L2 already sees everything on L1, and its order. \n\n(L2, of course, already sees everything on L2. And it knows what sidechain number it is.)\n\nUnfortunately, I don't think there's anything anyone can do, to actually get Peter to spend 5 minutes engaging with Bip300/301. Instead he is determined to:\n\n1) misunderstand the idea\n2) make something else up, that is inaccurate\n3) criticize that\n4) pat himself on the back and call it a day\n\nHis comments at Baltic Honeybadger indicate he had never visited the top of the project site drivechain.info at all in the past 4+ years. And his tweets before TabConf indicate that he had not yet any rudimentary familiarity with how the idea worked, but was going to declare it broken anyway. Even after paying him for his time, he couldn't be bothered to actually look at the idea, he has to just fabricate something instead -- the writeup is full to the brim of these errors and fabrications.\n\nNot sure what else there is to say.",
      "created_at" : "2023-11-15T21:04:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1813260102",
      "id" : 1813260102,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585sFCdG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1813260102/reactions"
      },
      "updated_at" : "2023-11-15T21:04:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1813260102",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3165891?v=4",
         "events_url" : "https://api.github.com/users/psztorc/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psztorc/followers",
         "following_url" : "https://api.github.com/users/psztorc/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psztorc/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psztorc",
         "id" : 3165891,
         "login" : "psztorc",
         "node_id" : "MDQ6VXNlcjMxNjU4OTE=",
         "organizations_url" : "https://api.github.com/users/psztorc/orgs",
         "received_events_url" : "https://api.github.com/users/psztorc/received_events",
         "repos_url" : "https://api.github.com/users/psztorc/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psztorc/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psztorc/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psztorc"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "On Wed, Nov 15, 2023 at 01:05:13PM -0800, Paul Sztorc wrote:\n> Peter's \"equivocation attack\" is just him misunderstanding BMM -- specifically wrongly assuming it is like Namecoin (as he says in his linked article).\n> \n> Unlike Namecoin, which is its own Blockchain and can survive on its own, BMM assumes that L1 can be found -- the L2 therefore has full access to all of L1 already. L2 already sees everything on L1, and its order. \n\nIf that is your design assumption, forcing BMM commitments to be put in the\ncoinbase is redundant and accomplishes nothing. The only reason to do that is\nfor the sake of SPV-type validation, in which case there is a equivocation\nattack.\n\nNote that large coinbase transactions have caused a number of problems before,\nincluding issues with ASIC compatibility and p2pool. We should not inflate\ncoinbase transaction size needlessly.\n\n> (L2, of course, already sees everything on L2. And it knows what sidechain number it is.)\n> \n> Unfortunately, I don't think there's anything anyone can do, to actually get Peter to spend 5 minutes engaging with Bip300/301. Instead he is determined to:\n> \n> 1) misunderstand the idea\n> 2) make something else up, that is inaccurate\n> 3) criticize that\n> 4) pat himself on the back and call it a day\n> \n> His comments at Baltic Honeybadger indicate he had never visited the top of the project site drivechain.info at all in the past 4+ years. And his tweets before TabConf indicate that he had not yet any rudimentary familiarity with how the idea worked, but was going to declare it broken anyway. Even after paying him for his time, he couldn't be bothered to actually look at the idea, he has to just fabricate something instead -- the writeup is full to the brim of these errors and fabrications.\n\nGiven that I'm far from the only person who believes Drivechains are a broken\nidea, I'd suggest you take a step back and reconsider what you are saying here.\n",
      "created_at" : "2023-11-16T03:29:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1813734556",
      "id" : 1813734556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585sG2Sc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1813734556/reactions"
      },
      "updated_at" : "2023-11-16T03:29:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1813734556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@petertodd \r\n> Note that large coinbase transactions have caused a number of problems before,\r\nincluding issues with ASIC compatibility and p2pool. We should not inflate\r\ncoinbase transaction size needlessly.\r\n\r\nWhat responsibilities going forward do devs have with asic compatibility? Seems like a potential conflict of interest in some situations.",
      "created_at" : "2023-11-16T17:14:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1814884903",
      "id" : 1814884903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585sLPIn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814884903/reactions"
      },
      "updated_at" : "2023-11-16T17:14:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814884903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7761473?v=4",
         "events_url" : "https://api.github.com/users/miketwenty1/events{/privacy}",
         "followers_url" : "https://api.github.com/users/miketwenty1/followers",
         "following_url" : "https://api.github.com/users/miketwenty1/following{/other_user}",
         "gists_url" : "https://api.github.com/users/miketwenty1/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/miketwenty1",
         "id" : 7761473,
         "login" : "miketwenty1",
         "node_id" : "MDQ6VXNlcjc3NjE0NzM=",
         "organizations_url" : "https://api.github.com/users/miketwenty1/orgs",
         "received_events_url" : "https://api.github.com/users/miketwenty1/received_events",
         "repos_url" : "https://api.github.com/users/miketwenty1/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/miketwenty1/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/miketwenty1/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/miketwenty1"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concern over 33 bytes of data being added per block for blind merged mining seems disingenuous to me. ",
      "created_at" : "2023-11-16T17:38:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1814924908",
      "id" : 1814924908,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585sLY5s",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814924908/reactions"
      },
      "updated_at" : "2023-11-16T17:38:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814924908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8107318?v=4",
         "events_url" : "https://api.github.com/users/CryptAxe/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CryptAxe/followers",
         "following_url" : "https://api.github.com/users/CryptAxe/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CryptAxe/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CryptAxe",
         "id" : 8107318,
         "login" : "CryptAxe",
         "node_id" : "MDQ6VXNlcjgxMDczMTg=",
         "organizations_url" : "https://api.github.com/users/CryptAxe/orgs",
         "received_events_url" : "https://api.github.com/users/CryptAxe/received_events",
         "repos_url" : "https://api.github.com/users/CryptAxe/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CryptAxe/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CryptAxe"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> @petertodd\r\n> \r\n> > Note that large coinbase transactions have caused a number of problems before,\r\n> > including issues with ASIC compatibility and p2pool. We should not inflate\r\n> > coinbase transaction size needlessly.\r\n> \r\n> What responsibilities going forward do devs have with asic compatibility? Seems like a potential conflict of interest in some situations.\r\n\r\nThe reviewers of this and other PRs/BIPs also are in a position of high risk of conflict of interests. Every Dev wants to merge more needless op_code complexity to Bitcoin, 'world computer' alike, but no Dev is ever proposing to ALSO code the respective OPT-OUT script to Full Nodes Core Software, so that the only people unbiased in this mess, the node operators, could sovereignly (UN)support by themselves every new altcoin alike 'scaling' (altcoiners fav word) feature and non-bug fixing CHANGE to Bitcoin. Running an old node, less and less supported is NOT a decentralizing option either at some point, but much less a centralized Bitcoin filled with code complexity and consequently easier data dumping out of Bitcoin's sole goal (=ONE!) = tyranically (SN's terminology) tiny scope.",
      "created_at" : "2023-11-16T17:56:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1814963622",
      "id" : 1814963622,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585sLiWm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814963622/reactions"
      },
      "updated_at" : "2023-11-16T18:05:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814963622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/111360343?v=4",
         "events_url" : "https://api.github.com/users/RicYashiroLee/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RicYashiroLee/followers",
         "following_url" : "https://api.github.com/users/RicYashiroLee/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RicYashiroLee/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RicYashiroLee",
         "id" : 111360343,
         "login" : "RicYashiroLee",
         "node_id" : "U_kgDOBqM5Vw",
         "organizations_url" : "https://api.github.com/users/RicYashiroLee/orgs",
         "received_events_url" : "https://api.github.com/users/RicYashiroLee/received_events",
         "repos_url" : "https://api.github.com/users/RicYashiroLee/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RicYashiroLee/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RicYashiroLee/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RicYashiroLee"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @petertodd\r\n> \r\n> > Note that large coinbase transactions have caused a number of problems before,\r\n> > including issues with ASIC compatibility and p2pool. We should not inflate\r\n> > coinbase transaction size needlessly.\r\n> \r\n> What responsibilities going forward do devs have with asic compatibility? Seems like a potential conflict of interest in some situations.\r\n\r\nObviously we should not do things that are incompatible with existing ASICs without a *very* good reason. A feature that doesn't actually work is clearly not a good reason.",
      "created_at" : "2023-11-23T12:52:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1824382711",
      "id" : 1824382711,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585svd73",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1824382711/reactions"
      },
      "updated_at" : "2023-11-23T12:52:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1824382711",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > My invitation to discuss in person about the topic of Bitcoin consensus change at a conference during the coming years stays open, or on the mailing list if itâs a communication medium you think itâs better suited.\r\n\r\nHeld my words here. A twitter space did happen end of last week between one of the PR author and myself, which was pleasant overall.\r\n\r\nI made it clear I didnât have any strong thoughts on drivechain, though I took time to express 2 generic concerns I think affecting all bitcoin second-layers designed and developed for scalability or extend use-case expressivity.\r\n\r\nLack of common metrics on L2s performance on multiple dimensions. E.g onboarding scaling (how many users can co-exist off-chain ?), transactional scaling (how many transfers can be performed off-chain per-on-chain transaction ?), fees cost scaling (what is the average / worst-case on-chain fees / off-chain fees on end-user ?), user computing ressources assumptions (e.g what is the average bandwidth cost ?). For now, it sounds to me people are comparing apples with oranges when talking about Bitcoin L2s.\r\n\r\nPartial risks and security analysis. Since side-chains have been proposed almost a decade ago, I think the community knowledge in term of L2 vector of attacks has growth a lot, especially from the deployment of Lightning. It sounds very plausible that new vectors e.g things like flood-and-loot, pinning, eclipse and time-dilation attacks, liquidity griefing are affecting all constructions in minor or major ways. E.g the 2014 sidechain paper made the observation that most users might use atomic swaps for coins transfers, a time-sensitive L2 protocol.\r\n\r\nMy personal flavor in term of bitcoin consensus changes stay the same. Fix old consensus technical debt such as the timewarp attack, or the thundering herd issue affecting all time-sensitive second-layers.",
      "created_at" : "2023-12-10T18:37:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1849045560",
      "id" : 1849045560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585uNjI4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1849045560/reactions"
      },
      "updated_at" : "2023-12-10T18:37:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1849045560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--13523179cfe9479db18ec6c5d236f789-->\r\nThere hasn't been much activity lately and the patch still needs rebase. What is the status here?\r\n\r\n* Is it still relevant? â¡ï¸ Please solve the conflicts to make it ready for review and to ensure the CI passes.\r\n* Is it no longer relevant? â¡ï¸ Please close.\r\n* Did the author lose interest or time to work on this? â¡ï¸ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\r\n",
      "created_at" : "2024-01-05T10:39:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28311#issuecomment-1878462792",
      "id" : 1878462792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28311",
      "node_id" : "IC_kwDOABII585v9xFI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1878462792/reactions"
      },
      "updated_at" : "2024-01-05T10:39:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1878462792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
