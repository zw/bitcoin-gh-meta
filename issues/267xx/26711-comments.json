[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/26711).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [instagibbs](https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1777764536), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1780951141) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28690](https://github.com/bitcoin/bitcoin/pull/28690) (build: Introduce internal kernel library by TheCharlatan)\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) ([WIP] Cluster mempool implementation by sdaftuar)\n* [#28550](https://github.com/bitcoin/bitcoin/pull/28550) (Covenant tools softfork by jamesob)\n* [#28455](https://github.com/bitcoin/bitcoin/pull/28455) (refactor: share and use `GenerateRandomKey` helper by theStack)\n* [#28391](https://github.com/bitcoin/bitcoin/pull/28391) (refactor: Simplify CTxMempool/BlockAssembler fields, remove some external mapTx access by TheCharlatan)\n* [#28345](https://github.com/bitcoin/bitcoin/pull/28345) (Bugfix: Package relay / bytespersigop checks by luke-jr)\n* [#28335](https://github.com/bitcoin/bitcoin/pull/28335) (RFC: Remove boost usage from kernel api / headers by TheCharlatan)\n* [#26451](https://github.com/bitcoin/bitcoin/pull/26451) (Enforce incentive compatibility for all RBF replacements by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2022-12-16T11:27:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1354593703",
      "id" : 1354593703,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585QvXWn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1354593703/reactions"
      },
      "updated_at" : "2023-10-26T11:44:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1354593703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-01-11T13:47:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1378778140",
      "id" : 1378778140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585SLnwc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1378778140/reactions"
      },
      "updated_at" : "2023-01-11T13:47:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1378778140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072139558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072139558"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cb065422e58be7558e6c2ad9eadfa885bb48c708\r\nLet's add an Assume checking `tx == package.end()`?",
      "commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "created_at" : "2023-01-17T12:20:04Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072139558",
      "id" : 1072139558,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_540m",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 1251451996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072139558/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-17T12:29:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072139558",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072167416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072167416"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cb065422e58be7558e6c2ad9eadfa885bb48c708\r\n\r\nWhat you're saying in the commit message is true only for `TxValidationResult::TX_MEMPOOL_POLICY` or `TxValidationResult::TX_MISSING_INPUTS`? In other failures, we won't validate the child for the second time (because it would trigger quit_early)\r\n\r\nWhat's even worse than a mistake in the commit message, you won't be able to catch other kinds of failures here (because you don't set `quit_early` here), so you might do some extra work which should have been avoided otherwise, no?",
      "commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "created_at" : "2023-01-17T12:49:10Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072167416",
      "id" : 1072167416,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_5_n4",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1399,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 6,
      "pull_request_review_id" : 1251492911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072167416/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-17T12:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072167416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072204405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072204405"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cb065422e58be7558e6c2ad9eadfa885bb48c708\r\n\r\nAfter this change it's impossible to hit `quit_early=false` and `txns_package_eval.empty()`, which was possible before.\r\nIt means that even if everything was either (valid, already in the mempool, or invalid due to a subset of failures) â you will force the checks again? (before this change, it could have terminated early)\r\n\r\nMaybe related [to the other comment i left](https://github.com/bitcoin/bitcoin/pull/26711/commits/cb065422e58be7558e6c2ad9eadfa885bb48c708#r1072167416).",
      "commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "created_at" : "2023-01-17T13:25:21Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072204405",
      "id" : 1072204405,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_6Ip1",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 1251548165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072204405/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-17T13:25:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072204405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1073438932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073438932"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> After this change it's impossible to hit quit_early=false and txns_package_eval.empty(), which was possible before.\r\n\r\nRight, `quit_early=false && txns_package_eval.empty()` means everything so far has been valid or txid already in mempool.\r\n\r\n> It means that even if everything was either (valid, already in the mempool, or invalid due to a subset of failures) â you will force the checks again? (before this change, it could have terminated early)\r\n\r\nOk I will try to break down all the possibilities in this scenario. If we get to the child and `quit_early=false && txns_package_eval.empty()`, everything else has been valid, and we should validate the child. It doesn't matter if we do it inside or outside this loop, but it's better to only do it 1 time.\r\nThe child's result can be: valid, policy/missing inputs, or other failure. If txid already in mempool we would have already exited the loop.\r\n\r\nBefore the commit:\r\n- If valid: the tx was validated 1 time, inside the loop.\r\n- If policy/missing inputs: the tx was validated 2 times, both inside the loop and with `AcceptMultipleTransactions(txns_package_eval)` outside the loop.\r\n- If other failure: the tx was validated 1 time, inside the loop.\r\n\r\nRight after the loop, `quit_early || txns_package_eval.empty()` hits, but none of them terminated without validating the child. \r\n\r\nAfter the commit:\r\n- If valid: the tx is validated 1 time, outside the loop.\r\n- If policy/missing inputs: the tx is validated 1 time, outside the loop.\r\n- If other failure: the tx is validated 1 time, outside the loop.\r\n\r\nRight after the loop, `quit_early || txns_package_eval.empty()` does not hit. The tx is validated, and then the results returned. The function returns at a later line of code, but that doesn't mean more work was done.",
      "commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "created_at" : "2023-01-18T11:53:24Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1073438932",
      "id" : 1073438932,
      "in_reply_to_id" : 1072204405,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_-2DU",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 1253331561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073438932/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-18T11:53:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073438932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080563611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080563611"
         }
      },
      "author_association" : "MEMBER",
      "body" : "would help for reading clarity if nothing else, agreed",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-18T21:14:52Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080563611",
      "id" : 1080563611,
      "in_reply_to_id" : 1072139558,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AaBeb",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080563611/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080563611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080581849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080581849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rest of this comment seems appropriate elsewhere now that its put in its own subroutine.\r\n",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-18T21:37:49Z",
      "diff_hunk" : "@@ -15,21 +15,8 @@\n #include <numeric>\n #include <unordered_set>\n \n-bool CheckPackage(const Package& txns, PackageValidationState& state)\n+bool IsSorted(const Package& txns)\n {\n-    const unsigned int package_count = txns.size();\n-\n-    if (package_count > MAX_PACKAGE_COUNT) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n-    }\n-\n-    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n-                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n-    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n-    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n-    }\n-\n     // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n     // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080581849",
      "id" : 1080581849,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AaF7Z",
      "original_commit_id" : "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080581849/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080581849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080595370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080595370"
         }
      },
      "author_association" : "MEMBER",
      "body" : "While we're here: `CheckPackageWellFormed`",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-18T21:54:55Z",
      "diff_hunk" : "@@ -65,6 +56,26 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080595370",
      "id" : 1080595370,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AaJOq",
      "original_commit_id" : "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "original_line" : 59,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080595370/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080595370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080599515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080599515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/so/to/",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-18T21:58:32Z",
      "diff_hunk" : "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080599515",
      "id" : 1080599515,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AaKPb",
      "original_commit_id" : "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "original_line" : 76,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080599515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080599515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080602237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080602237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "when calling Txns()",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-18T22:00:46Z",
      "diff_hunk" : "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:\n+     * - there are no conflicts\n+     * - the number of transactions is reasonable (e.g. within MAX_PACKAGE_COUNT)\n+     */\n+    Packageifier(const Package& txns);\n+    /** Returns the transactions, in ascending order of number of in-package ancestors. */\n+    Package Txns() const { return txns; }\n+    /** Get the ancestor subpackage for a transaction. */\n+    std::vector<CTransactionRef> GetAncestorSet(const CTransactionRef& tx);\n+    /** From now on, exclude these transactions from GetAncestorSet(). */\n+    void Exclude(const CTransactionRef& transaction);\n+    /** Mark a transaction as \"banned.\" From now on, if this transaction is present in the ancestor\n+     * set, return an empty vector instead. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080602237",
      "id" : 1080602237,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AaK59",
      "original_commit_id" : "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "original_line" : 98,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080602237/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080602237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081158729"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081158729"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thank you for this elaborate analysis!\r\n\r\nSo in `if valid` and `if other failure` cases, it's not just inside vs outside the loop, right?\r\nBecause \"outside the loop\" also means re-validating other transactions, not just the child (`AcceptMultipleTransactions` call).\r\n(Note that I'm look only at the first commit so far)",
      "commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "created_at" : "2023-01-19T11:51:24Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081158729",
      "id" : 1081158729,
      "in_reply_to_id" : 1072204405,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AcSxJ",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 1261633680,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081158729/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T11:51:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081158729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081194260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081194260"
         }
      },
      "author_association" : "MEMBER",
      "body" : "879b55fa9da3688fb6b85e7f40f9778753a9102f\r\n\r\nAccording to this change, it should now be possible to hit `mempoolaccept_res.m_result_type == INVALID`, but only when [...].\r\n\r\nHowever, I don't see how the `AcceptPackageWrappingSingle` code change touches `mempoolaccept_res` at all. So it's unclear why the Assume is changed here.\r\n\r\n",
      "commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "created_at" : "2023-01-19T12:24:51Z",
      "diff_hunk" : "@@ -1439,15 +1455,16 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);\n+        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID ||\n+               mempoolaccept_res.m_state.GetResult() == TxValidationResult::TX_MISSING_INPUTS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081194260",
      "id" : 1081194260,
      "line" : 1502,
      "node_id" : "PRRC_kwDOABII585AcbcU",
      "original_commit_id" : "879b55fa9da3688fb6b85e7f40f9778753a9102f",
      "original_line" : 1463,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 34,
      "pull_request_review_id" : 1261683617,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081194260/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T12:25:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081194260",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081209483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081209483"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What I'm talking about seems to be fixed in the next commit 879b55fa9da3688fb6b85e7f40f9778753a9102f.\r\nIf my understanding is correct, I'd suggest mentioning this in the commit message.",
      "commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "created_at" : "2023-01-19T12:41:23Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081209483",
      "id" : 1081209483,
      "in_reply_to_id" : 1072204405,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AcfKL",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 1261706834,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081209483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T12:41:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081209483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081549166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081549166"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n     * Expects that:\r\n```",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T16:51:07Z",
      "diff_hunk" : "@@ -59,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081549166",
      "id" : 1081549166,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AdyFu",
      "original_commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "original_line" : 86,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081549166/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081549166",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081574207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081574207"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe we can get rid of `quit_early` and have Packagifier contain a `HasBan` function?",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:12:54Z",
      "diff_hunk" : "@@ -1363,14 +1371,29 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     // the new transactions. This ensures we don't double-count transaction counts and sizes when\n     // checking ancestor/descendant limits, or double-count transaction fees for fee-related policy.\n     ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    const auto AcceptPackageWrappingSingle = [&](const std::vector<CTransactionRef>& subpackage)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_pool.cs) {\n+        AssertLockHeld(::cs_main);\n+        AssertLockHeld(m_pool.cs);\n+        if (subpackage.size() > 1) {\n+            return AcceptMultipleTransactions(subpackage, args);\n+        }\n+        const auto& tx = subpackage.front();\n+        const auto single_res = AcceptSingleTransaction(tx, single_args);\n+        PackageValidationState package_state_wrapper;\n+        if (single_res.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            package_state_wrapper.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+        return PackageMempoolAcceptResult(package_state_wrapper, {{tx->GetWitnessHash(), single_res}});\n+    };\n+    Packageifier packageified(package);\n     // Results from individual validation. \"Nonfinal\" because if a transaction fails by itself but\n     // succeeds later (i.e. when evaluated with a fee-bumping child), the result changes (though not\n     // reflected in this map). If a transaction fails more than once, we want to return the first\n     // result, when it was considered on its own. So changes will only be from invalid -> valid.\n     std::map<uint256, MempoolAcceptResult> individual_results_nonfinal;\n     bool quit_early{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081574207",
      "id" : 1081574207,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ad4M_",
      "original_commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "original_line" : 1395,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081574207/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081574207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081588430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081588430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If we change `GetAncestorSet` to an optional and store banned-ness, then we can use it to check if there is nothing left to be submitted directly by calling `txns_package_eval.empty()`.\r\n\r\n```suggestion\r\n    if (packageified.HasBan() || txns_package_eval.empty()) {\r\n```\r\n\r\nOr, if we keep GetAncestorSet as is, just do `txns_package_eval.empty()` only? It will be empty in both the cases where it has a banned input, or where all transactions have been excluded?\r\n\r\nThen we can just get rid of quit_early and don't need to track if we've banned anything?",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:20:49Z",
      "diff_hunk" : "@@ -1393,56 +1417,93 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (subpackage.empty()) {\n+                Assume(quit_early);\n+                // Quit early; this transaction depends on a \"banned\" tx (failed for a non-policy\n+                // and non-missing-inputs reason), so this transaction will be invalid due to\n+                // missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                // Unless we're quitting early (child would have exited already since this is an\n+                // ancestor package), validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage);\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map.\n+            for (const auto& subpackage_tx : subpackage) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // Note that it's possible for transactions to have been submitted to the mempool even\n+            // if subpackage_result.m_state.IsInvalid(). If IsValid(), fine to move on.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. To minimize the amount of repeated work, unless the transaction fails\n+                    // due to feerate or missing inputs (its parent is a previous transaction in the\n+                    // package that failed due to feerate), don't run package validation. Note that this\n+                    // decision might not make sense if different types of packages are allowed in the\n+                    // future.  Continue individually validating the rest of the transactions, because\n+                    // some of them may still be valid.\n+                    quit_early = true;\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n     // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted.\n-    if (quit_early || txns_package_eval.empty()) {\n+    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n+    // the other transactions in the package are as well. We check for the child by txid because\n+    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n+    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081588430",
      "id" : 1081588430,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ad7rO",
      "original_commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "original_line" : 1487,
      "original_position" : 151,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1260782143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081588430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:27:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081588430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081618834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081618834"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Going with `IsPackageWellFormed` to follow the `Is*` pattern, if that's ok",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:49:01Z",
      "diff_hunk" : "@@ -65,6 +56,26 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081618834",
      "id" : 1081618834,
      "in_reply_to_id" : 1080595370,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeDGS",
      "original_commit_id" : "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "original_line" : 59,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1262313397,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081618834/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:49:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081618834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081624953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081624953"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added in the commit message that, specifically if the failure is policy or missing inputs, it was validated twice. Thanks",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:54:18Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081624953",
      "id" : 1081624953,
      "in_reply_to_id" : 1072167416,
      "line" : 1424,
      "node_id" : "PRRC_kwDOABII585AeEl5",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1424,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 94,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081624953/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081624953",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081625789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081625789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Only when calling `GetAncestorSet()`*, added comment that `Txns()` is unchanged.",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:55:01Z",
      "diff_hunk" : "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:\n+     * - there are no conflicts\n+     * - the number of transactions is reasonable (e.g. within MAX_PACKAGE_COUNT)\n+     */\n+    Packageifier(const Package& txns);\n+    /** Returns the transactions, in ascending order of number of in-package ancestors. */\n+    Package Txns() const { return txns; }\n+    /** Get the ancestor subpackage for a transaction. */\n+    std::vector<CTransactionRef> GetAncestorSet(const CTransactionRef& tx);\n+    /** From now on, exclude these transactions from GetAncestorSet(). */\n+    void Exclude(const CTransactionRef& transaction);\n+    /** Mark a transaction as \"banned.\" From now on, if this transaction is present in the ancestor\n+     * set, return an empty vector instead. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081625789",
      "id" : 1081625789,
      "in_reply_to_id" : 1080602237,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeEy9",
      "original_commit_id" : "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "original_line" : 98,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081625789/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081625789",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081626065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081626065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:55:16Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081626065",
      "id" : 1081626065,
      "in_reply_to_id" : 1072139558,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeE3R",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081626065/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081626065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081627149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thank you yes, it makes more sense to switch the commits around. Switched their order and made the commit messages more descriptive",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:56:14Z",
      "diff_hunk" : "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081627149",
      "id" : 1081627149,
      "in_reply_to_id" : 1072204405,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeFIN",
      "original_commit_id" : "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "original_line" : 1398,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627149/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:59:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081627681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627681"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops yes, I've removed this",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:56:36Z",
      "diff_hunk" : "@@ -1439,15 +1455,16 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);\n+        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID ||\n+               mempoolaccept_res.m_state.GetResult() == TxValidationResult::TX_MISSING_INPUTS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081627681",
      "id" : 1081627681,
      "in_reply_to_id" : 1081194260,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeFQh",
      "original_commit_id" : "879b55fa9da3688fb6b85e7f40f9778753a9102f",
      "original_line" : 1463,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627681/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628019"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moved back to `IsPackageWellFormed()`",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:56:52Z",
      "diff_hunk" : "@@ -15,21 +15,8 @@\n #include <numeric>\n #include <unordered_set>\n \n-bool CheckPackage(const Package& txns, PackageValidationState& state)\n+bool IsSorted(const Package& txns)\n {\n-    const unsigned int package_count = txns.size();\n-\n-    if (package_count > MAX_PACKAGE_COUNT) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n-    }\n-\n-    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n-                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n-    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n-    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n-    }\n-\n     // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n     // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628019",
      "id" : 1081628019,
      "in_reply_to_id" : 1080581849,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeFVz",
      "original_commit_id" : "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628126"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:56:57Z",
      "diff_hunk" : "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628126",
      "id" : 1081628126,
      "in_reply_to_id" : 1080599515,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeFXe",
      "original_commit_id" : "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "original_line" : 76,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628126/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628126",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:57:02Z",
      "diff_hunk" : "@@ -59,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628217",
      "id" : 1081628217,
      "in_reply_to_id" : 1081549166,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeFY5",
      "original_commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "original_line" : 86,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628217/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081629094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081629094"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea, got rid of quit_early and exists(). Using txns_package_eval std::nullopt or empty",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T17:57:48Z",
      "diff_hunk" : "@@ -1393,56 +1417,93 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (subpackage.empty()) {\n+                Assume(quit_early);\n+                // Quit early; this transaction depends on a \"banned\" tx (failed for a non-policy\n+                // and non-missing-inputs reason), so this transaction will be invalid due to\n+                // missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                // Unless we're quitting early (child would have exited already since this is an\n+                // ancestor package), validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage);\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map.\n+            for (const auto& subpackage_tx : subpackage) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // Note that it's possible for transactions to have been submitted to the mempool even\n+            // if subpackage_result.m_state.IsInvalid(). If IsValid(), fine to move on.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. To minimize the amount of repeated work, unless the transaction fails\n+                    // due to feerate or missing inputs (its parent is a previous transaction in the\n+                    // package that failed due to feerate), don't run package validation. Note that this\n+                    // decision might not make sense if different types of packages are allowed in the\n+                    // future.  Continue individually validating the rest of the transactions, because\n+                    // some of them may still be valid.\n+                    quit_early = true;\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n     // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted.\n-    if (quit_early || txns_package_eval.empty()) {\n+    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n+    // the other transactions in the package are as well. We check for the child by txid because\n+    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n+    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081629094",
      "id" : 1081629094,
      "in_reply_to_id" : 1081588430,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeFmm",
      "original_commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "original_line" : 1487,
      "original_position" : 151,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1262320655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081629094/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T17:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081629094",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081632204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081632204"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(was able to get rid of quit_early without `HasBan()`)",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-19T18:00:28Z",
      "diff_hunk" : "@@ -1363,14 +1371,29 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     // the new transactions. This ensures we don't double-count transaction counts and sizes when\n     // checking ancestor/descendant limits, or double-count transaction fees for fee-related policy.\n     ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    const auto AcceptPackageWrappingSingle = [&](const std::vector<CTransactionRef>& subpackage)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_pool.cs) {\n+        AssertLockHeld(::cs_main);\n+        AssertLockHeld(m_pool.cs);\n+        if (subpackage.size() > 1) {\n+            return AcceptMultipleTransactions(subpackage, args);\n+        }\n+        const auto& tx = subpackage.front();\n+        const auto single_res = AcceptSingleTransaction(tx, single_args);\n+        PackageValidationState package_state_wrapper;\n+        if (single_res.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            package_state_wrapper.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+        return PackageMempoolAcceptResult(package_state_wrapper, {{tx->GetWitnessHash(), single_res}});\n+    };\n+    Packageifier packageified(package);\n     // Results from individual validation. \"Nonfinal\" because if a transaction fails by itself but\n     // succeeds later (i.e. when evaluated with a fee-bumping child), the result changes (though not\n     // reflected in this map). If a transaction fails more than once, we want to return the first\n     // result, when it was considered on its own. So changes will only be from invalid -> valid.\n     std::map<uint256, MempoolAcceptResult> individual_results_nonfinal;\n     bool quit_early{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081632204",
      "id" : 1081632204,
      "in_reply_to_id" : 1081574207,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeGXM",
      "original_commit_id" : "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "original_line" : 1395,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1262329505,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081632204/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T18:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081632204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082414267"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082414267"
         }
      },
      "author_association" : "MEMBER",
      "body" : "036d2b07fb3ce404dd6787d8d0fe4e80c168fdf4\r\nThis `Assume` is orthogonal to the rest of the code changes (these changes don't touch `mempoolaccept_res`), so it's unclear why you remove it here.",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-20T11:57:39Z",
      "diff_hunk" : "@@ -1422,15 +1438,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082414267",
      "id" : 1082414267,
      "line" : 1429,
      "node_id" : "PRRC_kwDOABII585AhFS7",
      "original_commit_id" : "036d2b07fb3ce404dd6787d8d0fe4e80c168fdf4",
      "original_line" : 1429,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 32,
      "pull_request_review_id" : 1263465719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082414267/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-20T11:57:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082414267",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082421842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082421842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4c4cea3856b1fa2a50de25847b19ae90c4263916\r\nnit: maybe it's better to use `HasConflicts`. Double-negation is harder to understand :)",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-20T12:03:44Z",
      "diff_hunk" : "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+    }\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    if (!IsSorted(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+    if (!HasNoConflicts(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082421842",
      "id" : 1082421842,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII585AhHJS",
      "original_commit_id" : "4c4cea3856b1fa2a50de25847b19ae90c4263916",
      "original_line" : 75,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 77,
      "pull_request_review_id" : 1263473012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082421842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-20T12:03:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082421842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082468542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082468542"
         }
      },
      "author_association" : "MEMBER",
      "body" : "8764ecc566413b4974e030c596193e75ff39f746\r\nCan this result in an endless recursion, if txA spends txB and txB spends txA at the same time? Or possibly through txC. (similar in `IsAncestorPackage`)",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-20T12:37:29Z",
      "diff_hunk" : "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082468542",
      "id" : 1082468542,
      "line" : 105,
      "node_id" : "PRRC_kwDOABII585AhSi-",
      "original_commit_id" : "8764ecc566413b4974e030c596193e75ff39f746",
      "original_line" : 105,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 32,
      "pull_request_review_id" : 1263514526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082468542/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-20T13:11:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082468542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082492810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082492810"
         }
      },
      "author_association" : "MEMBER",
      "body" : "8764ecc566413b4974e030c596193e75ff39f746\r\nThe comment is incorrect: nullopt is returned, not empty vector.",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-20T12:54:31Z",
      "diff_hunk" : "@@ -62,4 +65,39 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082492810",
      "id" : 1082492810,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585AhYeK",
      "original_commit_id" : "8764ecc566413b4974e030c596193e75ff39f746",
      "original_line" : 78,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 26,
      "pull_request_review_id" : 1263535150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082492810/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-20T12:54:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082492810",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082507527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082507527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If we have a cycle of transactions, SHA256 is broken, no? ð",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-20T13:04:42Z",
      "diff_hunk" : "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082507527",
      "id" : 1082507527,
      "in_reply_to_id" : 1082468542,
      "line" : 105,
      "node_id" : "PRRC_kwDOABII585AhcEH",
      "original_commit_id" : "8764ecc566413b4974e030c596193e75ff39f746",
      "original_line" : 105,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 32,
      "pull_request_review_id" : 1263548159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082507527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-20T13:04:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082507527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082586776"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082586776"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You are right. Not sure if it's worth commenting. It's unlikely someone will violate this assumption (it would require big changes to Bitcoin), but it could save time to someone like me who forget about this property.",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-20T14:10:18Z",
      "diff_hunk" : "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082586776",
      "id" : 1082586776,
      "in_reply_to_id" : 1082468542,
      "line" : 105,
      "node_id" : "PRRC_kwDOABII585AhvaY",
      "original_commit_id" : "8764ecc566413b4974e030c596193e75ff39f746",
      "original_line" : 105,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 32,
      "pull_request_review_id" : 1263655629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082586776/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-20T14:10:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082586776",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1084899543"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084899543"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cea7dcf4388ad65436fcb98c7025b607708e09ab\r\nnit: worth changing `input_height` to `uint` too, maybe even with `const`?",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-24T07:43:06Z",
      "diff_hunk" : "@@ -171,7 +188,7 @@ struct TestChain100Setup : public TestingSetup {\n      * @param submit             Whether or not to submit to mempool\n      */\n     CMutableTransaction CreateValidMempoolTransaction(CTransactionRef input_transaction,\n-                                                      int input_vout,\n+                                                      uint32_t input_vout,\n                                                       int input_height,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1084899543",
      "id" : 1084899543,
      "line" : 192,
      "node_id" : "PRRC_kwDOABII585AqkDX",
      "original_commit_id" : "cea7dcf4388ad65436fcb98c7025b607708e09ab",
      "original_line" : 192,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 30,
      "pull_request_review_id" : 1266961348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084899543/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-24T07:43:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084899543",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1084935931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084935931"
         }
      },
      "author_association" : "MEMBER",
      "body" : "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b\r\nConsider everything, including the child, to be valid.\r\nPreviously, the execution would terminate at `txns_package_eval.empty()` gate after the loop.\r\nAfter this commit, this won't passÂ âÂ and everything (other transactions) would be validated once again.",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-24T08:23:45Z",
      "diff_hunk" : "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1084935931",
      "id" : 1084935931,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Aqs77",
      "original_commit_id" : "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "original_line" : 1403,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 6,
      "pull_request_review_id" : 1267024821,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084935931/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-24T08:33:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084935931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085014944"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085014944"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/commit/db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b\r\nShould say \"non-child transaction'",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-24T09:32:21Z",
      "diff_hunk" : "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085014944",
      "id" : 1085014944,
      "line" : 1427,
      "node_id" : "PRRC_kwDOABII585ArAOg",
      "original_commit_id" : "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "original_line" : 1407,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 10,
      "pull_request_review_id" : 1267126406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085014944/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-24T09:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085014944",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085056132"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085056132"
         }
      },
      "author_association" : "MEMBER",
      "body" : "936c7f170bc68ec583ae026ddbaf197ca6cd0792\r\nCould you help me understand how the latter condition can be possible for this transaction?",
      "commit_id" : "d74c446014e63c9ad27eb1e9dbf67bfd6af57f9e",
      "created_at" : "2023-01-24T10:03:37Z",
      "diff_hunk" : "@@ -1416,44 +1420,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 continue;\n             }\n             if (wtxid == child->GetWitnessHash()) {\n-                txns_package_eval.push_back(tx);\n-                Assume(txns_package_eval == subpackage.value());\n                 Assume(tx == package.back());\n                 // Unless we're quitting early, validate the child outside of this loop.\n                 break;\n             }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the Packageifier that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. Tell the Packageifier that subsequent transactions depending on this one\n+                    // should be skipped.\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n-    // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n-    // the other transactions in the package are as well. We check for the child by txid because\n-    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n-    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+    const auto txns_package_eval{packageified.GetAncestorSet(child)};\n+    // If txns_package_eval is std::nullopt, the last tx's result was pre-filled with missing\n+    // inputs. If txns_package_eval is empty, all transactions have already passed.\n+    if (!txns_package_eval || txns_package_eval->empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085056132",
      "id" : 1085056132,
      "line" : 1470,
      "node_id" : "PRRC_kwDOABII585ArKSE",
      "original_commit_id" : "936c7f170bc68ec583ae026ddbaf197ca6cd0792",
      "original_line" : 1470,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 128,
      "pull_request_review_id" : 1267177090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085056132/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-24T10:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085056132",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085568911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085568911"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I assume you're asking \"how can `txns_package_eval` be empty?\" \r\nIf all of the transactions were already in the mempool, they have each been `Exclude`'d. So `GetAncestorSet(child)` returns a vector of all the non-excluded ancestors, which is an empty vector.",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-24T16:21:04Z",
      "diff_hunk" : "@@ -1416,44 +1420,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 continue;\n             }\n             if (wtxid == child->GetWitnessHash()) {\n-                txns_package_eval.push_back(tx);\n-                Assume(txns_package_eval == subpackage.value());\n                 Assume(tx == package.back());\n                 // Unless we're quitting early, validate the child outside of this loop.\n                 break;\n             }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the Packageifier that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. Tell the Packageifier that subsequent transactions depending on this one\n+                    // should be skipped.\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n-    // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n-    // the other transactions in the package are as well. We check for the child by txid because\n-    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n-    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+    const auto txns_package_eval{packageified.GetAncestorSet(child)};\n+    // If txns_package_eval is std::nullopt, the last tx's result was pre-filled with missing\n+    // inputs. If txns_package_eval is empty, all transactions have already passed.\n+    if (!txns_package_eval || txns_package_eval->empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085568911",
      "id" : 1085568911,
      "in_reply_to_id" : 1085056132,
      "line" : 1467,
      "node_id" : "PRRC_kwDOABII585AtHeP",
      "original_commit_id" : "936c7f170bc68ec583ae026ddbaf197ca6cd0792",
      "original_line" : 1467,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 166,
      "pull_request_review_id" : 1267825959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085568911/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T12:39:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085568911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090695044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090695044"
         }
      },
      "author_association" : "MEMBER",
      "body" : "- It will need to be cast to `int` anyway when we call `AddCoins()`. Maybe one day if we change `AddCoins()` ?\r\n- I don't think `const` is very meaningful since it's passed by value",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-30T14:26:31Z",
      "diff_hunk" : "@@ -171,7 +188,7 @@ struct TestChain100Setup : public TestingSetup {\n      * @param submit             Whether or not to submit to mempool\n      */\n     CMutableTransaction CreateValidMempoolTransaction(CTransactionRef input_transaction,\n-                                                      int input_vout,\n+                                                      uint32_t input_vout,\n                                                       int input_height,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090695044",
      "id" : 1090695044,
      "in_reply_to_id" : 1084899543,
      "line" : 192,
      "node_id" : "PRRC_kwDOABII585BAq-E",
      "original_commit_id" : "cea7dcf4388ad65436fcb98c7025b607708e09ab",
      "original_line" : 192,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 30,
      "pull_request_review_id" : 1275271720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090695044/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-30T14:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090695044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090716976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090716976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops, removed",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-30T14:44:14Z",
      "diff_hunk" : "@@ -1422,15 +1438,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090716976",
      "id" : 1090716976,
      "in_reply_to_id" : 1082414267,
      "line" : 1427,
      "node_id" : "PRRC_kwDOABII585BAwUw",
      "original_commit_id" : "036d2b07fb3ce404dd6787d8d0fe4e80c168fdf4",
      "original_line" : 1427,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 179,
      "pull_request_review_id" : 1275271720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090716976/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-30T14:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090716976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090726607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-30T14:51:25Z",
      "diff_hunk" : "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090726607",
      "id" : 1090726607,
      "in_reply_to_id" : 1085014944,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BAyrP",
      "original_commit_id" : "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "original_line" : 1407,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1275271720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726607/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-30T14:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090726927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726927"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, fixed",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-30T14:51:40Z",
      "diff_hunk" : "@@ -62,4 +65,39 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090726927",
      "id" : 1090726927,
      "in_reply_to_id" : 1082492810,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BAywP",
      "original_commit_id" : "8764ecc566413b4974e030c596193e75ff39f746",
      "original_line" : 78,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1275271720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726927/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-30T14:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090727252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090727252"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added a comment to visit()",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-30T14:51:52Z",
      "diff_hunk" : "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090727252",
      "id" : 1090727252,
      "in_reply_to_id" : 1082468542,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII585BAy1U",
      "original_commit_id" : "8764ecc566413b4974e030c596193e75ff39f746",
      "original_line" : 109,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 114,
      "pull_request_review_id" : 1275271720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090727252/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-30T14:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090727252",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090728980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090728980"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've changed it to `IsConsistent()`. I didn't want to change to `HasConflicts()` because that would require changing the function implementation to be opposite, and the `Is*` pattern seems to be good for readability",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-30T14:53:10Z",
      "diff_hunk" : "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+    }\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    if (!IsSorted(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+    if (!HasNoConflicts(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090728980",
      "id" : 1090728980,
      "in_reply_to_id" : 1082421842,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BAzQU",
      "original_commit_id" : "4c4cea3856b1fa2a50de25847b19ae90c4263916",
      "original_line" : 75,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1275271720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090728980/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-30T14:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090728980",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090746878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090746878"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's the opposite - we avoid re-validating things now.\r\n\r\n> Consider everything, including the child, to be valid.\r\n\r\nOk, we can break this down. Let's split it into 2 types of scenarios: non-CPFP case and CPFP case. In the CPFP case, the parent needs the child in order to pass.\r\n\r\n(1) Non-CPFP case\r\n(1a) Before this commit\r\nInside this loop, **validate** parent. The parent passes and is submitted to the mempool.\r\nThen, **validate** child. The child passes and is submitted.\r\nAfter the loop, we quit because `txns_package_eval.empty()`.\r\nHow many times we validated something: 2\r\n\r\n(1b) After this commit\r\nInside this loop, **validate** parent. The parent passes and is submitted to the mempool.\r\nInside this loop, at this condition, `txns_package_eval.push_back(child)` and break.\r\nAfter the loop, we **validate** using `AcceptPackageWrappingSingle({child})`.\r\nHow many times we validated something: 2\r\n\r\n(2) CPFP case\r\n(2a) Before this commit\r\nInside loop, **validate** parent. The parent fails due to too low fee. `txns_package_eval.push_back(parent)`.\r\nInside this loop, **validate** child. The child fails due to missing inputs. `txns_package_eval.push_back(child)`.\r\nAfter the loop, we **validate** using `AcceptPackageWrappingSingle({parent, child})`.\r\nHow many times we validated something: 3\r\n\r\n(2b) After this commit\r\nInside loop, **validate** parent. The parent fails due to too low fee. `txns_package_eval.push_back(parent)`.\r\nInside this loop, at this condition, `txns_package_eval.push_back(child)` and break.\r\nAfter the loop, we **validate** using `AcceptPackageWrappingSingle({parent, child})`.\r\nHow many times we validated something: 2",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-30T15:06:49Z",
      "diff_hunk" : "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090746878",
      "id" : 1090746878,
      "in_reply_to_id" : 1084935931,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BA3n-",
      "original_commit_id" : "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "original_line" : 1403,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1275349367,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090746878/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-30T15:06:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090746878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091627600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091627600"
         }
      },
      "author_association" : "MEMBER",
      "body" : "132159cc6ae36da7697fcbb90bd5914e02a41386\r\nThis limit is never checked?",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T08:58:15Z",
      "diff_hunk" : "@@ -73,4 +76,41 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     * - txns is of reasonable size (e.g. below MAX_PACKAGE_COUNT) to limit recursion depth",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091627600",
      "id" : 1091627600,
      "line" : 101,
      "node_id" : "PRRC_kwDOABII585BEOpQ",
      "original_commit_id" : "132159cc6ae36da7697fcbb90bd5914e02a41386",
      "original_line" : 101,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 38,
      "pull_request_review_id" : 1276742818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091627600/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T08:58:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091627600",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091678009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091678009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thank you for helping me understand this. I understand you are right now. ",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T09:41:13Z",
      "diff_hunk" : "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091678009",
      "id" : 1091678009,
      "in_reply_to_id" : 1084935931,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BEa85",
      "original_commit_id" : "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "original_line" : 1403,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1276817245,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091678009/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T09:41:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091678009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091696901"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091696901"
         }
      },
      "author_association" : "MEMBER",
      "body" : "93e976d98726040edf4070175c46fdc504aabff5\r\nwhy not ban here?",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T09:56:33Z",
      "diff_hunk" : "@@ -1409,20 +1427,18 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // in package validation, because its fees should only be \"used\" once.\n                 assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n                 results_final.emplace(wtxid, single_res);\n+                packageified.Exclude(tx);\n             } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n                        single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n                 // Package validation policy only differs from individual policy in its evaluation\n                 // of feerate. For example, if a transaction fails here due to violation of a\n                 // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n+                // package. Tell the Packageifier that subsequent transactions depending on this one\n+                // should be skipped.\n                 quit_early = true;\n                 package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n+                packageified.Ban(tx);\n             } else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091696901",
      "id" : 1091696901,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BEfkF",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1442,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 76,
      "pull_request_review_id" : 1276843630,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091696901/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T10:08:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091696901",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091710042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091710042"
         }
      },
      "author_association" : "MEMBER",
      "body" : "93e976d98726040edf4070175c46fdc504aabff5\r\nDoes \"passed\" mean \"valid\" in this context?",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T10:08:17Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091710042",
      "id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BEixa",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1276863562,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091710042/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T10:08:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091710042",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091768545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091768545"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T11:00:29Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091768545",
      "id" : 1091768545,
      "in_reply_to_id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BExDh",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1276949724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091768545/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T11:00:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091768545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091783287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091783287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "meant to be a precondition, so the caller should check it beforehand",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T11:15:44Z",
      "diff_hunk" : "@@ -73,4 +76,41 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     * - txns is of reasonable size (e.g. below MAX_PACKAGE_COUNT) to limit recursion depth",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091783287",
      "id" : 1091783287,
      "in_reply_to_id" : 1091627600,
      "line" : 101,
      "node_id" : "PRRC_kwDOABII585BE0p3",
      "original_commit_id" : "132159cc6ae36da7697fcbb90bd5914e02a41386",
      "original_line" : 101,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 38,
      "pull_request_review_id" : 1276972386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091783287/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T11:19:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091783287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091786482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091786482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Here, the tx failed for missing inputs or policy (i.e. possibly too low fee), so there is a chance of it becoming valid if later validated as a package.",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T11:18:56Z",
      "diff_hunk" : "@@ -1409,20 +1427,18 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // in package validation, because its fees should only be \"used\" once.\n                 assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n                 results_final.emplace(wtxid, single_res);\n+                packageified.Exclude(tx);\n             } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n                        single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n                 // Package validation policy only differs from individual policy in its evaluation\n                 // of feerate. For example, if a transaction fails here due to violation of a\n                 // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n+                // package. Tell the Packageifier that subsequent transactions depending on this one\n+                // should be skipped.\n                 quit_early = true;\n                 package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n+                packageified.Ban(tx);\n             } else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091786482",
      "id" : 1091786482,
      "in_reply_to_id" : 1091696901,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BE1by",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1442,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 76,
      "pull_request_review_id" : 1276972386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091786482/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T11:19:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091786482",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091805721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091805721"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can't it be empty if the child is invalid? (`if (!subpackage) {` etc)",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T11:37:05Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091805721",
      "id" : 1091805721,
      "in_reply_to_id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BE6IZ",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1277003729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091805721/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T11:37:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091805721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091824305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091824305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`subpackage` has type `std::optional<std::vector<CTransactionRef>>`, so `!subpackage` means it is `std::nullopt`. empty vector means all transactions have been excluded.",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T11:56:32Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091824305",
      "id" : 1091824305,
      "in_reply_to_id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BE-qx",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1277030536,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091824305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T11:57:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091824305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091853962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091853962"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm thinking about the following:\r\n- two transactions\r\n- `Ban(parent)`\r\n- `if (!subpackage) {` on the child iteration\r\n- `txns_package_eval.empty()` but nothing is \"valid\" (if that's what you mean by passed)\r\n\r\nMaybe you meant \"when `quit_early` is false, then [...]\" but I'm not sure.",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-01-31T12:26:45Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091853962",
      "id" : 1091853962,
      "in_reply_to_id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BFF6K",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1277074727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091853962/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T12:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091853962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093055411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093055411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In that case, `if (!subpackage) {` hits on the child iteration, and its result is prefilled with the \"missing inputs\" failure. And then we have `!txns_package_eval`, not `txns_package_eval.empty()`.",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-02-01T10:47:16Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093055411",
      "id" : 1093055411,
      "in_reply_to_id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BJrOz",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1278870652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093055411/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-01T10:47:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093055411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093057032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093057032"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Noting that we can remove the missing inputs condition from here, since we are validating subpackages now and nobody should have missing inputs unless there is a transaction missing",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-02-01T10:48:45Z",
      "diff_hunk" : "@@ -1379,39 +1402,69 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (!subpackage) {\n+                // This transaction depends on a tx we will definitely not accept (failed for a\n+                // non-policy and non-missing-inputs reason). We already know that this transaction\n+                // will be invalid for at least one reason, i.e. a missing input. To minimize the\n+                // amount of repeated work, don't validate this tx. Just return missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                // Don't quit too early. Other transactions may not necessarily depend on the same\n+                // parent, and should still be considered.\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                Assume(tx == package.back());\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093057032",
      "id" : 1093057032,
      "line" : 1449,
      "node_id" : "PRRC_kwDOABII585BJroI",
      "original_commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "original_line" : 1449,
      "original_position" : 144,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 144,
      "pull_request_review_id" : 1278872989,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093057032/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-01T10:48:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093057032",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093096405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093096405"
         }
      },
      "author_association" : "MEMBER",
      "body" : ">And then we have `!txns_package_eval`,\r\n\r\nSee the commit I'm referring to, `!txns_package_eval` is impossible there. I know that this inaccuracy goes away in the next commit, but w.r.t. 93e976d98726040edf4070175c46fdc504aabff5 this comment seems incorrect.",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-02-01T11:28:08Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093096405",
      "id" : 1093096405,
      "in_reply_to_id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BJ1PV",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1278930308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093096405/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-01T11:28:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093096405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093134465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093134465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah I see. I can move this comment to the last commit.",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-02-01T12:08:05Z",
      "diff_hunk" : "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093134465",
      "id" : 1093134465,
      "in_reply_to_id" : 1091710042,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585BJ-iB",
      "original_commit_id" : "93e976d98726040edf4070175c46fdc504aabff5",
      "original_line" : 1451,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 83,
      "pull_request_review_id" : 1278985853,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093134465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-01T12:08:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093134465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1136210879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136210879"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is just being moved here and I don't think this can overflow in practice, but the init value should be `int64_t{0}`, so maybe it would make sense to fix this somewhere within this PR. (searched the rest of the codebase after https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1136136446).",
      "commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "created_at" : "2023-03-14T21:11:47Z",
      "diff_hunk" : "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1136210879",
      "id" : 1136210879,
      "line" : 62,
      "node_id" : "PRRC_kwDOABII585DuTO_",
      "original_commit_id" : "4a4ae2f12837f3abe93a67bd490213f5a9e82d76",
      "original_line" : 63,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 76,
      "pull_request_review_id" : 1340287122,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136210879/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-14T21:11:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136210879",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1142230795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1142230795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah thanks!",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-03-20T14:44:17Z",
      "diff_hunk" : "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1142230795",
      "id" : 1142230795,
      "in_reply_to_id" : 1136210879,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585EFQ8L",
      "original_commit_id" : "4a4ae2f12837f3abe93a67bd490213f5a9e82d76",
      "original_line" : 62,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1348711897,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1142230795/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-20T14:44:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1142230795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Marking as draft for now, will rebase on top of #26933",
      "created_at" : "2023-04-05T10:42:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1497279995",
      "id" : 1497279995,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585ZPq37",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497279995/reactions"
      },
      "updated_at" : "2023-04-05T10:42:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497279995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182761583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182761583"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this should assert that package is non-empty",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-02T16:10:58Z",
      "diff_hunk" : "@@ -39,6 +39,30 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Context-free check that a package only contains a tx (the last tx in the package) with its\n+// ancestors. Not all of the tx's ancestors need to be present.\n+bool IsAncestorPackage(const Package& package)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182761583",
      "id" : 1182761583,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII585Gf4Jv",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 44,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 6,
      "pull_request_review_id" : 1262442548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182761583/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-02T16:46:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182761583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182768590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182768590"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\r\n```",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-02T16:17:37Z",
      "diff_hunk" : "@@ -63,10 +87,121 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     }\n     BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n     PackageValidationState state_too_large;\n-    BOOST_CHECK(!CheckPackage(package_too_large, state_too_large));\n+    BOOST_CHECK(!IsPackageWellFormed(package_too_large, state_too_large, /*require_sorted=*/true));\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 99; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182768590",
      "id" : 1182768590,
      "line" : 137,
      "node_id" : "PRRC_kwDOABII585Gf53O",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 137,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 92,
      "pull_request_review_id" : 1262442548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182768590/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-02T16:46:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182768590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182797698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182797698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ordering between `package[i]` and `packageified.Txns()[i]` doesn't seem to be stable? The above shuffle is only \"undone\" by sorting by number of in-package ancestors when constructing the `AncestorPackage`, but of course all parents have the same value.",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-02T16:45:11Z",
      "diff_hunk" : "@@ -63,10 +87,121 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     }\n     BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n     PackageValidationState state_too_large;\n-    BOOST_CHECK(!CheckPackage(package_too_large, state_too_large));\n+    BOOST_CHECK(!IsPackageWellFormed(package_too_large, state_too_large, /*require_sorted=*/true));\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 99; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(4900 * COIN, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        for (auto i{0}; i < 99; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182797698",
      "id" : 1182797698,
      "line" : 150,
      "node_id" : "PRRC_kwDOABII585GgA-C",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 150,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 105,
      "pull_request_review_id" : 1262442548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182797698/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-02T16:46:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182797698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182968218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182968218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "under what situations does the \"representative tx\" not get filled, and why is `TX_MISSING_INPUTS` the right value to set?",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-02T19:30:26Z",
      "diff_hunk" : "@@ -558,6 +558,18 @@ class MemPoolAccept\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Multiple transaction acceptance for transactions guaranteed to be an ancestor package and a CPFP.\n+     * If only 1 transaction exists in subpackage, calls AcceptSingleTransaction() with adjusted\n+     * ATMPArgs to avoid additional package policy restrictions like PackageMempoolChecks() and\n+     * disabled RBF. Also creates a PackageMempoolAcceptResult wrapping the result.\n+     * If multiple transactions exist in subpackage, calls AcceptMultipleTransactions() with the\n+     * provided ATMPArgs. Additionally, if the \"representative tx\" is not present in the result,\n+     * fills it in with TX_MISSING_INPUTS.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182968218",
      "id" : 1182968218,
      "line" : 568,
      "node_id" : "PRRC_kwDOABII585Ggqma",
      "original_commit_id" : "08a07c348d70907951a9225853976f9486665246",
      "original_line" : 568,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 12,
      "pull_request_review_id" : 1409760020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182968218/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-02T19:30:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182968218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1183794878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183794878"
         }
      },
      "author_association" : "MEMBER",
      "body" : "hmm I think the fuzzer was smart enough to give a coin with the same hash as the txid of a constructed transaction below, built on a different set of ancestors...\r\n\r\nI think hashing these bytes would defeat this since it can't generate a valid tx with that txid?",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-03T14:46:47Z",
      "diff_hunk" : "@@ -0,0 +1,52 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto outpoint{ConsumeDeserializable<COutPoint>(fuzzed_data_provider)}) available_coins.insert(*outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1183794878",
      "id" : 1183794878,
      "line" : 20,
      "node_id" : "PRRC_kwDOABII585Gj0a-",
      "original_commit_id" : "7fd7cc3502411a523c860400ac9e9a9b3991a872",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/test/fuzz/ancestorpackage.cpp",
      "position" : 20,
      "pull_request_review_id" : 1411070467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183794878/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-03T14:46:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183794878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1185280732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1185280732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "or to be lazier, just set the initial utxos' prevout.n index to some impossibly high numbers to ever be generated",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-04T17:00:18Z",
      "diff_hunk" : "@@ -0,0 +1,52 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto outpoint{ConsumeDeserializable<COutPoint>(fuzzed_data_provider)}) available_coins.insert(*outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1185280732",
      "id" : 1185280732,
      "in_reply_to_id" : 1183794878,
      "line" : 20,
      "node_id" : "PRRC_kwDOABII585GpfLc",
      "original_commit_id" : "7fd7cc3502411a523c860400ac9e9a9b3991a872",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/test/fuzz/ancestorpackage.cpp",
      "position" : 20,
      "pull_request_review_id" : 1413526891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1185280732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-04T17:00:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1185280732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187734505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187734505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this comment becomes a bit disconnected from the logic itself. ",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-08T18:04:54Z",
      "diff_hunk" : "@@ -1478,42 +1482,55 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n                 // Unless we're quitting early, validate the child outside of this loop.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187734505",
      "id" : 1187734505,
      "line" : 1455,
      "node_id" : "PRRC_kwDOABII585Gy2Pp",
      "original_commit_id" : "dd9d4f6fe86826ef01932734cb108e174c53476e",
      "original_line" : 1487,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 208,
      "pull_request_review_id" : 1417261502,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187734505/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-08T20:32:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187734505",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187848024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187848024"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know what this means, but kinda... odd that `AncestorPackage` can be `!IsAncestorPackage`",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-08T20:09:22Z",
      "diff_hunk" : "@@ -1382,49 +1382,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-\n     AncestorPackage packageified(package);\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    if (!packageified.IsAncestorPackage()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187848024",
      "id" : 1187848024,
      "line" : 1390,
      "node_id" : "PRRC_kwDOABII585GzR9Y",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 1390,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 125,
      "pull_request_review_id" : 1417261502,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187848024/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-08T20:32:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187848024",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187856431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187856431"
         }
      },
      "author_association" : "MEMBER",
      "body" : "should just leave this example in in the positive sense of it being accepted?",
      "commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "created_at" : "2023-05-08T20:16:35Z",
      "diff_hunk" : "@@ -325,18 +324,11 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n \n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187856431",
      "id" : 1187856431,
      "line" : 335,
      "node_id" : "PRRC_kwDOABII585GzUAv",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 335,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 19,
      "pull_request_review_id" : 1417261502,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187856431/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-08T20:32:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187856431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190437947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437947"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Re-added",
      "commit_id" : "0cdb25a2392328afaad7651a0a407396b1922f17",
      "created_at" : "2023-05-10T22:12:26Z",
      "diff_hunk" : "@@ -325,18 +324,11 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n \n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190437947",
      "id" : 1190437947,
      "in_reply_to_id" : 1187856431,
      "line" : 335,
      "node_id" : "PRRC_kwDOABII585G9KQ7",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 335,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 19,
      "pull_request_review_id" : 1421439448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437947/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-10T22:12:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190437970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah. Added some docs to the class (also mentioned BIP331) so maybe it's more clear? I used to call it `Packageifier` because it can potentially build a package out of any random list of transactions. But then it's weird because we packageify a `Package`. Open to naming improvements ð ",
      "commit_id" : "0cdb25a2392328afaad7651a0a407396b1922f17",
      "created_at" : "2023-05-10T22:12:28Z",
      "diff_hunk" : "@@ -1382,49 +1382,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-\n     AncestorPackage packageified(package);\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    if (!packageified.IsAncestorPackage()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190437970",
      "id" : 1190437970,
      "in_reply_to_id" : 1187848024,
      "line" : 1398,
      "node_id" : "PRRC_kwDOABII585G9KRS",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 1398,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 145,
      "pull_request_review_id" : 1421439477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437970/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-10T22:12:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438085"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Elaborated on the comment, hopefully it's better now",
      "commit_id" : "0cdb25a2392328afaad7651a0a407396b1922f17",
      "created_at" : "2023-05-10T22:12:42Z",
      "diff_hunk" : "@@ -1478,42 +1482,55 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n                 // Unless we're quitting early, validate the child outside of this loop.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438085",
      "id" : 1190438085,
      "in_reply_to_id" : 1187734505,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585G9KTF",
      "original_commit_id" : "dd9d4f6fe86826ef01932734cb108e174c53476e",
      "original_line" : 1487,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1421439641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438085/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-10T22:12:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438085",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438226"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think hashing these bytes would defeat this since it can't generate a valid tx with that txid?\r\n\r\nDid this one, thanks ð ",
      "commit_id" : "0cdb25a2392328afaad7651a0a407396b1922f17",
      "created_at" : "2023-05-10T22:12:59Z",
      "diff_hunk" : "@@ -0,0 +1,52 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto outpoint{ConsumeDeserializable<COutPoint>(fuzzed_data_provider)}) available_coins.insert(*outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438226",
      "id" : 1190438226,
      "in_reply_to_id" : 1183794878,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585G9KVS",
      "original_commit_id" : "7fd7cc3502411a523c860400ac9e9a9b3991a872",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/test/fuzz/ancestorpackage.cpp",
      "position" : null,
      "pull_request_review_id" : 1421439847,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438226/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-10T22:12:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438226",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438295"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Elaborated",
      "commit_id" : "0cdb25a2392328afaad7651a0a407396b1922f17",
      "created_at" : "2023-05-10T22:13:07Z",
      "diff_hunk" : "@@ -558,6 +558,18 @@ class MemPoolAccept\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Multiple transaction acceptance for transactions guaranteed to be an ancestor package and a CPFP.\n+     * If only 1 transaction exists in subpackage, calls AcceptSingleTransaction() with adjusted\n+     * ATMPArgs to avoid additional package policy restrictions like PackageMempoolChecks() and\n+     * disabled RBF. Also creates a PackageMempoolAcceptResult wrapping the result.\n+     * If multiple transactions exist in subpackage, calls AcceptMultipleTransactions() with the\n+     * provided ATMPArgs. Additionally, if the \"representative tx\" is not present in the result,\n+     * fills it in with TX_MISSING_INPUTS.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438295",
      "id" : 1190438295,
      "in_reply_to_id" : 1182968218,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585G9KWX",
      "original_commit_id" : "08a07c348d70907951a9225853976f9486665246",
      "original_line" : 568,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1421439940,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438295/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-10T22:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438618"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to always use `package[i]`, and added a comment about this unstable sort",
      "commit_id" : "0cdb25a2392328afaad7651a0a407396b1922f17",
      "created_at" : "2023-05-10T22:13:42Z",
      "diff_hunk" : "@@ -63,10 +87,121 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     }\n     BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n     PackageValidationState state_too_large;\n-    BOOST_CHECK(!CheckPackage(package_too_large, state_too_large));\n+    BOOST_CHECK(!IsPackageWellFormed(package_too_large, state_too_large, /*require_sorted=*/true));\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 99; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(4900 * COIN, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        for (auto i{0}; i < 99; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438618",
      "id" : 1190438618,
      "in_reply_to_id" : 1182797698,
      "line" : 155,
      "node_id" : "PRRC_kwDOABII585G9Kba",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 155,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 110,
      "pull_request_review_id" : 1421440401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438618/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-10T22:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438675"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438675"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Aha, thanks!",
      "commit_id" : "0cdb25a2392328afaad7651a0a407396b1922f17",
      "created_at" : "2023-05-10T22:13:49Z",
      "diff_hunk" : "@@ -39,6 +39,30 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Context-free check that a package only contains a tx (the last tx in the package) with its\n+// ancestors. Not all of the tx's ancestors need to be present.\n+bool IsAncestorPackage(const Package& package)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438675",
      "id" : 1190438675,
      "in_reply_to_id" : 1182761583,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII585G9KcT",
      "original_commit_id" : "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "original_line" : 44,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 6,
      "pull_request_review_id" : 1421440493,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438675/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-10T22:13:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1191628983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191628983"
         }
      },
      "author_association" : "MEMBER",
      "body" : "CI Failure here:\r\n\r\n```\r\nC:/Users/ContainerAdministrator/AppData/Local/Temp/cirrus-ci-build/src/test/txpackage_tests.cpp(622): error: in \"txpackage_tests/package_submission_tests\": check GetVirtualTransactionSize(*tx_parent2) == 191 has failed [190 != 191]\r\n```\r\n\r\nI'm going to guess that this is because real signatures are being created, which can occasionally be smaller than 71 bytes, thus resulting in a tx that is one byte smaller. If the script type doesn't matter, I would suggest using taproot keypath spends since that has fixed size signatures. Otherwise these checks will need to account for possibly varying transaction sizes.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-11T19:56:00Z",
      "diff_hunk" : "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1191628983",
      "id" : 1191628983,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585HBtC3",
      "original_commit_id" : "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "original_line" : 622,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1423335249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191628983/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-11T19:56:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191628983",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1191631520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191631520"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm fine if the magic number checks have a bit of wiggle room tbh, just leave a comment?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-11T19:57:56Z",
      "diff_hunk" : "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1191631520",
      "id" : 1191631520,
      "in_reply_to_id" : 1191628983,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585HBtqg",
      "original_commit_id" : "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "original_line" : 622,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1423338386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191631520/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-11T19:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191631520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194127839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194127839"
         }
      },
      "author_association" : "MEMBER",
      "body" : "perfect ",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-15T17:14:15Z",
      "diff_hunk" : "@@ -558,6 +558,18 @@ class MemPoolAccept\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Multiple transaction acceptance for transactions guaranteed to be an ancestor package and a CPFP.\n+     * If only 1 transaction exists in subpackage, calls AcceptSingleTransaction() with adjusted\n+     * ATMPArgs to avoid additional package policy restrictions like PackageMempoolChecks() and\n+     * disabled RBF. Also creates a PackageMempoolAcceptResult wrapping the result.\n+     * If multiple transactions exist in subpackage, calls AcceptMultipleTransactions() with the\n+     * provided ATMPArgs. Additionally, if the \"representative tx\" is not present in the result,\n+     * fills it in with TX_MISSING_INPUTS.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194127839",
      "id" : 1194127839,
      "in_reply_to_id" : 1182968218,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585HLPHf",
      "original_commit_id" : "08a07c348d70907951a9225853976f9486665246",
      "original_line" : 568,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1427012337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194127839/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-15T17:14:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194127839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194144678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194144678"
         }
      },
      "author_association" : "MEMBER",
      "body" : "even more sensible than my suggestion :+1:  no issues running so far",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-15T17:30:29Z",
      "diff_hunk" : "@@ -0,0 +1,55 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto mtx{ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194144678",
      "id" : 1194144678,
      "line" : 20,
      "node_id" : "PRRC_kwDOABII585HLTOm",
      "original_commit_id" : "35da289d977009b23b74af31d7190793162ef140",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/test/fuzz/ancestorpackage.cpp",
      "position" : 20,
      "pull_request_review_id" : 1427036930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194144678/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-15T18:01:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194144678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194150250"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194150250"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ASCII :gem: needs connection between grandparent and child",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-15T17:35:49Z",
      "diff_hunk" : "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194150250",
      "id" : 1194150250,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585HLUlq",
      "original_commit_id" : "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "original_line" : 559,
      "original_position" : 364,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1427036930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194150250/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-15T18:01:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194150250",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "What are the current use cases / applications for transaction packages enabled by this PR that are more complicated than child-with-parents-tree-only?",
      "created_at" : "2023-05-16T20:02:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1550285007",
      "id" : 1550285007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585cZ3jP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550285007/reactions"
      },
      "updated_at" : "2023-05-16T20:04:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550285007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4638168?v=4",
         "events_url" : "https://api.github.com/users/joostjager/events{/privacy}",
         "followers_url" : "https://api.github.com/users/joostjager/followers",
         "following_url" : "https://api.github.com/users/joostjager/following{/other_user}",
         "gists_url" : "https://api.github.com/users/joostjager/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/joostjager",
         "id" : 4638168,
         "login" : "joostjager",
         "node_id" : "MDQ6VXNlcjQ2MzgxNjg=",
         "organizations_url" : "https://api.github.com/users/joostjager/orgs",
         "received_events_url" : "https://api.github.com/users/joostjager/received_events",
         "repos_url" : "https://api.github.com/users/joostjager/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/joostjager/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/joostjager/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/joostjager"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@joostjager could be as simple as any wallet that does CPFP bumping in their coin selection algorithm(chaining unconfirmed spends). The ideal is to support as many usage patters exist in practice, ancestor packages is just a large-ish subset of that from a CPFP point of view.",
      "created_at" : "2023-05-16T20:08:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1550292949",
      "id" : 1550292949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585cZ5fV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550292949/reactions"
      },
      "updated_at" : "2023-05-16T20:08:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550292949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I am trying to get a feel for how big of a problem it is that this PR solves. In Lightning the problem is very real and potentially exposing lots of users to coin loss because of the combination of pre-signed transactions and time sensitivity, but the topology is of the simplest kind. I am not sure if the wallet example that you give is of the same order because RBF is also an option and timing may not be as critical?\r\n\r\nOf course it is great to support as many patterns as possible, but it also makes the system more complex to reason about and maintain. Maybe #27609 takes away 90% of the pain at 10% of the cost?",
      "created_at" : "2023-05-16T20:28:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1550315212",
      "id" : 1550315212,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585cZ-7M",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550315212/reactions"
      },
      "updated_at" : "2023-05-16T20:29:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550315212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4638168?v=4",
         "events_url" : "https://api.github.com/users/joostjager/events{/privacy}",
         "followers_url" : "https://api.github.com/users/joostjager/followers",
         "following_url" : "https://api.github.com/users/joostjager/following{/other_user}",
         "gists_url" : "https://api.github.com/users/joostjager/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/joostjager",
         "id" : 4638168,
         "login" : "joostjager",
         "node_id" : "MDQ6VXNlcjQ2MzgxNjg=",
         "organizations_url" : "https://api.github.com/users/joostjager/orgs",
         "received_events_url" : "https://api.github.com/users/joostjager/received_events",
         "repos_url" : "https://api.github.com/users/joostjager/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/joostjager/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/joostjager/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/joostjager"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1203944494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1203944494"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to use T-T-T-Taproot for fixed size (thanks @achow101)",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-24T11:30:40Z",
      "diff_hunk" : "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1203944494",
      "id" : 1203944494,
      "in_reply_to_id" : 1191628983,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Hwrwu",
      "original_commit_id" : "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "original_line" : 622,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1441602244,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1203944494/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-24T11:30:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1203944494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204580821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204580821"
         }
      },
      "author_association" : "MEMBER",
      "body" : "grandparent still not fixed size :facepalm: edited the assertion to be on the multiple of 10. I think it worked this time.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-24T17:59:27Z",
      "diff_hunk" : "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204580821",
      "id" : 1204580821,
      "in_reply_to_id" : 1191628983,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585HzHHV",
      "original_commit_id" : "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "original_line" : 622,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1442479694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204580821/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-24T17:59:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204580821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204581045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204581045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-24T17:59:37Z",
      "diff_hunk" : "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204581045",
      "id" : 1204581045,
      "in_reply_to_id" : 1194150250,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585HzHK1",
      "original_commit_id" : "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "original_line" : 559,
      "original_position" : 364,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1442479901,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204581045/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-24T17:59:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204581045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204729225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204729225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/121/112/ ?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-24T20:30:29Z",
      "diff_hunk" : "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{12000};\n+        const CAmount parent_value{10*COIN - parent_fee};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204729225",
      "id" : 1204729225,
      "line" : 608,
      "node_id" : "PRRC_kwDOABII585HzrWJ",
      "original_commit_id" : "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "original_line" : 434,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 437,
      "pull_request_review_id" : 1442702738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204729225/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-24T20:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204729225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204739973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204739973"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taproot coinbase outputs wen\r\n\r\nLGTM",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-24T20:42:50Z",
      "diff_hunk" : "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204739973",
      "id" : 1204739973,
      "in_reply_to_id" : 1191628983,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Hzt-F",
      "original_commit_id" : "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "original_line" : 622,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1442719846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204739973/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-24T20:42:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204739973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204742880"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204742880"
         }
      },
      "author_association" : "MEMBER",
      "body" : "diamond keeps going \"out of sync\", maybe just have variable names that people can find? ",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-05-24T20:45:58Z",
      "diff_hunk" : "@@ -368,6 +545,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204742880",
      "id" : 1204742880,
      "line" : 555,
      "node_id" : "PRRC_kwDOABII585Hzurg",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 555,
      "original_position" : 384,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 384,
      "pull_request_review_id" : 1442724105,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204742880/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-24T20:46:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204742880",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1219838215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219838215"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "How about actually checking the result here?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-06T15:15:12Z",
      "diff_hunk" : "@@ -325,17 +324,13 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n-\n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")\n-        # Chain of 3 transactions has too many generations\n+        self.log.info(\"Submitpackage with a 25-generation chain\")\n         chain_hex = [t[\"hex\"] for t in self.wallet.create_self_transfer_chain(chain_length=25)]\n-        assert_raises_rpc_error(-25, \"not-child-with-parents\", node.submitpackage, chain_hex)\n+        self.nodes[0].submitpackage(chain_hex)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1219838215",
      "id" : 1219838215,
      "line" : 333,
      "node_id" : "PRRC_kwDOABII585ItUEH",
      "original_commit_id" : "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "original_line" : 333,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 24,
      "pull_request_review_id" : 1465458909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219838215/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-11T19:07:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219838215",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225867669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225867669"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I understand the rationale, but it seems dangerous to skip validation steps in special cases because of expected checks happening later in another scope (that's how I understand it). Such things can lead to nasty errors down the line.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-11T17:07:49Z",
      "diff_hunk" : "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225867669",
      "id" : 1225867669,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII585JEUGV",
      "original_commit_id" : "c9bf37de2ee5769bc462ed0c8c437e0d3d00a431",
      "original_line" : 65,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 78,
      "pull_request_review_id" : 1465458909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225867669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-11T19:07:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225867669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225870352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225870352"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Kind of confusing and `grep` unfriendly that this test helper has the exact same name as that `Package` method. Maybe call it `TestAncestorPackage` or so?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-11T17:17:59Z",
      "diff_hunk" : "@@ -39,6 +39,31 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Context-free check that a package only contains a tx (the last tx in the package) with its\n+// ancestors. Not all of the tx's ancestors need to be present.\n+bool IsAncestorPackage(const Package& package)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225870352",
      "id" : 1225870352,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII585JEUwQ",
      "original_commit_id" : "005581b5ea61edd444439900109c527c7112a650",
      "original_line" : 44,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 6,
      "pull_request_review_id" : 1465458909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225870352/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-11T19:07:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225870352",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225871000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225871000"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Developer notes say \"Class member variables have a `m_` prefix.\".",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-11T17:20:21Z",
      "diff_hunk" : "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225871000",
      "id" : 1225871000,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII585JEU6Y",
      "original_commit_id" : "005581b5ea61edd444439900109c527c7112a650",
      "original_line" : 89,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 55,
      "pull_request_review_id" : 1465458909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225871000/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-11T19:07:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225871000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225898875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225898875"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just checking the last tx doesn't guarantee this alone. Maybe mention here that this works because subpackages are being evaluated by themselves as well?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-11T19:02:13Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225898875",
      "id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JEbt7",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1465458909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225898875/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-11T19:07:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225898875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226035519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226035519"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should probably mark it as EXPERIMENTAL in the rpc docs -- see \"sendall\" eg in wallet/rpc/spend.cpp\r\n\r\nNot really sure this should be advertised in the release notes at this stage at all, though.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-12T02:52:17Z",
      "diff_hunk" : "@@ -0,0 +1,11 @@\n+- A new RPC, `submitpackage`, has been added. It can be used to submit a list of raw hex\n+  transactions to the mempool to be evaluated as a package using consensus and mempool policy rules,\n+including package CPFP (allowing a child to bump a parent below the mempool minimum feerate).\n+Warning: successful submission does not mean the transactions will propagate throughout the network,\n+as package relay is not used.\n+\n+    - Not all features are available. For example, RBF is not supported and the package is limited\n+      to a child with its unconfirmed parents. Refer to doc/policy/packages.md for more details on\n+      package policies and limitations.\n+\n+    - This RPC is experimental. Its interface may change.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226035519",
      "id" : 1226035519,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII585JE9E_",
      "original_commit_id" : "f6b928b1241de5b0cfdcfd0cebb3d56ef8fe8ce4",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "doc/release-notes-27609.md",
      "position" : 11,
      "pull_request_review_id" : 1473964168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226035519/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-12T05:03:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226035519",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226063546"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226063546"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This check doesn't feel like it makes sense to me -- it should either be unnecessary (because dealing with subpackages first takes care of it), or else it seems insufficient (because a grandparent might be paying for parent and child, and child paying for parent; but grandparents alone are good enough, but after they're accepted parent and child combined aren't good enough).",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-12T04:11:44Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226063546",
      "id" : 1226063546,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JFD66",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1473964168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226063546/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-12T05:03:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226063546",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226067022"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I worry that this approach can cause O(n^2) validation costs in some way, if you've got n txs and end up doing work that results in multiple soft-rejects for each tx.\r\n\r\nI wonder if it wouldn't be better to do something more like:\r\n\r\n * topologically sort the package\r\n * accept each tx in order into a mem-pond -- a special temporary mini pool just for this package, that enforces consensus rules, but doesn't care about minimum fees\r\n * any txs that weren't valid obviously fail at this point and are dropped, along with any descendants\r\n * for everything that made it into the pond, consider moving it into the mempool proper, applying the cpfp logic and possibly rbf logic that the mempond didn't enforce\r\n\r\nIdeally, I think we'd want to:\r\n\r\n 1) lookup utxos (slow, but unavoidable)\r\n 2) drop anything that can't possibly pay sufficient fees\r\n 3) run script validation in topological order (slow, don't do it if parents failed, only do it once)\r\n 4) do final fee rate analysis (can't do this until we know what txs are actually valid)\r\n\r\nOne way to preserve the current approach while reducing the risk of O(n^2) behaviour might be to move the \"retry\" behaviour out of validation -- ie:\r\n\r\n * do PreChecks on all the package txs (then you can calculate fees)\r\n * topologically sort the txs\r\n * for each tx:\r\n   * high enough fee rate? try accepting it.\r\n     * failure: immediately return.\r\n     * success: remove that tx and its ancestors from the package, marking them as succeeded; recalculate fee rates for descendants\r\n * release mempool.cs\r\n\r\nThen net_processing or rpc can still retry the remaining txs if there was a failure, but can decide to only do that after processing a tx from every other peer, eg.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-12T04:21:30Z",
      "diff_hunk" : "@@ -1483,42 +1487,57 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n-                // Unless we're quitting early, validate the child outside of this loop.\n+                // Validate the child outside of this loop. We will consolidate results_final,\n+                // individual_results_nonfinal, and the result of validating the last transaction's\n+                // subpackage into a single PackageMempoolAcceptResult.\n                 break;\n             }\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the AncestorPackage that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022",
      "id" : 1226067022,
      "line" : 1467,
      "node_id" : "PRRC_kwDOABII585JFExO",
      "original_commit_id" : "617fe7092e4fd7c987e04808adf97e169dc24f47",
      "original_line" : 1499,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 235,
      "pull_request_review_id" : 1473964168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226067022/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-12T05:03:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226067022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226708783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226708783"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIRC circles back to the diamond problem: https://github.com/bitcoin/bitcoin/pull/27609#issuecomment-1542695316\r\n\r\nBoth the parents should contribute to the grandparent being included, but in ancestor packages we can't take that into account(without a common descendant). Instead the whole ancestor package is included, even though the child is likely to be immediately evicted.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-12T13:55:25Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226708783",
      "id" : 1226708783,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JHhcv",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1474989652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226708783/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-12T13:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226708783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226752830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226752830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unused",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-12T14:20:02Z",
      "diff_hunk" : "@@ -1327,60 +1355,49 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n-PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackageWrappingSingle(const std::vector<CTransactionRef>& subpackage, ATMPArgs& args)\n+{\n+    ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    AssertLockHeld(::cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    if (subpackage.size() > 1) {\n+        const auto& rep_wtxid{subpackage.back()->GetWitnessHash()};\n+        auto subpackage_result{AcceptMultipleTransactions(subpackage, args)};\n+        if (subpackage_result.m_tx_results.count(rep_wtxid) == 0) {\n+            TxValidationState tx_state_inferred;\n+            tx_state_inferred.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"invalid-tx-dependency\");\n+            subpackage_result.m_tx_results.emplace(rep_wtxid, MempoolAcceptResult::Failure(tx_state_inferred));\n+        }\n+        return subpackage_result;\n+    }\n+    const auto& tx = subpackage.front();\n+    const auto single_res = AcceptSingleTransaction(tx, single_args);\n+    PackageValidationState package_state_wrapped;\n+    if (single_res.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+        package_state_wrapped.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+    }\n+    return PackageMempoolAcceptResult(package_state_wrapped, {{tx->GetWitnessHash(), single_res}});\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptAncestorPackage(const Package& package, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     // Used if returning a PackageMempoolAcceptResult directly from this function.\n     PackageValidationState package_state_quit_early;\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!CheckPackage(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-\n-    // IsChildWithParents() guarantees the package is > 1 transactions.\n-    assert(package.size() > 1);\n-    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n-    // be sorted, so the last transaction is the child.\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    AncestorPackage packageified(package);\n+    if (!packageified.IsAncestorPackage()) {\n+        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"not-ancestor-package\");\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-    // Protect against bugs where we pull more inputs from disk that miss being added to\n-    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n-    m_view.SetBackend(m_dummy);\n+    const auto& child = package.back();\n+    const auto child_subpackage = packageified.GetAncestorSet(child);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226752830",
      "id" : 1226752830,
      "line" : 1400,
      "node_id" : "PRRC_kwDOABII585JHsM-",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1400,
      "original_position" : 153,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 153,
      "pull_request_review_id" : 1475058004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226752830/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-12T19:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226752830",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226794309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226794309"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this is true?\r\n\r\nWe're only returning `TxValidationResult::TX_MEMPOOL_POLICY` for package size of 1(which becomes a Single Accept), so and subsequent subpackage relying on this prior tx will infer a result of `TX_MISSING_INPUTS`, `invalid-tx-dependency` in `AcceptPackageWrappingSingle`.\r\n\r\nWondering if it might be worth it to have a specific `TxValidationResult` that is precisely for the reasons that we may allow re-evaluation(early-ish abort due to low (package) feerate), and no others. Would this make reasoning about DoS easier?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-12T14:45:57Z",
      "diff_hunk" : "@@ -1379,39 +1402,69 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (!subpackage) {\n+                // This transaction depends on a tx we will definitely not accept (failed for a\n+                // non-policy and non-missing-inputs reason). We already know that this transaction\n+                // will be invalid for at least one reason, i.e. a missing input. To minimize the\n+                // amount of repeated work, don't validate this tx. Just return missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                // Don't quit too early. Other transactions may not necessarily depend on the same\n+                // parent, and should still be considered.\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                Assume(tx == package.back());\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226794309",
      "id" : 1226794309,
      "in_reply_to_id" : 1093057032,
      "line" : 1489,
      "node_id" : "PRRC_kwDOABII585JH2VF",
      "original_commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "original_line" : 1489,
      "original_position" : 144,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 257,
      "pull_request_review_id" : 1475058004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226794309/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-12T19:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226794309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227463946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227463946"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`IsChildWithParents()` is unused after this outside of tests - can we remove it?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-13T02:50:20Z",
      "diff_hunk" : "@@ -1387,49 +1387,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227463946",
      "id" : 1227463946,
      "line" : 1344,
      "node_id" : "PRRC_kwDOABII585JKZ0K",
      "original_commit_id" : "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "original_line" : 1396,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 108,
      "pull_request_review_id" : 1476153957,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227463946/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-13T16:25:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227463946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227472166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227472166"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think this needs a diamond, even.\r\n\r\nFor example: mempool is evicting below 10sat/vb, grandparent is A at 3300sat, 100vb (33sat/vb); parent is B spending A, at 700sat, 200vb (3.5sat/vb), child is C, spending B at 2000 sat, 100vb (20sat/vb). If you accept A first, then B alone is still below the eviction threshold, but so is B+C (2700sat, 300vb 9sat/vb), even though C is doing cpfp here.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-13T03:07:09Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227472166",
      "id" : 1227472166,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JKb0m",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1476165906,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227472166/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-13T03:07:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227472166",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227953145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227953145"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@ajtowns Right, this is the example I thought of as well. But I don't understand why you think the check is unnecessary. From my understanding, this is the point where the subpackage A+B would fail then so I think it is necessary. It just depends on the fact that the function is called with each subpackage.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-13T11:13:57Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227953145",
      "id" : 1227953145,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JMRP5",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1476897704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227953145/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-13T11:13:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227953145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228135411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228135411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't understand what this scenario has to do with this case. A will be accepted, then B rejected, then B+C rejected, all for having package feerates lower than 10 sat/vbyte.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-13T13:28:28Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228135411",
      "id" : 1228135411,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JM9vz",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1477181329,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228135411/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-13T13:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228135411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228287010"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228287010"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "after c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3, the `packages.md` explanation \"Packages must be child-with-unconfirmed-parents packages.\" is out of date. It would be good to document the definition of an \"ancestor package\" there instead.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-13T15:02:40Z",
      "diff_hunk" : "@@ -1387,49 +1387,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228287010",
      "id" : 1228287010,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585JNiwi",
      "original_commit_id" : "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "original_line" : 1392,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1476153957,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228287010/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-13T16:25:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228287010",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228398085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228398085"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think it's unnecessary - the diamond package would be accepted if we remove this check, the subpackage algorithm doesn't help with this. However, I'm also not sure if  it's sufficient - e.g. what if we'd add another \"grandchild\" to the child of the diamond package, with a feerate slightly above the previous package feerate (e.g. 5.1 sat/vB). Then this check wouldn't fail anymore, but the descendant feerate of the child (i.e. the combined fees of the child and the grandchild) could be below the minfeerate, so the child/grandchild would get evicted right after submission?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-13T16:21:06Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228398085",
      "id" : 1228398085,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JN94F",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1476153957,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228398085/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-13T16:25:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228398085",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1229432536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229432536"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The A <- B <- C example is handled without the diamond check, yes. Accept A, reject B, reject B+C. I'm pretty sure the code on master would do this if you removed the child-with-parents requirement.\r\n\r\nThe case in the unit test isn't handled by validating subpackages, no.\r\nI agree the \"no parent pay for child\" rule is not enough in some cases, and is too restrictive in others.\r\n\r\nFor example, let's say the minfeerate is 2sat/vB:\r\n\r\n```\r\nA1      A2                 (both 1sat/vB)\r\n  \\    /  \\\r\n    B1     B2              (both 3.5sat/vB)\r\n      \\   /\r\n        C                  (1sat/vB)\r\n```\r\nIdeally we take all except C. \r\nWe reject A1, reject A2, reject A1+A2+B1, accept A2+B2, reject A1+B1+C.\r\nIt would be nice if, while considering A1+B1+C, we are again willing to take a subset. Or if we were to try another order or operations, we could reject A1, reject A2, accept A2+B2, accept A1+B1, reject C.\r\nBut the logic for these two strategies is essentially \"try every possible subset.\"\r\nFor this example, C actually can be any tx we shouldn't accept, e.g. one with an invalid signature.\r\n\r\nPerhaps one way to generalize this is that, within an ancestor package, we should be able to accept a subset. But unless we try every subset, it seems there's always a way to rearrange a package or add a tx to make us reject part of it. V3 world has fewer possibilities but still feels a bit intractable.\r\n\r\nMaybe we can brainstorm a way to rearrange which checks we do when. Like https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022. Perhaps try everything without feerate checks, eliminate invalid ones, then do feerate analysis. But one transaction could replace transactions in the mempool, then affecting the ancestor set of another transaction in the package...\r\n\r\nWe can do our best to have the sender-side logic give a good sort. And if a sender is deliberately crafting packages that we'll reject, we address that by taking care not to cache rejections too aggressively. e.g. here we'd want to cache the A1+A2+B1 rejection, but be willing to retry A1+B1.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-14T11:17:36Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1229432536",
      "id" : 1229432536,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JR6bY",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1479143649,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229432536/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-14T11:17:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229432536",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230174007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230174007"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 7e25e002100f57d69a967f475eb484a8637d9dcb \"[unit test] parent pay for child is not allowed\"\r\n\r\nThe magic numbers in this test were bothering me, so here's a diff that drops most of them. It refactors `CreateValidMempoolTransaction` again to have a function `CreateValidTransaction` that just creates a transaction. This can take a feerate and it will deduct the fee from one of the outputs. This test is then changed to have target feerates for each of the transactions that are all relative to `minfeerate`.\r\n\r\n```diff\r\ndiff --git a/src/test/txpackage_tests.cpp b/src/test/txpackage_tests.cpp\r\nindex 1e00a75a79..1d480eedad 100644\r\n--- a/src/test/txpackage_tests.cpp\r\n+++ b/src/test/txpackage_tests.cpp\r\n@@ -378,16 +378,13 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\r\n         // Diamond shape:\r\n         //\r\n         //     grandparent\r\n-        //       5679sat\r\n-        //        5676vB\r\n+        //       minfr/5\r\n         //     ^    ^    ^\r\n         //  parent1 |   parent2\r\n-        // 12000sat |  12000sat\r\n-        //  112vB   |   112vB\r\n+        // minfr*25 |  minfr*25\r\n         //       ^  |  ^\r\n         //        child\r\n-        //       2424sat\r\n-        //        959vB\r\n+        //       minfr - 0.05 s/vB\r\n         //\r\n         // grandparent is below minfeerate\r\n         // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\r\n@@ -395,71 +392,72 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\r\n         // child has a feerate just below minfeerate\r\n         // {grandparent + parent1 + parent2 + child} is above minfeerate\r\n         // All transactions should be rejected.\r\n-        const CAmount grandparent_fee{5679};\r\n+        const CFeeRate grandparent_feerate{minfeerate.GetFeePerK() / 5};\r\n         std::vector<CTransactionRef> grandparent_input_txns;\r\n         std::vector<COutPoint> grandparent_inputs;\r\n         for (auto i{1}; i < 50; ++i) {\r\n             grandparent_input_txns.push_back(m_coinbase_txns[i]);\r\n             grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\r\n         }\r\n-        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\r\n-        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\r\n-                                                           /*inputs=*/grandparent_inputs,\r\n-                                                           /*input_height=*/102,\r\n-                                                           /*input_signing_keys=*/{coinbaseKey},\r\n-                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\r\n-                                                                        CTxOut{last_value, parent_locking_script}},\r\n-                                                           /*submit=*/false)};\r\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN;\r\n+        auto [mtx_grandparent, grandparent_fee] = CreateValidTransaction(/*input_transactions=*/grandparent_input_txns,\r\n+                                                    /*inputs=*/grandparent_inputs,\r\n+                                                    /*input_height=*/102,\r\n+                                                    /*input_signing_keys=*/{coinbaseKey},\r\n+                                                    /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\r\n+                                                                 CTxOut{last_value, parent_locking_script}},\r\n+                                                    /*feerate=*/grandparent_feerate,\r\n+                                                    /*fee_output=*/2);\r\n         CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\r\n         package_ppfc.push_back(tx_grandparent);\r\n \r\n-        const CAmount parent_fee{12000};\r\n-        const CAmount parent_value{10*COIN - parent_fee};\r\n-        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\r\n-                                                       /*input_height=*/102,\r\n-                                                       /*input_signing_key=*/parent_key,\r\n-                                                       /*output_destination=*/child_locking_script,\r\n-                                                       /*output_amount=*/parent_value, /*submit=*/false)};\r\n+        const CFeeRate parent_feerate{minfeerate.GetFeePerK() * 25};\r\n+        const CAmount parent_value{10*COIN};\r\n+        auto [mtx_parent1, parent_fee1] = CreateValidTransaction(/*input_transactions=*/{tx_grandparent},\r\n+                                                /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 0}},\r\n+                                                /*input_height=*/102,\r\n+                                                /*input_signing_keys=*/{parent_key},\r\n+                                                /*outputs=*/{CTxOut{parent_value, child_locking_script}},\r\n+                                                /*feerate=*/parent_feerate,\r\n+                                                /*fee_output=*/0);\r\n         CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\r\n         package_ppfc.push_back(tx_parent1);\r\n-        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\r\n-                                                       /*input_height=*/102,\r\n-                                                       /*input_signing_key=*/parent_key,\r\n-                                                       /*output_destination=*/child_locking_script,\r\n-                                                       /*output_amount=*/parent_value, /*submit=*/false)};\r\n+        auto [mtx_parent2, parent_fee2] = CreateValidTransaction(/*input_transactions=*/{tx_grandparent},\r\n+                                                /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 1}},\r\n+                                                /*input_height=*/102,\r\n+                                                /*input_signing_keys=*/{parent_key},\r\n+                                                /*outputs=*/{CTxOut{parent_value, child_locking_script}},\r\n+                                                /*feerate=*/parent_feerate,\r\n+                                                /*fee_output=*/0);\r\n         CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\r\n         package_ppfc.push_back(tx_parent2);\r\n \r\n \r\n-        const CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};\r\n-        const CAmount child_value{last_value + 2*parent_value - child_fee};\r\n-        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\r\n-                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\r\n-                                                     /*input_height=*/102,\r\n-                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\r\n-                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\r\n-                                                     /*submit=*/false)};\r\n+        const CFeeRate child_feerate{minfeerate.GetFeePerK() - 50};\r\n+        const CAmount child_value{last_value + 2*parent_value};\r\n+        auto [mtx_child, child_fee] = CreateValidTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\r\n+                                              /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\r\n+                                              /*input_height=*/102,\r\n+                                              /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\r\n+                                              /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\r\n+                                              /*feerate=*/child_feerate,\r\n+                                              /*fee_output=*/0);\r\n         CTransactionRef tx_child = MakeTransactionRef(mtx_child);\r\n         package_ppfc.push_back(tx_child);\r\n \r\n-        // Magic Number Sanity Checks\r\n-        // A little bit of wiggle room because the signature spending the coinbase is not fixed size.\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent) / 10, 567);\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 112);\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 112);\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_child), 227);\r\n         // Neither parent can pay for the grandparent by itself\r\n-        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent1)) > grandparent_fee + parent_fee);\r\n-        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent2)) > grandparent_fee + parent_fee);\r\n+        BOOST_CHECK_EQUAL(parent_fee1, parent_fee2);\r\n+        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent1)) > grandparent_fee + parent_fee1);\r\n+        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent2)) > grandparent_fee + parent_fee1);\r\n         const auto parents_vsize = GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent1) + GetVirtualTransactionSize(*tx_parent2);\r\n         // Combined, they can pay for the grandparent\r\n-        BOOST_CHECK(minfeerate.GetFee(parents_vsize) <= grandparent_fee + 2 * parent_fee);\r\n+        BOOST_CHECK(minfeerate.GetFee(parents_vsize) <= grandparent_fee + 2 * parent_fee1);\r\n         const auto total_vsize = parents_vsize + GetVirtualTransactionSize(*tx_child);\r\n         BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_child)) > child_fee);\r\n         // The total package is above feerate, but mostly because of the 2 parents\r\n-        BOOST_CHECK(minfeerate.GetFee(total_vsize) <= grandparent_fee + 2 * parent_fee + child_fee);\r\n+        BOOST_CHECK(minfeerate.GetFee(total_vsize) <= grandparent_fee + 2 * parent_fee1 + child_fee);\r\n         // Child feerate is less than the package feerate\r\n-        BOOST_CHECK(CFeeRate(child_fee, GetVirtualTransactionSize(*tx_child)) < CFeeRate(grandparent_fee + 2 * parent_fee + child_fee, total_vsize));\r\n+        BOOST_CHECK(CFeeRate(child_fee, GetVirtualTransactionSize(*tx_child)) < CFeeRate(grandparent_fee + 2 * parent_fee1 + child_fee, total_vsize));\r\n \r\n         const auto result_ppfc = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_ppfc, /*test_accept=*/false);\r\n         BOOST_CHECK(result_ppfc.m_state.IsInvalid());\r\ndiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp\r\nindex 1ca69371b3..11b98cda49 100644\r\n--- a/src/test/util/setup_common.cpp\r\n+++ b/src/test/util/setup_common.cpp\r\n@@ -343,12 +343,13 @@ CBlock TestChain100Setup::CreateAndProcessBlock(\r\n }\r\n \r\n \r\n-CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n-                                                                     const std::vector<COutPoint>& inputs,\r\n-                                                                     int input_height,\r\n-                                                                     const std::vector<CKey>& input_signing_keys,\r\n-                                                                     const std::vector<CTxOut>& outputs,\r\n-                                                                     bool submit)\r\n+std::pair<CMutableTransaction, CAmount> TestChain100Setup::CreateValidTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n+                                                                                  const std::vector<COutPoint>& inputs,\r\n+                                                                                  int input_height,\r\n+                                                                                  const std::vector<CKey>& input_signing_keys,\r\n+                                                                                  const std::vector<CTxOut>& outputs,\r\n+                                                                                  const std::optional<CFeeRate>& feerate,\r\n+                                                                                  const std::optional<uint32_t>& fee_output)\r\n {\r\n     CMutableTransaction mempool_txn;\r\n     mempool_txn.vin.reserve(inputs.size());\r\n@@ -372,17 +373,57 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(const std::\r\n     }\r\n     // Build Outpoint to Coin map for SignTransaction\r\n     std::map<COutPoint, Coin> input_coins;\r\n+    CAmount inputs_amount{0};\r\n     for (const auto& outpoint_to_spend : inputs) {\r\n         // - Use GetCoin to properly populate utxo_to_spend,\r\n         Coin utxo_to_spend;\r\n         assert(coins_cache.GetCoin(outpoint_to_spend, utxo_to_spend));\r\n         input_coins.insert({outpoint_to_spend, utxo_to_spend});\r\n+        inputs_amount += utxo_to_spend.out.nValue;\r\n     }\r\n     // - Default signature hashing type\r\n     int nHashType = SIGHASH_ALL;\r\n     std::map<int, bilingual_str> input_errors;\r\n     assert(SignTransaction(mempool_txn, &keystore, input_coins, nHashType, input_errors));\r\n \r\n+    // Calculate fees paid\r\n+    CAmount current_fee = inputs_amount - std::accumulate(outputs.begin(), outputs.end(), CAmount(0),\r\n+        [](const CAmount& acc, const CTxOut& out) {\r\n+            return acc + out.nValue;\r\n+        });\r\n+\r\n+    // Deduct fees from fee_output to meet feerate if set\r\n+    if (feerate.has_value()) {\r\n+        assert(fee_output.has_value());\r\n+        assert(fee_output.value() < mempool_txn.vout.size());\r\n+\r\n+        CAmount target_fee = feerate.value().GetFee(GetVirtualTransactionSize(CTransaction{mempool_txn}));\r\n+        CAmount deduction = target_fee - current_fee;\r\n+\r\n+        if (deduction > 0) {\r\n+            // Only deduct fee if there's anything to deduct.\r\n+            // If the caller has put more fees than the target feerate, don't change the fee.\r\n+            mempool_txn.vout[fee_output.value()].nValue -= deduction;\r\n+\r\n+            // Re-sign since an output has changed\r\n+            input_errors.clear();\r\n+            assert(SignTransaction(mempool_txn, &keystore, input_coins, nHashType, input_errors));\r\n+            current_fee = target_fee;\r\n+        }\r\n+    }\r\n+\r\n+    return {mempool_txn, current_fee};\r\n+}\r\n+\r\n+CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n+                                                                     const std::vector<COutPoint>& inputs,\r\n+                                                                     int input_height,\r\n+                                                                     const std::vector<CKey>& input_signing_keys,\r\n+                                                                     const std::vector<CTxOut>& outputs,\r\n+                                                                     bool submit)\r\n+{\r\n+    CMutableTransaction mempool_txn = CreateValidTransaction(input_transactions, inputs, input_height, input_signing_keys, outputs).first;\r\n+\r\n     // If submit=true, add transaction to the mempool.\r\n     if (submit) {\r\n         LOCK(cs_main);\r\ndiff --git a/src/test/util/setup_common.h b/src/test/util/setup_common.h\r\nindex 106bee6b4b..6c15140ffa 100644\r\n--- a/src/test/util/setup_common.h\r\n+++ b/src/test/util/setup_common.h\r\n@@ -9,6 +9,7 @@\r\n #include <key.h>\r\n #include <node/caches.h>\r\n #include <node/context.h>\r\n+#include <policy/feerate.h>\r\n #include <primitives/transaction.h>\r\n #include <pubkey.h>\r\n #include <random.h>\r\n@@ -20,10 +21,10 @@\r\n #include <util/vector.h>\r\n \r\n #include <functional>\r\n+#include <optional>\r\n #include <type_traits>\r\n #include <vector>\r\n \r\n-class CFeeRate;\r\n class Chainstate;\r\n \r\n /** This is connected to the logger. Can be used to redirect logs to any other log */\r\n@@ -154,6 +155,27 @@ struct TestChain100Setup : public TestingSetup {\r\n     //! Mine a series of new blocks on the active chain.\r\n     void mineBlocks(int num_blocks);\r\n \r\n+    /**\r\n+     * Create a transaction, optionally setting the fee based on the feerate.\r\n+     * Note: The feerate may not be met exactly depending on whether the signatures can have different sizes.\r\n+     *\r\n+     * @param input_transactions   The transactions to spend\r\n+     * @param input_height         The height of the block that included the input transactions.\r\n+     * @param inputs               Outpoints with which to construct transaction vin.\r\n+     * @param input_signing_keys   The keys to spend the input transactions.\r\n+     * @param outputs              Transaction vout.\r\n+     * @param feerate              The feerate the transaction should pay.\r\n+     * @param fee_output           The index of the output to take the fee from.\r\n+     * @return The transaction and the fee it pays\r\n+     */\r\n+    std::pair<CMutableTransaction, CAmount> CreateValidTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n+                                                                   const std::vector<COutPoint>& inputs,\r\n+                                                                   int input_height,\r\n+                                                                   const std::vector<CKey>& input_signing_keys,\r\n+                                                                   const std::vector<CTxOut>& outputs,\r\n+                                                                   const std::optional<CFeeRate>& feerate = std::nullopt,\r\n+                                                                   const std::optional<uint32_t>& fee_output = std::nullopt);\r\n+\r\n     /**\r\n      * Create a transaction and submit to the mempool.\r\n      *\r\n```",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-14T21:10:28Z",
      "diff_hunk" : "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230174007",
      "id" : 1230174007,
      "line" : 572,
      "node_id" : "PRRC_kwDOABII585JUvc3",
      "original_commit_id" : "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "original_line" : 398,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 401,
      "pull_request_review_id" : 1480312972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230174007/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-14T22:27:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230174007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230192959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230192959"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 005581b5ea61edd444439900109c527c7112a650 \"[packages] AncestorPackage sorts and builds ancestor subsets\"\r\n\r\nnit: These two loops could be combined",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-14T21:32:50Z",
      "diff_hunk" : "@@ -92,3 +91,92 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, curr_tx is guaranteed to be in the ancestor_subsets map.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {\n+            visit(parent_tx->second);\n+        }\n+        auto parent_ancestor_set = ancestor_subsets.find(parent_tx->first);\n+        my_ancestors.insert(parent_ancestor_set->second.cbegin(), parent_ancestor_set->second.cend());\n+    }\n+    ancestor_subsets.insert(std::make_pair(curr_txid, my_ancestors));\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate txid_to_tx for quick lookup\n+    std::transform(txns_in.cbegin(), txns_in.cend(), std::inserter(txid_to_tx, txid_to_tx.end()),\n+            [](const auto& tx) { return std::make_pair(tx->GetHash(), tx); });\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subsets cache.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // Exclusion from ancestor_subsets is equivalent to not yet being fully processed.\n+    size_t i{0};\n+    while (ancestor_subsets.size() < txns_in.size() && i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (ancestor_subsets.count(tx->GetHash()) == 0) visit(tx);\n+        Assume(ancestor_subsets.count(tx->GetHash()) == 1);\n+        ++i;\n+    }\n+    txns = txns_in;\n+    // Sort by the number of in-package ancestors.\n+    std::sort(txns.begin(), txns.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        auto a_ancestors = ancestor_subsets.find(a->GetHash());\n+        auto b_ancestors = ancestor_subsets.find(b->GetHash());\n+        return a_ancestors->second.size() < b_ancestors->second.size();\n+    });\n+    Assume(IsSorted(txns));\n+    Assume(ancestor_subsets.find(txns.back()->GetHash()) != ancestor_subsets.end());\n+    is_ancestor_package = ancestor_subsets.find(txns.back()->GetHash())->second.size() == txns.size();\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::GetAncestorSet(const CTransactionRef& tx)\n+{\n+    auto ancestor_set = ancestor_subsets.find(tx->GetHash());\n+    if (ancestor_set == ancestor_subsets.end()) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    for (const auto& txid : ancestor_set->second) {\n+        if (banned_txns.find(txid) != banned_txns.end()) {\n+            return std::nullopt;\n+        }\n+    }\n+    result.reserve(ancestor_set->second.size());\n+    for (const auto& txid : ancestor_set->second) {\n+        auto it = txid_to_tx.find(txid);\n+        if (excluded_txns.find(txid) == excluded_txns.end()) {\n+            result.push_back(it->second);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230192959",
      "id" : 1230192959,
      "line" : 164,
      "node_id" : "PRRC_kwDOABII585JU0E_",
      "original_commit_id" : "005581b5ea61edd444439900109c527c7112a650",
      "original_line" : 164,
      "original_position" : 100,
      "original_start_line" : 153,
      "path" : "src/policy/packages.cpp",
      "position" : 169,
      "pull_request_review_id" : 1480312972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230192959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 153,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-14T22:27:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230192959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230197576"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230197576"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 005581b5ea61edd444439900109c527c7112a650 \"[packages] AncestorPackage sorts and builds ancestor subsets\"\r\n\r\nnit: The inputs add up to 4851, not 4900.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-14T21:39:29Z",
      "diff_hunk" : "@@ -67,6 +92,122 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(4900 * COIN, spk));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230197576",
      "id" : 1230197576,
      "line" : 144,
      "node_id" : "PRRC_kwDOABII585JU1NI",
      "original_commit_id" : "005581b5ea61edd444439900109c527c7112a650",
      "original_line" : 144,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 99,
      "pull_request_review_id" : 1480312972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230197576/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-14T22:27:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230197576",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230980506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230980506"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```c++\r\nconst CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};\r\n``` \r\nWhat does 5676 + 121 + 121 + 227  numbers represent,  5676 corresponds to the grandparent size does 121 121 mean the sizes of parent1 and parent2 (which should be 112) ? Also is 227 the child size? maybe use a variable with a descriptive name for the magic numbers before usage since I see they are used in multiple places.\r\n",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-15T13:03:35Z",
      "diff_hunk" : "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{12000};\n+        const CAmount parent_value{10*COIN - parent_fee};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230980506",
      "id" : 1230980506,
      "line" : 608,
      "node_id" : "PRRC_kwDOABII585JX0Wa",
      "original_commit_id" : "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "original_line" : 434,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 437,
      "pull_request_review_id" : 1481520336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230980506/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-15T20:07:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230980506",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231092018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231092018"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "So my [idea](https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022) for that would be to have net_processing do retries:\r\n\r\n[EDIT: fix logic for skipping B1 on first pass. Probably doesn't quite make sense for B1 to be sorted before B2 in a feerate topo sort, if B1's ancestor fee rate is lower than B2's though...]\r\n\r\n * precheck each\r\n * topo sort by feerate: A1, A2, B1, B2, C\r\n * skip A1, A2 as too low fee rate\r\n * skip [A1, A2, B1] as too low fee rate\r\n * accept B2 with ancestor A2; recalculate fee rates\r\n * skip C as too low fee\r\n * return [A1,B1,C] as skipped\r\n * on the next ProcessMessages call for that peer, retry [A1,B1,C]\r\n * topo sort again; skip A1, accept B1, recalculate C, skip C\r\n * return [C] as skipped\r\n * on the next ProcessMessages call for that peer, retry [C]\r\n * no successes, so return [C] as soft-rejected",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-15T14:19:18Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231092018",
      "id" : 1231092018,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585JYPky",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1481700709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231092018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-15T15:03:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231092018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231336134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231336134"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "what is `cto` please\r\nSaw it in policy/packages.cpp  `AncestorPackage::visit` description comment?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-15T17:22:51Z",
      "diff_hunk" : "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool is_ancestor_package{false};\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231336134",
      "id" : 1231336134,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII585JZLLG",
      "original_commit_id" : "005581b5ea61edd444439900109c527c7112a650",
      "original_line" : 109,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 75,
      "pull_request_review_id" : 1481520336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231336134/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-15T20:21:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231336134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231481794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231481794"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Test the result and ensure that all the package transactions are accepted?\r\n``` suggestion\r\n        submitpackage_result = self.nodes[0].submitpackage(chain_hex)\r\n        assert 'tx-results' in submitpackage_result\r\n        result = submitpackage_result['tx-results']\r\n        assert_equal(len(result), len(chain_hex))\r\n        assert all([(tx_from_hex(tx_hex).getwtxid() in result) for tx_hex in chain_hex])\r\n``` ",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-15T20:02:56Z",
      "diff_hunk" : "@@ -325,17 +324,13 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n-\n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")\n-        # Chain of 3 transactions has too many generations\n+        self.log.info(\"Submitpackage with a 25-generation chain\")\n         chain_hex = [t[\"hex\"] for t in self.wallet.create_self_transfer_chain(chain_length=25)]\n-        assert_raises_rpc_error(-25, \"not-child-with-parents\", node.submitpackage, chain_hex)\n+        self.nodes[0].submitpackage(chain_hex)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231481794",
      "id" : 1231481794,
      "line" : 333,
      "node_id" : "PRRC_kwDOABII585JZuvC",
      "original_commit_id" : "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "original_line" : 333,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 24,
      "pull_request_review_id" : 1481520336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231481794/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-16T08:39:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231481794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231548600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231548600"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ctor is short for constructor.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-15T21:22:34Z",
      "diff_hunk" : "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool is_ancestor_package{false};\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231548600",
      "id" : 1231548600,
      "in_reply_to_id" : 1231336134,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII585JZ_C4",
      "original_commit_id" : "005581b5ea61edd444439900109c527c7112a650",
      "original_line" : 109,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 75,
      "pull_request_review_id" : 1482408807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231548600/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-15T21:22:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231548600",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1238956092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238956092"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/instagibbs/bitcoin/commit/30eaa61160cf63cc79d1bc3232d33de091f94391\r\n\r\nThis is what I was thinking. As a reviewer I can pretty quickly tell what errors will be allowed retries later(and be included in following sub-packages), and which will not. e.g., `bip125-replacement-disallowed` will never work later, nor will `txn-mempool-conflict`, `min relay fee not met`, `too-long-mempool-chain`(?), `too-long-mempool-chain`(?) and nothing currently in `ReplacementChecks`.\r\n\r\nCould also just bubble up the individual result to avoid the TX_MISSING_INPUTS case, but I really like being able to very quickly find all instances... thoughts?",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-22T19:41:55Z",
      "diff_hunk" : "@@ -1379,39 +1402,69 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (!subpackage) {\n+                // This transaction depends on a tx we will definitely not accept (failed for a\n+                // non-policy and non-missing-inputs reason). We already know that this transaction\n+                // will be invalid for at least one reason, i.e. a missing input. To minimize the\n+                // amount of repeated work, don't validate this tx. Just return missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                // Don't quit too early. Other transactions may not necessarily depend on the same\n+                // parent, and should still be considered.\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                Assume(tx == package.back());\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1238956092",
      "id" : 1238956092,
      "in_reply_to_id" : 1093057032,
      "line" : 1489,
      "node_id" : "PRRC_kwDOABII585J2Pg8",
      "original_commit_id" : "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "original_line" : 1489,
      "original_position" : 144,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 257,
      "pull_request_review_id" : 1493882531,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238956092/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-22T19:41:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238956092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1238976849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238976849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If these retries aren't sufficient to capture CPFPs, they are also unnecessary from the standpoint of getting MVP deployed perhaps. If there is no way to avoid missing things without going full cluster mempool, I'd suggest keeping things very simple to start. I'll let Gloria whiteboard some alternatives before exploring further. ",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-22T20:04:08Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1238976849",
      "id" : 1238976849,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585J2UlR",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1493914576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238976849/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-22T20:04:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238976849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've discussed some of the concerns here with @instagibbs, though haven't reviewed the code or read all the discussion.\r\n\r\nAs I understand it, there are (at least) these two issues to be addressed:\r\n* If a package is received, but its overall feerate is too low, it may still be the case that there are acceptable subpackages (at the top of the graph) we would have liked to accept (and this could happen when e.g. we missed the initial announcement of those subpackages). This is a regression compared to the current non-package relay, as orphan handling may resolve such cases today, though it's not clear to me how serious this is.\r\n* It's also possible that the feerate of the overall package is sufficient to be accepted, but it contains a low-feerate subset (at the \"bottom\" of the graph) that is actually too low, and we would ideally avoid accepting (possibly while still accepting the rest), to avoid cases where low feerate stuff makes it into our mempool (accidentally or maliciously) through the package relay mechanism.\r\n\r\nMy belief is that the second problem, deciding whether a low-feerate subset exists in a package, is actually equivalent to the cluster linearization/chunking problem (see #27677). A special case is a single leaf transaction in the package that's low-fee, but the more general question is much harder.\r\n\r\nIf the \"accepting low-fee stuff\" is considered a problem (as it appears to be, as you're trying to detect it for the last transaction in the package), then my thinking is that we actually may want to address it through a cluster linearization lens (independent of actually making the mempool cluster-based):\r\n* Run some linearization algorithm on the received package (it may be a very dumb one, like just sorting topologically, or the ancestor set feerate based one that the current mempool mining logic is using, or possibly later a much more intelligent one). Given that you're inherently limited to (I think) 25 transaction packages anyway, this ought to be very fast, even for ancestor sets). I'm happy to provide code to do this (I've been working on this problem the past few weeks anyway). The smarter the linearization is, the more capable it'll be at detecting sneaking-in, but even dumb topological sort is sufficient to detect the \"single last bad transaction\" case.\r\n* Run chunking on the linearization. This is a very simple O(n) algorithm that partitions the linearization into chunks, with the property that the combined feerate of the transactions in each consecutive chunk goes down.\r\n* Consider feerate checks of mempool insertion for every chunk separately, and abort as soon as one fails (possibly keeping the previous chunks, if that's easily doable). Given that chunk feerates are monotonously decreasing, if one fails for feerate reasons, the later ones will fail too.\r\n\r\nThis approach does not deal well with (transient) failures for non-feerate reasons, because if some transactions fails checks, if you've already linearized, everything after it may possibly depend on the failing one. It's possible in that case to go back and relinearize, but perhaps it's okay to just give up then?",
      "created_at" : "2023-06-27T16:11:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1609832143",
      "id" : 1609832143,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585f9BbP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609832143/reactions"
      },
      "updated_at" : "2023-06-27T16:41:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609832143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> As I understand it, there are (at least) these two issues to be addressed:\r\n\r\nYes, essentially \"the package contains valid transactions, but we should only accept a subset of it due to fees.\" The first one can happen normally if we just came out of IBD or our peer has a lower minfeerate than we do - this PR was initially to address that. It was also to address \"the package contains some invalid transactions, and we should take the subset that is valid\" but I now think of that as a distinct concern.\r\n\r\nFor the second, I believe the worst concerns are due to problems with eviction (i.e. fixed with cluster mempool). But it's also such a waste to validate, accept, and potentially relay them, so I think we should try to reject it as soon as possible.\r\n\r\nMost problems with this PR boil down to how it groups transactions together (each time, just take the not-yet-submitted ancestor set of each tx). It's not smart enough to, for example, find a parent+2children group since every grouping is ancestor set-shaped. It also seems that its retry attempts (specifically the O(n^2) `PreChecks`) are a dealbreaker, so being able to decide on groups earlier is important.\r\n\r\n> My belief is that the second problem, deciding whether a low-feerate subset exists in a package, is actually equivalent to the cluster linearization/chunking problem\r\n\r\nYes! I think using ancestor feerate linearization + chunking method would be a much better way to divide the package into subgroups before validation. I also spent some time whiteboarding whether package RBF could be feasible for non-v3 this way. I haven't found anything I'm happy with yet, but I think incorporating \"cost to RBF conflicts\" into the chunking algorithm could be a start.\r\n\r\nOne thing I want to preserve from the current approach is minimizing groups when we can. For example, when the \"top\" of the package is above minimum feerate, we'll try it by itself before grouping. One goal of that is to prevent any potential regression from legacy orphan handling. Another problem is around granularity of checking ancestor/descendant limits: imagine a diamond shape (grandparent, 2 parents, 1 child) where grandparent has 23 in-mempool ancestors. The child won't make it regardless of fee, since it would have 26 ancestors. So if it's not necessary to chunk all 4 together (i.e. no need to CPFP), we shouldn't. [1]\r\n\r\nSo I think we'd want to use the linearization/chunking algo, but favor smaller chunks whenever possible. And preserve the behavior where, when every transaction's feerate is above our minimums, we just call `AcceptSingleTransaction` on each one. This also allows RBF.\r\n\r\n> This approach does not deal well with (transient) failures for non-feerate reasons, because if some transactions fails checks, if you've already linearized, everything after it may possibly depend on the failing one. It's possible in that case to go back and relinearize, but perhaps it's okay to just give up then?\r\n\r\nI still believe the answer to this is to give up and ensure we do not block an honest peer from relaying it to us later. If a peer is stuffing invalid transactions into a package, we don't waste any time and imo it's reasonable to wait for an honest peer to send the real package to us.\r\n\r\nI've been wondering if we should still try the transactions that are not descendants of the transaction(s) that failed. It seems a shame to just skip validation for a transaction we downloaded and has no dependencies on things we deemed invalid. But this does leave room for weird behavior... for example, we can only take 1 of 2 transactions before hitting descendant limits, so stuffing the package with high-feerate invalid txns can make us accept the lower-feerate one first if we don't re-linearize after we see the invalid tx. One idea is, when something is invalid for non-fee reasons, we skip its descendants but do a re-linearization that's topo-only and randomly tie-broken for everything else? But maybe this is unrealistic and not worth thinking about.\r\n\r\nAnyway, to summarize, the approach I'm going with now is:\r\n1. Basic sanitization. Topological sort.\r\n2. Grab UTXOs and calculate fees. Deduplicate txns already in mempool or seemingly just-confirmed. Drop things with missing inputs.\r\n3. Refine our linearization using the fee information.\r\n4. If each transaction passes `CheckFeeRate` by themselves, just call `AcceptSingleTransaction(tx)` for each tx -> return\r\n5. Chunkify, favoring smaller chunks (i.e. don't chunk together if possible)\r\n6. For each chunk, `AcceptPackageWrappingSingle(chunk)` -> return\r\n\r\nWill see what can be borrowed from the cluster mempool code - thanks!!\r\n\r\n[1] Similarly, since `PackageMempoolChecks` would overestimate each parent's ancestor count the way it's currently implemented (it was written with the assumption that inputs would be tx + ancestors), we should be willing to take one parent and not the other.",
      "created_at" : "2023-06-29T11:08:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1612912372",
      "id" : 1612912372,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585gIxb0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612912372/reactions"
      },
      "updated_at" : "2023-06-29T14:22:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612912372",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1246479807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246479807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> So my https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022 for that would be to have net_processing do retries:\r\n\r\nThis seems like a good option to consider for computational complexity, but I think could be even slower if we are blocked by UTXO fetching - they are cached when fetched in `PreChecks`, uncached at the end of `ProcessNewPackage`, and then reloaded again when we retry. So just thinking about UTXO fetching, it seems better to do retries while we have them loaded and cached.\r\n\r\nI feel like this also requires us making a tradeoff between \"good enough result\" and potentially a very long queue of things to retry. We would need to put the txns in an orphanage/memory-bounded data structure between retries. We'd want to slow down package relay requests with this peer to avoid getting backed up, be prepared to drop things, etc. In situations where somebody is specially crafting packages, imo we aren't necessarily solving the problem and we'd end up doing more work.",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-29T11:12:44Z",
      "diff_hunk" : "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1246479807",
      "id" : 1246479807,
      "in_reply_to_id" : 1225898875,
      "line" : 1303,
      "node_id" : "PRRC_kwDOABII585KS8W_",
      "original_commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "original_line" : 1303,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1505063065,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246479807/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-29T11:12:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246479807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1246480765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246480765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "After whiteboarding this idea + chunking, ended up with https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1612912372",
      "commit_id" : "b234f993da3caa16f7716948fbcd16ab1a500180",
      "created_at" : "2023-06-29T11:13:53Z",
      "diff_hunk" : "@@ -1483,42 +1487,57 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n-                // Unless we're quitting early, validate the child outside of this loop.\n+                // Validate the child outside of this loop. We will consolidate results_final,\n+                // individual_results_nonfinal, and the result of validating the last transaction's\n+                // subpackage into a single PackageMempoolAcceptResult.\n                 break;\n             }\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the AncestorPackage that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1246480765",
      "id" : 1246480765,
      "in_reply_to_id" : 1226067022,
      "line" : 1467,
      "node_id" : "PRRC_kwDOABII585KS8l9",
      "original_commit_id" : "617fe7092e4fd7c987e04808adf97e169dc24f47",
      "original_line" : 1499,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 235,
      "pull_request_review_id" : 1505064500,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246480765/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-29T11:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246480765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> One goal of that is to prevent any potential regression from legacy orphan handling\r\n\r\nSorry can you motivate the issue here explicitly? How would this issue not arise in cluster mempool world?\r\n\r\n> favoring smaller chunks over larger ones.\r\n\r\nI think it'd be good to be explicit what \"favoring\" means here. Is this just individual submissions, then the full chunk on the rest of the chunk on an individual failure?\r\n\r\n> Refine our linearization using the fee information.\r\n\r\nAny thoughts on what algo here? IIUC Pieter should have ancestor-set rate code ready to go so maybe that could be used as good enough for mvp.",
      "created_at" : "2023-06-29T14:25:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1613277774",
      "id" : 1613277774,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585gKKpO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613277774/reactions"
      },
      "updated_at" : "2023-06-29T14:25:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613277774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I also spent some time whiteboarding whether package RBF could be feasible for non-v3 this way. I haven't found anything I'm happy with yet, but I think incorporating \"cost to RBF conflicts\" into the chunking algorithm could be a start.\r\n\r\nI haven't thought hard about this, but package RBF sounds a whole lot more complex - and that's probably something that actually becomes easier to reason about in a post-clustermempool world.\r\n\r\n> One thing I want to preserve from the current approach is minimizing groups when we can. For example, when the \"top\" of the package is above minimum feerate, we'll try it by itself before grouping. One goal of that is to prevent any potential regression from legacy orphan handling. Another problem is around granularity of checking ancestor/descendant limits: imagine a diamond shape (grandparent, 2 parents, 1 child) where grandparent has 23 in-mempool ancestors. The child won't make it regardless of fee, since it would have 26 ancestors. So if it's not necessary to chunk all 4 together (i.e. no need to CPFP), we shouldn't. [1]\r\n\r\nInteresting; ancestor set size limits do complicate things, and do factor into this. Ideally, I think the linearization and chunking just take these limits (including those impacted by existing in-mempool transactions) into account, but that's a lot less trivial. However, for specifically this concern a possibility is just weeding out transactions from the package whose ancestor set size would exceed the limit, before even invoking linearization, because ancestor set size of a transaction is a static property that does not depend on whatever else may be included. They can be ignored, as they're never going to be acceptable, so they shouldn't affect the order of other things that can be. It may be an independently useful optimization.\r\n\r\n> So I think we'd want to use the linearization/chunking algo, but favor smaller chunks whenever possible. And preserve the behavior where, when every transaction's feerate is above our minimums, we just call AcceptSingleTransaction on each one. This also allows RBF.\r\n\r\nAbout minimizing groupings in general, you're right. Chunking (as I had in mind) is actually too aggressive, and it's better to only group things as necessary. I don't think you need to special case individual transactions even, actually. Instead, use this, instead of chunking:\r\n* Start with an empty group of transactions to process.\r\n* Go through the transactions in linearized order, one by one:\r\n  * Add transaction to the group of transactions to process.\r\n  * Compute the combined feerate of that group (total fees divided by total size).\n    * If that feerate is sufficiently high, process the transactions in the group, and clear the group.\n    * If that feerate is not high enough, just leave the transaction in the group and continue with the next one.\n* If the final group is above the acceptable rate, process it. If not, discard it.\r\n\r\nThis will, I think, in most cases just process the transactions one by one, once. Only situations like a CPFP of which the parent alone isn't sufficient will trigger a grouped validation.\r\n\r\n> I still believe the answer to this is to give up and ensure we do not block an honest peer from relaying it to us later. If a peer is stuffing invalid transactions into a package, we don't waste any time and imo it's reasonable to wait for an honest peer to send the real package to us.\r\n\r\nI agree. The goal isn't to make sure that all imaginable unacceptable packages with some acceptable subpackage get considered. If the peer is sending bad things, we're allowed to just give up, as long as we make sure that in honest situations it's recoverable.\r\n\r\n> Anyway, to summarize, the approach I'm going with now is:\r\n\r\n...\r\n\r\nI'd modify step 4-6 to instead use the lazy grouping I described above, and use single transaction processing whenever the group happens to be a single transaction.\r\n",
      "created_at" : "2023-06-30T20:12:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1615148105",
      "id" : 1615148105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585gRTRJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1615148105/reactions"
      },
      "updated_at" : "2023-07-01T02:13:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1615148105",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Without going full cluster mempool, I think whatever linearization is given out, we should probably ensure that each remaining prefix of the ancestor package is an ancestor package itself, before attempting submission to the mempool. Skip the entry if it's not. Maybe with ancestor set scoring linearizer this is redundant? I can't tell. Ancestor set scoring is probably going to get a lot closer to the ordering you want regardless, as it catches things like https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1229432536 ",
      "created_at" : "2023-07-03T16:44:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1618871642",
      "id" : 1618871642,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585gfgVa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1618871642/reactions"
      },
      "updated_at" : "2023-07-03T16:45:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1618871642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  I don't think you need to special case individual transactions even, actually. Instead, use this, instead of chunking:\r\n\r\nI'm not sure about using a group's aggregate feerate without checking their spending relationships, as it may allow unrelated transactions to pay for each other. For example:\r\n```\r\nA(1)  B(3)\r\n   ^   ^ \r\n  C(100)\r\n```\r\nWhere minfeerate is 2sat/vB. Imagine C is invalid (e.g. a fake child created to connect A and B).\r\nThe ancestor score-based linearization I was imagining (i.e. the current `BlockAssembler` algorithm) would be selecting them as part of C's ancestor set, so the result could be ABC or BAC.\r\nIf the linearization is ABC: A is below feerate, but A+B is ok. We've allowed B to \"pay for\" A but they're unrelated.\r\nIf the linearization is BAC we're fine.\r\n\r\n> I think whatever linearization is given out, we should probably ensure that each remaining prefix of the ancestor package is an ancestor package itself, before attempting submission to the mempool. Skip the entry if it's not.\r\n\r\nWe could do lazy grouping but only try groups that are connected (e.g. n-parents-1-child or 1-parent-2-children, etc)? Requiring them to be ancestor set-shaped would miss e.g. the 1-parent-2-children case.\r\n\r\nMaybe we can linearize the selected ancestor sets themselves to guarantee that, in this kind of situation, we'd always look at B before A? I think that would address the \"only one can fit in package limits\" problem as well.",
      "created_at" : "2023-07-04T14:39:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620375694",
      "id" : 1620375694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585glPiO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620375694/reactions"
      },
      "updated_at" : "2023-07-04T14:39:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620375694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nothing is perfect, but a linearizer would ideally pick `B` before `A`, yes. So you might get:\r\n\r\n`B, A, C`\r\nor\r\n`B, C, A`\r\n\r\ndepending on if the strategy is greedy. \"topo\" sort may miss this, which is why we should probably be smarter than that?",
      "created_at" : "2023-07-04T14:50:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620395050",
      "id" : 1620395050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585glUQq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620395050/reactions"
      },
      "updated_at" : "2023-07-04T14:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620395050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow You're right; I didn't think this through.\r\n\r\n@instagibbs To a limited extent better linearization can help here (though within-chunk optimization isn't something I've been looking at, as it doesn't matter for mining/eviction) but I think you can construct more complex examples where even a \"perfect\" linearization results in grouping of things that should not pay for each other.\r\n\r\nI'm starting to think that something closer to your idea here is right: trying ancestor sets of every transaction in the linearization in order, if the ancestor set feerate is suffiicently high. This indeed won't deal with multiple-children-pay-for-parent cases perfectly, but including everything connected may be too much as well. I'll try to think about this more.",
      "created_at" : "2023-07-04T15:03:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620413203",
      "id" : 1620413203,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585glYsT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620413203/reactions"
      },
      "updated_at" : "2023-07-04T15:47:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620413203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I'm starting to think that something closer to your idea here is right: trying ancestor sets of every transaction in the linearization in order, if the ancestor set feerate is suffiicently high. This indeed won't deal with multiple-children-pay-for-parent cases perfectly, but including everything connected may be too much as well. I'll try to think about this more.\r\n\r\nI don't think handling multiple-children-pay-for-parent cases perfectly should be a goal here -- we're not fixing eviction (or changing the mining algo) at this point, so we'll still have imperfect corner cases anyway. Just getting \"high feerate child pays for below minfee ancestors\" mostly working, without introducing a DoS or breaking existing functional tx patterns, should be enough of a win IMO.",
      "created_at" : "2023-07-04T16:56:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620538136",
      "id" : 1620538136,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585gl3MY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620538136/reactions"
      },
      "updated_at" : "2023-07-04T16:56:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620538136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns Yes, I don't think we have any requirement or even strong desire to go beyond ancestor-set-based linearization quality (= sufficient for single child pay for parent) in general, so anything beyond that would be \"extra\". Just trying ancestor sets of consecutive linearization elements (whenever their joint feerate is high enough) sounds sufficient to me, but I'm still wondering about:\r\n* whether something simpler is possible that's equally good.\r\n* whether there is a more general way to think about this - imagine we have access to an optimal linearization algorithm, is there are tractable optimal solution to this problem too? If so, that may inform how to think about this.",
      "created_at" : "2023-07-05T17:59:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1622227095",
      "id" : 1622227095,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585gsTiX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1622227095/reactions"
      },
      "updated_at" : "2023-07-05T17:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1622227095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1270815944"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270815944"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Taken, thanks",
      "commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "created_at" : "2023-07-21T15:33:36Z",
      "diff_hunk" : "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1270815944",
      "id" : 1270815944,
      "in_reply_to_id" : 1230174007,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LvxzI",
      "original_commit_id" : "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "original_line" : 652,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1541384241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270815944/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T15:33:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270815944",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1270816338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270816338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "created_at" : "2023-07-21T15:34:01Z",
      "diff_hunk" : "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1270816338",
      "id" : 1270816338,
      "in_reply_to_id" : 1225871000,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Lvx5S",
      "original_commit_id" : "005581b5ea61edd444439900109c527c7112a650",
      "original_line" : 89,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1541384894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270816338/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T15:34:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270816338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm starting to think that something closer to your idea here is right: trying ancestor sets of every transaction in the linearization in order, if the ancestor set feerate is suffiicently high. This indeed won't deal with multiple-children-pay-for-parent cases perfectly, but including everything connected may be too much as well.\r\n\r\n> I don't think handling multiple-children-pay-for-parent cases perfectly should be a goal here\r\n\r\nI agree that the non-ancestor-set-shaped submission is not something we should try to do right now.\r\n\r\nOutline of approach I've just pushed (lmk what y'all think?):\r\n\r\n- Basic sanitization. Linearize (Topological sort only)\r\n- **PreChecks loop** For each tx, grab UTXOs to calculate fees and filter out anything we should skip:\r\n    - If already in mempool (or same txid in mempool), mark as skip\r\n    - If missing inputs or conflict [2], record this failure and mark this and all descendants as skip.\r\n    - If no failures or TX_SINGLE_FAILURE [3], continue\r\n    - Otherwise, record this failure and mark that we will `quit_early`.\r\n- Refine our linearization using the fee information [4]\r\n- **Subpackage validation loop** For each transaction in the new linearized order:\r\n    - Get the transaction's ancestor subpackage.\r\n    - If the feerate of this transaction is insufficient, continue; [5]\r\n    - If the feerate of this subpackage is insufficient, continue;\r\n    - Otherwise, try to submit the subpackage, using `AcceptSingleTransaction()` if it's just 1 tx [6]\r\n    - if at any point we get a non-fee-related error, abort all.\r\n- Backfill results:\r\n\t- Try to use results from the subpackage validation loop.\r\n\t- If that doesn't exist (i.e. we quit early), use results from prechecks loop.\r\n\t- If that doesn't exist (i.e. it depends on something missing inputs), fill with `TX_UNKNOWN`.\r\n\r\nThis means we will call `PreChecks` for each transaction 2 times (fewer if we quit early), and run all other validation checks at most 1 time. A transaction shouldn't be validated in the subpackage validation loop more than once. Note that UTXOs are cached in `m_view` so there is not repeated loading the second time we call `PreChecks`.\r\n\r\n[1]  I'm using `PreChecks` for this in order to keep the anti-DoS fail-fast checks. These checks are very cheap and I don't think we should skip them before loading UTXOs. For example, something larger than max standard size could cause us to load a lot of UTXOs. But we could discuss using something more minimal than `PreChecks`. I also think the things done in `PreChecks()` like calculating ancestors and in-mempool conflicts can be used to refine some of the logic. For example, we could quickly see that a tx conflicts with something it can't replace and skip it.\r\n[2] i.e. `TX_MISSING_INPUTS` or `TX_CONFLICT`. This includes missing inputs and txn-already-known (something we guess is already confirmed). I special case'd these as something we should be more tolerant of (i.e. skip instead of abort) because I can imagine them happening in honest cases when we have a different chainstate from our peer, and it's fairly easy to skip over them.\r\n[3] This includes fee-related errors, but only the ones that can be bypassed by package validation. Unless we remove the rule from  #26933, something below min relay feerate would not fall in this category. And since we have no package RBF, not meeting fee-related RBF requirements is not in this category. I've documented these in the code.\r\n[4] I'm using a slightly modified `MiniMiner` here to get the order in which these transactions would be mined. It does not pull the mempool ancestors/cluster since there is no limit to how large that cluster might be.\r\n[5] This naturally resolves the \"package feerate is ok but the bottom tx isn't\" issue.\r\n[6] Rationale https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1612912372\r\n",
      "created_at" : "2023-07-24T09:12:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1647523520",
      "id" : 1647523520,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585iMzbA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1647523520/reactions"
      },
      "updated_at" : "2023-07-24T09:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1647523520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272306357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272306357"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yay! much easier to think about now\r\n\r\nneeds a reasonable comment to distinguish from TX_MEMPOOL_POLICY\r\n\r\nmy suggestion was adding something like \"but result may differ when in different package\"",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T13:59:02Z",
      "diff_hunk" : "@@ -54,6 +54,8 @@ enum class TxValidationResult {\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n     TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n+    TX_SINGLE_FAILURE,        //!< fee was insufficient to meet some policy (minimum/RBF/etc)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272306357",
      "id" : 1272306357,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585L1dq1",
      "original_commit_id" : "f73efcd17113b04aa88582be6aac82c17778578c",
      "original_line" : 57,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/validation.h",
      "position" : 4,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272306357/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272306357",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272336717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272336717"
         }
      },
      "author_association" : "MEMBER",
      "body" : "very glad to see the special casing of this to MISSING_INPUTS gone\r\n",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T14:21:49Z",
      "diff_hunk" : "@@ -1334,6 +1345,23 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackageWrappingSingle(const std::vector<CTransactionRef>& subpackage, ATMPArgs& args)\n+{\n+    ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    AssertLockHeld(::cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    if (subpackage.size() > 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272336717",
      "id" : 1272336717,
      "line" : 1354,
      "node_id" : "PRRC_kwDOABII585L1lFN",
      "original_commit_id" : "86e556add9644f66a7c96b22ee7d3fab942b9fa9",
      "original_line" : 1353,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 140,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272336717/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272336717",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272355103"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272355103"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"[refactor] fill in results for every tx in AcceptPackage\"\r\n\r\nIt could have just been submitted in the above loop, maybe if this goes away later it won't be worth being more verbose...",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T14:35:39Z",
      "diff_hunk" : "@@ -1489,31 +1489,33 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n-    // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted.\n-    if (quit_early || txns_package_eval.empty()) {\n-        for (const auto& [wtxid, mempoolaccept_res] : individual_results_nonfinal) {\n-            Assume(results_final.emplace(wtxid, mempoolaccept_res).second);\n-            Assume(mempoolaccept_res.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n-        }\n-        return PackageMempoolAcceptResult(package_state_quit_early, std::move(results_final));\n-    }\n-    // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n-    // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval, args);\n-    // Include already-in-mempool transaction results in the final result.\n-    for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n-        Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);\n-    }\n-    if (submission_result.m_state.GetResult() == PackageValidationResult::PCKG_TX) {\n-        // Package validation failed because one or more transactions failed. Provide a result for\n-        // each transaction; if a transaction doesn't have an entry in submission_result,\n-        // include the previous individual failure reason.\n-        submission_result.m_tx_results.insert(individual_results_nonfinal.cbegin(),\n-                                              individual_results_nonfinal.cend());\n-        Assume(submission_result.m_tx_results.size() == package.size());\n+    auto submission_result = quit_early || txns_package_eval.empty() ?\n+        PackageMempoolAcceptResult(package_state_quit_early, {}) :\n+        AcceptPackageWrappingSingle(txns_package_eval, args);\n+    // Attempt to provide a result for each transaction.\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        if (submission_result.m_tx_results.count(wtxid) > 0) {\n+            // Already in submission result.\n+            Assume(results_final.count(wtxid) == 0);\n+            continue;\n+        } else if (const auto it{results_final.find(wtxid)}; it != results_final.end()) {\n+            // Already-in-mempool transaction.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272355103",
      "id" : 1272355103,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L1pkf",
      "original_commit_id" : "6fc2bd3c69baf798e45ce9328f79f58a8192ce7f",
      "original_line" : 1503,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272355103/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272355103",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272371805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272371805"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We'll need some miniminer Experts(TM) to review this, but I'm just going to assume for now that this will be used as a topological \"tie breaker\" for linearization that is currently in the branch to this point\r\n\r\nso if there's a bug in it, it's no worse than topo-sort, and can be improved later if dependencies need to be cut for whatever reason",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T14:48:06Z",
      "diff_hunk" : "@@ -124,6 +124,34 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272371805",
      "id" : 1272371805,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII585L1tpd",
      "original_commit_id" : "8a7087b0e5839988fcdf93b664ac7b747baec8d6",
      "original_line" : 127,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 4,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272371805/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272371805",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272419757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272419757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> (a.fee * a.vsize > b.fee * a.vsize)\r\n\r\nfix comment",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T15:24:35Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272419757",
      "id" : 1272419757,
      "line" : 82,
      "node_id" : "PRRC_kwDOABII585L15Wt",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 82,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272419757/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272419757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272429657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272429657"
         }
      },
      "author_association" : "MEMBER",
      "body" : "would be nice to put \"Filtered\" in the function names of whatever is doing filtering to reduce mental load",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T15:32:39Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272429657",
      "id" : 1272429657,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L17xZ",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 118,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272429657/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272429657",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272481752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272481752"
         }
      },
      "author_association" : "MEMBER",
      "body" : "if this somehow happens in prod, do we want to keep stumbling along?",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T16:16:38Z",
      "diff_hunk" : "@@ -1459,39 +1461,73 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.GetAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n             const auto single_res = AcceptSingleTransaction(tx, single_args);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272481752",
      "id" : 1272481752,
      "line" : 1466,
      "node_id" : "PRRC_kwDOABII585L2IfY",
      "original_commit_id" : "68c29044bbee7c62939f3110664144a9bab08589",
      "original_line" : 1466,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 305,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272481752/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272481752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272491372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491372"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems like this will continue evaluating individual txns that have no in-package ancestors(that aren't accepted individually before!). Seems safe, but wasn't immediately obvious to me. It will abort any *package* evaluation later.",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T16:25:31Z",
      "diff_hunk" : "@@ -1459,39 +1461,73 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.GetAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n             const auto single_res = AcceptSingleTransaction(tx, single_args);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272491372",
      "id" : 1272491372,
      "line" : 1471,
      "node_id" : "PRRC_kwDOABII585L2K1s",
      "original_commit_id" : "68c29044bbee7c62939f3110664144a9bab08589",
      "original_line" : 1471,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 310,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491372/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491372",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272542996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272542996"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think we decided pre-cluster mempool we can't really nail all these cases due to inherent symmetry.\r\n\r\nWith this rule we can see cases where the penultimate child is paid for by parents, the penultimate child and final child being immediately trimmed next at below-minfee rates. It's not very pathological since the evicted package is below minfee and if the mempool isn't too large it is worthwhile to mine. I think we agreed these can still exist, but just noting.",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-07-24T17:19:42Z",
      "diff_hunk" : "@@ -1530,71 +1533,95 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         m_view.Uncache(outpoint);\n     }\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n         linearized_package.LinearizeWithFees();\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272542996",
      "id" : 1272542996,
      "line" : 1572,
      "node_id" : "PRRC_kwDOABII585L2XcU",
      "original_commit_id" : "0ea0149c678bf89325b42383cab6da15e4228411",
      "original_line" : 1572,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 368,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272542996/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T00:43:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272542996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272555810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272555810"
         }
      },
      "author_association" : "MEMBER",
      "body" : "might want to note that we do this final check *after* filling out `results_final` to give more meaningful tx results",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T17:33:23Z",
      "diff_hunk" : "@@ -1530,71 +1533,95 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         m_view.Uncache(outpoint);\n     }\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n         linearized_package.LinearizeWithFees();\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n                 continue;\n             }\n+            const auto subpackage_fee_vsize = linearized_package.GetAncestorFeeAndVsize(tx);\n             const auto subpackage = linearized_package.GetAncestorSet(tx);\n-            if (!subpackage || subpackage->size() > 1) {\n-                // No need to validate if we know this transaction would have missing inputs.\n-                // TODO: try to submit the ancestor subpackage.\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this subpackage won't meet feerate\n+                // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+                // subpackage that will bump it.\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(subpackage_fee_vsize->first, subpackage_fee_vsize->second), subpackage_wtxids));\n                 continue;\n             }\n-            const auto& wtxid = tx->GetWitnessHash();\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                results_final.emplace(wtxid, single_res);\n-                linearized_package.Skip(tx);\n-            } else {\n-                // Fee-related errors and missing inputs should not occur since we skip those.\n-                // Abort if we get any other error; it's not worth the computational effort to\n-                // try to validate any of the other transactions.\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                quit_early = true;\n-                // If a result already exists from the previous loop, override it.\n-                Assume(individual_results_nonfinal.count(wtxid) == 0);\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                // Add all transactions' results to results_final. There might not be one for every\n+                // transaction.\n+                if (subpackage_it != subpackage_result.m_tx_results.end()) {\n+                    // A tx would only be in results_final if we already found it (or same txid) in\n+                    // the mempool in the previous loop so it should not be included in\n+                    // FilteredTxns().\n+                    //\n+                    // A result should not already be present because anything already in mempool\n+                    // would have already been skipped, and a tx is never validated more than once\n+                    // in this loop:\n+                    // - if tx succeeds, it is skipped in subsequent iterations\n+                    // - if tx fails, we exit the loop immediately\n+                    Assume(results_final.count(subpackage_wtxid) == 0);\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                }\n+                // We detect that a transaction was successful by looking for it in mempool.\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    linearized_package.Skip(subpackage_tx);\n+                }\n+            }\n+            if (subpackage_result.m_state.IsInvalid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272555810",
      "id" : 1272555810,
      "line" : 1563,
      "node_id" : "PRRC_kwDOABII585L2aki",
      "original_commit_id" : "0ea0149c678bf89325b42383cab6da15e4228411",
      "original_line" : 1563,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 402,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272555810/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272555810",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272574534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272574534"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Note that UTXOs are cached in m_view so there is not repeated loading the second time we call PreChecks\r\n\r\nim a utxo cache newb but it looks like the the utxo caches are being wiped before the actual submission which has its own PreChecks?",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-07-24T17:53:18Z",
      "diff_hunk" : "@@ -1423,62 +1428,164 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole\n+                    // package because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n+            }\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins in CCoinsViewMemPool and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.ClearPackageCoins()) {\n+        m_view.Uncache(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272574534",
      "id" : 1272574534,
      "line" : 1497,
      "node_id" : "PRRC_kwDOABII585L2fJG",
      "original_commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "original_line" : 1497,
      "original_position" : 336,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 336,
      "pull_request_review_id" : 1543557301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272574534/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272574534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "new approach seems in line with what we've discussed previously. Basically https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231092018 AJ's suggestion, minus retries, plus using explicit linearization step.\r\n\r\nObvious point but including miniminer dependency means we'll likely have increased review surface, even if it ends up making a lot of sense in this case. From my basic experimentation in https://github.com/bitcoin/bitcoin/pull/28152 it looks like the performance hit is negligible, with 15k ops/s with cluster sizes of 25, and maybe that's an underestimate since it's constructing a more general cluster instead of a ancestor package.\r\n\r\nI noticed at least two nice cleanups based on this strategy, but I'm going to let more approach feedback come back before leaving more in-depth feedback.",
      "created_at" : "2023-07-25T16:45:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1650184694",
      "id" : 1650184694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585iW9H2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650184694/reactions"
      },
      "updated_at" : "2023-07-25T16:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650184694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1278215639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278215639"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So if my understanding of the API is correct, you receive a package from `AcceptPackage()`, and there is a call to the constructor `AncestorPackage()`, then we verify each transaction being component of the package is in the mempool by wtxid or txid or `PreChecks()` them.\r\n\r\nIf the transaction is `PreChecks()` valid, then we call `AddFeeAndVsize()`. If we have a `TX_SINGLE_FAILURE`, we add `AddFeeAndVsize()` or if we have a `TX_MISSING_INPUTS`, we `SkipWithDescendants()` the transaction. All other cases are treaded as impossible or failure.\r\n\r\nSo when we call `LinearizeWithFees()` in `AcceptPackage` and therefore start to rely on `MiniMiner` calculations. we have asserted than all packages component linearize are either spending a UTXO in the chainstate set, or spending an in-package component, so the worst-case scenario from a DoS viewpoint will be the limits as set in BIP331 / nversion=3 ?",
      "commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "created_at" : "2023-07-29T02:46:17Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1278215639",
      "id" : 1278215639,
      "line" : 15,
      "node_id" : "PRRC_kwDOABII585MMAXX",
      "original_commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "original_line" : 15,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 15,
      "pull_request_review_id" : 1553164118,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278215639/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-29T02:46:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278215639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1278981444"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278981444"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> So if my understanding of the API is correct, you receive a package from AcceptPackage() ...\r\n\r\nCorrect\r\n\r\n> we have asserted than all packages component linearize are either spending a UTXO in the chainstate set, or spending an in-package component, so the worst-case scenario from a DoS viewpoint will be the limits as set in BIP331 / nversion=3 ?\r\n\r\nThe first check in `AcceptPackage` is `IsPackageWellFormed` which requires the package to be 25 transactions at most. The linearization with `MiniMiner` also does not fetch in-mempool transactions. So you can assume we never construct the miniminer with more than 25 transactions.\r\n\r\nThis is independent of v3 so those limits aren't enforced.\r\n\r\nBIP331 doesn't impose a maximum size other than 100 for pkgtxns, but I expect the p2p logic to observe that an `ancpkginfo` with more than 25 transactions wouldn't be submitted and just exit there without downloading the transactions. So we wouldn't send a `getpkgtxns` request for more than 25, and thus would immediately reject a (unsolicited) `pkgtxns` with more than 25. See logic for handling `ancpkginfo`, we will give up on downloading an ancestor package from a peer if it has too many transactions: https://github.com/bitcoin/bitcoin/pull/27742/files#diff-6875de769e90cec84d2e8a9c1b962cdbcda44d870d42e4215827e599e11e90e3R4398.",
      "commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "created_at" : "2023-07-31T08:52:02Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1278981444",
      "id" : 1278981444,
      "in_reply_to_id" : 1278215639,
      "line" : 15,
      "node_id" : "PRRC_kwDOABII585MO7VE",
      "original_commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "original_line" : 15,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 15,
      "pull_request_review_id" : 1554264018,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278981444/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T08:52:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278981444",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279847172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279847172"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e \"[txpackages] add AncestorPackage for linearizing packages\"\r\n\r\ntypo\r\n\r\n```suggestion\r\n                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\r\n```",
      "commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "created_at" : "2023-07-31T20:27:30Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279847172",
      "id" : 1279847172,
      "line" : 82,
      "node_id" : "PRRC_kwDOABII585MSOsE",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 82,
      "pull_request_review_id" : 1555725722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279847172/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T20:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279847172",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279854922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279854922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e \"[txpackages] add AncestorPackage for linearizing packages\"\r\n\r\nnit: avoid looking up twice\r\n\r\n```suggestion\r\n    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\r\n    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\r\n    const auto& entry = entry_it->second;\r\n```",
      "commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "created_at" : "2023-07-31T20:36:29Z",
      "diff_hunk" : "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    std::transform(txns_in.cbegin(), txns_in.cend(), std::inserter(m_txid_to_entry, m_txid_to_entry.end()),\n+            [](const auto& tx) { return std::make_pair(tx->GetHash(), PackageEntry(tx)); });\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    m_txns = txns_in;\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        return m_txid_to_entry.at(a->GetHash()) < m_txid_to_entry.at(b->GetHash());\n+    });\n+    Assume(IsSorted(m_txns));\n+    m_is_ancestor_package = m_txid_to_entry.at(m_txns.back()->GetHash()).ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto& [_, entry] : m_txid_to_entry) {\n+        if (!entry.skip && !entry.dangles) result.push_back(entry.tx);\n+    }\n+    std::sort(result.begin(), result.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        return m_txid_to_entry.at(a->GetHash()) < m_txid_to_entry.at(b->GetHash());\n+    });\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::GetAncestorSet(const CTransactionRef& tx)\n+{\n+    if (m_txid_to_entry.count(tx->GetHash()) == 0) return std::nullopt;\n+    const auto& entry = m_txid_to_entry.find(tx->GetHash())->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279854922",
      "id" : 1279854922,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII585MSQlK",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : 87,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 88,
      "pull_request_review_id" : 1555725722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279854922/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 87,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-31T20:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279854922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279861059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279861059"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e \"[txpackages] add AncestorPackage for linearizing packages\"\r\n\r\nSince all of the transactions in the package are already stored in `PackageEntry`s in `m_txid_to_entry`, could `m_txns` just be a vector of `PackageEntry&`? This would reduce the number of lookups to `m_txid_entry` that are needed just to sort the transactions when we are returning them.\r\n\r\nAdditionally, if functions like `GetAncestorSet` used a `std::set<PackageEntry&>`, then `std::sort` at the end would not be necessary.",
      "commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "created_at" : "2023-07-31T20:44:09Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279861059",
      "id" : 1279861059,
      "line" : 36,
      "node_id" : "PRRC_kwDOABII585MSSFD",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 36,
      "pull_request_review_id" : 1555725722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279861059/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T20:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279861059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281295986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281295986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From my understanding we have `submitpackage` which is the current interface under which *child-with-unconfirmed-parents*  can be submitted. The definition is âa topologically sorted package that consists of exactly one child and all of its unconfirmed parents (no other transactions may be present)â. \r\n\r\nThe definition given by `AncestorPackage` class is âA potential BIP331 Ancestor Package, i.e one transaction with its set of ancestorsâ, which sounds similar.\r\n\r\nIf *child-with-unconfirmed-parents* and `AncestorPackage` definitions are identical, I think the child-with-unconfirmed-parents definition in `packages.md` can be updated to fusion them, and maybe `ProcessNewPackage` can be updated.",
      "commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "created_at" : "2023-08-02T01:41:54Z",
      "diff_hunk" : "@@ -48,8 +48,8 @@ The following rules are enforced for all packages:\n The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n test accepts):\n \n-* Packages must be child-with-unconfirmed-parents packages. This also means packages must contain at\n-  least 2 transactions. (#22674)\n+* Packages must be ancestor packages, i.e. a transaction with its unconfirmed ancestors. This also\n+  means packages must contain at least 2 transactions. (#26711)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281295986",
      "id" : 1281295986,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII585MXwZy",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 52,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 7,
      "pull_request_review_id" : 1558055733,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281295986/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T02:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281295986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281312757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281312757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you thought about it in term of `AncestorPackage` API design, though what is the purpose of `SkipWithDescendants` as the âdangleâ state of a transaction could be determined as soon as all the transactions are received and `IsPackageWellFormed` ?\r\n\r\nTherefore checking than we have available UTXOs in mempool (or in-package) to spend could be done before to call to `AncestorPackage` ctor and `visit` to obtain the `ancestor_subset`, sounds it could be a small perf again assuming `AcceptPackage` is re-worked a bit.",
      "commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "created_at" : "2023-08-02T02:23:23Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+    /** From now on, skip this tx from any result in GetAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */\n+    void Skip(const CTransactionRef& transaction);\n+    /** Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, GetAncestorSet() returns std::nullopt for that tx. Does not affect Txns().\n+     * Should be called when a transaction is missing inputs. */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281312757",
      "id" : 1281312757,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII585MX0f1",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 127,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 127,
      "pull_request_review_id" : 1558055733,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281312757/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T02:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281312757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281317275"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281317275"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The name could be more verbose to reflect the notion of âconnectionâ it lays on, e.g `m_is_ancestor_package`.",
      "commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "created_at" : "2023-08-02T02:34:07Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281317275",
      "id" : 1281317275,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII585MX1mb",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 32,
      "pull_request_review_id" : 1558055733,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281317275/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T02:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281317275",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281318967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281318967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unclear if â(Modified) feesâ means `GetModifiedFee()`",
      "commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "created_at" : "2023-08-02T02:38:10Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281318967",
      "id" : 1281318967,
      "line" : 51,
      "node_id" : "PRRC_kwDOABII585MX2A3",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 51,
      "pull_request_review_id" : 1558055733,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281318967/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T02:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281318967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281323288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281323288"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> So you can assume we never construct the miniminer with more than 25 transactions.\r\n\r\nThanks, yes I think `MAX_PACKAGE_COUNT` as enforced by `IsPackageWellFormed` is the upper bound that one can assume in the calculation of `MiniMiner`. This can ease the DoS reasoning to link the max `ancpkginfo` issued at the p2p level with `MAX_PACKAGE_COUNT` as requested by the mempool logic to save on bandwidth both by the local node (the list of wtxids announced) and its peer (`pkgtnxs`âs txn), I think.",
      "commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "created_at" : "2023-08-02T02:48:38Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281323288",
      "id" : 1281323288,
      "in_reply_to_id" : 1278215639,
      "line" : 15,
      "node_id" : "PRRC_kwDOABII585MX3EY",
      "original_commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "original_line" : 15,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 15,
      "pull_request_review_id" : 1558055733,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281323288/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T02:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281323288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1284547085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284547085"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Therefore checking than we have available UTXOs in mempool (or in-package) to spend could be done before to call to AncestorPackage ctor\r\n\r\nI don't think this is true. We should sort the transactions before we look up UTXOs.",
      "commit_id" : "904a9f93f375e80310cf3c14a80908f09a5cd6be",
      "created_at" : "2023-08-04T15:12:46Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+    /** From now on, skip this tx from any result in GetAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */\n+    void Skip(const CTransactionRef& transaction);\n+    /** Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, GetAncestorSet() returns std::nullopt for that tx. Does not affect Txns().\n+     * Should be called when a transaction is missing inputs. */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1284547085",
      "id" : 1284547085,
      "in_reply_to_id" : 1281312757,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII585MkKIN",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 127,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 127,
      "pull_request_review_id" : 1563079515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284547085/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T15:12:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284547085",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1286479898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286479898"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fair, I still think itâs slightly less DoSy though depends benchmark and UTXO layout on disk of course.",
      "commit_id" : "904a9f93f375e80310cf3c14a80908f09a5cd6be",
      "created_at" : "2023-08-08T00:10:30Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+    /** From now on, skip this tx from any result in GetAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */\n+    void Skip(const CTransactionRef& transaction);\n+    /** Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, GetAncestorSet() returns std::nullopt for that tx. Does not affect Txns().\n+     * Should be called when a transaction is missing inputs. */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1286479898",
      "id" : 1286479898,
      "in_reply_to_id" : 1281312757,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII585MriAa",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 127,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 127,
      "pull_request_review_id" : 1566294106,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286479898/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T00:10:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286479898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1287458787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1287458787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`std::vector<PackageEntry&>` isn't possible, but will do reference wrappers",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-08-08T17:43:43Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1287458787",
      "id" : 1287458787,
      "in_reply_to_id" : 1279861059,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MvQ_j",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1567833553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1287458787/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-08T17:43:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1287458787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1288140474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288140474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These are just uncaching the temporary coins (i.e. outputs of the package transactions), so they are not part of the UTXO set and definitely weren't pulled from disk.",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-08-09T08:31:43Z",
      "diff_hunk" : "@@ -1423,62 +1428,164 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole\n+                    // package because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n+            }\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins in CCoinsViewMemPool and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.ClearPackageCoins()) {\n+        m_view.Uncache(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1288140474",
      "id" : 1288140474,
      "in_reply_to_id" : 1272574534,
      "line" : 1497,
      "node_id" : "PRRC_kwDOABII585Mx3a6",
      "original_commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "original_line" : 1497,
      "original_position" : 336,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 336,
      "pull_request_review_id" : 1569030535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288140474/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-09T08:31:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288140474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1288228607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288228607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed mention of \"modified,\" as it's not really relevant whether it's real fees or not",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-08-09T09:43:19Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1288228607",
      "id" : 1288228607,
      "in_reply_to_id" : 1281318967,
      "line" : 47,
      "node_id" : "PRRC_kwDOABII585MyM7_",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 47,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 47,
      "pull_request_review_id" : 1569162237,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288228607/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-09T09:43:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288228607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1288452570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288452570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah! Might be worth being overly explanatory here.",
      "commit_id" : "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "created_at" : "2023-08-09T13:05:47Z",
      "diff_hunk" : "@@ -1423,62 +1428,164 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole\n+                    // package because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n+            }\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins in CCoinsViewMemPool and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.ClearPackageCoins()) {\n+        m_view.Uncache(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1288452570",
      "id" : 1288452570,
      "in_reply_to_id" : 1272574534,
      "line" : 1497,
      "node_id" : "PRRC_kwDOABII585MzDna",
      "original_commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "original_line" : 1497,
      "original_position" : 336,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 336,
      "pull_request_review_id" : 1569510700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288452570/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-09T13:05:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1288452570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294031657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294031657"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added that to the comment :+1: ",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:36:38Z",
      "diff_hunk" : "@@ -54,6 +54,8 @@ enum class TxValidationResult {\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n     TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n+    TX_SINGLE_FAILURE,        //!< fee was insufficient to meet some policy (minimum/RBF/etc)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294031657",
      "id" : 1294031657,
      "in_reply_to_id" : 1272306357,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIVsp",
      "original_commit_id" : "f73efcd17113b04aa88582be6aac82c17778578c",
      "original_line" : 57,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294031657/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294031657",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294032183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294032183"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah agreed, makes it much more important that there isn't e.g. a crash bug in there somewhere, and if anything goes wrong we should quit gracefully and default to topo sort.",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:37:49Z",
      "diff_hunk" : "@@ -124,6 +124,34 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294032183",
      "id" : 1294032183,
      "in_reply_to_id" : 1272371805,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII585NIV03",
      "original_commit_id" : "8a7087b0e5839988fcdf93b664ac7b747baec8d6",
      "original_line" : 127,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 4,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294032183/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294032183",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294033351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294033351"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:39:53Z",
      "diff_hunk" : "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    std::transform(txns_in.cbegin(), txns_in.cend(), std::inserter(m_txid_to_entry, m_txid_to_entry.end()),\n+            [](const auto& tx) { return std::make_pair(tx->GetHash(), PackageEntry(tx)); });\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    m_txns = txns_in;\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        return m_txid_to_entry.at(a->GetHash()) < m_txid_to_entry.at(b->GetHash());\n+    });\n+    Assume(IsSorted(m_txns));\n+    m_is_ancestor_package = m_txid_to_entry.at(m_txns.back()->GetHash()).ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto& [_, entry] : m_txid_to_entry) {\n+        if (!entry.skip && !entry.dangles) result.push_back(entry.tx);\n+    }\n+    std::sort(result.begin(), result.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        return m_txid_to_entry.at(a->GetHash()) < m_txid_to_entry.at(b->GetHash());\n+    });\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::GetAncestorSet(const CTransactionRef& tx)\n+{\n+    if (m_txid_to_entry.count(tx->GetHash()) == 0) return std::nullopt;\n+    const auto& entry = m_txid_to_entry.find(tx->GetHash())->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294033351",
      "id" : 1294033351,
      "in_reply_to_id" : 1279854922,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIWHH",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 102,
      "original_position" : 88,
      "original_start_line" : 87,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294033351/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294033351",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294033483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294033483"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:40:07Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294033483",
      "id" : 1294033483,
      "in_reply_to_id" : 1279847172,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIWJL",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294033483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294033483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294038854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294038854"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed to `FilteredAncestorSet` and `FilteredAncestorFeeAndVsize`",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:49:33Z",
      "diff_hunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294038854",
      "id" : 1294038854,
      "in_reply_to_id" : 1272429657,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIXdG",
      "original_commit_id" : "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "original_line" : 118,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294038854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294038854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039095"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Imo it's fine, since we don't really do anything with it.",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:50:04Z",
      "diff_hunk" : "@@ -1459,39 +1461,73 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.GetAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n             const auto single_res = AcceptSingleTransaction(tx, single_args);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039095",
      "id" : 1294039095,
      "in_reply_to_id" : 1272481752,
      "line" : 1488,
      "node_id" : "PRRC_kwDOABII585NIXg3",
      "original_commit_id" : "68c29044bbee7c62939f3110664144a9bab08589",
      "original_line" : 1488,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 444,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039095/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Refined the comment",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:50:12Z",
      "diff_hunk" : "@@ -1459,39 +1461,73 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.GetAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n             const auto single_res = AcceptSingleTransaction(tx, single_args);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039154",
      "id" : 1294039154,
      "in_reply_to_id" : 1272491372,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIXhy",
      "original_commit_id" : "68c29044bbee7c62939f3110664144a9bab08589",
      "original_line" : 1459,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added comment",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:50:18Z",
      "diff_hunk" : "@@ -1530,71 +1533,95 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         m_view.Uncache(outpoint);\n     }\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n         linearized_package.LinearizeWithFees();\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n                 continue;\n             }\n+            const auto subpackage_fee_vsize = linearized_package.GetAncestorFeeAndVsize(tx);\n             const auto subpackage = linearized_package.GetAncestorSet(tx);\n-            if (!subpackage || subpackage->size() > 1) {\n-                // No need to validate if we know this transaction would have missing inputs.\n-                // TODO: try to submit the ancestor subpackage.\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this subpackage won't meet feerate\n+                // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+                // subpackage that will bump it.\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(subpackage_fee_vsize->first, subpackage_fee_vsize->second), subpackage_wtxids));\n                 continue;\n             }\n-            const auto& wtxid = tx->GetWitnessHash();\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                results_final.emplace(wtxid, single_res);\n-                linearized_package.Skip(tx);\n-            } else {\n-                // Fee-related errors and missing inputs should not occur since we skip those.\n-                // Abort if we get any other error; it's not worth the computational effort to\n-                // try to validate any of the other transactions.\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                quit_early = true;\n-                // If a result already exists from the previous loop, override it.\n-                Assume(individual_results_nonfinal.count(wtxid) == 0);\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                // Add all transactions' results to results_final. There might not be one for every\n+                // transaction.\n+                if (subpackage_it != subpackage_result.m_tx_results.end()) {\n+                    // A tx would only be in results_final if we already found it (or same txid) in\n+                    // the mempool in the previous loop so it should not be included in\n+                    // FilteredTxns().\n+                    //\n+                    // A result should not already be present because anything already in mempool\n+                    // would have already been skipped, and a tx is never validated more than once\n+                    // in this loop:\n+                    // - if tx succeeds, it is skipped in subsequent iterations\n+                    // - if tx fails, we exit the loop immediately\n+                    Assume(results_final.count(subpackage_wtxid) == 0);\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                }\n+                // We detect that a transaction was successful by looking for it in mempool.\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    linearized_package.Skip(subpackage_tx);\n+                }\n+            }\n+            if (subpackage_result.m_state.IsInvalid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039201",
      "id" : 1294039201,
      "in_reply_to_id" : 1272555810,
      "line" : 1591,
      "node_id" : "PRRC_kwDOABII585NIXih",
      "original_commit_id" : "0ea0149c678bf89325b42383cab6da15e4228411",
      "original_line" : 1591,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 547,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039201/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039201",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added to the comment",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T22:51:22Z",
      "diff_hunk" : "@@ -1423,62 +1428,164 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole\n+                    // package because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n+            }\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins in CCoinsViewMemPool and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.ClearPackageCoins()) {\n+        m_view.Uncache(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294039773",
      "id" : 1294039773,
      "in_reply_to_id" : 1272574534,
      "line" : 1522,
      "node_id" : "PRRC_kwDOABII585NIXrd",
      "original_commit_id" : "2be70a6d2694db7425619e97afc1a912b8504848",
      "original_line" : 1522,
      "original_position" : 336,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 478,
      "pull_request_review_id" : 1577754051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T22:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294039773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294044001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294044001"
         }
      },
      "author_association" : "MEMBER",
      "body" : "comment has been removed",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-08-14T23:00:06Z",
      "diff_hunk" : "@@ -1489,31 +1489,33 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n-    // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted.\n-    if (quit_early || txns_package_eval.empty()) {\n-        for (const auto& [wtxid, mempoolaccept_res] : individual_results_nonfinal) {\n-            Assume(results_final.emplace(wtxid, mempoolaccept_res).second);\n-            Assume(mempoolaccept_res.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n-        }\n-        return PackageMempoolAcceptResult(package_state_quit_early, std::move(results_final));\n-    }\n-    // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n-    // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval, args);\n-    // Include already-in-mempool transaction results in the final result.\n-    for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n-        Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);\n-    }\n-    if (submission_result.m_state.GetResult() == PackageValidationResult::PCKG_TX) {\n-        // Package validation failed because one or more transactions failed. Provide a result for\n-        // each transaction; if a transaction doesn't have an entry in submission_result,\n-        // include the previous individual failure reason.\n-        submission_result.m_tx_results.insert(individual_results_nonfinal.cbegin(),\n-                                              individual_results_nonfinal.cend());\n-        Assume(submission_result.m_tx_results.size() == package.size());\n+    auto submission_result = quit_early || txns_package_eval.empty() ?\n+        PackageMempoolAcceptResult(package_state_quit_early, {}) :\n+        AcceptPackageWrappingSingle(txns_package_eval, args);\n+    // Attempt to provide a result for each transaction.\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        if (submission_result.m_tx_results.count(wtxid) > 0) {\n+            // Already in submission result.\n+            Assume(results_final.count(wtxid) == 0);\n+            continue;\n+        } else if (const auto it{results_final.find(wtxid)}; it != results_final.end()) {\n+            // Already-in-mempool transaction.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1294044001",
      "id" : 1294044001,
      "in_reply_to_id" : 1272355103,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIYth",
      "original_commit_id" : "6fc2bd3c69baf798e45ce9328f79f58a8192ce7f",
      "original_line" : 1503,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1577774333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294044001/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T23:00:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294044001",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Some iwyu issue?\r\n\r\n```\r\n/bin/bash ../libtool  --tag=CXX --preserve-dup-deps  --mode=link /usr/bin/ccache g++-9 -std=c++17 -O0 -g3 -ftrapv -fdebug-prefix-map=/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu=. -fstack-reuse=none -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection       -fno-extended-identifiers -fPIE -pipe -std=c++17 -O1 -g0 -O2 -funsigned-char   -Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code -pie      -pthread -lpthread -static -L/ci_container_base/depends/x86_64-pc-linux-gnu/lib  -o test/test_bitcoin test/test_bitcoin-main.o  wallet/test/test_test_bitcoin-wallet_test_fixture.o wallet/test/test_test_bitcoin-init_test_fixture.o test/test_bitcoin-addrman_tests.o test/test_bitcoin-allocator_tests.o test/test_bitcoin-amount_tests.o test/test_bitcoin-argsman_tests.o test/test_bitcoin-arith_uint256_tests.o test/test_bitcoin-banman_tests.o test/test_bitcoin-base32_tests.o test/test_bitcoin-base58_tests.o test/test_bitcoin-base64_tests.o test/test_bitcoin-bech32_tests.o test/test_bitcoin-bip32_tests.o test/test_bitcoin-bip324_tests.o test/test_bitcoin-blockchain_tests.o test/test_bitcoin-blockencodings_tests.o test/test_bitcoin-blockfilter_index_tests.o test/test_bitcoin-blockfilter_tests.o test/test_bitcoin-blockmanager_tests.o test/test_bitcoin-bloom_tests.o test/test_bitcoin-bswap_tests.o test/test_bitcoin-checkqueue_tests.o test/test_bitcoin-coins_tests.o test/test_bitcoin-coinstatsindex_tests.o test/test_bitcoin-compilerbug_tests.o test/test_bitcoin-compress_tests.o test/test_bitcoin-crypto_tests.o test/test_bitcoin-cuckoocache_tests.o test/test_bitcoin-dbwrapper_tests.o test/test_bitcoin-denialofservice_tests.o test/test_bitcoin-descriptor_tests.o test/test_bitcoin-flatfile_tests.o test/test_bitcoin-fs_tests.o test/test_bitcoin-getarg_tests.o test/test_bitcoin-hash_tests.o test/test_bitcoin-headers_sync_chainwork_tests.o test/test_bitcoin-httpserver_tests.o test/test_bitcoin-i2p_tests.o test/test_bitcoin-interfaces_tests.o test/test_bitcoin-key_io_tests.o test/test_bitcoin-key_tests.o test/test_bitcoin-logging_tests.o test/test_bitcoin-mempool_tests.o test/test_bitcoin-merkle_tests.o test/test_bitcoin-merkleblock_tests.o test/test_bitcoin-miner_tests.o test/test_bitcoin-miniminer_tests.o test/test_bitcoin-miniscript_tests.o test/test_bitcoin-minisketch_tests.o test/test_bitcoin-multisig_tests.o test/test_bitcoin-net_peer_eviction_tests.o test/test_bitcoin-net_tests.o test/test_bitcoin-netbase_tests.o test/test_bitcoin-orphanage_tests.o test/test_bitcoin-pmt_tests.o test/test_bitcoin-policy_fee_tests.o test/test_bitcoin-policyestimator_tests.o test/test_bitcoin-pool_tests.o test/test_bitcoin-pow_tests.o test/test_bitcoin-prevector_tests.o test/test_bitcoin-raii_event_tests.o test/test_bitcoin-random_tests.o test/test_bitcoin-rbf_tests.o test/test_bitcoin-rest_tests.o test/test_bitcoin-result_tests.o test/test_bitcoin-reverselock_tests.o test/test_bitcoin-rpc_tests.o test/test_bitcoin-sanity_tests.o test/test_bitcoin-scheduler_tests.o test/test_bitcoin-script_p2sh_tests.o test/test_bitcoin-script_parse_tests.o test/test_bitcoin-script_segwit_tests.o test/test_bitcoin-script_standard_tests.o test/test_bitcoin-script_tests.o test/test_bitcoin-scriptnum_tests.o test/test_bitcoin-serfloat_tests.o test/test_bitcoin-serialize_tests.o test/test_bitcoin-settings_tests.o test/test_bitcoin-sighash_tests.o test/test_bitcoin-sigopcount_tests.o test/test_bitcoin-skiplist_tests.o test/test_bitcoin-sock_tests.o test/test_bitcoin-streams_tests.o test/test_bitcoin-sync_tests.o test/test_bitcoin-system_tests.o test/test_bitcoin-timedata_tests.o test/test_bitcoin-torcontrol_tests.o test/test_bitcoin-transaction_tests.o test/test_bitcoin-translation_tests.o test/test_bitcoin-txindex_tests.o test/test_bitcoin-txpackage_tests.o test/test_bitcoin-txreconciliation_tests.o test/test_bitcoin-txrequest_tests.o test/test_bitcoin-txvalidation_tests.o test/test_bitcoin-txvalidationcache_tests.o test/test_bitcoin-uint256_tests.o test/test_bitcoin-util_tests.o test/test_bitcoin-util_threadnames_tests.o test/test_bitcoin-validation_block_tests.o test/test_bitcoin-validation_chainstate_tests.o test/test_bitcoin-validation_chainstatemanager_tests.o test/test_bitcoin-validation_flush_tests.o test/test_bitcoin-validation_tests.o test/test_bitcoin-validationinterface_tests.o test/test_bitcoin-versionbits_tests.o test/test_bitcoin-xoroshiro128plusplus_tests.o wallet/test/test_test_bitcoin-feebumper_tests.o wallet/test/test_test_bitcoin-psbt_wallet_tests.o wallet/test/test_test_bitcoin-spend_tests.o wallet/test/test_test_bitcoin-wallet_tests.o wallet/test/test_test_bitcoin-walletdb_tests.o wallet/test/test_test_bitcoin-wallet_crypto_tests.o wallet/test/test_test_bitcoin-wallet_transaction_tests.o wallet/test/test_test_bitcoin-coinselector_tests.o wallet/test/test_test_bitcoin-init_tests.o wallet/test/test_test_bitcoin-ismine_tests.o wallet/test/test_test_bitcoin-rpc_util_tests.o wallet/test/test_test_bitcoin-scriptpubkeyman_tests.o wallet/test/test_test_bitcoin-walletload_tests.o wallet/test/test_test_bitcoin-group_outputs_tests.o wallet/test/test_test_bitcoin-db_tests.o     libtest_util.a libbitcoin_wallet.a libbitcoin_node.a libbitcoin_cli.a libbitcoin_common.a libbitcoin_util.a libbitcoin_consensus.a crypto/libbitcoin_crypto_base.la crypto/libbitcoin_crypto_sse41.la crypto/libbitcoin_crypto_avx2.la crypto/libbitcoin_crypto_x86_shani.la  libunivalue.la leveldb/libleveldb.la crc32c/libcrc32c.la crc32c/libcrc32c_sse42.la  leveldb/libmemenv.la secp256k1/libsecp256k1.la -L/ci_container_base/depends/x86_64-pc-linux-gnu/lib -levent -L/ci_container_base/depends/x86_64-pc-linux-gnu/lib -levent_pthreads -levent minisketch/libminisketch.a minisketch/libminisketch_clmul.a -ldb_cxx-4.8   -L/ci_container_base/depends/x86_64-pc-linux-gnu/lib -lsqlite3 -lz -lm -lpthread libbitcoin_zmq.a -L/ci_container_base/depends/x86_64-pc-linux-gnu/lib -lzmq -lpthread -lrt \r\nlibtool: link: /usr/bin/ccache g++-9 -std=c++17 -O0 -g3 -ftrapv -fdebug-prefix-map=/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu=. -fstack-reuse=none -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -fno-extended-identifiers -fPIE -pipe -std=c++17 -O1 -g0 -O2 -funsigned-char -Wl,-z -Wl,relro -Wl,-z -Wl,now -Wl,-z -Wl,separate-code -pie -pthread -o test/test_bitcoin test/test_bitcoin-main.o wallet/test/test_test_bitcoin-wallet_test_fixture.o wallet/test/test_test_bitcoin-init_test_fixture.o test/test_bitcoin-addrman_tests.o test/test_bitcoin-allocator_tests.o test/test_bitcoin-amount_tests.o test/test_bitcoin-argsman_tests.o test/test_bitcoin-arith_uint256_tests.o test/test_bitcoin-banman_tests.o test/test_bitcoin-base32_tests.o test/test_bitcoin-base58_tests.o test/test_bitcoin-base64_tests.o test/test_bitcoin-bech32_tests.o test/test_bitcoin-bip32_tests.o test/test_bitcoin-bip324_tests.o test/test_bitcoin-blockchain_tests.o test/test_bitcoin-blockencodings_tests.o test/test_bitcoin-blockfilter_index_tests.o test/test_bitcoin-blockfilter_tests.o test/test_bitcoin-blockmanager_tests.o test/test_bitcoin-bloom_tests.o test/test_bitcoin-bswap_tests.o test/test_bitcoin-checkqueue_tests.o test/test_bitcoin-coins_tests.o test/test_bitcoin-coinstatsindex_tests.o test/test_bitcoin-compilerbug_tests.o test/test_bitcoin-compress_tests.o test/test_bitcoin-crypto_tests.o test/test_bitcoin-cuckoocache_tests.o test/test_bitcoin-dbwrapper_tests.o test/test_bitcoin-denialofservice_tests.o test/test_bitcoin-descriptor_tests.o test/test_bitcoin-flatfile_tests.o test/test_bitcoin-fs_tests.o test/test_bitcoin-getarg_tests.o test/test_bitcoin-hash_tests.o test/test_bitcoin-headers_sync_chainwork_tests.o test/test_bitcoin-httpserver_tests.o test/test_bitcoin-i2p_tests.o test/test_bitcoin-interfaces_tests.o test/test_bitcoin-key_io_tests.o test/test_bitcoin-key_tests.o test/test_bitcoin-logging_tests.o test/test_bitcoin-mempool_tests.o test/test_bitcoin-merkle_tests.o test/test_bitcoin-merkleblock_tests.o test/test_bitcoin-miner_tests.o test/test_bitcoin-miniminer_tests.o test/test_bitcoin-miniscript_tests.o test/test_bitcoin-minisketch_tests.o test/test_bitcoin-multisig_tests.o test/test_bitcoin-net_peer_eviction_tests.o test/test_bitcoin-net_tests.o test/test_bitcoin-netbase_tests.o test/test_bitcoin-orphanage_tests.o test/test_bitcoin-pmt_tests.o test/test_bitcoin-policy_fee_tests.o test/test_bitcoin-policyestimator_tests.o test/test_bitcoin-pool_tests.o test/test_bitcoin-pow_tests.o test/test_bitcoin-prevector_tests.o test/test_bitcoin-raii_event_tests.o test/test_bitcoin-random_tests.o test/test_bitcoin-rbf_tests.o test/test_bitcoin-rest_tests.o test/test_bitcoin-result_tests.o test/test_bitcoin-reverselock_tests.o test/test_bitcoin-rpc_tests.o test/test_bitcoin-sanity_tests.o test/test_bitcoin-scheduler_tests.o test/test_bitcoin-script_p2sh_tests.o test/test_bitcoin-script_parse_tests.o test/test_bitcoin-script_segwit_tests.o test/test_bitcoin-script_standard_tests.o test/test_bitcoin-script_tests.o test/test_bitcoin-scriptnum_tests.o test/test_bitcoin-serfloat_tests.o test/test_bitcoin-serialize_tests.o test/test_bitcoin-settings_tests.o test/test_bitcoin-sighash_tests.o test/test_bitcoin-sigopcount_tests.o test/test_bitcoin-skiplist_tests.o test/test_bitcoin-sock_tests.o test/test_bitcoin-streams_tests.o test/test_bitcoin-sync_tests.o test/test_bitcoin-system_tests.o test/test_bitcoin-timedata_tests.o test/test_bitcoin-torcontrol_tests.o test/test_bitcoin-transaction_tests.o test/test_bitcoin-translation_tests.o test/test_bitcoin-txindex_tests.o test/test_bitcoin-txpackage_tests.o test/test_bitcoin-txreconciliation_tests.o test/test_bitcoin-txrequest_tests.o test/test_bitcoin-txvalidation_tests.o test/test_bitcoin-txvalidationcache_tests.o test/test_bitcoin-uint256_tests.o test/test_bitcoin-util_tests.o test/test_bitcoin-util_threadnames_tests.o test/test_bitcoin-validation_block_tests.o test/test_bitcoin-validation_chainstate_tests.o test/test_bitcoin-validation_chainstatemanager_tests.o test/test_bitcoin-validation_flush_tests.o test/test_bitcoin-validation_tests.o test/test_bitcoin-validationinterface_tests.o test/test_bitcoin-versionbits_tests.o test/test_bitcoin-xoroshiro128plusplus_tests.o wallet/test/test_test_bitcoin-feebumper_tests.o wallet/test/test_test_bitcoin-psbt_wallet_tests.o wallet/test/test_test_bitcoin-spend_tests.o wallet/test/test_test_bitcoin-wallet_tests.o wallet/test/test_test_bitcoin-walletdb_tests.o wallet/test/test_test_bitcoin-wallet_crypto_tests.o wallet/test/test_test_bitcoin-wallet_transaction_tests.o wallet/test/test_test_bitcoin-coinselector_tests.o wallet/test/test_test_bitcoin-init_tests.o wallet/test/test_test_bitcoin-ismine_tests.o wallet/test/test_test_bitcoin-rpc_util_tests.o wallet/test/test_test_bitcoin-scriptpubkeyman_tests.o wallet/test/test_test_bitcoin-walletload_tests.o wallet/test/test_test_bitcoin-group_outputs_tests.o wallet/test/test_test_bitcoin-db_tests.o  -lpthread -L/ci_container_base/depends/x86_64-pc-linux-gnu/lib libtest_util.a libbitcoin_wallet.a libbitcoin_node.a libbitcoin_cli.a libbitcoin_common.a libbitcoin_util.a libbitcoin_consensus.a crypto/.libs/libbitcoin_crypto_base.a crypto/.libs/libbitcoin_crypto_sse41.a crypto/.libs/libbitcoin_crypto_avx2.a crypto/.libs/libbitcoin_crypto_x86_shani.a ./.libs/libunivalue.a leveldb/.libs/libleveldb.a crc32c/.libs/libcrc32c.a crc32c/.libs/libcrc32c_sse42.a leveldb/.libs/libmemenv.a secp256k1/.libs/libsecp256k1.a -levent -levent_pthreads -levent minisketch/libminisketch.a minisketch/libminisketch_clmul.a -ldb_cxx-4.8 -lsqlite3 -lz -lm -lpthread libbitcoin_zmq.a -lzmq -lpthread -lrt -pthread\r\n/usr/bin/ccache g++-9 -std=c++17 -DHAVE_CONFIG_H -I. -I../src/config  -DDEBUG -DDEBUG_LOCKORDER -DDEBUG_LOCKCONTENTION -DRPC_DOC_CHECK -DABORT_ON_FAILED_ASSUME -fmacro-prefix-map=/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu=.  -DHAVE_BUILD_INFO -DPROVIDE_FUZZ_MAIN_FUNCTION -I. -I./minisketch/include -I./secp256k1/include -I./univalue/include -isystem /ci_container_base/depends/x86_64-pc-linux-gnu/include -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION -DBOOST_NO_CXX98_FUNCTION_BASE -isystem /ci_container_base/depends/x86_64-pc-linux-gnu/include -pthread -I/ci_container_base/depends/x86_64-pc-linux-gnu/include -I./bench/ -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_LIBCPP_ENABLE_ASSERTIONS=1 -I/ci_container_base/depends/x86_64-pc-linux-gnu/include/ -DBOOST_MULTI_INDEX_ENABLE_SAFE_MODE -O0 -g3 -ftrapv -fdebug-prefix-map=/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu=. -fstack-reuse=none -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection       -fno-extended-identifiers -fPIE -pipe -std=c++17 -O1 -g0 -O2 -funsigned-char -c -o bench/bench_bitcoin-ancestorpackage.o `test -f 'bench/ancestorpackage.cpp' || echo './'`bench/ancestorpackage.cpp\r\nbench/ancestorpackage.cpp: In function âvoid AncestorPackageRandom(ankerl::nanobench::Bench&)â:\r\nbench/ancestorpackage.cpp:16:23: error: variable âFastRandomContext randâ has initializer but incomplete type\r\n   16 |     FastRandomContext rand{false};\r\n      |                       ^~~~\r\nmake[2]: *** [Makefile:15575: bench/bench_bitcoin-ancestorpackage.o] Error 1\r\nmake[2]: Leaving directory '/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[1]: Leaving directory '/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[1]: *** [Makefile:20166: install-recursive] Error 1\r\nmake: *** [Makefile:811: install-recursive] Error 1",
      "created_at" : "2023-09-03T10:21:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1704109119",
      "id" : 1704109119,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585lkqQ_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704109119/reactions"
      },
      "updated_at" : "2023-09-03T10:21:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704109119",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1322059487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322059487"
         }
      },
      "author_association" : "MEMBER",
      "body" : "if an entry is `skip`'ed, but also included in another entry's `descendant_subset`, this can cause an `Assume` to fail here https://github.com/bitcoin/bitcoin/pull/26711/files#diff-a8d952408e5a47db5e09d0b13117088fef66805cf706f6df83dfa0dc5814874eR142\r\n\r\nI think this is as simple as a descendant missing inputs, right? I'm uncertain to the implications of this.\r\n\r\nI hit this in fuzz testing, and commented out the assertion to continue fuzzing",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-09-11T20:49:31Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1322059487",
      "id" : 1322059487,
      "line" : 187,
      "node_id" : "PRRC_kwDOABII585OzQbf",
      "original_commit_id" : "b8cd561b13ce1dfcca0b82835b8bf918d6f8a985",
      "original_line" : 187,
      "original_position" : 187,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 187,
      "pull_request_review_id" : 1620811521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322059487/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-12T19:19:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1322059487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1324179137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324179137"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~Hm, it doesn't seem possible to skip a tx that is a descendant of a non-skipped tx (that means we submitted a tx to mempool without submitting its ancestor). I haven't seen the fuzzer but perhaps the issue is that the fuzzer is selecting transactions to skip a little too randomly?~ Edit: Ignore this, was only thinking about `Skip()` and not `SkipWithDescendants`",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-09-13T08:40:10Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1324179137",
      "id" : 1324179137,
      "in_reply_to_id" : 1322059487,
      "line" : 187,
      "node_id" : "PRRC_kwDOABII585O7V7B",
      "original_commit_id" : "b8cd561b13ce1dfcca0b82835b8bf918d6f8a985",
      "original_line" : 187,
      "original_position" : 187,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 187,
      "pull_request_review_id" : 1624011258,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324179137/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-13T08:45:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324179137",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1324189321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324189321"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Jk I understand what you mean now by descendant missing inputs. I think the solution is to delete dangling transactions from `descendant_subset`s",
      "commit_id" : "875a048f1cf8e53a3872df1149d7c47a01819c55",
      "created_at" : "2023-09-13T08:48:00Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1324189321",
      "id" : 1324189321,
      "in_reply_to_id" : 1322059487,
      "line" : 187,
      "node_id" : "PRRC_kwDOABII585O7YaJ",
      "original_commit_id" : "b8cd561b13ce1dfcca0b82835b8bf918d6f8a985",
      "original_line" : 187,
      "original_position" : 187,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 187,
      "pull_request_review_id" : 1624027123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324189321/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-13T08:48:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324189321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-09-13T18:00:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1718082246",
      "id" : 1718082246,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585mZ9rG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1718082246/reactions"
      },
      "updated_at" : "2023-09-13T18:00:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1718082246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1325767451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1325767451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've fixed this by filtering the `descendant_caches` before passing it to `MiniMiner` (seemed cleaner than deleting from `descendant_subset`).",
      "commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "created_at" : "2023-09-14T10:49:30Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1325767451",
      "id" : 1325767451,
      "in_reply_to_id" : 1322059487,
      "line" : 187,
      "node_id" : "PRRC_kwDOABII585PBZsb",
      "original_commit_id" : "b8cd561b13ce1dfcca0b82835b8bf918d6f8a985",
      "original_line" : 187,
      "original_position" : 187,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 187,
      "pull_request_review_id" : 1626601300,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1325767451/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T10:49:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1325767451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased this on top of master +#28471 +#28450 +#28472",
      "created_at" : "2023-09-14T10:50:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1719220554",
      "id" : 1719220554,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585meTlK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1719220554/reactions"
      },
      "updated_at" : "2023-09-14T10:50:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1719220554",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1326055004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326055004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    const auto txns_copy = m_txns;\r\n    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\r\n        if (!IsSorted(Txns())) {\r\n        m_txns = txns_copy;\r\n    }  \r\n```",
      "commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "created_at" : "2023-09-14T14:37:22Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1326055004",
      "id" : 1326055004,
      "line" : 70,
      "node_id" : "PRRC_kwDOABII585PCf5c",
      "original_commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "original_line" : 70,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 70,
      "pull_request_review_id" : 1627053866,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326055004/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T14:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326055004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1326055779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326055779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    }));\r\n    // If we somehow break topological ordering, revert to what we already had without\r\n    // ancestor set scoring\r\n    if (!IsSorted(Txns())) {\r\n        m_txns = txns_copy;\r\n        Assume(IsSorted(Txns())); // Not a lot we can do here\r\n    }\r\n\r\n```",
      "commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "created_at" : "2023-09-14T14:37:55Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;\n+        // FilteredAncestorSet() is different from ancestor_subset because it filters out skipped transactions\n+        // and will return std::nullopt if this transaction should be skipped.\n+        const auto filtered_ancestor_subset = FilteredAncestorSet(entry.tx);\n+        if (filtered_ancestor_subset == std::nullopt) continue;\n+        CAmount ancestor_subset_fees = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            CAmount{0}, [&](CAmount sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).fee; });\n+        int64_t ancestor_subset_vsize = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            int64_t{0}, [&](int64_t sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).vsize; });\n+        miniminer_info.push_back(node::MiniMinerMempoolEntry{*entry.fee, ancestor_subset_fees, *entry.vsize, ancestor_subset_vsize, entry.tx});\n+\n+        // Provide descendant cache, but filter for any transactions that dangle or skip\n+        std::set<uint256>& descendant_cache_to_populate = descendant_caches.try_emplace(txid).first->second;\n+        for (const auto& txid : entry.descendant_subset) {\n+            if (!Assume(m_txid_to_entry.count(txid) > 0)) continue;\n+            const auto& entry = m_txid_to_entry.at(txid);\n+            if (!entry.dangles && !entry.skip) {\n+                descendant_cache_to_populate.insert(txid);\n+            }\n+        }\n+    }\n+\n+    // Use MiniMiner to calculate the order in which these transactions would be selected for mining.\n+    node::MiniMiner miniminer(miniminer_info, descendant_caches);\n+    if (!miniminer.IsReadyToCalculate()) return false;\n+    for (const auto& [txid, mining_sequence] : miniminer.Linearize()) {\n+        m_txid_to_entry.at(txid).mining_sequence = mining_sequence;\n+    }\n+    // Sort again, this time using mining score.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(), [](const auto& entry) {\n+        bool should_have_sequence = !entry.second.skip && !entry.second.dangles;\n+        return entry.second.mining_sequence.has_value() == should_have_sequence;\n+    }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1326055779",
      "id" : 1326055779,
      "line" : 220,
      "node_id" : "PRRC_kwDOABII585PCgFj",
      "original_commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "original_line" : 220,
      "original_position" : 220,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 220,
      "pull_request_review_id" : 1627053866,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326055779/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T14:39:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326055779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1326056221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326056221"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    const auto txns_copy = m_txns;\r\n    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\r\n```",
      "commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "created_at" : "2023-09-14T14:38:15Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;\n+        // FilteredAncestorSet() is different from ancestor_subset because it filters out skipped transactions\n+        // and will return std::nullopt if this transaction should be skipped.\n+        const auto filtered_ancestor_subset = FilteredAncestorSet(entry.tx);\n+        if (filtered_ancestor_subset == std::nullopt) continue;\n+        CAmount ancestor_subset_fees = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            CAmount{0}, [&](CAmount sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).fee; });\n+        int64_t ancestor_subset_vsize = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            int64_t{0}, [&](int64_t sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).vsize; });\n+        miniminer_info.push_back(node::MiniMinerMempoolEntry{*entry.fee, ancestor_subset_fees, *entry.vsize, ancestor_subset_vsize, entry.tx});\n+\n+        // Provide descendant cache, but filter for any transactions that dangle or skip\n+        std::set<uint256>& descendant_cache_to_populate = descendant_caches.try_emplace(txid).first->second;\n+        for (const auto& txid : entry.descendant_subset) {\n+            if (!Assume(m_txid_to_entry.count(txid) > 0)) continue;\n+            const auto& entry = m_txid_to_entry.at(txid);\n+            if (!entry.dangles && !entry.skip) {\n+                descendant_cache_to_populate.insert(txid);\n+            }\n+        }\n+    }\n+\n+    // Use MiniMiner to calculate the order in which these transactions would be selected for mining.\n+    node::MiniMiner miniminer(miniminer_info, descendant_caches);\n+    if (!miniminer.IsReadyToCalculate()) return false;\n+    for (const auto& [txid, mining_sequence] : miniminer.Linearize()) {\n+        m_txid_to_entry.at(txid).mining_sequence = mining_sequence;\n+    }\n+    // Sort again, this time using mining score.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1326056221",
      "id" : 1326056221,
      "line" : 216,
      "node_id" : "PRRC_kwDOABII585PCgMd",
      "original_commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "original_line" : 216,
      "original_position" : 216,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 216,
      "pull_request_review_id" : 1627053866,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326056221/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T14:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326056221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-09-20T13:07:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1727693927",
      "id" : 1727693927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585m-oRn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1727693927/reactions"
      },
      "updated_at" : "2023-09-20T13:07:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1727693927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Conflict is due to #28472 getting merged. I'm going to hold off on rebasing until the other bug fix + fuzzer are in as well. Hopefully that's soon.",
      "created_at" : "2023-09-20T13:41:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1727759630",
      "id" : 1727759630,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585m-4UO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1727759630/reactions"
      },
      "updated_at" : "2023-09-20T13:41:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1727759630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1338297788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338297788"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Taken",
      "commit_id" : "c73504382829f3e8d25d38b27890fb410b9dd6ec",
      "created_at" : "2023-09-27T09:03:11Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;\n+        // FilteredAncestorSet() is different from ancestor_subset because it filters out skipped transactions\n+        // and will return std::nullopt if this transaction should be skipped.\n+        const auto filtered_ancestor_subset = FilteredAncestorSet(entry.tx);\n+        if (filtered_ancestor_subset == std::nullopt) continue;\n+        CAmount ancestor_subset_fees = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            CAmount{0}, [&](CAmount sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).fee; });\n+        int64_t ancestor_subset_vsize = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            int64_t{0}, [&](int64_t sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).vsize; });\n+        miniminer_info.push_back(node::MiniMinerMempoolEntry{*entry.fee, ancestor_subset_fees, *entry.vsize, ancestor_subset_vsize, entry.tx});\n+\n+        // Provide descendant cache, but filter for any transactions that dangle or skip\n+        std::set<uint256>& descendant_cache_to_populate = descendant_caches.try_emplace(txid).first->second;\n+        for (const auto& txid : entry.descendant_subset) {\n+            if (!Assume(m_txid_to_entry.count(txid) > 0)) continue;\n+            const auto& entry = m_txid_to_entry.at(txid);\n+            if (!entry.dangles && !entry.skip) {\n+                descendant_cache_to_populate.insert(txid);\n+            }\n+        }\n+    }\n+\n+    // Use MiniMiner to calculate the order in which these transactions would be selected for mining.\n+    node::MiniMiner miniminer(miniminer_info, descendant_caches);\n+    if (!miniminer.IsReadyToCalculate()) return false;\n+    for (const auto& [txid, mining_sequence] : miniminer.Linearize()) {\n+        m_txid_to_entry.at(txid).mining_sequence = mining_sequence;\n+    }\n+    // Sort again, this time using mining score.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(), [](const auto& entry) {\n+        bool should_have_sequence = !entry.second.skip && !entry.second.dangles;\n+        return entry.second.mining_sequence.has_value() == should_have_sequence;\n+    }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1338297788",
      "id" : 1338297788,
      "in_reply_to_id" : 1326055779,
      "line" : 225,
      "node_id" : "PRRC_kwDOABII585PxM28",
      "original_commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "original_line" : 225,
      "original_position" : 220,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 225,
      "pull_request_review_id" : 1645980326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338297788/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-27T09:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338297788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1338308737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338308737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Taken",
      "commit_id" : "c73504382829f3e8d25d38b27890fb410b9dd6ec",
      "created_at" : "2023-09-27T09:11:23Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1338308737",
      "id" : 1338308737,
      "in_reply_to_id" : 1326055004,
      "line" : 71,
      "node_id" : "PRRC_kwDOABII585PxPiB",
      "original_commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "original_line" : 71,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 71,
      "pull_request_review_id" : 1645997030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338308737/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-27T09:11:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338308737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1338309101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338309101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Taken",
      "commit_id" : "c73504382829f3e8d25d38b27890fb410b9dd6ec",
      "created_at" : "2023-09-27T09:11:39Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;\n+        // FilteredAncestorSet() is different from ancestor_subset because it filters out skipped transactions\n+        // and will return std::nullopt if this transaction should be skipped.\n+        const auto filtered_ancestor_subset = FilteredAncestorSet(entry.tx);\n+        if (filtered_ancestor_subset == std::nullopt) continue;\n+        CAmount ancestor_subset_fees = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            CAmount{0}, [&](CAmount sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).fee; });\n+        int64_t ancestor_subset_vsize = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            int64_t{0}, [&](int64_t sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).vsize; });\n+        miniminer_info.push_back(node::MiniMinerMempoolEntry{*entry.fee, ancestor_subset_fees, *entry.vsize, ancestor_subset_vsize, entry.tx});\n+\n+        // Provide descendant cache, but filter for any transactions that dangle or skip\n+        std::set<uint256>& descendant_cache_to_populate = descendant_caches.try_emplace(txid).first->second;\n+        for (const auto& txid : entry.descendant_subset) {\n+            if (!Assume(m_txid_to_entry.count(txid) > 0)) continue;\n+            const auto& entry = m_txid_to_entry.at(txid);\n+            if (!entry.dangles && !entry.skip) {\n+                descendant_cache_to_populate.insert(txid);\n+            }\n+        }\n+    }\n+\n+    // Use MiniMiner to calculate the order in which these transactions would be selected for mining.\n+    node::MiniMiner miniminer(miniminer_info, descendant_caches);\n+    if (!miniminer.IsReadyToCalculate()) return false;\n+    for (const auto& [txid, mining_sequence] : miniminer.Linearize()) {\n+        m_txid_to_entry.at(txid).mining_sequence = mining_sequence;\n+    }\n+    // Sort again, this time using mining score.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1338309101",
      "id" : 1338309101,
      "in_reply_to_id" : 1326056221,
      "line" : 221,
      "node_id" : "PRRC_kwDOABII585PxPnt",
      "original_commit_id" : "0b98391134811cf0cb809566d67174cd4148364a",
      "original_line" : 221,
      "original_position" : 216,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 221,
      "pull_request_review_id" : 1645997512,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338309101/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-27T09:11:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338309101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340074623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340074623"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed",
      "commit_id" : "5a647bbf72624a3394b08bfaad628bf2f7031135",
      "created_at" : "2023-09-28T12:32:36Z",
      "diff_hunk" : "@@ -1387,49 +1387,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340074623",
      "id" : 1340074623,
      "in_reply_to_id" : 1227463946,
      "line" : 1404,
      "node_id" : "PRRC_kwDOABII585P3-p_",
      "original_commit_id" : "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "original_line" : 1404,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 157,
      "pull_request_review_id" : 1648736879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340074623/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T12:33:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340074623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340521597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340521597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should be noted in the declaration. I'm also not sure how this is a \"more severe\" case. Is it really worth it to punt this until later when we have mempool lock?\r\n\r\nAlso should have a unit/functional test to capture this allowed behavior.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T18:18:41Z",
      "diff_hunk" : "@@ -6,14 +6,58 @@\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n-#include <util/hasher.h>\n \n #include <algorithm>\n #include <cassert>\n #include <iterator>\n #include <memory>\n #include <numeric>\n-#include <unordered_set>\n+\n+bool IsSorted(const Package& txns, std::unordered_set<uint256, SaltedTxidHasher>& later_txids)\n+{\n+    // later_txids always contains the txids of this transaction and the ones that come later in\n+    // txns. If any transaction's input spends a tx in that set, we've found a parent placed later\n+    // than its child.\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                // The parent is a subsequent transaction in the package.\n+                return false;\n+            }\n+        }\n+        later_txids.erase(tx->GetHash());\n+    }\n+    return true;\n+}\n+\n+bool IsSorted(const Package& txns)\n+{\n+    std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+    std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    return IsSorted(txns, later_txids);\n+}\n+\n+bool IsConsistent(const Package& txns)\n+{\n+    // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                // This input is also present in another tx in the package.\n+                return false;\n+            }\n+        }\n+        // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340521597",
      "id" : 1340521597,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585P5rx9",
      "original_commit_id" : "2835a7b49e1898982ebe2c6f75fa8ffda831b92d",
      "original_line" : 67,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 93,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340521597/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340521597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340533397"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340533397"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit\r\n```suggestion\r\n        expected_pool_size += package_with_rbf.size() - 1;\r\n```",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T18:31:29Z",
      "diff_hunk" : "@@ -808,40 +1112,264 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n     auto mtx_child_poor = CreateValidMempoolTransaction(/*input_transaction=*/tx_parent_rich, /*input_vout=*/0,\n                                                         /*input_height=*/101, /*input_signing_key=*/child_key,\n                                                         /*output_destination=*/child_spk,\n-                                                        /*output_amount=*/coinbase_value - high_parent_fee, /*submit=*/false);\n+                                                        /*output_amount=*/coinbase_value - high_parent_fee - low_fee_amt, /*submit=*/false);\n     CTransactionRef tx_child_poor = MakeTransactionRef(mtx_child_poor);\n     package_rich_parent.push_back(tx_child_poor);\n \n-    // Parent pays 1 BTC and child pays none. The parent should be accepted without the child.\n+    // Parent pays 1 BTC and child pays below mempool minimum feerate. The parent should be accepted without the child.\n     {\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n         const auto submit_rich_parent = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n                                                           package_rich_parent, /*test_accept=*/false);\n+        BOOST_CHECK_MESSAGE(CheckPackageMempoolAcceptResult(package_rich_parent, submit_rich_parent, /*expect_valid=*/false, m_node.mempool.get(), str), str);\n         expected_pool_size += 1;\n-        BOOST_CHECK_MESSAGE(submit_rich_parent.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n \n         // The child would have been validated on its own and failed.\n         BOOST_CHECK_EQUAL(submit_rich_parent.m_state.GetResult(), PackageValidationResult::PCKG_TX);\n         BOOST_CHECK_EQUAL(submit_rich_parent.m_state.GetRejectReason(), \"transaction failed\");\n \n         auto it_parent = submit_rich_parent.m_tx_results.find(tx_parent_rich->GetWitnessHash());\n         auto it_child = submit_rich_parent.m_tx_results.find(tx_child_poor->GetWitnessHash());\n-        BOOST_CHECK(it_parent != submit_rich_parent.m_tx_results.end());\n-        BOOST_CHECK(it_child != submit_rich_parent.m_tx_results.end());\n         BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n         BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n         BOOST_CHECK(it_parent->second.m_state.GetRejectReason() == \"\");\n         BOOST_CHECK_MESSAGE(it_parent->second.m_base_fees.value() == high_parent_fee,\n                 strprintf(\"rich parent: expected fee %s, got %s\", high_parent_fee, it_parent->second.m_base_fees.value()));\n         BOOST_CHECK(it_parent->second.m_effective_feerate == CFeeRate(high_parent_fee, GetVirtualTransactionSize(*tx_parent_rich)));\n-        BOOST_CHECK(it_child != submit_rich_parent.m_tx_results.end());\n         BOOST_CHECK_EQUAL(it_child->second.m_result_type, MempoolAcceptResult::ResultType::INVALID);\n-        BOOST_CHECK_EQUAL(it_child->second.m_state.GetResult(), TxValidationResult::TX_MEMPOOL_POLICY);\n-        BOOST_CHECK(it_child->second.m_state.GetRejectReason() == \"min relay fee not met\");\n+        BOOST_CHECK_EQUAL(it_child->second.m_state.GetResult(), TxValidationResult::TX_SINGLE_FAILURE);\n+        BOOST_CHECK(it_child->second.m_state.GetRejectReason() == \"mempool min fee not met\");\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+    }\n \n+    {\n+        // Package in which one of the transactions replaces something (by itself, without requiring\n+        // package RBF).\n+        const CAmount low_fee{1000};\n+        const CAmount med_fee{2000};\n+        const CAmount high_fee{3000};\n+        CTransactionRef txA_mempool = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[3], /*input_vout=*/0,\n+                                                                                       /*input_height=*/102, /*input_signing_key=*/coinbaseKey,\n+                                                                                       /*output_destination=*/parent_spk,\n+                                                                                       /*output_amount=*/coinbase_value - low_fee, /*submit=*/true));\n+        expected_pool_size += 1;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+        Package package_with_rbf;\n+        // Conflicts with txA_mempool and can replace it.\n+        CTransactionRef txA_package = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[3], /*input_vout=*/0,\n+                                                                                       /*input_height=*/102, /*input_signing_key=*/coinbaseKey,\n+                                                                                       /*output_destination=*/parent_spk,\n+                                                                                       /*output_amount=*/coinbase_value - med_fee, /*submit=*/false));\n+        CTransactionRef txB_package = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[4], /*input_vout=*/0,\n+                                                                                       /*input_height=*/102, /*input_signing_key=*/coinbaseKey,\n+                                                                                       /*output_destination=*/parent_spk,\n+                                                                                       /*output_amount=*/coinbase_value - low_fee, /*submit=*/false));\n+        package_with_rbf.push_back(txA_package);\n+        package_with_rbf.push_back(txB_package);\n+\n+        CTransactionRef txC_package = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transactions=*/package_with_rbf,\n+                                                                                       /*inputs=*/{COutPoint{txA_package->GetHash(), 0},\n+                                                                                                   COutPoint{txB_package->GetHash(), 0}},\n+                                                                                       /*input_height=*/102,\n+                                                                                       /*input_signing_keys=*/{child_key},\n+                                                                                       /*outputs=*/{CTxOut{coinbase_value * 2 - low_fee - med_fee - high_fee, child_spk}},\n+                                                                                       /*submit=*/false));\n+        package_with_rbf.push_back(txC_package);\n+        const auto result_rbf = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_with_rbf, /*test_accept=*/false);\n+        BOOST_CHECK_MESSAGE(CheckPackageMempoolAcceptResult(package_with_rbf, result_rbf, /*expect_valid=*/true, m_node.mempool.get(), str), str);\n+        expected_pool_size += 3 - 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340533397",
      "id" : 1340533397,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P5uqV",
      "original_commit_id" : "5a647bbf72624a3394b08bfaad628bf2f7031135",
      "original_line" : 1182,
      "original_position" : 1014,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340533397/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340533397",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340539454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340539454"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We're not trimming anymore during package evaluation; does this make sense to change?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T18:38:04Z",
      "diff_hunk" : "@@ -1136,7 +1144,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip());\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n+            return state.Invalid(TxValidationResult::TX_SINGLE_FAILURE, \"mempool full\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340539454",
      "id" : 1340539454,
      "line" : 1148,
      "node_id" : "PRRC_kwDOABII585P5wI-",
      "original_commit_id" : "080bab40691ae44638be3d3afd45ccc526bb1dae",
      "original_line" : 1148,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 78,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340539454/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340539454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340547521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340547521"
         }
      },
      "author_association" : "MEMBER",
      "body" : "annotate args; maybe clang tidy would catch the wrong values in wrong slots?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T18:47:06Z",
      "diff_hunk" : "@@ -72,7 +72,9 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n     for (const auto& txiter : cluster) {\n         if (!m_to_be_replaced.count(txiter->GetTx().GetHash())) {\n-            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(),\n+                MiniMinerMempoolEntry(txiter->GetModifiedFee(), txiter->GetModFeesWithAncestors(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340547521",
      "id" : 1340547521,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P5yHB",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 76,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340547521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340547521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340551545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340551545"
         }
      },
      "author_association" : "MEMBER",
      "body" : "gripe: these `!Assume()` things are throwing me for a loop, especially `!!empty`",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T18:51:33Z",
      "diff_hunk" : "@@ -122,6 +124,46 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        // Just forward these args onto MiniMinerMempoolEntry\n+        auto [mapiter, success] = m_entries_by_txid.emplace(txid, entry);\n+        m_entries.push_back(mapiter);\n+    }\n+    // Descendant cache is already built, but we need to translate them to m_entries_by_txid iters.\n+    for (const auto& [txid, desc_txids] : descendant_caches) {\n+        // Descendant cache should include at least the tx itself.\n+        if (!Assume(!desc_txids.empty())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340551545",
      "id" : 1340551545,
      "line" : 144,
      "node_id" : "PRRC_kwDOABII585P5zF5",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 144,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 32,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340551545/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340551545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340554294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340554294"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this conditional is already handled by the previous conditional? Could make it an `else` block to make it clearer",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T18:54:36Z",
      "diff_hunk" : "@@ -122,6 +124,46 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        // Just forward these args onto MiniMinerMempoolEntry\n+        auto [mapiter, success] = m_entries_by_txid.emplace(txid, entry);\n+        m_entries.push_back(mapiter);\n+    }\n+    // Descendant cache is already built, but we need to translate them to m_entries_by_txid iters.\n+    for (const auto& [txid, desc_txids] : descendant_caches) {\n+        // Descendant cache should include at least the tx itself.\n+        if (!Assume(!desc_txids.empty())) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        for (const auto& desc_txid : desc_txids) {\n+            auto desc_it{m_entries_by_txid.find(desc_txid)};\n+            // Descendants should only include transactions with corresponding entries.\n+            if (!Assume(desc_it != m_entries_by_txid.end())) {\n+                m_ready_to_calculate = false;\n+                return;\n+            }\n+            if (desc_it != m_entries_by_txid.end()) cached_descendants.emplace_back(desc_it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340554294",
      "id" : 1340554294,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P5zw2",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 156,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340554294/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340554294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340556803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340556803"
         }
      },
      "author_association" : "MEMBER",
      "body" : "anything we can `Assume` on `success`?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T18:57:16Z",
      "diff_hunk" : "@@ -122,6 +124,46 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        // Just forward these args onto MiniMinerMempoolEntry\n+        auto [mapiter, success] = m_entries_by_txid.emplace(txid, entry);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340556803",
      "id" : 1340556803,
      "line" : 138,
      "node_id" : "PRRC_kwDOABII585P50YD",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 138,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 26,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340556803/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340556803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340568255"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340568255"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cc @murchandamus I think this is something you could review without too much additional background",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-28T19:10:21Z",
      "diff_hunk" : "@@ -124,6 +124,34 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340568255",
      "id" : 1340568255,
      "in_reply_to_id" : 1272371805,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII585P53K_",
      "original_commit_id" : "8a7087b0e5839988fcdf93b664ac7b747baec8d6",
      "original_line" : 127,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 15,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340568255/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340568255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341451381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341451381"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this value can also be set by SkipWithDescendants() if its the descendant, so not just because it's already in mempool",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T14:40:58Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341451381",
      "id" : 1341451381,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9Ox1",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341451381/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341451381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341452779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341452779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "sigops-adjusted I presume, better to be explicit",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T14:42:15Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341452779",
      "id" : 1341452779,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9PHr",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 48,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341452779/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341452779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341453736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341453736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in `AncestorPackage` ctor?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T14:43:08Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341453736",
      "id" : 1341453736,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9PWo",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341453736/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341453736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341461856"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341461856"
         }
      },
      "author_association" : "MEMBER",
      "body" : "isn't this a duplicate of the condition just above?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T14:50:30Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use FilteredAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of FilteredAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                    return descendant_subset.size() > rhs.descendant_subset.size();\n+                }\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341461856",
      "id" : 1341461856,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9RVg",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341461856/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341461856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341464279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341464279"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is this just an arbitrary tie-breaker?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T14:52:49Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use FilteredAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of FilteredAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                    return descendant_subset.size() > rhs.descendant_subset.size();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341464279",
      "id" : 1341464279,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9R7X",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 73,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341464279/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341464279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341465868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341465868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "the latter condition is also `IsSorted()`, might want to make that extra clear ",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T14:54:16Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use FilteredAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of FilteredAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                    return descendant_subset.size() > rhs.descendant_subset.size();\n+                }\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        return descendant_subset.size() > rhs.descendant_subset.size();\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341465868",
      "id" : 1341465868,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9SUM",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 98,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341465868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341465868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341493388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341493388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n    // Sort again, this time including mining scores and individual feerates.\r\n```",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T15:15:42Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::vector<std::reference_wrapper<PackageEntry>> txns_copy(m_txns);\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    if (!Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()))) {\n+        // If something went wrong with the sorting, just revert to the original order.\n+        m_txns = txns_copy;\n+    }\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;\n+        // FilteredAncestorSet() is different from ancestor_subset because it filters out skipped transactions\n+        // and will return std::nullopt if this transaction should be skipped.\n+        const auto filtered_ancestor_subset = FilteredAncestorSet(entry.tx);\n+        if (filtered_ancestor_subset == std::nullopt) continue;\n+        CAmount ancestor_subset_fees = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            CAmount{0}, [&](CAmount sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).fee; });\n+        int64_t ancestor_subset_vsize = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            int64_t{0}, [&](int64_t sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).vsize; });\n+        miniminer_info.push_back(node::MiniMinerMempoolEntry{*entry.fee, ancestor_subset_fees, *entry.vsize, ancestor_subset_vsize, entry.tx});\n+\n+        // Provide descendant cache, but filter for any transactions that dangle or skip\n+        std::set<uint256>& descendant_cache_to_populate = descendant_caches.try_emplace(txid).first->second;\n+        for (const auto& txid : entry.descendant_subset) {\n+            if (!Assume(m_txid_to_entry.count(txid) > 0)) continue;\n+            const auto& entry = m_txid_to_entry.at(txid);\n+            if (!entry.dangles && !entry.skip) {\n+                descendant_cache_to_populate.insert(txid);\n+            }\n+        }\n+    }\n+\n+    // Use MiniMiner to calculate the order in which these transactions would be selected for mining.\n+    node::MiniMiner miniminer(miniminer_info, descendant_caches);\n+    if (!miniminer.IsReadyToCalculate()) return false;\n+    for (const auto& [txid, mining_sequence] : miniminer.Linearize()) {\n+        m_txid_to_entry.at(txid).mining_sequence = mining_sequence;\n+    }\n+    // Sort again, this time using mining score.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341493388",
      "id" : 1341493388,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9ZCM",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 219,
      "original_position" : 219,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341493388/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341493388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341498106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341498106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "looks fixed to me :+1: ",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T15:20:24Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()));\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341498106",
      "id" : 1341498106,
      "in_reply_to_id" : 1322059487,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9aL6",
      "original_commit_id" : "b8cd561b13ce1dfcca0b82835b8bf918d6f8a985",
      "original_line" : 191,
      "original_position" : 187,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341498106/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341498106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341531411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341531411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit message for \"[validation] fully abort package validation for non-TX_SINGLE_FAILURE\"\r\n\r\n\"for all other failures, abort the whole thing.\"\r\nthis should say something like \"for all other failures, continue with single evaluation, but do not do package evaluation of remaining transactions in package.\"?\r\n\r\nI know this commit is relatively temporary, but I'm wondering if we can have something like `linearized_package.SkipPackage()` to just allow `linearized_package.FilteredTxns()` to return empty, rather than `quit_early` and checking two ways later on if to bail.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T15:44:14Z",
      "diff_hunk" : "@@ -1491,39 +1493,74 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n+            const auto single_package_res = AcceptSubPackage(subpackage.value(), args);\n             const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341531411",
      "id" : 1341531411,
      "line" : 1530,
      "node_id" : "PRRC_kwDOABII585P9iUT",
      "original_commit_id" : "b2779c7bc8dacd182767f07e0c47b3d1f826792b",
      "original_line" : 1530,
      "original_position" : 110,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 326,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341531411/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341531411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341548448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341548448"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n            // Try submitting the transaction on its own, unless it has in-package dependencies (then we\r\n```",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T15:57:33Z",
      "diff_hunk" : "@@ -1491,39 +1493,74 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n+            // Try submitting the transaction on its own, unless it has dependencies (then we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341548448",
      "id" : 1341548448,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9meg",
      "original_commit_id" : "b2779c7bc8dacd182767f07e0c47b3d1f826792b",
      "original_line" : 1499,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341548448/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341548448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341555886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341555886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n    if (!Finalize(args, ws)) {\r\n        Assume(ws.m_state.GetResult() == TxValidationResult::TX_SINGLE_FAILURE);\r\n```",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:03:43Z",
      "diff_hunk" : "@@ -1251,7 +1257,10 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341555886",
      "id" : 1341555886,
      "line" : 1260,
      "node_id" : "PRRC_kwDOABII585P9oSu",
      "original_commit_id" : "d582fa352b22e7e30621cb1d4a3c108503004269",
      "original_line" : 1260,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 102,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341555886/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341555886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341556407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341556407"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n        // Failed for fee reasons (mempool full). It's helpful to know what the fee and vsize were.\r\n```",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:04:07Z",
      "diff_hunk" : "@@ -1251,7 +1257,10 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {\n+        // Failed for fee reasons. It's helpful to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341556407",
      "id" : 1341556407,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9oa3",
      "original_commit_id" : "d582fa352b22e7e30621cb1d4a3c108503004269",
      "original_line" : 1261,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341556407/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341556407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341567503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341567503"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this seems erroneous. This is unconditional, even if we deemed it missing inputs, so it can't even know the fees. Also, it's called twice above in more \"logical\" locations.\r\n\r\nedit: I also see it's gone by the tip commit :shrug: ",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:16:48Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341567503",
      "id" : 1341567503,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9rIP",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1567,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341567503/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:37:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341567503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341571667"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341571667"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n    // and copies in CCoinsViewCache that were pulled in on `PreCheck` loop.\r\n```",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:21:43Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341571667",
      "id" : 1341571667,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9sJT",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1572,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341571667/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341571667",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341572808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341572808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since we're doing this within `AcceptSubPackage` as well now, let's break it out into a helper function with the comments? Maybe an interesting fuzz target of its own?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:23:04Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341572808",
      "id" : 1341572808,
      "line" : 1540,
      "node_id" : "PRRC_kwDOABII585P9sbI",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1540,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 336,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341572808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341572808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341576269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341576269"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: if we `SkipPackage` as I suggested, this behavior also naturally falls out pretty much when `FilteredTxns` is called below",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-09-29T16:27:05Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341576269",
      "id" : 1341576269,
      "line" : 1559,
      "node_id" : "PRRC_kwDOABII585P9tRN",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1559,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 355,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341576269/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T00:43:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341576269",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341580751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341580751"
         }
      },
      "author_association" : "MEMBER",
      "body" : "should this also continue if there is no fee/size set vs blunder forward?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:30:54Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        linearized_package.LinearizeWithFees();\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (individual_fee_vsize.has_value() &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341580751",
      "id" : 1341580751,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9uXP",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1587,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341580751/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341580751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341583831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341583831"
         }
      },
      "author_association" : "MEMBER",
      "body" : "drop some `Assume`s related to this? Would be good to catch fallacious reasoning in debug builds\r\n\r\ngot a bit turned around because fee-related aren't `Skip()`'d, just skipped above in the loop",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:34:08Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        linearized_package.LinearizeWithFees();\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (individual_fee_vsize.has_value() &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.\n+                // TODO: try to submit the ancestor subpackage.\n+                continue;\n+            }\n+            const auto& wtxid = tx->GetWitnessHash();\n+            const auto single_res = AcceptSingleTransaction(tx, single_args);\n+            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                // The transaction succeeded on its own and is now in the mempool. Don't include it\n+                // in package validation, because its fees should only be \"used\" once.\n+                results_final.emplace(wtxid, single_res);\n+                linearized_package.Skip(tx);\n+            } else {\n+                // Fee-related errors and missing inputs should not occur since we skip those.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341583831",
      "id" : 1341583831,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9vHX",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1606,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341583831/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341583831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341591726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341591726"
         }
      },
      "author_association" : "MEMBER",
      "body" : "if `!subpackage_fee_vsize.has_value()`, probably should fail?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T16:43:56Z",
      "diff_hunk" : "@@ -1578,84 +1581,99 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     // This deletes the temporary and mempool coins.\n     m_viewmempool.Reset();\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n-        linearized_package.LinearizeWithFees();\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        Assume(linearized_package.LinearizeWithFees());\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n                 continue;\n             }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n             const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n-            if (!subpackage || subpackage->size() > 1) {\n-                // No need to validate if we know this transaction would have missing inputs.\n-                // TODO: try to submit the ancestor subpackage.\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341591726",
      "id" : 1341591726,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P9xCu",
      "original_commit_id" : "f101ad5cb2d77e0ce30e46842877067951c9bee3",
      "original_line" : 1608,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341591726/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341591726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341614921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341614921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "?\r\n```suggestion\r\n                    Assume(subpackage_it != subpackage_result.m_tx_results.end());\r\n                    linearized_package.Skip(subpackage_tx);\r\n```",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-09-29T17:04:41Z",
      "diff_hunk" : "@@ -1483,79 +1471,180 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n             }\n+            m_viewmempool.PackageAddTransaction(tx);\n         }\n     }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n \n-    auto multi_submission_result = quit_early || txns_package_eval.empty() ? PackageMempoolAcceptResult(package_state_quit_early, {}) :\n-        AcceptSubPackage(txns_package_eval, args);\n-    PackageValidationState& package_state_final = multi_submission_result.m_state;\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n+    if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        Assume(linearized_package.LinearizeWithFees());\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (individual_fee_vsize.has_value() &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n+                continue;\n+            }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this subpackage won't meet feerate\n+                // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+                // subpackage that will bump it.\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(subpackage_fee_vsize->first, subpackage_fee_vsize->second), subpackage_wtxids));\n+                continue;\n+            }\n+            const auto subpackage_result = AcceptSubPackage(subpackage.value(), args);\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                // Add all transactions' results to results_final. There might not be one for every\n+                // transaction.\n+                if (subpackage_it != subpackage_result.m_tx_results.end()) {\n+                    // A tx would only be in results_final if we already found it (or same txid) in\n+                    // the mempool in the previous loop so it should not be included in\n+                    // FilteredTxns().\n+                    //\n+                    // A result should not already be present because anything already in mempool\n+                    // would have already been skipped, and a tx is never validated more than once\n+                    // in this loop:\n+                    // - if tx succeeds, it is skipped in subsequent iterations\n+                    // - if tx fails, we exit the loop immediately\n+                    Assume(results_final.count(subpackage_wtxid) == 0);\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                }\n+                // We detect that a transaction was successful by looking for it in mempool.\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    linearized_package.Skip(subpackage_tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341614921",
      "id" : 1341614921,
      "line" : 1625,
      "node_id" : "PRRC_kwDOABII585P92tJ",
      "original_commit_id" : "5a647bbf72624a3394b08bfaad628bf2f7031135",
      "original_line" : 1625,
      "original_position" : 396,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 424,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341614921/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T00:46:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341614921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341644444"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341644444"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just noting even though I think it's reasonable: we may bail on other subpackages(that would fit in mempool) if we hit chain limits on any particular subpackage?",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T17:38:00Z",
      "diff_hunk" : "@@ -1530,71 +1533,95 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         m_view.Uncache(outpoint);\n     }\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n         linearized_package.LinearizeWithFees();\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n                 continue;\n             }\n+            const auto subpackage_fee_vsize = linearized_package.GetAncestorFeeAndVsize(tx);\n             const auto subpackage = linearized_package.GetAncestorSet(tx);\n-            if (!subpackage || subpackage->size() > 1) {\n-                // No need to validate if we know this transaction would have missing inputs.\n-                // TODO: try to submit the ancestor subpackage.\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this subpackage won't meet feerate\n+                // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+                // subpackage that will bump it.\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(subpackage_fee_vsize->first, subpackage_fee_vsize->second), subpackage_wtxids));\n                 continue;\n             }\n-            const auto& wtxid = tx->GetWitnessHash();\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                results_final.emplace(wtxid, single_res);\n-                linearized_package.Skip(tx);\n-            } else {\n-                // Fee-related errors and missing inputs should not occur since we skip those.\n-                // Abort if we get any other error; it's not worth the computational effort to\n-                // try to validate any of the other transactions.\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                quit_early = true;\n-                // If a result already exists from the previous loop, override it.\n-                Assume(individual_results_nonfinal.count(wtxid) == 0);\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                // Add all transactions' results to results_final. There might not be one for every\n+                // transaction.\n+                if (subpackage_it != subpackage_result.m_tx_results.end()) {\n+                    // A tx would only be in results_final if we already found it (or same txid) in\n+                    // the mempool in the previous loop so it should not be included in\n+                    // FilteredTxns().\n+                    //\n+                    // A result should not already be present because anything already in mempool\n+                    // would have already been skipped, and a tx is never validated more than once\n+                    // in this loop:\n+                    // - if tx succeeds, it is skipped in subsequent iterations\n+                    // - if tx fails, we exit the loop immediately\n+                    Assume(results_final.count(subpackage_wtxid) == 0);\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                }\n+                // We detect that a transaction was successful by looking for it in mempool.\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    linearized_package.Skip(subpackage_tx);\n+                }\n+            }\n+            if (subpackage_result.m_state.IsInvalid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341644444",
      "id" : 1341644444,
      "in_reply_to_id" : 1272555810,
      "line" : 1632,
      "node_id" : "PRRC_kwDOABII585P996c",
      "original_commit_id" : "0ea0149c678bf89325b42383cab6da15e4228411",
      "original_line" : 1632,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 431,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341644444/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341644444",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341728383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341728383"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You should check if `FilteredAncestorSet` is giving back a nullopt or not, otherwise it's UB to call `->Size()` on it when it's nullopt",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-09-29T19:29:11Z",
      "diff_hunk" : "@@ -73,15 +122,243 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n         package_duplicate_txids_empty.emplace_back(MakeTransactionRef(empty_tx));\n     }\n     PackageValidationState state_duplicates;\n-    BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n+    BOOST_CHECK(!IsPackageWellFormed(package_duplicate_txids_empty, state_duplicates, /*require_sorted=*/false));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(49 * COIN * 99, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        // Note that AncestorPackage will sort the package so that parents are before the child, but\n+        // this does not necessarily mean that the ith parent in packageified matches the ith parent\n+        // in package.\n+        for (auto i{0}; i < 99; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+            if (i < 50) packageified.Skip(package[i]);\n+        }\n+        // After excluding 50 of the parents, the child's ancestor set has size 50.\n+        BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package.back())->size(), 50);\n+        BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(package.back())));\n+        packageified.SkipWithDescendants(package[75]);\n+        for (auto i{50}; i < 99; ++i) {\n+            if (i == 75) {\n+                BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+            } else {\n+                BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), 1);\n+            }\n+        }\n+        BOOST_CHECK(!packageified.FilteredAncestorSet(package.back()));\n+    }\n+\n+    // Heavily inter-connected set of 50 transactions\n+    LOCK2(cs_main, m_node.mempool->cs);\n+    auto transactions{PopulateMempool(det_rand, /*num_transactions=*/50, /*submit=*/true)};\n+    Shuffle(transactions.begin(), transactions.end(), det_rand);\n+    AncestorPackage packageified{transactions};\n+    const auto sorted_transactions{packageified.Txns()};\n+    BOOST_CHECK(IsSorted(sorted_transactions));\n+    for (const auto& tx : sorted_transactions) {\n+        const auto packageified_ancestors{packageified.FilteredAncestorSet(tx)};\n+        BOOST_CHECK(IsAncestorPackage(*packageified_ancestors));\n+        auto mempool_ancestors{m_node.mempool->CalculateMemPoolAncestors(*m_node.mempool->GetIter(tx->GetHash()).value(),\n+                               CTxMemPool::Limits::NoLimits(), /*fSearchForParents=*/false)};\n+        // Add 1 because CMPA doesn't include the tx itself in its ancestor set.\n+        BOOST_CHECK_EQUAL(mempool_ancestors->size() + 1, packageified_ancestors->size());\n+        std::set<uint256> packageified_ancestors_wtxids;\n+        for (const auto& tx : packageified_ancestors.value()) packageified_ancestors_wtxids.insert(tx->GetWitnessHash());\n+        for (const auto& mempool_iter : *mempool_ancestors) {\n+            BOOST_CHECK(packageified_ancestors_wtxids.count(mempool_iter->GetTx().GetWitnessHash()) > 0);\n+        }\n+    }\n+    // Skip the 20th transaction. All of its descendants should have 1 fewer tx in their ancestor sets.\n+    const auto& tx_20{sorted_transactions[20]};\n+    CTxMemPool::setEntries descendants_20;\n+    m_node.mempool->CalculateDescendants(m_node.mempool->GetIter(tx_20->GetHash()).value(), descendants_20);\n+    packageified.Skip(tx_20);\n+    for (const auto& desc_iter : descendants_20) {\n+        BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(m_node.mempool->info(GenTxid::Txid(desc_iter->GetTx().GetHash())).tx)->size(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1341728383",
      "id" : 1341728383,
      "line" : 269,
      "node_id" : "PRRC_kwDOABII585P-SZ_",
      "original_commit_id" : "5a647bbf72624a3394b08bfaad628bf2f7031135",
      "original_line" : 269,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 236,
      "pull_request_review_id" : 1649470142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341728383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T19:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341728383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342502349"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342502349"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added note and a test",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T10:05:21Z",
      "diff_hunk" : "@@ -6,14 +6,58 @@\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n-#include <util/hasher.h>\n \n #include <algorithm>\n #include <cassert>\n #include <iterator>\n #include <memory>\n #include <numeric>\n-#include <unordered_set>\n+\n+bool IsSorted(const Package& txns, std::unordered_set<uint256, SaltedTxidHasher>& later_txids)\n+{\n+    // later_txids always contains the txids of this transaction and the ones that come later in\n+    // txns. If any transaction's input spends a tx in that set, we've found a parent placed later\n+    // than its child.\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                // The parent is a subsequent transaction in the package.\n+                return false;\n+            }\n+        }\n+        later_txids.erase(tx->GetHash());\n+    }\n+    return true;\n+}\n+\n+bool IsSorted(const Package& txns)\n+{\n+    std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+    std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    return IsSorted(txns, later_txids);\n+}\n+\n+bool IsConsistent(const Package& txns)\n+{\n+    // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                // This input is also present in another tx in the package.\n+                return false;\n+            }\n+        }\n+        // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342502349",
      "id" : 1342502349,
      "in_reply_to_id" : 1340521597,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585QBPXN",
      "original_commit_id" : "2835a7b49e1898982ebe2c6f75fa8ffda831b92d",
      "original_line" : 67,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 93,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342502349/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342502349",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342503951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342503951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, as it's a type of fee failure that can be \"overcome\" by package submission. If there's a CPFP package and we received the parent first, and rejected it for this reason, we should put it in the `m_recent_rejects_reconsiderable` cache instead of the `m_recent_rejects` cache so we can still cpfp it in a package.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T10:07:07Z",
      "diff_hunk" : "@@ -1136,7 +1144,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip());\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n+            return state.Invalid(TxValidationResult::TX_SINGLE_FAILURE, \"mempool full\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342503951",
      "id" : 1342503951,
      "in_reply_to_id" : 1340539454,
      "line" : 1148,
      "node_id" : "PRRC_kwDOABII585QBPwP",
      "original_commit_id" : "080bab40691ae44638be3d3afd45ccc526bb1dae",
      "original_line" : 1148,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 78,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342503951/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342503951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342505383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342505383"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T10:08:44Z",
      "diff_hunk" : "@@ -72,7 +72,9 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n     for (const auto& txiter : cluster) {\n         if (!m_to_be_replaced.count(txiter->GetTx().GetHash())) {\n-            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(),\n+                MiniMinerMempoolEntry(txiter->GetModifiedFee(), txiter->GetModFeesWithAncestors(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342505383",
      "id" : 1342505383,
      "in_reply_to_id" : 1340547521,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBQGn",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 76,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342505383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342505383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342509170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342509170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(that's why they have comments above them)\r\n`if (!Assume(assumption)) exit_early_because_assumption_doesnt_hold();`",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T10:13:08Z",
      "diff_hunk" : "@@ -122,6 +124,46 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        // Just forward these args onto MiniMinerMempoolEntry\n+        auto [mapiter, success] = m_entries_by_txid.emplace(txid, entry);\n+        m_entries.push_back(mapiter);\n+    }\n+    // Descendant cache is already built, but we need to translate them to m_entries_by_txid iters.\n+    for (const auto& [txid, desc_txids] : descendant_caches) {\n+        // Descendant cache should include at least the tx itself.\n+        if (!Assume(!desc_txids.empty())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342509170",
      "id" : 1342509170,
      "in_reply_to_id" : 1340551545,
      "line" : 144,
      "node_id" : "PRRC_kwDOABII585QBRBy",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 144,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 32,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342509170/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342509170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342510603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342510603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed conditional, made else block",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T10:14:57Z",
      "diff_hunk" : "@@ -122,6 +124,46 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        // Just forward these args onto MiniMinerMempoolEntry\n+        auto [mapiter, success] = m_entries_by_txid.emplace(txid, entry);\n+        m_entries.push_back(mapiter);\n+    }\n+    // Descendant cache is already built, but we need to translate them to m_entries_by_txid iters.\n+    for (const auto& [txid, desc_txids] : descendant_caches) {\n+        // Descendant cache should include at least the tx itself.\n+        if (!Assume(!desc_txids.empty())) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        for (const auto& desc_txid : desc_txids) {\n+            auto desc_it{m_entries_by_txid.find(desc_txid)};\n+            // Descendants should only include transactions with corresponding entries.\n+            if (!Assume(desc_it != m_entries_by_txid.end())) {\n+                m_ready_to_calculate = false;\n+                return;\n+            }\n+            if (desc_it != m_entries_by_txid.end()) cached_descendants.emplace_back(desc_it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342510603",
      "id" : 1342510603,
      "in_reply_to_id" : 1340554294,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBRYL",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 156,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342510603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342510603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342511437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342511437"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Taken",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T10:15:59Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::vector<std::reference_wrapper<PackageEntry>> txns_copy(m_txns);\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    if (!Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()))) {\n+        // If something went wrong with the sorting, just revert to the original order.\n+        m_txns = txns_copy;\n+    }\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && !entryref.get().dangles) result.push_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (!entryref.get().skip && entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            Assume(!entryref.get().dangles);\n+            result.push_back(entryref.get().tx);\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (!entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.dangles || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        Assume(!anc_entry.dangles);\n+        if (!anc_entry.skip && !anc_entry.dangles) {\n+            // If tx has fee and vsize, then any of its non-skipped ancestors should too.\n+            if (anc_entry.fee.has_value() && anc_entry.vsize.has_value()) {\n+                total_fee += anc_entry.fee.value();\n+                total_vsize += anc_entry.vsize.value();\n+            } else {\n+                // If any fee or vsize information is missing, we can't return an accurate result.\n+                return std::nullopt;\n+            }\n+        }\n+    }\n+    return std::make_pair(total_fee, total_vsize);\n+}\n+\n+void AncestorPackage::Skip(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+}\n+void AncestorPackage::SkipWithDescendants(const CTransactionRef& transaction)\n+{\n+    if (m_txid_to_entry.count(transaction->GetHash()) == 0) return;\n+    m_txid_to_entry.at(transaction->GetHash()).skip = true;\n+    for (const auto& descendant_txid : m_txid_to_entry.at(transaction->GetHash()).descendant_subset) {\n+        m_txid_to_entry.at(descendant_txid).skip = true;\n+        m_txid_to_entry.at(descendant_txid).dangles = true;\n+    }\n+}\n+\n+void AncestorPackage::AddFeeAndVsize(const uint256& txid, CAmount fee, int64_t vsize)\n+{\n+    if (m_txid_to_entry.count(txid) == 0) return;\n+    m_txid_to_entry.at(txid).fee = fee;\n+    m_txid_to_entry.at(txid).vsize = vsize;\n+}\n+\n+bool AncestorPackage::LinearizeWithFees()\n+{\n+    if (!m_ancestor_package_shaped) return false;\n+    // All fee and vsize information for non-skipped transactions must be available, otherwise linearization cannot be done.\n+    if (!std::all_of(m_txid_to_entry.cbegin(), m_txid_to_entry.cend(),\n+        [](const auto& entry) { return entry.second.skip || entry.second.dangles ||\n+                                 (entry.second.fee.has_value() && entry.second.vsize.has_value()); })) {\n+        return false;\n+    }\n+    // Clear any previously-calculated mining sequences for all transactions.\n+    for (auto& [_, entry] : m_txid_to_entry) entry.mining_sequence = std::nullopt;\n+    std::vector<node::MiniMinerMempoolEntry> miniminer_info;\n+    std::map<uint256, std::set<uint256>> descendant_caches;\n+    // For each non-skipped transaction, calculate their ancestor fee and vsize.\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        if (entry.skip) continue;\n+        // FilteredAncestorSet() is different from ancestor_subset because it filters out skipped transactions\n+        // and will return std::nullopt if this transaction should be skipped.\n+        const auto filtered_ancestor_subset = FilteredAncestorSet(entry.tx);\n+        if (filtered_ancestor_subset == std::nullopt) continue;\n+        CAmount ancestor_subset_fees = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            CAmount{0}, [&](CAmount sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).fee; });\n+        int64_t ancestor_subset_vsize = std::accumulate(filtered_ancestor_subset->cbegin(), filtered_ancestor_subset->cend(),\n+            int64_t{0}, [&](int64_t sum, const auto& anc) { return sum + *m_txid_to_entry.at(anc->GetHash()).vsize; });\n+        miniminer_info.push_back(node::MiniMinerMempoolEntry{*entry.fee, ancestor_subset_fees, *entry.vsize, ancestor_subset_vsize, entry.tx});\n+\n+        // Provide descendant cache, but filter for any transactions that dangle or skip\n+        std::set<uint256>& descendant_cache_to_populate = descendant_caches.try_emplace(txid).first->second;\n+        for (const auto& txid : entry.descendant_subset) {\n+            if (!Assume(m_txid_to_entry.count(txid) > 0)) continue;\n+            const auto& entry = m_txid_to_entry.at(txid);\n+            if (!entry.dangles && !entry.skip) {\n+                descendant_cache_to_populate.insert(txid);\n+            }\n+        }\n+    }\n+\n+    // Use MiniMiner to calculate the order in which these transactions would be selected for mining.\n+    node::MiniMiner miniminer(miniminer_info, descendant_caches);\n+    if (!miniminer.IsReadyToCalculate()) return false;\n+    for (const auto& [txid, mining_sequence] : miniminer.Linearize()) {\n+        m_txid_to_entry.at(txid).mining_sequence = mining_sequence;\n+    }\n+    // Sort again, this time using mining score.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342511437",
      "id" : 1342511437,
      "in_reply_to_id" : 1341493388,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBRlN",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 219,
      "original_position" : 219,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342511437/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342511437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342601932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342601932"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes, added",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T12:05:29Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342601932",
      "id" : 1342601932,
      "in_reply_to_id" : 1341453736,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBnrM",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342601932/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342601932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342602676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342602676"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added \"depends on policy, calculated externally\" which hopefully gets the point across.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T12:06:24Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342602676",
      "id" : 1342602676,
      "in_reply_to_id" : 1341452779,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBn20",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 48,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342602676/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342602676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342602964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342602964"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, clarified docs.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T12:06:46Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342602964",
      "id" : 1342602964,
      "in_reply_to_id" : 1341451381,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBn7U",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342602964/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342602964",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342603467"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342603467"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah. I've deleted it.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T12:07:22Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use FilteredAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of FilteredAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                    return descendant_subset.size() > rhs.descendant_subset.size();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342603467",
      "id" : 1342603467,
      "in_reply_to_id" : 1341464279,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBoDL",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 73,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342603467/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342603467",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342639837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342639837"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oof yes removed",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T12:44:59Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use FilteredAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of FilteredAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                    return descendant_subset.size() > rhs.descendant_subset.size();\n+                }\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342639837",
      "id" : 1342639837,
      "in_reply_to_id" : 1341461856,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QBw7d",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342639837/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342639837",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342644845"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342644845"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Clarified",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T12:49:56Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in FilteredAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use FilteredAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of FilteredAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                    return descendant_subset.size() > rhs.descendant_subset.size();\n+                }\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        return descendant_subset.size() > rhs.descendant_subset.size();\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342644845",
      "id" : 1342644845,
      "in_reply_to_id" : 1341465868,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QByJt",
      "original_commit_id" : "e9752bf7118237f4956ac72b396a13fef6d171d4",
      "original_line" : 98,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342644845/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342644845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342653191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342653191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T12:55:41Z",
      "diff_hunk" : "@@ -73,15 +122,243 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n         package_duplicate_txids_empty.emplace_back(MakeTransactionRef(empty_tx));\n     }\n     PackageValidationState state_duplicates;\n-    BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n+    BOOST_CHECK(!IsPackageWellFormed(package_duplicate_txids_empty, state_duplicates, /*require_sorted=*/false));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(49 * COIN * 99, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        // Note that AncestorPackage will sort the package so that parents are before the child, but\n+        // this does not necessarily mean that the ith parent in packageified matches the ith parent\n+        // in package.\n+        for (auto i{0}; i < 99; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+            if (i < 50) packageified.Skip(package[i]);\n+        }\n+        // After excluding 50 of the parents, the child's ancestor set has size 50.\n+        BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package.back())->size(), 50);\n+        BOOST_CHECK(IsAncestorPackage(*packageified.FilteredAncestorSet(package.back())));\n+        packageified.SkipWithDescendants(package[75]);\n+        for (auto i{50}; i < 99; ++i) {\n+            if (i == 75) {\n+                BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+            } else {\n+                BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), 1);\n+            }\n+        }\n+        BOOST_CHECK(!packageified.FilteredAncestorSet(package.back()));\n+    }\n+\n+    // Heavily inter-connected set of 50 transactions\n+    LOCK2(cs_main, m_node.mempool->cs);\n+    auto transactions{PopulateMempool(det_rand, /*num_transactions=*/50, /*submit=*/true)};\n+    Shuffle(transactions.begin(), transactions.end(), det_rand);\n+    AncestorPackage packageified{transactions};\n+    const auto sorted_transactions{packageified.Txns()};\n+    BOOST_CHECK(IsSorted(sorted_transactions));\n+    for (const auto& tx : sorted_transactions) {\n+        const auto packageified_ancestors{packageified.FilteredAncestorSet(tx)};\n+        BOOST_CHECK(IsAncestorPackage(*packageified_ancestors));\n+        auto mempool_ancestors{m_node.mempool->CalculateMemPoolAncestors(*m_node.mempool->GetIter(tx->GetHash()).value(),\n+                               CTxMemPool::Limits::NoLimits(), /*fSearchForParents=*/false)};\n+        // Add 1 because CMPA doesn't include the tx itself in its ancestor set.\n+        BOOST_CHECK_EQUAL(mempool_ancestors->size() + 1, packageified_ancestors->size());\n+        std::set<uint256> packageified_ancestors_wtxids;\n+        for (const auto& tx : packageified_ancestors.value()) packageified_ancestors_wtxids.insert(tx->GetWitnessHash());\n+        for (const auto& mempool_iter : *mempool_ancestors) {\n+            BOOST_CHECK(packageified_ancestors_wtxids.count(mempool_iter->GetTx().GetWitnessHash()) > 0);\n+        }\n+    }\n+    // Skip the 20th transaction. All of its descendants should have 1 fewer tx in their ancestor sets.\n+    const auto& tx_20{sorted_transactions[20]};\n+    CTxMemPool::setEntries descendants_20;\n+    m_node.mempool->CalculateDescendants(m_node.mempool->GetIter(tx_20->GetHash()).value(), descendants_20);\n+    packageified.Skip(tx_20);\n+    for (const auto& desc_iter : descendants_20) {\n+        BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(m_node.mempool->info(GenTxid::Txid(desc_iter->GetTx().GetHash())).tx)->size(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342653191",
      "id" : 1342653191,
      "in_reply_to_id" : 1341728383,
      "line" : 269,
      "node_id" : "PRRC_kwDOABII585QB0MH",
      "original_commit_id" : "5a647bbf72624a3394b08bfaad628bf2f7031135",
      "original_line" : 269,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 236,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342653191/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342653191",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342665908"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342665908"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:04:04Z",
      "diff_hunk" : "@@ -1491,39 +1493,74 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n+            // Try submitting the transaction on its own, unless it has dependencies (then we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342665908",
      "id" : 1342665908,
      "in_reply_to_id" : 1341548448,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QB3S0",
      "original_commit_id" : "b2779c7bc8dacd182767f07e0c47b3d1f826792b",
      "original_line" : 1499,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342665908/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342665908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342667727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342667727"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Took the suggested changes to the commit message",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:05:21Z",
      "diff_hunk" : "@@ -1491,39 +1493,74 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n+            const auto single_package_res = AcceptSubPackage(subpackage.value(), args);\n             const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342667727",
      "id" : 1342667727,
      "in_reply_to_id" : 1341531411,
      "line" : 1530,
      "node_id" : "PRRC_kwDOABII585QB3vP",
      "original_commit_id" : "b2779c7bc8dacd182767f07e0c47b3d1f826792b",
      "original_line" : 1530,
      "original_position" : 110,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 326,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342667727/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342667727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342678043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342678043"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:12:58Z",
      "diff_hunk" : "@@ -1251,7 +1257,10 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342678043",
      "id" : 1342678043,
      "in_reply_to_id" : 1341555886,
      "line" : 1260,
      "node_id" : "PRRC_kwDOABII585QB6Qb",
      "original_commit_id" : "d582fa352b22e7e30621cb1d4a3c108503004269",
      "original_line" : 1260,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 102,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342678043/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342678043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342678590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342678590"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:13:26Z",
      "diff_hunk" : "@@ -1251,7 +1257,10 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {\n+        // Failed for fee reasons. It's helpful to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342678590",
      "id" : 1342678590,
      "in_reply_to_id" : 1341556407,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QB6Y-",
      "original_commit_id" : "d582fa352b22e7e30621cb1d4a3c108503004269",
      "original_line" : 1261,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342678590/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342678590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342687850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342687850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "you're right, removed",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:21:45Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342687850",
      "id" : 1342687850,
      "in_reply_to_id" : 1341567503,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QB8pq",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1567,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342687850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342687850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342708698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342708698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh true, removed the 2+ thing",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:39:47Z",
      "diff_hunk" : "@@ -48,8 +48,8 @@ The following rules are enforced for all packages:\n The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n test accepts):\n \n-* Packages must be child-with-unconfirmed-parents packages. This also means packages must contain at\n-  least 2 transactions. (#22674)\n+* Packages must be ancestor packages, i.e. a transaction with its unconfirmed ancestors. This also\n+  means packages must contain at least 2 transactions. (#26711)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342708698",
      "id" : 1342708698,
      "in_reply_to_id" : 1281295986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QCBva",
      "original_commit_id" : "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "original_line" : 55,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342708698/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342708698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342712533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342712533"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:42:59Z",
      "diff_hunk" : "@@ -1387,49 +1387,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342712533",
      "id" : 1342712533,
      "in_reply_to_id" : 1228287010,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QCCrV",
      "original_commit_id" : "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "original_line" : 1392,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342712533/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342712533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342713493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342713493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:43:49Z",
      "diff_hunk" : "@@ -808,40 +1112,264 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n     auto mtx_child_poor = CreateValidMempoolTransaction(/*input_transaction=*/tx_parent_rich, /*input_vout=*/0,\n                                                         /*input_height=*/101, /*input_signing_key=*/child_key,\n                                                         /*output_destination=*/child_spk,\n-                                                        /*output_amount=*/coinbase_value - high_parent_fee, /*submit=*/false);\n+                                                        /*output_amount=*/coinbase_value - high_parent_fee - low_fee_amt, /*submit=*/false);\n     CTransactionRef tx_child_poor = MakeTransactionRef(mtx_child_poor);\n     package_rich_parent.push_back(tx_child_poor);\n \n-    // Parent pays 1 BTC and child pays none. The parent should be accepted without the child.\n+    // Parent pays 1 BTC and child pays below mempool minimum feerate. The parent should be accepted without the child.\n     {\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n         const auto submit_rich_parent = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n                                                           package_rich_parent, /*test_accept=*/false);\n+        BOOST_CHECK_MESSAGE(CheckPackageMempoolAcceptResult(package_rich_parent, submit_rich_parent, /*expect_valid=*/false, m_node.mempool.get(), str), str);\n         expected_pool_size += 1;\n-        BOOST_CHECK_MESSAGE(submit_rich_parent.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n \n         // The child would have been validated on its own and failed.\n         BOOST_CHECK_EQUAL(submit_rich_parent.m_state.GetResult(), PackageValidationResult::PCKG_TX);\n         BOOST_CHECK_EQUAL(submit_rich_parent.m_state.GetRejectReason(), \"transaction failed\");\n \n         auto it_parent = submit_rich_parent.m_tx_results.find(tx_parent_rich->GetWitnessHash());\n         auto it_child = submit_rich_parent.m_tx_results.find(tx_child_poor->GetWitnessHash());\n-        BOOST_CHECK(it_parent != submit_rich_parent.m_tx_results.end());\n-        BOOST_CHECK(it_child != submit_rich_parent.m_tx_results.end());\n         BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n         BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n         BOOST_CHECK(it_parent->second.m_state.GetRejectReason() == \"\");\n         BOOST_CHECK_MESSAGE(it_parent->second.m_base_fees.value() == high_parent_fee,\n                 strprintf(\"rich parent: expected fee %s, got %s\", high_parent_fee, it_parent->second.m_base_fees.value()));\n         BOOST_CHECK(it_parent->second.m_effective_feerate == CFeeRate(high_parent_fee, GetVirtualTransactionSize(*tx_parent_rich)));\n-        BOOST_CHECK(it_child != submit_rich_parent.m_tx_results.end());\n         BOOST_CHECK_EQUAL(it_child->second.m_result_type, MempoolAcceptResult::ResultType::INVALID);\n-        BOOST_CHECK_EQUAL(it_child->second.m_state.GetResult(), TxValidationResult::TX_MEMPOOL_POLICY);\n-        BOOST_CHECK(it_child->second.m_state.GetRejectReason() == \"min relay fee not met\");\n+        BOOST_CHECK_EQUAL(it_child->second.m_state.GetResult(), TxValidationResult::TX_SINGLE_FAILURE);\n+        BOOST_CHECK(it_child->second.m_state.GetRejectReason() == \"mempool min fee not met\");\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+    }\n \n+    {\n+        // Package in which one of the transactions replaces something (by itself, without requiring\n+        // package RBF).\n+        const CAmount low_fee{1000};\n+        const CAmount med_fee{2000};\n+        const CAmount high_fee{3000};\n+        CTransactionRef txA_mempool = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[3], /*input_vout=*/0,\n+                                                                                       /*input_height=*/102, /*input_signing_key=*/coinbaseKey,\n+                                                                                       /*output_destination=*/parent_spk,\n+                                                                                       /*output_amount=*/coinbase_value - low_fee, /*submit=*/true));\n+        expected_pool_size += 1;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+        Package package_with_rbf;\n+        // Conflicts with txA_mempool and can replace it.\n+        CTransactionRef txA_package = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[3], /*input_vout=*/0,\n+                                                                                       /*input_height=*/102, /*input_signing_key=*/coinbaseKey,\n+                                                                                       /*output_destination=*/parent_spk,\n+                                                                                       /*output_amount=*/coinbase_value - med_fee, /*submit=*/false));\n+        CTransactionRef txB_package = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[4], /*input_vout=*/0,\n+                                                                                       /*input_height=*/102, /*input_signing_key=*/coinbaseKey,\n+                                                                                       /*output_destination=*/parent_spk,\n+                                                                                       /*output_amount=*/coinbase_value - low_fee, /*submit=*/false));\n+        package_with_rbf.push_back(txA_package);\n+        package_with_rbf.push_back(txB_package);\n+\n+        CTransactionRef txC_package = MakeTransactionRef(CreateValidMempoolTransaction(/*input_transactions=*/package_with_rbf,\n+                                                                                       /*inputs=*/{COutPoint{txA_package->GetHash(), 0},\n+                                                                                                   COutPoint{txB_package->GetHash(), 0}},\n+                                                                                       /*input_height=*/102,\n+                                                                                       /*input_signing_keys=*/{child_key},\n+                                                                                       /*outputs=*/{CTxOut{coinbase_value * 2 - low_fee - med_fee - high_fee, child_spk}},\n+                                                                                       /*submit=*/false));\n+        package_with_rbf.push_back(txC_package);\n+        const auto result_rbf = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_with_rbf, /*test_accept=*/false);\n+        BOOST_CHECK_MESSAGE(CheckPackageMempoolAcceptResult(package_with_rbf, result_rbf, /*expect_valid=*/true, m_node.mempool.get(), str), str);\n+        expected_pool_size += 3 - 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342713493",
      "id" : 1342713493,
      "in_reply_to_id" : 1340533397,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QCC6V",
      "original_commit_id" : "5a647bbf72624a3394b08bfaad628bf2f7031135",
      "original_line" : 1182,
      "original_position" : 1014,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342713493/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342713493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342717773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342717773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T13:47:31Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342717773",
      "id" : 1342717773,
      "in_reply_to_id" : 1341571667,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QCD9N",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1572,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342717773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342717773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342732928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342732928"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added `Assume`s that it's not fee failure or missing inputs",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T14:00:04Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        linearized_package.LinearizeWithFees();\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (individual_fee_vsize.has_value() &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.\n+                // TODO: try to submit the ancestor subpackage.\n+                continue;\n+            }\n+            const auto& wtxid = tx->GetWitnessHash();\n+            const auto single_res = AcceptSingleTransaction(tx, single_args);\n+            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                // The transaction succeeded on its own and is now in the mempool. Don't include it\n+                // in package validation, because its fees should only be \"used\" once.\n+                results_final.emplace(wtxid, single_res);\n+                linearized_package.Skip(tx);\n+            } else {\n+                // Fee-related errors and missing inputs should not occur since we skip those.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342732928",
      "id" : 1342732928,
      "in_reply_to_id" : 1341583831,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QCHqA",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1606,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342732928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342732928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342746311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342746311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Blundering forward just means that we'll submit the tx and potentially get a failure, and then quit. So I think that's a safe thing to do. I've refined this condition a little bit so it's only if `LinearizeWithFees` returned true",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T14:11:17Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        linearized_package.LinearizeWithFees();\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (individual_fee_vsize.has_value() &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342746311",
      "id" : 1342746311,
      "in_reply_to_id" : 1341580751,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QCK7H",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1587,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342746311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342746311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342785931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342785931"
         }
      },
      "author_association" : "MEMBER",
      "body" : "not necessarily the case, could e.g. hit \"package-mempool-limits\" and m_tx_results would be empty.\r\n\r\ndocumented a couple lines above (\"there might not be one for every transaction\")",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T14:42:48Z",
      "diff_hunk" : "@@ -1483,79 +1471,180 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n             }\n+            m_viewmempool.PackageAddTransaction(tx);\n         }\n     }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n \n-    auto multi_submission_result = quit_early || txns_package_eval.empty() ? PackageMempoolAcceptResult(package_state_quit_early, {}) :\n-        AcceptSubPackage(txns_package_eval, args);\n-    PackageValidationState& package_state_final = multi_submission_result.m_state;\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n+    if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        Assume(linearized_package.LinearizeWithFees());\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (individual_fee_vsize.has_value() &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n+                continue;\n+            }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this subpackage won't meet feerate\n+                // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+                // subpackage that will bump it.\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(subpackage_fee_vsize->first, subpackage_fee_vsize->second), subpackage_wtxids));\n+                continue;\n+            }\n+            const auto subpackage_result = AcceptSubPackage(subpackage.value(), args);\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                // Add all transactions' results to results_final. There might not be one for every\n+                // transaction.\n+                if (subpackage_it != subpackage_result.m_tx_results.end()) {\n+                    // A tx would only be in results_final if we already found it (or same txid) in\n+                    // the mempool in the previous loop so it should not be included in\n+                    // FilteredTxns().\n+                    //\n+                    // A result should not already be present because anything already in mempool\n+                    // would have already been skipped, and a tx is never validated more than once\n+                    // in this loop:\n+                    // - if tx succeeds, it is skipped in subsequent iterations\n+                    // - if tx fails, we exit the loop immediately\n+                    Assume(results_final.count(subpackage_wtxid) == 0);\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                }\n+                // We detect that a transaction was successful by looking for it in mempool.\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    linearized_package.Skip(subpackage_tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342785931",
      "id" : 1342785931,
      "in_reply_to_id" : 1341614921,
      "line" : 1626,
      "node_id" : "PRRC_kwDOABII585QCUmL",
      "original_commit_id" : "5a647bbf72624a3394b08bfaad628bf2f7031135",
      "original_line" : 1626,
      "original_position" : 396,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 425,
      "pull_request_review_id" : 1652454713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342785931/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342785931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I couldn't figure out what dangles actually did, so I tried removing them here https://github.com/instagibbs/bitcoin/commit/0cf4c46fed552d7825e9b0b6e354b3b56c8a21b9\r\nand tests seem to pass with one inconsequential modification.\r\n\r\n> If it's the same thing, we should just remove that additional state.\r\n\r\nChanged these 2 bools to a `State` enum to better reflect the 3 possible states. Also, when someone calls `Skip*`, we now remove those txids from the transactions' `ancestor_subset`s so there is never a skipped tx in anyone's `ancestor_subset`. This makes the sorting handle skipped stuff transactions better, and I think it's cleaner.",
      "created_at" : "2023-10-02T14:47:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1743159432",
      "id" : 1743159432,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585n5oCI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743159432/reactions"
      },
      "updated_at" : "2023-10-02T14:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743159432",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342791900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342791900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a skip condition if linearization failed + subpackages are larger than 1, so effectively this.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T14:47:38Z",
      "diff_hunk" : "@@ -1578,84 +1581,99 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     // This deletes the temporary and mempool coins.\n     m_viewmempool.Reset();\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n-        linearized_package.LinearizeWithFees();\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        Assume(linearized_package.LinearizeWithFees());\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n                 continue;\n             }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n             const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n-            if (!subpackage || subpackage->size() > 1) {\n-                // No need to validate if we know this transaction would have missing inputs.\n-                // TODO: try to submit the ancestor subpackage.\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342791900",
      "id" : 1342791900,
      "in_reply_to_id" : 1341591726,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QCWDc",
      "original_commit_id" : "f101ad5cb2d77e0ce30e46842877067951c9bee3",
      "original_line" : 1608,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1652912034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342791900/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:47:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342791900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342793326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342793326"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added a `if (Assume(success))` if that's what you mean",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T14:48:53Z",
      "diff_hunk" : "@@ -122,6 +124,46 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {\n+            m_ready_to_calculate = false;\n+            return;\n+        }\n+        // Just forward these args onto MiniMinerMempoolEntry\n+        auto [mapiter, success] = m_entries_by_txid.emplace(txid, entry);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342793326",
      "id" : 1342793326,
      "in_reply_to_id" : 1340556803,
      "line" : 138,
      "node_id" : "PRRC_kwDOABII585QCWZu",
      "original_commit_id" : "7361707ee4a25bc69bc41f3a8e2536dcc1c6b041",
      "original_line" : 138,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 26,
      "pull_request_review_id" : 1652914428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342793326/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T14:48:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342793326",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342813949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342813949"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unsure if `SkipPackage` is cleaner than having an external bool tbh",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T15:06:02Z",
      "diff_hunk" : "@@ -1491,39 +1493,74 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n+            const auto single_package_res = AcceptSubPackage(subpackage.value(), args);\n             const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342813949",
      "id" : 1342813949,
      "in_reply_to_id" : 1341531411,
      "line" : 1530,
      "node_id" : "PRRC_kwDOABII585QCbb9",
      "original_commit_id" : "b2779c7bc8dacd182767f07e0c47b3d1f826792b",
      "original_line" : 1530,
      "original_position" : 110,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 326,
      "pull_request_review_id" : 1652947753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342813949/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T15:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342813949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342847577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342847577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok so to be clear this is a future-facing p2p issue. Makes sense.",
      "commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "created_at" : "2023-10-02T15:30:19Z",
      "diff_hunk" : "@@ -1136,7 +1144,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip());\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n+            return state.Invalid(TxValidationResult::TX_SINGLE_FAILURE, \"mempool full\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342847577",
      "id" : 1342847577,
      "in_reply_to_id" : 1340539454,
      "line" : 1148,
      "node_id" : "PRRC_kwDOABII585QCjpZ",
      "original_commit_id" : "080bab40691ae44638be3d3afd45ccc526bb1dae",
      "original_line" : 1148,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 78,
      "pull_request_review_id" : 1652999681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342847577/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-02T15:30:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342847577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342894358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342894358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Chainstate mismatches can result in a few more `PreCheck` results which are safe to continue processing likely. TX_MEMPOOL_POLICY is included here because if we somehow ended up asking for a too-large ancestor package or disagree on RBF policy, we should still make progress on it rather than immediately giving up. Ideally we'll only give up in the precheck loop if it's \"obviously\" bad, like consensus-invalid transactions or a DoS risk.\r\n\r\n```suggestion\r\n                case TxValidationResult::TX_MISSING_INPUTS:\r\n                case TxValidationResult::TX_CONFLICT:\r\n                case TxValidationResult::TX_PREMATURE_SPEND:\r\n                case TxValidationResult::TX_MEMPOOL_POLICY\r\n```\r\n\r\nOnes that occur in `PreCheck` that I didn't add: \r\nTX_CONSENSUS: obvious\r\nTX_NOT_STANDARD: DoS risk\r\nTX_INPUTS_NOT_STANDARD: DoS risk\r\nTX_WITNESS_MUTATED: DoS risk\r\n\r\nRan a fuzzer a while seeing if single txns being accepted implied it being accepted in an ancestor package and ran into this with `TX_PREMATURE_SPEND`",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-02T16:09:51Z",
      "diff_hunk" : "@@ -1483,79 +1473,198 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1342894358",
      "id" : 1342894358,
      "line" : 1495,
      "node_id" : "PRRC_kwDOABII585QCvEW",
      "original_commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "original_line" : 1495,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 1653071464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342894358/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-03T23:58:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1342894358",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343662559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343662559"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f\r\n\r\nAssume erase returns 1?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-03T07:55:52Z",
      "diff_hunk" : "@@ -6,14 +6,72 @@\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n-#include <util/hasher.h>\n+#include <util/check.h>\n \n #include <algorithm>\n #include <cassert>\n #include <iterator>\n #include <memory>\n #include <numeric>\n-#include <unordered_set>\n+\n+bool IsSorted(const Package& txns, std::unordered_set<uint256, SaltedTxidHasher>& later_txids)\n+{\n+    // Avoid misusing this function: later_txids should contain the txids of txns.\n+    Assume(txns.size() == later_txids.size());\n+\n+    // later_txids always contains the txids of this transaction and the ones that come later in\n+    // txns. If any transaction's input spends a tx in that set, we've found a parent placed later\n+    // than its child.\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                // The parent is a subsequent transaction in the package.\n+                return false;\n+            }\n+        }\n+        later_txids.erase(tx->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343662559",
      "id" : 1343662559,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QFqnf",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 32,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343662559/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343662559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343665504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343665504"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f\r\n\r\nnit: `mutated (even in case of false)`",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-03T07:58:08Z",
      "diff_hunk" : "@@ -49,6 +51,29 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n+/** If any direct dependencies exist between transactions (i.e. a child spending the output of a\n+ * parent), checks that all parents appear somewhere in the list before their respective children.\n+ * This function cannot detect indirect dependencies (e.g. a transaction's grandparent if its parent\n+ * is not present).\n+ * @returns true if sorted. False if any tx spends the output of a tx that appears later in txns.\n+ */\n+bool IsSorted(const Package& txns);\n+\n+/** IsSorted where a set of txids has been pre-populated. The set is assumed to be correct and\n+ * is mutated within this function. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343665504",
      "id" : 1343665504,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QFrVg",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 63,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343665504/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343665504",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343701837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343701837"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f\r\n\r\nWhy no test for `IsSorted` here?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-03T08:22:31Z",
      "diff_hunk" : "@@ -76,6 +77,33 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343701837",
      "id" : 1343701837,
      "line" : 132,
      "node_id" : "PRRC_kwDOABII585QF0NN",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 132,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 99,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343701837/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343701837",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343706070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343706070"
         }
      },
      "author_association" : "MEMBER",
      "body" : "656a2cd929e9680082f782f2e2842241ff3da87c\r\n\r\nnit: reordered compared to the actual function",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-03T08:25:11Z",
      "diff_hunk" : "@@ -124,7 +124,44 @@ struct TestChain100Setup : public TestingSetup {\n     void mineBlocks(int num_blocks);\n \n     /**\n-     * Create a transaction and submit to the mempool.\n+    * Create a transaction, optionally setting the fee based on the feerate.\n+    * Note: The feerate may not be met exactly depending on whether the signatures can have different sizes.\n+    *\n+    * @param input_transactions   The transactions to spend\n+    * @param input_height         The height of the block that included the input transactions.\n+    * @param inputs               Outpoints with which to construct transaction vin.\n+    * @param input_signing_keys   The keys to spend the input transactions.\n+    * @param outputs              Transaction vout.\n+    * @param feerate              The feerate the transaction should pay.\n+    * @param fee_output           The index of the output to take the fee from.\n+    * @return The transaction and the fee it pays\n+    */\n+    std::pair<CMutableTransaction, CAmount> CreateValidTransaction(const std::vector<CTransactionRef>& input_transactions,\n+                                                                   const std::vector<COutPoint>& inputs,\n+                                                                   int input_height,\n+                                                                   const std::vector<CKey>& input_signing_keys,\n+                                                                   const std::vector<CTxOut>& outputs,\n+                                                                   const std::optional<CFeeRate>& feerate,\n+                                                                   const std::optional<uint32_t>& fee_output);\n+    /**\n+     * Create a transaction and, optionally, submit to the mempool.\n+     *\n+     * @param input_transactions   The transactions to spend\n+     * @param input_height         The height of the block that included the input transaction(s).\n+     * @param inputs               Outpoints with which to construct transaction vin.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343706070",
      "id" : 1343706070,
      "line" : 150,
      "node_id" : "PRRC_kwDOABII585QF1PW",
      "original_commit_id" : "656a2cd929e9680082f782f2e2842241ff3da87c",
      "original_line" : 150,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 28,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343706070/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343706070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343706393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343706393"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same above",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-03T08:25:22Z",
      "diff_hunk" : "@@ -124,7 +124,44 @@ struct TestChain100Setup : public TestingSetup {\n     void mineBlocks(int num_blocks);\n \n     /**\n-     * Create a transaction and submit to the mempool.\n+    * Create a transaction, optionally setting the fee based on the feerate.\n+    * Note: The feerate may not be met exactly depending on whether the signatures can have different sizes.\n+    *\n+    * @param input_transactions   The transactions to spend\n+    * @param input_height         The height of the block that included the input transactions.\n+    * @param inputs               Outpoints with which to construct transaction vin.\n+    * @param input_signing_keys   The keys to spend the input transactions.\n+    * @param outputs              Transaction vout.\n+    * @param feerate              The feerate the transaction should pay.\n+    * @param fee_output           The index of the output to take the fee from.\n+    * @return The transaction and the fee it pays\n+    */\n+    std::pair<CMutableTransaction, CAmount> CreateValidTransaction(const std::vector<CTransactionRef>& input_transactions,\n+                                                                   const std::vector<COutPoint>& inputs,\n+                                                                   int input_height,\n+                                                                   const std::vector<CKey>& input_signing_keys,\n+                                                                   const std::vector<CTxOut>& outputs,\n+                                                                   const std::optional<CFeeRate>& feerate,\n+                                                                   const std::optional<uint32_t>& fee_output);\n+    /**\n+     * Create a transaction and, optionally, submit to the mempool.\n+     *\n+     * @param input_transactions   The transactions to spend\n+     * @param input_height         The height of the block that included the input transaction(s).\n+     * @param inputs               Outpoints with which to construct transaction vin.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343706393",
      "id" : 1343706393,
      "in_reply_to_id" : 1343706070,
      "line" : 150,
      "node_id" : "PRRC_kwDOABII585QF1UZ",
      "original_commit_id" : "656a2cd929e9680082f782f2e2842241ff3da87c",
      "original_line" : 150,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 28,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343706393/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343706393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343716305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343716305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e9e68a28f3e7eff8654c4eec97b75cf6e796ff51\r\n\r\nplease add the `(different)` in the commit message too, it helps a lot to understand what's going on.",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-03T08:31:49Z",
      "diff_hunk" : "@@ -54,6 +54,8 @@ enum class TxValidationResult {\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n     TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n+    TX_SINGLE_FAILURE,        //!< fee was insufficient to meet some policy, but can change if submitted in a (different) package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1343716305",
      "id" : 1343716305,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585QF3vR",
      "original_commit_id" : "e9e68a28f3e7eff8654c4eec97b75cf6e796ff51",
      "original_line" : 57,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/validation.h",
      "position" : 4,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343716305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1343716305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1344359880"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344359880"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oof jk, cannot assume that it isn't missing inputs. That crashes on the `test_mid_package_replacement` because the coin disappears mid evaluation. Removed that, kept the fee one.",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-03T16:04:48Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        linearized_package.LinearizeWithFees();\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (individual_fee_vsize.has_value() &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.\n+                // TODO: try to submit the ancestor subpackage.\n+                continue;\n+            }\n+            const auto& wtxid = tx->GetWitnessHash();\n+            const auto single_res = AcceptSingleTransaction(tx, single_args);\n+            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                // The transaction succeeded on its own and is now in the mempool. Don't include it\n+                // in package validation, because its fees should only be \"used\" once.\n+                results_final.emplace(wtxid, single_res);\n+                linearized_package.Skip(tx);\n+            } else {\n+                // Fee-related errors and missing inputs should not occur since we skip those.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1344359880",
      "id" : 1344359880,
      "in_reply_to_id" : 1341583831,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QIU3I",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1606,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1655590783,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344359880/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-03T16:04:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344359880",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1344865409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344865409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "rely_on_fees implies this?\r\n```suggestion\r\n            if (rely_on_fees && Assume(subpackage_fee_vsize.has_value()) &&\r\n```",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-03T23:21:36Z",
      "diff_hunk" : "@@ -1483,79 +1473,197 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n             }\n+            m_viewmempool.PackageAddTransaction(tx);\n         }\n     }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache that were pulled in during PreChecks or created in\n+    // PackageAddTransaction.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n+    if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        // If linearization fails, we will only consider submitting transactions by themselves.\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n+                continue;\n+            }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage) continue;\n+\n+            // If rely_on_fees is false, we can't be sure that we're getting subpackages that are\n+            // CPFPs. To avoid creating \"parent pays for child\" behavior, only consider\n+            // 1-transaction subpackages (thus disabling package CPFP).\n+            if (!rely_on_fees && subpackage->size() > 1) continue;\n+\n+            // No need to validate if we know this subpackage won't meet feerate\n+            // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+            // subpackage that will bump it.\n+            if (rely_on_fees && subpackage_fee_vsize.has_value() &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1344865409",
      "id" : 1344865409,
      "line" : 1587,
      "node_id" : "PRRC_kwDOABII585QKQSB",
      "original_commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "original_line" : 1587,
      "original_position" : 383,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 383,
      "pull_request_review_id" : 1653071464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344865409/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-03T23:58:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344865409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1344875000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344875000"
         }
      },
      "author_association" : "MEMBER",
      "body" : "weird indenting?",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-03T23:36:39Z",
      "diff_hunk" : "@@ -1483,79 +1473,197 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n             }\n+            m_viewmempool.PackageAddTransaction(tx);\n         }\n     }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache that were pulled in during PreChecks or created in\n+    // PackageAddTransaction.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n+    if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        // If linearization fails, we will only consider submitting transactions by themselves.\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n+                continue;\n+            }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage) continue;\n+\n+            // If rely_on_fees is false, we can't be sure that we're getting subpackages that are\n+            // CPFPs. To avoid creating \"parent pays for child\" behavior, only consider\n+            // 1-transaction subpackages (thus disabling package CPFP).\n+            if (!rely_on_fees && subpackage->size() > 1) continue;\n+\n+            // No need to validate if we know this subpackage won't meet feerate\n+            // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+            // subpackage that will bump it.\n+            if (rely_on_fees && subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1344875000",
      "id" : 1344875000,
      "line" : 1596,
      "node_id" : "PRRC_kwDOABII585QKSn4",
      "original_commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "original_line" : 1596,
      "original_position" : 392,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 392,
      "pull_request_review_id" : 1653071464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344875000/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-03T23:58:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344875000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345018074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345018074"
         }
      },
      "author_association" : "MEMBER",
      "body" : "still would like this done since it seems to be duplicated now",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-04T00:41:59Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345018074",
      "id" : 1345018074,
      "in_reply_to_id" : 1341572808,
      "line" : 1540,
      "node_id" : "PRRC_kwDOABII585QK1ja",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1540,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 336,
      "pull_request_review_id" : 1656465236,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345018074/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T00:41:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345018074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345335686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345335686"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Ran a fuzzer a while seeing if single txns being accepted implied it being accepted in an ancestor package and ran into this with TX_PREMATURE_SPEND\r\n\r\nTo clarify, the 1 transaction was accepted, and was rejected when submitted in a package with another premature spend tx?",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-04T07:38:45Z",
      "diff_hunk" : "@@ -1483,79 +1473,198 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345335686",
      "id" : 1345335686,
      "in_reply_to_id" : 1342894358,
      "line" : 1495,
      "node_id" : "PRRC_kwDOABII585QMDGG",
      "original_commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "original_line" : 1495,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 1656854364,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345335686/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T07:38:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345335686",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345336070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345336070"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-04T07:39:01Z",
      "diff_hunk" : "@@ -1483,79 +1473,197 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n             }\n+            m_viewmempool.PackageAddTransaction(tx);\n         }\n     }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache that were pulled in during PreChecks or created in\n+    // PackageAddTransaction.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n+    if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        // If linearization fails, we will only consider submitting transactions by themselves.\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n+                continue;\n+            }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage) continue;\n+\n+            // If rely_on_fees is false, we can't be sure that we're getting subpackages that are\n+            // CPFPs. To avoid creating \"parent pays for child\" behavior, only consider\n+            // 1-transaction subpackages (thus disabling package CPFP).\n+            if (!rely_on_fees && subpackage->size() > 1) continue;\n+\n+            // No need to validate if we know this subpackage won't meet feerate\n+            // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+            // subpackage that will bump it.\n+            if (rely_on_fees && subpackage_fee_vsize.has_value() &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345336070",
      "id" : 1345336070,
      "in_reply_to_id" : 1344865409,
      "line" : 1587,
      "node_id" : "PRRC_kwDOABII585QMDMG",
      "original_commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "original_line" : 1587,
      "original_position" : 383,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 383,
      "pull_request_review_id" : 1656854816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345336070/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T07:39:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345336070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345353803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345353803"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wait, why put `TX_PREMATURE_SPEND` in this category? Is that not akin to `TX_CONSENSUS`?",
      "commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "created_at" : "2023-10-04T07:53:16Z",
      "diff_hunk" : "@@ -1483,79 +1473,198 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345353803",
      "id" : 1345353803,
      "in_reply_to_id" : 1342894358,
      "line" : 1495,
      "node_id" : "PRRC_kwDOABII585QMHhL",
      "original_commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "original_line" : 1495,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 1656880127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345353803/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T07:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345353803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345473164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345473164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "5826d9960161ed8b6d6fe4985ff7495c4456c737\r\n\r\nnit: missing a verb",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-04T09:14:26Z",
      "diff_hunk" : "@@ -55,8 +55,11 @@ struct IteratorComparator\n     }\n };\n \n-/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n- * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a limited set of\n+ * transactions (e.g. subset of mempool or transactions that are not yet in mempool) instead of the entire\n+ * mempool, ignoring consensus rules. Callers may use this to calculate mining scores, bump fees, or\n+ * linearization order of a list of transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345473164",
      "id" : 1345473164,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QMkqM",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 61,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345473164/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345473164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345513618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345513618"
         }
      },
      "author_association" : "MEMBER",
      "body" : "347a060777b4b5be0384e5b813336618e59fbc56\r\n\r\nThis line can be moved inside the following `if`.",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-04T09:43:23Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345513618",
      "id" : 1345513618,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QMuiS",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345513618/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345513618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345518237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345518237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "347a060777b4b5be0384e5b813336618e59fbc56\r\n\r\nThis could be double-checked in the following way: `Assume(entry.ancestor_subset.empty())` after the recursive `visit` call in the `visit function`",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-04T09:46:47Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345518237",
      "id" : 1345518237,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII585QMvqd",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 52,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345518237/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345518237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345527268"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345527268"
         }
      },
      "author_association" : "MEMBER",
      "body" : "347a060777b4b5be0384e5b813336618e59fbc56\r\n\r\nwhy not `for (const auto& tx : txns_in) {` to avoid `i`?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-04T09:53:39Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    if (!IsConsistent(txns_in)) return;\n+\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345527268",
      "id" : 1345527268,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QMx3k",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345527268/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345527268",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345534171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345534171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "347a060777b4b5be0384e5b813336618e59fbc56\r\n\r\nDoes order matter? If not, maybe switch to `unordered_set`?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-04T09:58:55Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345534171",
      "id" : 1345534171,
      "line" : 76,
      "node_id" : "PRRC_kwDOABII585QMzjb",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 76,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 76,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345534171/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345534171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345555081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345555081"
         }
      },
      "author_association" : "MEMBER",
      "body" : "347a060777b4b5be0384e5b813336618e59fbc56\r\n\r\nDuplicate text",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-04T10:16:35Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345555081",
      "id" : 1345555081,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QM4qJ",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 149,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345555081/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345555081",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345560559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345560559"
         }
      },
      "author_association" : "MEMBER",
      "body" : "347a060777b4b5be0384e5b813336618e59fbc56\r\n\r\nIf you drop (skip?) the last transaction, should this become false again?\r\nOr not even the last but some connecting transaction",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-04T10:20:57Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345560559",
      "id" : 1345560559,
      "line" : 33,
      "node_id" : "PRRC_kwDOABII585QM5_v",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 33,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 33,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345560559/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345560559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345580276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345580276"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T10:36:39Z",
      "diff_hunk" : "@@ -1483,79 +1473,197 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, continue with the other\n+                    // individual transactions but abort package validation because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n             }\n+            m_viewmempool.PackageAddTransaction(tx);\n         }\n     }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool\n+    // and copies in CCoinsViewCache that were pulled in during PreChecks or created in\n+    // PackageAddTransaction.\n+    for (const auto& outpoint : m_viewmempool.GetNonBaseCoins()) {\n+        // In addition to resetting m_viewmempool, we also need to manually delete these coins from\n+        // m_view because it caches copies of the coins it fetched from m_viewmempool previously.\n+        m_view.Uncache(outpoint);\n+    }\n+    // This deletes the temporary and mempool coins.\n+    m_viewmempool.Reset();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n+    if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n+        // If linearization fails, we will only consider submitting transactions by themselves.\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n+                continue;\n+            }\n+            const auto subpackage_fee_vsize = linearized_package.FilteredAncestorFeeAndVsize(tx);\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage) continue;\n+\n+            // If rely_on_fees is false, we can't be sure that we're getting subpackages that are\n+            // CPFPs. To avoid creating \"parent pays for child\" behavior, only consider\n+            // 1-transaction subpackages (thus disabling package CPFP).\n+            if (!rely_on_fees && subpackage->size() > 1) continue;\n+\n+            // No need to validate if we know this subpackage won't meet feerate\n+            // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+            // subpackage that will bump it.\n+            if (rely_on_fees && subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345580276",
      "id" : 1345580276,
      "in_reply_to_id" : 1344875000,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QM-z0",
      "original_commit_id" : "6d1e2097e87f10eb181ecc48961a0d55ff635c69",
      "original_line" : 1596,
      "original_position" : 392,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1657211823,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345580276/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T10:36:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345580276",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345580975"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345580975"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok I added all of these except for premature spend (see question above).",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T10:37:15Z",
      "diff_hunk" : "@@ -1483,79 +1473,198 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345580975",
      "id" : 1345580975,
      "in_reply_to_id" : 1342894358,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QM--v",
      "original_commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "original_line" : 1495,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1657212759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345580975/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T10:37:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345580975",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed @instagibbs comments, cleaned up the commits a little bit so they're (hopefully) easier to review.",
      "created_at" : "2023-10-04T10:38:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1746606753",
      "id" : 1746606753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585oGxqh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1746606753/reactions"
      },
      "updated_at" : "2023-10-04T10:38:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1746606753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345582619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345582619"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, see `CleanupTemporaryCoins`",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T10:38:39Z",
      "diff_hunk" : "@@ -1558,12 +1558,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                     // This error may happen if we have a different policy from our peer or we\n                     // have a conflicting transaction they didn't have.\n                     quit_early = true;\n-                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n                     package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                     break;\n                 }\n                 }\n             }\n+            linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins (outputs of the transactions in the package) in CCoinsViewMemPool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1345582619",
      "id" : 1345582619,
      "in_reply_to_id" : 1341572808,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QM_Yb",
      "original_commit_id" : "ff737bfde45cd51ea52f5e0f23b108aeed332d5d",
      "original_line" : 1540,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1657214982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345582619/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T10:39:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345582619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346167261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346167261"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Wait, why put TX_PREMATURE_SPEND in this category?\r\n\r\nAlice's block height is N\r\nBob's block height is N - 1\r\n\r\nAlice sends:\r\nTxA: nlocktime of N\r\nTxB: spends TxA nlocktime of N + 1\r\n\r\nBob will reject all the transactions because of a simple block race instead of taking the valid TxA. ",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T16:35:39Z",
      "diff_hunk" : "@@ -1483,79 +1473,198 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346167261",
      "id" : 1346167261,
      "in_reply_to_id" : 1342894358,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QPOHd",
      "original_commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "original_line" : 1495,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1658060102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346167261/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T16:36:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346167261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346244784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346244784"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"There is no check of the parent ordering itself (i.e first parent spent coming first)\"",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T17:42:25Z",
      "diff_hunk" : "@@ -49,6 +51,29 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n+/** If any direct dependencies exist between transactions (i.e. a child spending the output of a\n+ * parent), checks that all parents appear somewhere in the list before their respective children.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346244784",
      "id" : 1346244784,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585QPhCw",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 55,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 16,
      "pull_request_review_id" : 1658174383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346244784/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T18:57:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346244784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346292572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346292572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "As with this PR, the only code place where we fulfilled a `TX_UNKNOWN` as `TxValidationResult` is within `AcceptPackage()`, if we donât find wtxid in `individual_results_nonfinal`. AFAICT, this can happen when we have caught errors in subpackage and we break early from linearized package validation. If so, I think comment can be extended âtransaction was not validated, early error its in package was caughtâ (could be called `TX_PACKAGE_FAILURE`)",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T18:25:49Z",
      "diff_hunk" : "@@ -54,6 +54,8 @@ enum class TxValidationResult {\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n     TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n+    TX_SINGLE_FAILURE,        //!< fee was insufficient to meet some policy, but can change if submitted in a (different) package\n+    TX_UNKNOWN,               //!< transaction was not validated",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346292572",
      "id" : 1346292572,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII585QPstc",
      "original_commit_id" : "e9e68a28f3e7eff8654c4eec97b75cf6e796ff51",
      "original_line" : 58,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/consensus/validation.h",
      "position" : 5,
      "pull_request_review_id" : 1658174383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346292572/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T18:57:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346292572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346306603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346306603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think I might not the first one to make the comment, though using âsequence numberâ can be confusing as we have already the transaction `nSequence`. I guess order number or ancestor number could be used.",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T18:39:02Z",
      "diff_hunk" : "@@ -72,7 +75,10 @@ class MiniMiner\n     // the same tx will have the same bumpfee. Excludes non-mempool transactions.\n     std::map<uint256, std::vector<COutPoint>> m_requested_outpoints_by_txid;\n \n-    // What we're trying to calculate.\n+    // Txid to a sequence number representing the order in which this transaction was included.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346306603",
      "id" : 1346306603,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585QPwIr",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 78,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 52,
      "pull_request_review_id" : 1658174383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346306603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T18:57:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346306603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346316716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346316716"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it can precise what is yield by âMiniMiner algorithms wonât workâ e.g calculate non-optimal mining scores.",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T18:48:34Z",
      "diff_hunk" : "@@ -103,13 +109,28 @@ class MiniMiner\n     bool IsReadyToCalculate() const { return m_ready_to_calculate; }\n \n     /** Build a block template until the target feerate is hit. */\n-    void BuildMockTemplate(const CFeeRate& target_feerate);\n+    void BuildMockTemplate(std::optional<CFeeRate> target_feerate);\n \n     /** Returns set of txids in the block template if one has been constructed. */\n     std::set<uint256> GetMockTemplateTxids() const { return m_in_block; }\n \n+    /** Constructor that takes a list of outpoints that may or may not belong to transactions in\n+     * mempool. */\n     MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints);\n \n+    /** Constructor in which MiniMinerMempoolEntry entries have been constructed manually,\n+     * presumably because these transactions are not in the mempool (yet). It is assumed that all\n+     * values are correct, otherwise MiniMiner algorithms won't work. Callers should check",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346316716",
      "id" : 1346316716,
      "line" : 123,
      "node_id" : "PRRC_kwDOABII585QPyms",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 123,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 75,
      "pull_request_review_id" : 1658174383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346316716/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T18:57:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346316716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346325423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346325423"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could check by `wtxid` rather than `txid` ? One txid can have different `wtxid`s different witness weight and as such mining score, unless wtxid support is disregarded for simplicity as a design decision ?",
      "commit_id" : "23f8647785428788fae33beb908c1e2b3faacb26",
      "created_at" : "2023-10-04T18:56:49Z",
      "diff_hunk" : "@@ -122,6 +124,47 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346325423",
      "id" : 1346325423,
      "line" : 133,
      "node_id" : "PRRC_kwDOABII585QP0uv",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 133,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 21,
      "pull_request_review_id" : 1658174383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346325423/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-04T18:57:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346325423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346989979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346989979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "An explicit assumption enforced in the `MiniMiner` and `AncestorPackage` constructors is that no transaction conflicts with each other, which includes not having the same txid.\r\nGiven we're constantly looking up parent transactions using prevouts, having a txid-based map is much more useful than a wtxid-based one.",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T08:12:05Z",
      "diff_hunk" : "@@ -122,6 +124,47 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1346989979",
      "id" : 1346989979,
      "in_reply_to_id" : 1346325423,
      "line" : 133,
      "node_id" : "PRRC_kwDOABII585QSW-b",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 133,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 21,
      "pull_request_review_id" : 1659175759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346989979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T12:26:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1346989979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347282542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347282542"
         }
      },
      "author_association" : "MEMBER",
      "body" : "f2f0834c85af8ecca05d32c0016efe1620764f63\r\n\r\ncould start with i{10}?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-05T11:37:52Z",
      "diff_hunk" : "@@ -105,6 +153,242 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     package_with_dup_tx.emplace_back(create_placeholder_tx(1, 1));\n     BOOST_CHECK(IsConsistent(package_with_dup_tx));\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(TestIsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347282542",
      "id" : 1347282542,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QTeZu",
      "original_commit_id" : "f2f0834c85af8ecca05d32c0016efe1620764f63",
      "original_line" : 186,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347282542/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347282542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347283786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347283786"
         }
      },
      "author_association" : "MEMBER",
      "body" : "f2f0834c85af8ecca05d32c0016efe1620764f63\r\n\r\nTest `IsChildWithParents`?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-05T11:38:59Z",
      "diff_hunk" : "@@ -105,6 +153,242 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     package_with_dup_tx.emplace_back(create_placeholder_tx(1, 1));\n     BOOST_CHECK(IsConsistent(package_with_dup_tx));\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(TestIsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(49 * COIN * 99, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347283786",
      "id" : 1347283786,
      "line" : 213,
      "node_id" : "PRRC_kwDOABII585QTetK",
      "original_commit_id" : "f2f0834c85af8ecca05d32c0016efe1620764f63",
      "original_line" : 213,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 180,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347283786/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347283786",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347287850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347287850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "f2f0834c85af8ecca05d32c0016efe1620764f63\r\n\r\nCould you summarize what is checked in this block, in a code comment? It looks like you basically compare package functioning to mempool functioning.",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-05T11:41:50Z",
      "diff_hunk" : "@@ -105,6 +153,242 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     package_with_dup_tx.emplace_back(create_placeholder_tx(1, 1));\n     BOOST_CHECK(IsConsistent(package_with_dup_tx));\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(TestIsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(49 * COIN * 99, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+\n+        // Note that AncestorPackage will sort the package so that parents are before the child, but\n+        // this does not necessarily mean that the ith parent in packageified matches the ith parent\n+        // in package.\n+        for (auto i{0}; i < 99; ++i) {\n+            auto filtered_ancestors{packageified.FilteredAncestorSet(package.at(i))};\n+            BOOST_CHECK(filtered_ancestors.has_value());\n+            BOOST_CHECK_EQUAL(filtered_ancestors->size(), 1);\n+            BOOST_CHECK(TestIsAncestorPackage(filtered_ancestors.value()));\n+            if (i < 50) packageified.Skip(package.at(i));\n+        }\n+\n+        // After excluding 50 of the parents, the child's ancestor set has size 50.\n+        auto last_filtered_ancestors{packageified.FilteredAncestorSet(package.back())};\n+        BOOST_CHECK(last_filtered_ancestors.has_value());\n+        BOOST_CHECK_EQUAL(last_filtered_ancestors->size(), 50);\n+        BOOST_CHECK(TestIsAncestorPackage(last_filtered_ancestors.value()));\n+\n+        packageified.SkipWithDescendants(package.at(75));\n+        for (auto i{50}; i < 99; ++i) {\n+            if (i == 75) {\n+                BOOST_CHECK(!packageified.FilteredAncestorSet(package.at(i)));\n+            } else {\n+                auto filtered_ancestors{packageified.FilteredAncestorSet(package.at(i))};\n+                BOOST_CHECK(filtered_ancestors.has_value());\n+                BOOST_CHECK_EQUAL(filtered_ancestors->size(), 1);\n+            }\n+        }\n+        BOOST_CHECK(!packageified.FilteredAncestorSet(package.back()));\n+    }\n+\n+    // Heavily inter-connected set of 50 transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347287850",
      "id" : 1347287850,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QTfsq",
      "original_commit_id" : "f2f0834c85af8ecca05d32c0016efe1620764f63",
      "original_line" : 243,
      "original_position" : 153,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1654566054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347287850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-09T08:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347287850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I reviewed the code up to 225e739e6400a87e65ffba373df3daa1b57337da.\r\nI'm pretty sure I don't 100% understand all the stuff here at the high level (the discussion in the comments), but hopefully the review is still useful.\r\n",
      "created_at" : "2023-10-05T12:00:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1748744218",
      "id" : 1748744218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585oO7ga",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1748744218/reactions"
      },
      "updated_at" : "2023-10-05T12:00:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1748744218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347342678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347342678"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment above the `Assume` in `MiniMiner` and mentioned the comment above the constructor declaration, hopefully it's clearer now.",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T12:26:32Z",
      "diff_hunk" : "@@ -122,6 +124,47 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,\n+                     const std::map<uint256, std::set<uint256>>& descendant_caches)\n+{\n+    for (const auto& entry : manual_entries) {\n+        const auto& txid = entry.GetTx().GetHash();\n+        // We need to know the descendant set of every transaction.\n+        if (!Assume(descendant_caches.count(txid) > 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347342678",
      "id" : 1347342678,
      "in_reply_to_id" : 1346325423,
      "line" : 133,
      "node_id" : "PRRC_kwDOABII585QTtFW",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 133,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 21,
      "pull_request_review_id" : 1659728093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347342678/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T12:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347342678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347342942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347342942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed to `m_inclusion_order`",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T12:26:45Z",
      "diff_hunk" : "@@ -72,7 +75,10 @@ class MiniMiner\n     // the same tx will have the same bumpfee. Excludes non-mempool transactions.\n     std::map<uint256, std::vector<COutPoint>> m_requested_outpoints_by_txid;\n \n-    // What we're trying to calculate.\n+    // Txid to a sequence number representing the order in which this transaction was included.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347342942",
      "id" : 1347342942,
      "in_reply_to_id" : 1346306603,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QTtJe",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 78,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1659728093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347342942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T12:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347342942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347346851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347346851"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added \"otherwise the results may be incorrect\" if that works?",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T12:29:57Z",
      "diff_hunk" : "@@ -103,13 +109,28 @@ class MiniMiner\n     bool IsReadyToCalculate() const { return m_ready_to_calculate; }\n \n     /** Build a block template until the target feerate is hit. */\n-    void BuildMockTemplate(const CFeeRate& target_feerate);\n+    void BuildMockTemplate(std::optional<CFeeRate> target_feerate);\n \n     /** Returns set of txids in the block template if one has been constructed. */\n     std::set<uint256> GetMockTemplateTxids() const { return m_in_block; }\n \n+    /** Constructor that takes a list of outpoints that may or may not belong to transactions in\n+     * mempool. */\n     MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints);\n \n+    /** Constructor in which MiniMinerMempoolEntry entries have been constructed manually,\n+     * presumably because these transactions are not in the mempool (yet). It is assumed that all\n+     * values are correct, otherwise MiniMiner algorithms won't work. Callers should check",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347346851",
      "id" : 1347346851,
      "in_reply_to_id" : 1346316716,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QTuGj",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 123,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1659728093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347346851/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T12:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347346851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347347827"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347347827"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry could you clarify what you mean by \"first parent?\"\r\nI've added a sentence \"No other ordering is enforced\" to the comment.",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T12:30:49Z",
      "diff_hunk" : "@@ -49,6 +51,29 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n+/** If any direct dependencies exist between transactions (i.e. a child spending the output of a\n+ * parent), checks that all parents appear somewhere in the list before their respective children.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347347827",
      "id" : 1347347827,
      "in_reply_to_id" : 1346244784,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585QTuVz",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 55,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 16,
      "pull_request_review_id" : 1659728093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347347827/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T12:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347347827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347349654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347349654"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Didn't rename because I don't like having the word \"failure\" in it (this tx didn't fail!). But added a \"because package failed\" to the comment.",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T12:32:25Z",
      "diff_hunk" : "@@ -54,6 +54,8 @@ enum class TxValidationResult {\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n     TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n+    TX_SINGLE_FAILURE,        //!< fee was insufficient to meet some policy, but can change if submitted in a (different) package\n+    TX_UNKNOWN,               //!< transaction was not validated",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347349654",
      "id" : 1347349654,
      "in_reply_to_id" : 1346292572,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QTuyW",
      "original_commit_id" : "e9e68a28f3e7eff8654c4eec97b75cf6e796ff51",
      "original_line" : 58,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 1659728093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347349654/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T12:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347349654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347576850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347576850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh I see what you mean. I wonder how common this is ð¤ I was mostly trying to catch \"my view of the unconfirmed ancestor set has +/- transactions diff.\" Will think about this some more.",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T15:06:42Z",
      "diff_hunk" : "@@ -1483,79 +1473,198 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347576850",
      "id" : 1347576850,
      "in_reply_to_id" : 1342894358,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QUmQS",
      "original_commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "original_line" : 1495,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1660114829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347576850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T15:06:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347576850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347584842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347584842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure it's common, but Core wallet/others will run into this once in a while due to anti-sniping nlocktime being set; I've had it happen with deployed systems before, so it's definitely possible.",
      "commit_id" : "c8009672700329323c9301dd80533a42e75ee1cb",
      "created_at" : "2023-10-05T15:12:06Z",
      "diff_hunk" : "@@ -1483,79 +1473,198 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_package_res = AcceptSubPackage({tx}, args);\n-            const auto& single_res = single_package_res.m_tx_results.at(wtxid);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1347584842",
      "id" : 1347584842,
      "in_reply_to_id" : 1342894358,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QUoNK",
      "original_commit_id" : "ebcee2f52e402867bd69bf8d015757c902ed7141",
      "original_line" : 1495,
      "original_position" : 291,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1660131403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347584842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-05T15:12:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1347584842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-05T23:53:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1749806307",
      "id" : 1749806307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585oS-zj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1749806307/reactions"
      },
      "updated_at" : "2023-10-05T23:53:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1749806307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Last push is just a rebase, will get to @naumenkogs's review asap (thanks!)",
      "created_at" : "2023-10-09T08:39:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1752567766",
      "id" : 1752567766,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585odg_W",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1752567766/reactions"
      },
      "updated_at" : "2023-10-09T08:39:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1752567766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352096146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352096146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "refactored to reduce the number of accesses to `m_txid_to_entry`",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:14:48Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352096146",
      "id" : 1352096146,
      "in_reply_to_id" : 1345513618,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ql1mS",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1667130354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352096146/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:14:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352096146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352099099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352099099"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is already there? Assuming not empty.",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:16:53Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352099099",
      "id" : 1352099099,
      "in_reply_to_id" : 1345518237,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII585Ql2Ub",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 52,
      "pull_request_review_id" : 1667133890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352099099/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:16:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352099099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352105232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352105232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm thinking that `set` is actually better than `unordered_set` here, as it uses less memory and shouldn't be any slower if we only expect 25 elements or fewer. I've actually been wondering if the other `unordered_set`s used in packages.cpp should also be sets instead...",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:21:14Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352105232",
      "id" : 1352105232,
      "in_reply_to_id" : 1345534171,
      "line" : 76,
      "node_id" : "PRRC_kwDOABII585Ql30Q",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 76,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 76,
      "pull_request_review_id" : 1667141304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352105232/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:21:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352105232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352155258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352155258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:37:15Z",
      "diff_hunk" : "@@ -6,14 +6,72 @@\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n-#include <util/hasher.h>\n+#include <util/check.h>\n \n #include <algorithm>\n #include <cassert>\n #include <iterator>\n #include <memory>\n #include <numeric>\n-#include <unordered_set>\n+\n+bool IsSorted(const Package& txns, std::unordered_set<uint256, SaltedTxidHasher>& later_txids)\n+{\n+    // Avoid misusing this function: later_txids should contain the txids of txns.\n+    Assume(txns.size() == later_txids.size());\n+\n+    // later_txids always contains the txids of this transaction and the ones that come later in\n+    // txns. If any transaction's input spends a tx in that set, we've found a parent placed later\n+    // than its child.\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                // The parent is a subsequent transaction in the package.\n+                return false;\n+            }\n+        }\n+        later_txids.erase(tx->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352155258",
      "id" : 1352155258,
      "in_reply_to_id" : 1343662559,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QmEB6",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 32,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352155258/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352155258",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352155759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352155759"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:37:22Z",
      "diff_hunk" : "@@ -49,6 +51,29 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n+/** If any direct dependencies exist between transactions (i.e. a child spending the output of a\n+ * parent), checks that all parents appear somewhere in the list before their respective children.\n+ * This function cannot detect indirect dependencies (e.g. a transaction's grandparent if its parent\n+ * is not present).\n+ * @returns true if sorted. False if any tx spends the output of a tx that appears later in txns.\n+ */\n+bool IsSorted(const Package& txns);\n+\n+/** IsSorted where a set of txids has been pre-populated. The set is assumed to be correct and\n+ * is mutated within this function. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352155759",
      "id" : 1352155759,
      "in_reply_to_id" : 1343665504,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QmEJv",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 63,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352155759/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352155759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352156110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352156110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a test",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:37:28Z",
      "diff_hunk" : "@@ -76,6 +77,33 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352156110",
      "id" : 1352156110,
      "in_reply_to_id" : 1343701837,
      "line" : 132,
      "node_id" : "PRRC_kwDOABII585QmEPO",
      "original_commit_id" : "c2150e8fd93172205c0ad4bb7c8fa0437e82e15f",
      "original_line" : 132,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 99,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352156110/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352156110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352157356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352157356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed ordering on all the docs",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:37:50Z",
      "diff_hunk" : "@@ -124,7 +124,44 @@ struct TestChain100Setup : public TestingSetup {\n     void mineBlocks(int num_blocks);\n \n     /**\n-     * Create a transaction and submit to the mempool.\n+    * Create a transaction, optionally setting the fee based on the feerate.\n+    * Note: The feerate may not be met exactly depending on whether the signatures can have different sizes.\n+    *\n+    * @param input_transactions   The transactions to spend\n+    * @param input_height         The height of the block that included the input transactions.\n+    * @param inputs               Outpoints with which to construct transaction vin.\n+    * @param input_signing_keys   The keys to spend the input transactions.\n+    * @param outputs              Transaction vout.\n+    * @param feerate              The feerate the transaction should pay.\n+    * @param fee_output           The index of the output to take the fee from.\n+    * @return The transaction and the fee it pays\n+    */\n+    std::pair<CMutableTransaction, CAmount> CreateValidTransaction(const std::vector<CTransactionRef>& input_transactions,\n+                                                                   const std::vector<COutPoint>& inputs,\n+                                                                   int input_height,\n+                                                                   const std::vector<CKey>& input_signing_keys,\n+                                                                   const std::vector<CTxOut>& outputs,\n+                                                                   const std::optional<CFeeRate>& feerate,\n+                                                                   const std::optional<uint32_t>& fee_output);\n+    /**\n+     * Create a transaction and, optionally, submit to the mempool.\n+     *\n+     * @param input_transactions   The transactions to spend\n+     * @param input_height         The height of the block that included the input transaction(s).\n+     * @param inputs               Outpoints with which to construct transaction vin.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352157356",
      "id" : 1352157356,
      "in_reply_to_id" : 1343706070,
      "line" : 150,
      "node_id" : "PRRC_kwDOABII585QmEis",
      "original_commit_id" : "656a2cd929e9680082f782f2e2842241ff3da87c",
      "original_line" : 150,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 28,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352157356/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352157356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352157825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352157825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:37:59Z",
      "diff_hunk" : "@@ -54,6 +54,8 @@ enum class TxValidationResult {\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n     TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n+    TX_SINGLE_FAILURE,        //!< fee was insufficient to meet some policy, but can change if submitted in a (different) package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352157825",
      "id" : 1352157825,
      "in_reply_to_id" : 1343716305,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585QmEqB",
      "original_commit_id" : "e9e68a28f3e7eff8654c4eec97b75cf6e796ff51",
      "original_line" : 57,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/validation.h",
      "position" : 4,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352157825/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352157825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352162036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352162036"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Pretty sure this is correct. Changed it so it's a bit easier to parse maybe",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:39:10Z",
      "diff_hunk" : "@@ -55,8 +55,11 @@ struct IteratorComparator\n     }\n };\n \n-/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n- * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a limited set of\n+ * transactions (e.g. subset of mempool or transactions that are not yet in mempool) instead of the entire\n+ * mempool, ignoring consensus rules. Callers may use this to calculate mining scores, bump fees, or\n+ * linearization order of a list of transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352162036",
      "id" : 1352162036,
      "in_reply_to_id" : 1345473164,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QmFr0",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 61,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352162036/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352162036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352163571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352163571"
         }
      },
      "author_association" : "MEMBER",
      "body" : "changed",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:39:30Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    if (!IsConsistent(txns_in)) return;\n+\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352163571",
      "id" : 1352163571,
      "in_reply_to_id" : 1345527268,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QmGDz",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : null,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352163571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352163571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352167161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352167161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it should be changed to false (think of it as applying to `Txns`, not `FilteredTxns`), but good point, so I've added a sentence about this in the doc.",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:40:11Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352167161",
      "id" : 1352167161,
      "in_reply_to_id" : 1345560559,
      "line" : 33,
      "node_id" : "PRRC_kwDOABII585QmG75",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 33,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 33,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352167161/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352167161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352167584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352167584"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:40:17Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352167584",
      "id" : 1352167584,
      "in_reply_to_id" : 1345555081,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QmHCg",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 149,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352167584/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352167584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352168828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352168828"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:40:35Z",
      "diff_hunk" : "@@ -105,6 +153,242 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     package_with_dup_tx.emplace_back(create_placeholder_tx(1, 1));\n     BOOST_CHECK(IsConsistent(package_with_dup_tx));\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(TestIsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352168828",
      "id" : 1352168828,
      "in_reply_to_id" : 1347282542,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QmHV8",
      "original_commit_id" : "f2f0834c85af8ecca05d32c0016efe1620764f63",
      "original_line" : 186,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352168828/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352168828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352169792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352169792"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added, though it has to be removed later when that function is deleted",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:40:46Z",
      "diff_hunk" : "@@ -105,6 +153,242 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     package_with_dup_tx.emplace_back(create_placeholder_tx(1, 1));\n     BOOST_CHECK(IsConsistent(package_with_dup_tx));\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(TestIsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(49 * COIN * 99, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352169792",
      "id" : 1352169792,
      "in_reply_to_id" : 1347283786,
      "line" : 213,
      "node_id" : "PRRC_kwDOABII585QmHlA",
      "original_commit_id" : "f2f0834c85af8ecca05d32c0016efe1620764f63",
      "original_line" : 213,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 180,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352169792/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352169792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352170229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352170229"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added summary",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T10:40:51Z",
      "diff_hunk" : "@@ -105,6 +153,242 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     package_with_dup_tx.emplace_back(create_placeholder_tx(1, 1));\n     BOOST_CHECK(IsConsistent(package_with_dup_tx));\n }\n+BOOST_FIXTURE_TEST_CASE(ancestorpackage, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(TestIsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Skip(package[i]);\n+        packageified.SkipWithDescendants(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.FilteredAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(TestIsAncestorPackage(*packageified.FilteredAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.FilteredAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(49 * COIN * 99, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(TestIsAncestorPackage(packageified.Txns()));\n+\n+        // Note that AncestorPackage will sort the package so that parents are before the child, but\n+        // this does not necessarily mean that the ith parent in packageified matches the ith parent\n+        // in package.\n+        for (auto i{0}; i < 99; ++i) {\n+            auto filtered_ancestors{packageified.FilteredAncestorSet(package.at(i))};\n+            BOOST_CHECK(filtered_ancestors.has_value());\n+            BOOST_CHECK_EQUAL(filtered_ancestors->size(), 1);\n+            BOOST_CHECK(TestIsAncestorPackage(filtered_ancestors.value()));\n+            if (i < 50) packageified.Skip(package.at(i));\n+        }\n+\n+        // After excluding 50 of the parents, the child's ancestor set has size 50.\n+        auto last_filtered_ancestors{packageified.FilteredAncestorSet(package.back())};\n+        BOOST_CHECK(last_filtered_ancestors.has_value());\n+        BOOST_CHECK_EQUAL(last_filtered_ancestors->size(), 50);\n+        BOOST_CHECK(TestIsAncestorPackage(last_filtered_ancestors.value()));\n+\n+        packageified.SkipWithDescendants(package.at(75));\n+        for (auto i{50}; i < 99; ++i) {\n+            if (i == 75) {\n+                BOOST_CHECK(!packageified.FilteredAncestorSet(package.at(i)));\n+            } else {\n+                auto filtered_ancestors{packageified.FilteredAncestorSet(package.at(i))};\n+                BOOST_CHECK(filtered_ancestors.has_value());\n+                BOOST_CHECK_EQUAL(filtered_ancestors->size(), 1);\n+            }\n+        }\n+        BOOST_CHECK(!packageified.FilteredAncestorSet(package.back()));\n+    }\n+\n+    // Heavily inter-connected set of 50 transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352170229",
      "id" : 1352170229,
      "in_reply_to_id" : 1347287850,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QmHr1",
      "original_commit_id" : "f2f0834c85af8ecca05d32c0016efe1620764f63",
      "original_line" : 243,
      "original_position" : 153,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1667199001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352170229/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T10:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352170229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352739549"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352739549"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ah, maybe actually too many verbs here depending on how \"bump fees\" is read. \"fee bumps\"?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-10T14:55:46Z",
      "diff_hunk" : "@@ -55,8 +55,11 @@ struct IteratorComparator\n     }\n };\n \n-/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n- * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a limited set of\n+ * transactions (e.g. subset of mempool or transactions that are not yet in mempool) instead of the entire\n+ * mempool, ignoring consensus rules. Callers may use this to calculate mining scores, bump fees, or\n+ * linearization order of a list of transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1352739549",
      "id" : 1352739549,
      "in_reply_to_id" : 1345473164,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QoSrd",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 61,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1668025934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352739549/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-10T14:55:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1352739549",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1354490743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1354490743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "![image](https://github.com/bitcoin/bitcoin/assets/25183001/f3bc4ba5-c754-407d-9833-d641b70286b1)\r\n\r\nNot sure what to do, leaving the comment as is until there's a concrete suggestion that people prefer.",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-11T09:02:05Z",
      "diff_hunk" : "@@ -55,8 +55,11 @@ struct IteratorComparator\n     }\n };\n \n-/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n- * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a limited set of\n+ * transactions (e.g. subset of mempool or transactions that are not yet in mempool) instead of the entire\n+ * mempool, ignoring consensus rules. Callers may use this to calculate mining scores, bump fees, or\n+ * linearization order of a list of transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1354490743",
      "id" : 1354490743,
      "in_reply_to_id" : 1345473164,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Qu-N3",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 61,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1670498373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1354490743/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-11T09:02:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1354490743",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357172527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357172527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "quit_early is only set for a few cases, not all failures sans `TX_SINGLE_FAILURE`, and if it's set nothing is submitted.\r\n\r\n```suggestion\r\n    // call PreChecks() but may quit_early and not submit any transactions to the mempool.\r\n```",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-12T17:38:17Z",
      "diff_hunk" : "@@ -1403,63 +1433,32 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!CheckPackage(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n+    AncestorPackage linearized_package{package};\n \n-    // IsChildWithParents() guarantees the package is > 1 transactions.\n-    assert(package.size() > 1);\n-    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n-    // be sorted, so the last transaction is the child.\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    if (!linearized_package.IsAncestorPackage()) {\n+        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"not-ancestor-package\");\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-    // Protect against bugs where we pull more inputs from disk that miss being added to\n-    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n-    m_view.SetBackend(m_dummy);\n+    Assume(IsPackageWellFormed(linearized_package.Txns(), package_state_quit_early, /*require_sorted=*/true));\n \n     LOCK(m_pool.cs);\n     // Stores results from which we will create the returned PackageMempoolAcceptResult.\n     // A result may be changed if a mempool transaction is evicted later due to LimitMempoolSize().\n     std::map<uint256, MempoolAcceptResult> results_final;\n-    // Results from individual validation which will be returned if no other result is available for\n+    // Results from calling PreChecks() which will be returned if no other result is available for\n     // this transaction. \"Nonfinal\" because if a transaction fails by itself but succeeds later\n     // (i.e. when evaluated with a fee-bumping child), the result in this map may be discarded.\n     std::map<uint256, MempoolAcceptResult> individual_results_nonfinal;\n+    // Call PreChecks() for every transaction in topological order, de-duplicating and skipping\n+    // transactions we can't validate, making each transaction's inputs available for subsequent\n+    // transactions to spend. If we encounter a failure that isn't TX_SINGLE_FAILURE, we continue to\n+    // call PreChecks() but will quit_early and not do package validation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357172527",
      "id" : 1357172527,
      "line" : 1459,
      "node_id" : "PRRC_kwDOABII585Q5M8v",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 1459,
      "original_position" : 287,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 287,
      "pull_request_review_id" : 1674780241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357172527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-12T18:12:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357172527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357181276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357181276"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Now that we have clearer states via enums, I think this could be named something like `IsInMempool` since that's what we're asserting?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-12T17:42:40Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357181276",
      "id" : 1357181276,
      "line" : 151,
      "node_id" : "PRRC_kwDOABII585Q5PFc",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 151,
      "original_position" : 151,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 151,
      "pull_request_review_id" : 1674780241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357181276/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-12T18:12:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357181276",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357188257"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357188257"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Now that we have clearer states via enums, I think this could be named something like `IsDanglingWithDescendants`?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-12T17:48:57Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);\n+\n+    /** Should be called if a tx will not be considered because it is missing inputs.\n+     * Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, FilteredAncestorSet() returns std::nullopt for that tx. Does not affect Txns(). */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357188257",
      "id" : 1357188257,
      "line" : 156,
      "node_id" : "PRRC_kwDOABII585Q5Qyh",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 156,
      "pull_request_review_id" : 1674780241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357188257/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-12T18:12:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357188257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357441762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357441762"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "+1 to s/bump fees/fee bumps/. \"calculate bump fees\" already sounds weird anyway.",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-12T21:25:57Z",
      "diff_hunk" : "@@ -55,8 +55,11 @@ struct IteratorComparator\n     }\n };\n \n-/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n- * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a limited set of\n+ * transactions (e.g. subset of mempool or transactions that are not yet in mempool) instead of the entire\n+ * mempool, ignoring consensus rules. Callers may use this to calculate mining scores, bump fees, or\n+ * linearization order of a list of transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357441762",
      "id" : 1357441762,
      "in_reply_to_id" : 1345473164,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q6Ori",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 61,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1675231183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357441762/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-12T21:25:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357441762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357969363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357969363"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree with making these names hint at intended usage instead of internal details, changing\r\n\r\nJust realized that maybe `TX_CONFLICT` should be in the \"skip\" instead of \"skip with descendants\" category. Imagine parent+child package, parent already confirmed and child hasn't been received yet. `SkipWithDescendants` means the child gets skipped too... assuming we can see a UTXO from the parent in the coinsview, we should treat it similarly to how we treat same-txid-different-witness-already-in-mempool right?",
      "commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "created_at" : "2023-10-13T08:47:23Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);\n+\n+    /** Should be called if a tx will not be considered because it is missing inputs.\n+     * Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, FilteredAncestorSet() returns std::nullopt for that tx. Does not affect Txns(). */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1357969363",
      "id" : 1357969363,
      "in_reply_to_id" : 1357188257,
      "line" : 156,
      "node_id" : "PRRC_kwDOABII585Q8PfT",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 156,
      "pull_request_review_id" : 1676021123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357969363/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T08:47:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357969363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358376718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358376718"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Makes sense, renamed to `IsInMempool`",
      "commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "created_at" : "2023-10-13T14:56:01Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358376718",
      "id" : 1358376718,
      "in_reply_to_id" : 1357181276,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q9y8O",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 151,
      "original_position" : 151,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1676681774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358376718/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T17:03:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358376718",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358377096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358377096"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed to `IsDanglingWithDescendants` as suggested. Still chewing on the `TX_CONFLICT` case.",
      "commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "created_at" : "2023-10-13T14:56:20Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);\n+\n+    /** Should be called if a tx will not be considered because it is missing inputs.\n+     * Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, FilteredAncestorSet() returns std::nullopt for that tx. Does not affect Txns(). */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358377096",
      "id" : 1358377096,
      "in_reply_to_id" : 1357188257,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q9zCI",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1676681774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358377096/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T17:03:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358377096",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358379473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358379473"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, I've changed this to a list of bullet points that each begin with a verb so that it's easier to parse than a comma-separated list.\r\nI've also added quotes around \"bump fees\" - please note this term was chosen in #26152 and I'm just using it.",
      "commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "created_at" : "2023-10-13T14:58:00Z",
      "diff_hunk" : "@@ -55,8 +55,11 @@ struct IteratorComparator\n     }\n };\n \n-/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n- * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a limited set of\n+ * transactions (e.g. subset of mempool or transactions that are not yet in mempool) instead of the entire\n+ * mempool, ignoring consensus rules. Callers may use this to calculate mining scores, bump fees, or\n+ * linearization order of a list of transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358379473",
      "id" : 1358379473,
      "in_reply_to_id" : 1345473164,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q9znR",
      "original_commit_id" : "5826d9960161ed8b6d6fe4985ff7495c4456c737",
      "original_line" : 61,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1676681774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358379473/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T17:03:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358379473",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358381451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358381451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Taken",
      "commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "created_at" : "2023-10-13T14:59:46Z",
      "diff_hunk" : "@@ -1403,63 +1433,32 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!CheckPackage(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n+    AncestorPackage linearized_package{package};\n \n-    // IsChildWithParents() guarantees the package is > 1 transactions.\n-    assert(package.size() > 1);\n-    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n-    // be sorted, so the last transaction is the child.\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    if (!linearized_package.IsAncestorPackage()) {\n+        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"not-ancestor-package\");\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-    // Protect against bugs where we pull more inputs from disk that miss being added to\n-    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n-    m_view.SetBackend(m_dummy);\n+    Assume(IsPackageWellFormed(linearized_package.Txns(), package_state_quit_early, /*require_sorted=*/true));\n \n     LOCK(m_pool.cs);\n     // Stores results from which we will create the returned PackageMempoolAcceptResult.\n     // A result may be changed if a mempool transaction is evicted later due to LimitMempoolSize().\n     std::map<uint256, MempoolAcceptResult> results_final;\n-    // Results from individual validation which will be returned if no other result is available for\n+    // Results from calling PreChecks() which will be returned if no other result is available for\n     // this transaction. \"Nonfinal\" because if a transaction fails by itself but succeeds later\n     // (i.e. when evaluated with a fee-bumping child), the result in this map may be discarded.\n     std::map<uint256, MempoolAcceptResult> individual_results_nonfinal;\n+    // Call PreChecks() for every transaction in topological order, de-duplicating and skipping\n+    // transactions we can't validate, making each transaction's inputs available for subsequent\n+    // transactions to spend. If we encounter a failure that isn't TX_SINGLE_FAILURE, we continue to\n+    // call PreChecks() but will quit_early and not do package validation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358381451",
      "id" : 1358381451,
      "in_reply_to_id" : 1357172527,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q90GL",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 1459,
      "original_position" : 287,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1676681774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358381451/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T17:03:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358381451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358436527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358436527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`TX_CONFLICT` happens in three cases:\r\n1) wtxid in mempool already `txn-already-in-mempool`\r\n2) txid in mempool already `txn-same-nonwitness-data-in-mempool`\r\n3) already in chain `txn-already-known`\r\n\r\nIndeed the third case could slip through with current logic. We should probably treat this similarly to the first two cases.\r\n\r\nI'm still lobbying for `TX_PREMATURE_SPEND` to be moved to this block :)",
      "commit_id" : "0022eb9c8f2c6a6f9bf5d7c263cc851f08a6c4d8",
      "created_at" : "2023-10-13T15:47:36Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);\n+\n+    /** Should be called if a tx will not be considered because it is missing inputs.\n+     * Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, FilteredAncestorSet() returns std::nullopt for that tx. Does not affect Txns(). */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358436527",
      "id" : 1358436527,
      "in_reply_to_id" : 1357188257,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q-Biv",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1676778183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358436527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T15:47:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358436527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358520940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358520940"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok makes sense. I will do this next week, need to add a different `MempoolAcceptResult::ResultType` I think, and will write some tests. Addressed the other comments though.",
      "commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "created_at" : "2023-10-13T17:05:28Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);\n+\n+    /** Should be called if a tx will not be considered because it is missing inputs.\n+     * Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, FilteredAncestorSet() returns std::nullopt for that tx. Does not affect Txns(). */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1358520940",
      "id" : 1358520940,
      "in_reply_to_id" : 1357188257,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q-WJs",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1676907362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358520940/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T17:05:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358520940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1360671986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360671986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added, and moved `TX_PREMATURE_SPEND` into the dangle category. I decided not to make a new `ResultType` because the result itself isn't that different from the INVALID case. Also added a table to `MempoolAcceptResult` to illustrate what fields/properties each of the result types should have.",
      "commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "created_at" : "2023-10-16T13:31:12Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling Skip() on this tx. */\n+            MEMPOOL,\n+            /** This and all descendant's FilteredAncestor{Set,FeeAndVsize} will be std::nullopt.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling SkipWithDescendants() on this tx or its ancestor. */\n+            DANGLING,\n+        // If a parent is DANGLING, all descendants must also be DANGLING.\n+        // If a child is MEMPOOL, all ancestors should also be MEMPOOL.\n+        };\n+\n+        CTransactionRef tx;\n+\n+        State m_state{State::PACKAGE};\n+\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't MEMPOOL or DANGLING. */\n+        std::optional<uint32_t> mining_sequence;\n+\n+        /** Fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+\n+        /** Virtual size of this transaction (depends on policy, calculated externally). Starts as\n+         * std::nullopt. Can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        /** Txids of all PACKAGE ancestors. Populated in AncestorPackage ctor. If an ancestor\n+         * becomes MEMPOOL or DANGLING, it is erased from this set. Use FilteredAncestorSet to get\n+         * filtered ancestor sets. */\n+        std::set<uint256> ancestor_subset;\n+\n+        /** Txids of all in-package descendant. Populated in AncestorPackage ctor and does not\n+         * change within AncestorPackage lifetime. */\n+        std::set<uint256> descendant_subset;\n+\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort the result of Txns, FilteredTxns, and FilteredAncestorSet. Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts the most\n+        // incentive-compatible subset(s) first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If unavailable or there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Linearized transactions. Always topologically sorted (IsSorted()). If fee information is\n+     * provided through LinearizeWithFees(), using mining_sequence scores. */\n+    std::vector<std::reference_wrapper<PackageEntry>> m_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& txns_in);\n+\n+    bool IsAncestorPackage() const { return m_ancestor_package_shaped; }\n+\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const;\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not include\n+     * ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> FilteredAncestorSet(const CTransactionRef& tx) const;\n+\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include ancestors that are MEMPOOL. If this tx or any ancestors are DANGLING, returns\n+     * std::nullopt. This result is always consistent with FilteredAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown or this\n+     * tx is DANGLING. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+\n+    /** Should be called if a tx or same txid transaction is found in mempool or submitted to it.\n+     * From now on, skip this tx from any result in FilteredAncestorSet(). Does not affect Txns().\n+     */\n+    void Skip(const CTransactionRef& transaction);\n+\n+    /** Should be called if a tx will not be considered because it is missing inputs.\n+     * Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, FilteredAncestorSet() returns std::nullopt for that tx. Does not affect Txns(). */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1360671986",
      "id" : 1360671986,
      "in_reply_to_id" : 1357188257,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RGjTy",
      "original_commit_id" : "ff27bc4203dcf2c46a610760411704fd3da3a998",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1679998089,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360671986/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T13:31:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360671986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1360717109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360717109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made a fuzz test for ATMP to check this table:\r\n\r\nhttps://github.com/instagibbs/bitcoin/commit/f589f519c80bf823ba7044c5791d7f541f3a9e34\r\n\r\nAs noted offline, m_vsize and m_base_fees  are not actually set for `FeeFailure`, so the fuzz test differs. CheckPackageMempoolAcceptResult seems to actually match the code as is for package cases.\r\n",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-16T14:02:56Z",
      "diff_hunk" : "@@ -115,6 +115,21 @@ void PruneBlockFilesManual(Chainstate& active_chainstate, int nManualPruneHeight\n \n /**\n * Validation result for a single transaction mempool acceptance.\n+*+---------------------------+----------------+-------------------+------------------+----------------+-------------------+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1360717109",
      "id" : 1360717109,
      "line" : 119,
      "node_id" : "PRRC_kwDOABII585RGuU1",
      "original_commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "original_line" : 119,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 5,
      "pull_request_review_id" : 1680071012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360717109/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T16:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360717109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1360907986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360907986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this doesn't actually return vsize or base fees, contra to the table indications or comment here",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-16T16:04:43Z",
      "diff_hunk" : "@@ -1244,7 +1262,12 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {\n+        // The only possible failure reason is fee-related (mempool full). It's helpful for the\n+        // caller to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1360907986",
      "id" : 1360907986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RHc7S",
      "original_commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "original_line" : 1267,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1680071012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360907986/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T16:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360907986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased + fixed a typo in the `MempoolAcceptResult` table",
      "created_at" : "2023-10-16T16:40:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1764869285",
      "id" : 1764869285,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585pMcSl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764869285/reactions"
      },
      "updated_at" : "2023-10-16T16:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764869285",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362077310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362077310"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I got the vsize/fee field mixed up with the effective feerate field, sorry! Fixed now.",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T13:01:54Z",
      "diff_hunk" : "@@ -1244,7 +1262,12 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {\n+        // The only possible failure reason is fee-related (mempool full). It's helpful for the\n+        // caller to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362077310",
      "id" : 1362077310,
      "in_reply_to_id" : 1360907986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RL6Z-",
      "original_commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "original_line" : 1267,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1682282674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362077310/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:01:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362077310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362086409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362086409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ran your test for a bit and it seems fine after the changes. Should I cherry-pick that into this PR or should we put it in a followup?",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T13:08:39Z",
      "diff_hunk" : "@@ -115,6 +115,21 @@ void PruneBlockFilesManual(Chainstate& active_chainstate, int nManualPruneHeight\n \n /**\n * Validation result for a single transaction mempool acceptance.\n+*+---------------------------+----------------+-------------------+------------------+----------------+-------------------+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362086409",
      "id" : 1362086409,
      "in_reply_to_id" : 1360717109,
      "line" : 119,
      "node_id" : "PRRC_kwDOABII585RL8oJ",
      "original_commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "original_line" : 119,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 5,
      "pull_request_review_id" : 1682305084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362086409/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:08:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362086409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362157360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362157360"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's worthwhile having running as this PR develops, please cherry-pick it",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T13:52:01Z",
      "diff_hunk" : "@@ -115,6 +115,21 @@ void PruneBlockFilesManual(Chainstate& active_chainstate, int nManualPruneHeight\n \n /**\n * Validation result for a single transaction mempool acceptance.\n+*+---------------------------+----------------+-------------------+------------------+----------------+-------------------+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362157360",
      "id" : 1362157360,
      "in_reply_to_id" : 1360717109,
      "line" : 119,
      "node_id" : "PRRC_kwDOABII585RMN8w",
      "original_commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "original_line" : 119,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 5,
      "pull_request_review_id" : 1682433441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362157360/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:52:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362157360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362166175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362166175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ah, this text line is old; can it be updated to note that this table is for package contexts? otherwise the \"txid in mempool\" and \"wtxid in mempool\" differ a bit for the `INVALID` cases, since they cover the MEMPOOL_ENTRY and DIFFERENT_WITNESS cases for ATMP cases",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T13:56:39Z",
      "diff_hunk" : "@@ -115,6 +115,21 @@ void PruneBlockFilesManual(Chainstate& active_chainstate, int nManualPruneHeight\n \n /**\n * Validation result for a single transaction mempool acceptance.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362166175",
      "id" : 1362166175,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII585RMQGf",
      "original_commit_id" : "63b27112409542ce2d855f18af886db6f4e86045",
      "original_line" : 117,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 3,
      "pull_request_review_id" : 1682445000,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362166175/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:56:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362166175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362192139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362192139"
         }
      },
      "author_association" : "MEMBER",
      "body" : "the chart was cleaned up, could these comments be fixed as well?",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T14:10:10Z",
      "diff_hunk" : "@@ -1244,7 +1262,12 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {\n+        // The only possible failure reason is fee-related (mempool full). It's helpful for the\n+        // caller to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362192139",
      "id" : 1362192139,
      "in_reply_to_id" : 1360907986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RMWcL",
      "original_commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "original_line" : 1267,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1682480143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362192139/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T14:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362192139",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362193855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362193855"
         }
      },
      "author_association" : "MEMBER",
      "body" : "the chart was cleaned up, could these comments be fixed as well?",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T14:11:19Z",
      "diff_hunk" : "@@ -1226,7 +1238,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!PreChecks(args, ws)) {\n+        if (ws.m_state.GetResult() == TxValidationResult::TX_SINGLE_FAILURE) {\n+            // Failed for fee reasons. It's helpful to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362193855",
      "id" : 1362193855,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RMW2_",
      "original_commit_id" : "63b27112409542ce2d855f18af886db6f4e86045",
      "original_line" : 1243,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1682480143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362193855/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T14:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362193855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362202019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362202019"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed the comment",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T14:16:35Z",
      "diff_hunk" : "@@ -1244,7 +1262,12 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n                                             ws.m_base_fees, effective_feerate, single_wtxid);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!Finalize(args, ws)) {\n+        // The only possible failure reason is fee-related (mempool full). It's helpful for the\n+        // caller to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362202019",
      "id" : 1362202019,
      "in_reply_to_id" : 1360907986,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RMY2j",
      "original_commit_id" : "daad63c6878e01236b215827aeeb2d4fe70f733a",
      "original_line" : 1267,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1682496286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362202019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T14:16:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362202019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362202200"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362202200"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed the comment",
      "commit_id" : "847b617054acd7818e9987455d266fa661c884ec",
      "created_at" : "2023-10-17T14:16:41Z",
      "diff_hunk" : "@@ -1226,7 +1238,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!PreChecks(args, ws)) {\n+        if (ws.m_state.GetResult() == TxValidationResult::TX_SINGLE_FAILURE) {\n+            // Failed for fee reasons. It's helpful to know what the fee and vsize were.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1362202200",
      "id" : 1362202200,
      "in_reply_to_id" : 1362193855,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RMY5Y",
      "original_commit_id" : "63b27112409542ce2d855f18af886db6f4e86045",
      "original_line" : 1243,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1682496535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362202200/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T14:16:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362202200",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "reviewed through https://github.com/bitcoin/bitcoin/pull/26711/commits/847b617054acd7818e9987455d266fa661c884ec\r\n\r\nall comments addressed",
      "created_at" : "2023-10-17T14:24:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1766527627",
      "id" : 1766527627,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585pSxKL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1766527627/reactions"
      },
      "updated_at" : "2023-10-17T14:24:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1766527627",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363487812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363487812"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ad0f2336b0ae5ab132373f52e713b94dd1365f03\r\n\r\nI'm still slightly confused to why you want to enable this so much :)\r\nIn the `IsConsistent` code checking this looks very natural. I don't think it affects anything, but it always distracts me from understanding with it's oddness.",
      "commit_id" : "41dcb5bc623fea3defba21f3ad2833ba208bd13b",
      "created_at" : "2023-10-18T08:39:13Z",
      "diff_hunk" : "@@ -76,6 +77,35 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;\n+    CMutableTransaction tx_zero_2;\n+    COutPoint same_prevout{InsecureRand256(), 0};\n+    tx_zero_1.vin.emplace_back(CTxIn{same_prevout});\n+    tx_zero_2.vin.emplace_back(CTxIn{same_prevout});\n+    // Different vouts (not the same tx)\n+    tx_zero_1.vout.emplace_back(CTxOut(CENT, P2WSH_OP_TRUE));\n+    tx_zero_2.vout.emplace_back(CTxOut(2 * CENT, P2WSH_OP_TRUE));\n+    Package package_conflicts{MakeTransactionRef(tx_zero_1), MakeTransactionRef(tx_zero_2)};\n+    BOOST_CHECK(!IsConsistent(package_conflicts));\n+    // Transactions are considered sorted when they have no dependencies.\n+    BOOST_CHECK(IsSorted(package_conflicts));\n+    PackageValidationState state_conflicts;\n+    BOOST_CHECK(!CheckPackage(package_conflicts, state_conflicts));\n+    BOOST_CHECK_EQUAL(state_conflicts.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(state_conflicts.GetRejectReason(), \"conflict-in-package\");\n+\n+    // IsConsistent only cares about conflicts between transactions, not about a transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363487812",
      "id" : 1363487812,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII585RRSxE",
      "original_commit_id" : "ad0f2336b0ae5ab132373f52e713b94dd1365f03",
      "original_line" : 100,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 1684464714,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363487812/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-18T12:00:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363487812",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363580156"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363580156"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7f8aaaa76e9bf324c6ea0a028d2cf817c137d66c\r\nIt's a slightly different assumption. You can literally apply my code at line 42.\r\n\r\nIt is a way to catch an infinite recursion I think: a current entry gets an ancestor_subset populated not as expected at L46, but instead after visiting a parent.\r\n\r\nBut maybe this makes the code too complicated...",
      "commit_id" : "41dcb5bc623fea3defba21f3ad2833ba208bd13b",
      "created_at" : "2023-10-18T09:47:02Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363580156",
      "id" : 1363580156,
      "in_reply_to_id" : 1345518237,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585RRpT8",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 55,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 55,
      "pull_request_review_id" : 1684464714,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363580156/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-18T12:00:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363580156",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363586381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363586381"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7f8aaaa76e9bf324c6ea0a028d2cf817c137d66c\r\n\r\nnit: you could explain why it's sufficient to just compare sizes here (this is a loose check compared to what the comment above says)",
      "commit_id" : "41dcb5bc623fea3defba21f3ad2833ba208bd13b",
      "created_at" : "2023-10-18T09:51:59Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_entry = m_txid_to_entry.at(parent_txid);\n+        if (parent_entry.ancestor_subset.empty()) {\n+            visit(parent_entry.tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    if (!IsConsistent(txns_in)) return;\n+\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    for (const auto& tx : txns_in) {\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::vector<std::reference_wrapper<PackageEntry>> txns_copy(m_txns);\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    if (!Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()))) {\n+        // If something went wrong with the sorting, just revert to the original order.\n+        m_txns = txns_copy;\n+    }\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363586381",
      "id" : 1363586381,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII585RRq1N",
      "original_commit_id" : "7f8aaaa76e9bf324c6ea0a028d2cf817c137d66c",
      "original_line" : 80,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 80,
      "pull_request_review_id" : 1684464714,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363586381/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-18T12:00:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363586381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363853115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363853115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure what \"this\" you're referring to, could you be more specific? Checking that a package `IsConsistent` is just a basic sanitization check before we try to build sets of txids of prevouts. We rely heavily on the assumption that the prevouts are unique, so it's important to check that assumption.",
      "commit_id" : "41dcb5bc623fea3defba21f3ad2833ba208bd13b",
      "created_at" : "2023-10-18T13:09:57Z",
      "diff_hunk" : "@@ -76,6 +77,35 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;\n+    CMutableTransaction tx_zero_2;\n+    COutPoint same_prevout{InsecureRand256(), 0};\n+    tx_zero_1.vin.emplace_back(CTxIn{same_prevout});\n+    tx_zero_2.vin.emplace_back(CTxIn{same_prevout});\n+    // Different vouts (not the same tx)\n+    tx_zero_1.vout.emplace_back(CTxOut(CENT, P2WSH_OP_TRUE));\n+    tx_zero_2.vout.emplace_back(CTxOut(2 * CENT, P2WSH_OP_TRUE));\n+    Package package_conflicts{MakeTransactionRef(tx_zero_1), MakeTransactionRef(tx_zero_2)};\n+    BOOST_CHECK(!IsConsistent(package_conflicts));\n+    // Transactions are considered sorted when they have no dependencies.\n+    BOOST_CHECK(IsSorted(package_conflicts));\n+    PackageValidationState state_conflicts;\n+    BOOST_CHECK(!CheckPackage(package_conflicts, state_conflicts));\n+    BOOST_CHECK_EQUAL(state_conflicts.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(state_conflicts.GetRejectReason(), \"conflict-in-package\");\n+\n+    // IsConsistent only cares about conflicts between transactions, not about a transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363853115",
      "id" : 1363853115,
      "in_reply_to_id" : 1363487812,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII585RSr87",
      "original_commit_id" : "ad0f2336b0ae5ab132373f52e713b94dd1365f03",
      "original_line" : 100,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 1685035551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363853115/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-18T13:09:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363853115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363894734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363894734"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, I see what you mean now. I thought you meant for the transaction we were calling `visit` on. I've added this as an `assert`.",
      "commit_id" : "41dcb5bc623fea3defba21f3ad2833ba208bd13b",
      "created_at" : "2023-10-18T13:35:32Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363894734",
      "id" : 1363894734,
      "in_reply_to_id" : 1345518237,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585RS2HO",
      "original_commit_id" : "347a060777b4b5be0384e5b813336618e59fbc56",
      "original_line" : 55,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 55,
      "pull_request_review_id" : 1685102400,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363894734/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-18T13:35:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363894734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363895431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363895431"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a sentence to the comment.",
      "commit_id" : "41dcb5bc623fea3defba21f3ad2833ba208bd13b",
      "created_at" : "2023-10-18T13:36:02Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_entry = m_txid_to_entry.at(parent_txid);\n+        if (parent_entry.ancestor_subset.empty()) {\n+            visit(parent_entry.tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    if (!IsConsistent(txns_in)) return;\n+\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.push_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    for (const auto& tx : txns_in) {\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::vector<std::reference_wrapper<PackageEntry>> txns_copy(m_txns);\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    if (!Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()))) {\n+        // If something went wrong with the sorting, just revert to the original order.\n+        m_txns = txns_copy;\n+    }\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363895431",
      "id" : 1363895431,
      "in_reply_to_id" : 1363586381,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII585RS2SH",
      "original_commit_id" : "7f8aaaa76e9bf324c6ea0a028d2cf817c137d66c",
      "original_line" : 80,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 80,
      "pull_request_review_id" : 1685103565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363895431/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-18T13:36:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363895431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363900848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363900848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, changed/added comment in validation.h",
      "commit_id" : "41dcb5bc623fea3defba21f3ad2833ba208bd13b",
      "created_at" : "2023-10-18T13:39:46Z",
      "diff_hunk" : "@@ -115,6 +115,21 @@ void PruneBlockFilesManual(Chainstate& active_chainstate, int nManualPruneHeight\n \n /**\n * Validation result for a single transaction mempool acceptance.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1363900848",
      "id" : 1363900848,
      "in_reply_to_id" : 1362166175,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RS3mw",
      "original_commit_id" : "63b27112409542ce2d855f18af886db6f4e86045",
      "original_line" : 117,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 1685112436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363900848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-18T13:39:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1363900848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366656747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366656747"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\n_64-pc-linux-gnu/src/test/txpackage_tests.cpp\r\ntest/txpackage_tests.cpp:135:32: error: unnecessary temporary object created while calling emplace_back [modernize-use-emplace,-warnings-as-errors]\r\n  135 |     tx_zero_1.vin.emplace_back(CTxIn{same_prevout});\r\n      |                                ^~~~~~            ~",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T08:34:40Z",
      "diff_hunk" : "@@ -73,15 +123,283 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n         package_duplicate_txids_empty.emplace_back(MakeTransactionRef(empty_tx));\n     }\n     PackageValidationState state_duplicates;\n-    BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n+    BOOST_CHECK(!IsPackageWellFormed(package_duplicate_txids_empty, state_duplicates, /*require_sorted=*/false));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;\n+    CMutableTransaction tx_zero_2;\n+    COutPoint same_prevout{InsecureRand256(), 0};\n+    tx_zero_1.vin.emplace_back(CTxIn{same_prevout});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366656747",
      "id" : 1366656747,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII585RdYbr",
      "original_commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "original_line" : 135,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 102,
      "pull_request_review_id" : 1689529117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366656747/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T08:34:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366656747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366752370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366752370"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I meant [this code](https://github.com/bitcoin/bitcoin/blob/ad0f2336b0ae5ab132373f52e713b94dd1365f03/src/policy/packages.cpp#L68).\r\n\r\nAdding once-at-a-time seemed more natural, no? And then you'd have an `assume not in the list already`, which would say \"it's very surprising we're hitting it in `IsConsistent` because it should have been checked early\".",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T09:55:54Z",
      "diff_hunk" : "@@ -76,6 +77,35 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;\n+    CMutableTransaction tx_zero_2;\n+    COutPoint same_prevout{InsecureRand256(), 0};\n+    tx_zero_1.vin.emplace_back(CTxIn{same_prevout});\n+    tx_zero_2.vin.emplace_back(CTxIn{same_prevout});\n+    // Different vouts (not the same tx)\n+    tx_zero_1.vout.emplace_back(CTxOut(CENT, P2WSH_OP_TRUE));\n+    tx_zero_2.vout.emplace_back(CTxOut(2 * CENT, P2WSH_OP_TRUE));\n+    Package package_conflicts{MakeTransactionRef(tx_zero_1), MakeTransactionRef(tx_zero_2)};\n+    BOOST_CHECK(!IsConsistent(package_conflicts));\n+    // Transactions are considered sorted when they have no dependencies.\n+    BOOST_CHECK(IsSorted(package_conflicts));\n+    PackageValidationState state_conflicts;\n+    BOOST_CHECK(!CheckPackage(package_conflicts, state_conflicts));\n+    BOOST_CHECK_EQUAL(state_conflicts.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(state_conflicts.GetRejectReason(), \"conflict-in-package\");\n+\n+    // IsConsistent only cares about conflicts between transactions, not about a transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366752370",
      "id" : 1366752370,
      "in_reply_to_id" : 1363487812,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII585Rdvxy",
      "original_commit_id" : "ad0f2336b0ae5ab132373f52e713b94dd1365f03",
      "original_line" : 100,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 1689675125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366752370/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T09:55:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366752370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366755445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366755445"
         }
      },
      "author_association" : "MEMBER",
      "body" : "89913ee14e8e2a3247191966c66b3c3fcbeb45b8\r\n`IsInMempool` is  a new name i guess. `IsAlreadyHave` is outdated.",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T09:58:37Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * IsAlreadyHave() and IsDanglingWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling IsAlreadyHave() on this tx. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366755445",
      "id" : 1366755445,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII585Rdwh1",
      "original_commit_id" : "89913ee14e8e2a3247191966c66b3c3fcbeb45b8",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : 43,
      "pull_request_review_id" : 1689679696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366755445/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T10:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366755445",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366763553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366763553"
         }
      },
      "author_association" : "MEMBER",
      "body" : "89913ee14e8e2a3247191966c66b3c3fcbeb45b8\r\n\r\nIs it safe to still return a non-null result if this fails?",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T10:06:22Z",
      "diff_hunk" : "@@ -0,0 +1,260 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_entry = m_txid_to_entry.at(parent_txid);\n+        if (parent_entry.ancestor_subset.empty()) {\n+            visit(parent_entry.tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        // This recursive call should not have included ourselves; it should be impossible for this\n+        // tx to be both an ancestor and a descendant of us.\n+        assert(m_txid_to_entry.at(curr_txid).ancestor_subset.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    if (!IsConsistent(txns_in)) return;\n+\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.emplace_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    for (const auto& tx : txns_in) {\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::vector<std::reference_wrapper<PackageEntry>> txns_copy(m_txns);\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    if (!Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()))) {\n+        // If something went wrong with the sorting, just revert to the original order.\n+        m_txns = txns_copy;\n+    }\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    // We just check if the number of unique txids in ancestor_subset is equal to the number of\n+    // transactions in the package.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (entryref.get().m_state == PackageEntry::State::PACKAGE) result.emplace_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.m_state == PackageEntry::State::DANGLING) return std::nullopt;\n+\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            // All non-PACKAGE ancestor_subset transactions should have been removed when the Skip* happened.\n+            if (Assume(entryref.get().m_state == PackageEntry::State::PACKAGE)) {\n+                result.emplace_back(entryref.get().tx);\n+            }\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+\n+    const auto& entry = entry_it->second;\n+    if (entry.m_state == PackageEntry::State::DANGLING || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.m_state == PackageEntry::State::DANGLING || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        // All non-PACKAGE ancestor_subset transactions should have been removed when the Skip* happened.\n+        if (Assume(anc_entry.m_state == PackageEntry::State::PACKAGE)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366763553",
      "id" : 1366763553,
      "line" : 148,
      "node_id" : "PRRC_kwDOABII585Rdygh",
      "original_commit_id" : "89913ee14e8e2a3247191966c66b3c3fcbeb45b8",
      "original_line" : 148,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 148,
      "pull_request_review_id" : 1689679696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366763553/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T10:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366763553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366777029"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366777029"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I'm still slightly confused to why you want to enable this so much\r\n\r\nThis is not new code. It was added to #20833 to address [this comment](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621442515) (screenshotting because github will struggle to load it): \r\n![image](https://github.com/bitcoin/bitcoin/assets/25183001/88040553-77a2-45b8-87a1-30291f85b609)\r\n \r\ntldr the rationale was to not change a `TX_CONSENSUS` error into a package policy error.\r\n\r\nI agree it's an extra thing to think about when reading the code, but it's not new to this PR. This PR adds a comment and a test for this behavior because it was requested by [this comment](https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1340521597).",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T10:19:34Z",
      "diff_hunk" : "@@ -76,6 +77,35 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;\n+    CMutableTransaction tx_zero_2;\n+    COutPoint same_prevout{InsecureRand256(), 0};\n+    tx_zero_1.vin.emplace_back(CTxIn{same_prevout});\n+    tx_zero_2.vin.emplace_back(CTxIn{same_prevout});\n+    // Different vouts (not the same tx)\n+    tx_zero_1.vout.emplace_back(CTxOut(CENT, P2WSH_OP_TRUE));\n+    tx_zero_2.vout.emplace_back(CTxOut(2 * CENT, P2WSH_OP_TRUE));\n+    Package package_conflicts{MakeTransactionRef(tx_zero_1), MakeTransactionRef(tx_zero_2)};\n+    BOOST_CHECK(!IsConsistent(package_conflicts));\n+    // Transactions are considered sorted when they have no dependencies.\n+    BOOST_CHECK(IsSorted(package_conflicts));\n+    PackageValidationState state_conflicts;\n+    BOOST_CHECK(!CheckPackage(package_conflicts, state_conflicts));\n+    BOOST_CHECK_EQUAL(state_conflicts.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(state_conflicts.GetRejectReason(), \"conflict-in-package\");\n+\n+    // IsConsistent only cares about conflicts between transactions, not about a transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366777029",
      "id" : 1366777029,
      "in_reply_to_id" : 1363487812,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII585Rd1zF",
      "original_commit_id" : "ad0f2336b0ae5ab132373f52e713b94dd1365f03",
      "original_line" : 100,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 1689712958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366777029/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T10:19:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366777029",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366874149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366874149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4dfd040bb4504240caed4c2108fb7e85bd2c9eba\r\n\r\noutdated function names here and there",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T11:54:48Z",
      "diff_hunk" : "@@ -0,0 +1,99 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/ancestor_packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto mtx{ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider)}) {\n+            available_coins.insert(COutPoint{MakeTransactionRef(*mtx)->GetHash(), fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 10)});\n+        }\n+    }\n+    // Create up to 50 transactions with variable inputs and outputs.\n+    LIMITED_WHILE(!available_coins.empty() && fuzzed_data_provider.ConsumeBool(), 50)\n+    {\n+        // If we're making the \"bottom\" tx, spend all available coins to make an ancestor package,\n+        // and exit this loop afterwards.\n+        const bool make_bottom_tx{fuzzed_data_provider.ConsumeBool()};\n+\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = make_bottom_tx ? available_coins.size() :\n+            fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.begin();\n+            mtx.vin.emplace_back(*prevout, CScript());\n+            available_coins.erase(prevout);\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.emplace_back(100, P2WSH_OP_TRUE);\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+\n+        if (txns_in.empty()) {\n+            txns_in.emplace_back(tx);\n+        } else {\n+            // Place tx in a random spot in the vector, swapping the existing tx at that index to the\n+            // back, so the package is not necessarily sorted.\n+            const size_t index = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txns_in.size() - 1);\n+            txns_in.emplace_back(txns_in.at(index));\n+            txns_in.at(index) = tx;\n+        }\n+\n+        // Make outputs available to spend, unless we want this to be the last tx and have just\n+        // swept available_coins.\n+        if (!make_bottom_tx) {\n+            for (uint32_t n{0}; n < num_outputs; ++n) {\n+                COutPoint new_coin{tx->GetHash(), n};\n+                // Always add the first output to ensure each tx has an outgoing output we can use\n+                // to create an ancestor package.\n+                if (n > 0 && fuzzed_data_provider.ConsumeBool()) {\n+                    available_coins.insert(new_coin);\n+                }\n+            }\n+        }\n+    }\n+\n+    // AncestorPackage may need to topologically sort txns_in. Find bugs in topological sort, Skip,\n+    // and SkipWithDescendants.\n+    AncestorPackage packageified(txns_in);\n+    Assert(IsSorted(packageified.Txns()));\n+    if (packageified.IsAncestorPackage()) {\n+        // Optionally Skip() (submit to mempool) the first n transactions. These must be at the\n+        // beginning of the package as it doesn't make sense to submit a transaction without\n+        // submitting all of its ancestors too. The ith transaction is not necessarily an ancestor\n+        // of the i+1th transaction, but just skip 1...n to keep things simple.\n+        // For the rest of the transactions, optionally call SkipWithDescendants() (missing inputs).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366874149",
      "id" : 1366874149,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585ReNgl",
      "original_commit_id" : "4dfd040bb4504240caed4c2108fb7e85bd2c9eba",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/test/fuzz/ancestorpackage.cpp",
      "position" : 78,
      "pull_request_review_id" : 1689870754,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366874149/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T12:23:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366874149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366903723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366903723"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why does `            if (!subpackage || subpackage->size() > 1) {` imply missing inputs?",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T12:22:54Z",
      "diff_hunk" : "@@ -1595,6 +1632,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366903723",
      "id" : 1366903723,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ReUur",
      "original_commit_id" : "a24fe5ea83ec1001d8dcdaef1dcb127e304cd1e1",
      "original_line" : 1653,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1689870754,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366903723/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T12:23:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366903723",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366905340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366905340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thank you for clarification, i totally missed it's not new code. I agree with you now. Hopefully it doesn't distract other reviewers like i was distracted.",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T12:24:30Z",
      "diff_hunk" : "@@ -76,6 +77,35 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;\n+    CMutableTransaction tx_zero_2;\n+    COutPoint same_prevout{InsecureRand256(), 0};\n+    tx_zero_1.vin.emplace_back(CTxIn{same_prevout});\n+    tx_zero_2.vin.emplace_back(CTxIn{same_prevout});\n+    // Different vouts (not the same tx)\n+    tx_zero_1.vout.emplace_back(CTxOut(CENT, P2WSH_OP_TRUE));\n+    tx_zero_2.vout.emplace_back(CTxOut(2 * CENT, P2WSH_OP_TRUE));\n+    Package package_conflicts{MakeTransactionRef(tx_zero_1), MakeTransactionRef(tx_zero_2)};\n+    BOOST_CHECK(!IsConsistent(package_conflicts));\n+    // Transactions are considered sorted when they have no dependencies.\n+    BOOST_CHECK(IsSorted(package_conflicts));\n+    PackageValidationState state_conflicts;\n+    BOOST_CHECK(!CheckPackage(package_conflicts, state_conflicts));\n+    BOOST_CHECK_EQUAL(state_conflicts.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(state_conflicts.GetRejectReason(), \"conflict-in-package\");\n+\n+    // IsConsistent only cares about conflicts between transactions, not about a transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366905340",
      "id" : 1366905340,
      "in_reply_to_id" : 1363487812,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII585ReVH8",
      "original_commit_id" : "ad0f2336b0ae5ab132373f52e713b94dd1365f03",
      "original_line" : 100,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 1689923738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366905340/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T12:24:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366905340",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366915293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366915293"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah this comment is a bit off I think; currently in this commit we're attempting to only do one-by-one then \"rest\" package submission like before. This is clamping it to size 1 so it goes through single transaction submission here.",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T12:34:29Z",
      "diff_hunk" : "@@ -1595,6 +1632,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366915293",
      "id" : 1366915293,
      "in_reply_to_id" : 1366903723,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ReXjd",
      "original_commit_id" : "a24fe5ea83ec1001d8dcdaef1dcb127e304cd1e1",
      "original_line" : 1653,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1689940223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366915293/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T12:34:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366915293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366970241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366970241"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Don't think the comment is necessarily off - we aren't clamping it to 1 on purpose, we're just keeping the existing behavior which doesn't validate subpackages yet. This is just a \"quit early\" optimization since we have access to the subpackage (which I can remove if is confusing).",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T13:22:32Z",
      "diff_hunk" : "@@ -1595,6 +1632,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366970241",
      "id" : 1366970241,
      "in_reply_to_id" : 1366903723,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Rek-B",
      "original_commit_id" : "a24fe5ea83ec1001d8dcdaef1dcb127e304cd1e1",
      "original_line" : 1653,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1690032479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366970241/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T13:22:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366970241",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366975390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366975390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I mean, you are clamping it to 1 on purpose: to keep existing behavior.",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T13:26:44Z",
      "diff_hunk" : "@@ -1595,6 +1632,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366975390",
      "id" : 1366975390,
      "in_reply_to_id" : 1366903723,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RemOe",
      "original_commit_id" : "a24fe5ea83ec1001d8dcdaef1dcb127e304cd1e1",
      "original_line" : 1653,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1690040882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366975390/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T13:26:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366975390",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366977605"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366977605"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would it be better to squash the \"add a PreChecks loop to linearize by fee and find obvious errors\" and the \"submit ancestor subpackages\" commits maybe? There isn't a functional reason to do 1 without the other, I just thought maybe the diff would be smaller and easier to review. But maybe it's just confusing?",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T13:28:27Z",
      "diff_hunk" : "@@ -1595,6 +1632,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366977605",
      "id" : 1366977605,
      "in_reply_to_id" : 1366903723,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RemxF",
      "original_commit_id" : "a24fe5ea83ec1001d8dcdaef1dcb127e304cd1e1",
      "original_line" : 1653,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1690044614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366977605/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T13:28:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366977605",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366984571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366984571"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I mean, you are clamping it to 1 on purpose: to keep existing behavior.\r\n\r\no yeah true",
      "commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "created_at" : "2023-10-20T13:34:07Z",
      "diff_hunk" : "@@ -1595,6 +1632,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1366984571",
      "id" : 1366984571,
      "in_reply_to_id" : 1366903723,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Reod7",
      "original_commit_id" : "a24fe5ea83ec1001d8dcdaef1dcb127e304cd1e1",
      "original_line" : 1653,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1690056640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366984571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T13:34:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1366984571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've squashed the 2 commits",
      "commit_id" : "6552acdce30a17be2aae76d3f4e40aece6df9ab2",
      "created_at" : "2023-10-20T14:11:25Z",
      "diff_hunk" : "@@ -1595,6 +1632,60 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    if (!quit_early) {\n+        const bool rely_on_fees{linearized_package.LinearizeWithFees()};\n+\n+        for (const auto& tx : linearized_package.FilteredTxns()) {\n+            const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n+            TxValidationState placeholder_state;\n+            if (rely_on_fees && Assume(individual_fee_vsize.has_value()) &&\n+                !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // If we don't exit early here, we'll hit a low fee failure and quit early.\n+                continue;\n+            }\n+            const auto subpackage = linearized_package.FilteredAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) {\n+                // No need to validate if we know this transaction would have missing inputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030084",
      "id" : 1367030084,
      "in_reply_to_id" : 1366903723,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RezlE",
      "original_commit_id" : "a24fe5ea83ec1001d8dcdaef1dcb127e304cd1e1",
      "original_line" : 1653,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1690133483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030084/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T14:11:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030084",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thanks, fixed",
      "commit_id" : "6552acdce30a17be2aae76d3f4e40aece6df9ab2",
      "created_at" : "2023-10-20T14:11:33Z",
      "diff_hunk" : "@@ -73,15 +123,283 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n         package_duplicate_txids_empty.emplace_back(MakeTransactionRef(empty_tx));\n     }\n     PackageValidationState state_duplicates;\n-    BOOST_CHECK(!CheckPackage(package_duplicate_txids_empty, state_duplicates));\n+    BOOST_CHECK(!IsPackageWellFormed(package_duplicate_txids_empty, state_duplicates, /*require_sorted=*/false));\n     BOOST_CHECK_EQUAL(state_duplicates.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_duplicates.GetRejectReason(), \"package-contains-duplicates\");\n+    BOOST_CHECK(!IsConsistent(package_duplicate_txids_empty));\n+\n+    // Packages can't have transactions spending the same prevout\n+    CMutableTransaction tx_zero_1;\n+    CMutableTransaction tx_zero_2;\n+    COutPoint same_prevout{InsecureRand256(), 0};\n+    tx_zero_1.vin.emplace_back(CTxIn{same_prevout});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030242",
      "id" : 1367030242,
      "in_reply_to_id" : 1366656747,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Rezni",
      "original_commit_id" : "24490e71d1fff47f0861d750194628dde82a0f9e",
      "original_line" : 135,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1690133709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T14:11:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030483"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thanks, removed all the old names now I think",
      "commit_id" : "6552acdce30a17be2aae76d3f4e40aece6df9ab2",
      "created_at" : "2023-10-20T14:11:47Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential ancestor package, i.e. one transaction with its set of unconfirmed ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * IsAlreadyHave() and IsDanglingWithDescendants() can be used to omit transactions.\n+ * Txns() and FilteredTxns() return the linearized transactions; FilteredTxns excludes non-PACKAGE ones.\n+ * FilteredAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package. Also excludes non-PACKAGE ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * Set in the constructor and then does not change, even if transactions are skipped.\n+     * */\n+    bool m_ancestor_package_shaped{false};\n+\n+    struct PackageEntry {\n+        enum class State : uint8_t {\n+            /** Default value.\n+             * If calling LinearizeWithFees(), this tx must have a fee and vsize. */\n+            PACKAGE,\n+            /** Excluded from FilteredAncestor{Set,FeeAndVsize}.\n+             * Should not appear in any transaction's ancestor_subset.\n+             * Excluded in LinearizeWithFees().\n+             * Set by calling IsAlreadyHave() on this tx. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030483",
      "id" : 1367030483,
      "in_reply_to_id" : 1366755445,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RezrT",
      "original_commit_id" : "89913ee14e8e2a3247191966c66b3c3fcbeb45b8",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.h",
      "position" : null,
      "pull_request_review_id" : 1690134085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T14:11:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030675"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030675"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed",
      "commit_id" : "6552acdce30a17be2aae76d3f4e40aece6df9ab2",
      "created_at" : "2023-10-20T14:11:57Z",
      "diff_hunk" : "@@ -0,0 +1,99 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/ancestor_packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto mtx{ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider)}) {\n+            available_coins.insert(COutPoint{MakeTransactionRef(*mtx)->GetHash(), fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 10)});\n+        }\n+    }\n+    // Create up to 50 transactions with variable inputs and outputs.\n+    LIMITED_WHILE(!available_coins.empty() && fuzzed_data_provider.ConsumeBool(), 50)\n+    {\n+        // If we're making the \"bottom\" tx, spend all available coins to make an ancestor package,\n+        // and exit this loop afterwards.\n+        const bool make_bottom_tx{fuzzed_data_provider.ConsumeBool()};\n+\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = make_bottom_tx ? available_coins.size() :\n+            fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.begin();\n+            mtx.vin.emplace_back(*prevout, CScript());\n+            available_coins.erase(prevout);\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.emplace_back(100, P2WSH_OP_TRUE);\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+\n+        if (txns_in.empty()) {\n+            txns_in.emplace_back(tx);\n+        } else {\n+            // Place tx in a random spot in the vector, swapping the existing tx at that index to the\n+            // back, so the package is not necessarily sorted.\n+            const size_t index = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txns_in.size() - 1);\n+            txns_in.emplace_back(txns_in.at(index));\n+            txns_in.at(index) = tx;\n+        }\n+\n+        // Make outputs available to spend, unless we want this to be the last tx and have just\n+        // swept available_coins.\n+        if (!make_bottom_tx) {\n+            for (uint32_t n{0}; n < num_outputs; ++n) {\n+                COutPoint new_coin{tx->GetHash(), n};\n+                // Always add the first output to ensure each tx has an outgoing output we can use\n+                // to create an ancestor package.\n+                if (n > 0 && fuzzed_data_provider.ConsumeBool()) {\n+                    available_coins.insert(new_coin);\n+                }\n+            }\n+        }\n+    }\n+\n+    // AncestorPackage may need to topologically sort txns_in. Find bugs in topological sort, Skip,\n+    // and SkipWithDescendants.\n+    AncestorPackage packageified(txns_in);\n+    Assert(IsSorted(packageified.Txns()));\n+    if (packageified.IsAncestorPackage()) {\n+        // Optionally Skip() (submit to mempool) the first n transactions. These must be at the\n+        // beginning of the package as it doesn't make sense to submit a transaction without\n+        // submitting all of its ancestors too. The ith transaction is not necessarily an ancestor\n+        // of the i+1th transaction, but just skip 1...n to keep things simple.\n+        // For the rest of the transactions, optionally call SkipWithDescendants() (missing inputs).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367030675",
      "id" : 1367030675,
      "in_reply_to_id" : 1366874149,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RezuT",
      "original_commit_id" : "4dfd040bb4504240caed4c2108fb7e85bd2c9eba",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/test/fuzz/ancestorpackage.cpp",
      "position" : null,
      "pull_request_review_id" : 1690134417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030675/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T14:11:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367030675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367033825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367033825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, this is just asserting that we cleaned up in the skipping functions the way we were supposed to. I think as long as this is ancestor set-shaped there isn't much danger.",
      "commit_id" : "6552acdce30a17be2aae76d3f4e40aece6df9ab2",
      "created_at" : "2023-10-20T14:14:34Z",
      "diff_hunk" : "@@ -0,0 +1,260 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_entry = m_txid_to_entry.at(parent_txid);\n+        if (parent_entry.ancestor_subset.empty()) {\n+            visit(parent_entry.tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        // This recursive call should not have included ourselves; it should be impossible for this\n+        // tx to be both an ancestor and a descendant of us.\n+        assert(m_txid_to_entry.at(curr_txid).ancestor_subset.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    if (txns_in.empty()) return;\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    if (!IsConsistent(txns_in)) return;\n+\n+    // Populate m_txid_to_entry for quick lookup\n+    for (const auto& tx : txns_in) {\n+        m_txid_to_entry.emplace(tx->GetHash(), PackageEntry{tx});\n+        m_txns.emplace_back(std::ref(m_txid_to_entry.at(tx->GetHash())));\n+    }\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    for (const auto& tx : txns_in) {\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+    }\n+    // Sort by the number of in-package ancestors.\n+    std::vector<std::reference_wrapper<PackageEntry>> txns_copy(m_txns);\n+    std::sort(m_txns.begin(), m_txns.end(), CompareEntry());\n+    if (!Assume(m_txns.size() == txns_in.size() && IsSorted(Txns()))) {\n+        // If something went wrong with the sorting, just revert to the original order.\n+        m_txns = txns_copy;\n+    }\n+    // This package is ancestor package-shaped if every transaction is an ancestor of the last tx.\n+    // We just check if the number of unique txids in ancestor_subset is equal to the number of\n+    // transactions in the package.\n+    m_ancestor_package_shaped = m_txns.back().get().ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::Txns() const\n+{\n+    Package result;\n+    std::transform(m_txns.cbegin(), m_txns.cend(), std::back_inserter(result),\n+                   [](const auto refentry){ return refentry.get().tx; });\n+    return result;\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto entryref : m_txns) {\n+        if (entryref.get().m_state == PackageEntry::State::PACKAGE) result.emplace_back(entryref.get().tx);\n+    }\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::FilteredAncestorSet(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.m_state == PackageEntry::State::DANGLING) return std::nullopt;\n+\n+    std::vector<CTransactionRef> result;\n+    result.reserve(entry.ancestor_subset.size());\n+    for (const auto entryref : m_txns) {\n+        if (entry.ancestor_subset.count(entryref.get().tx->GetHash()) > 0) {\n+            // All non-PACKAGE ancestor_subset transactions should have been removed when the Skip* happened.\n+            if (Assume(entryref.get().m_state == PackageEntry::State::PACKAGE)) {\n+                result.emplace_back(entryref.get().tx);\n+            }\n+        }\n+    }\n+    return result;\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::GetFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+\n+    const auto& entry = entry_it->second;\n+    if (entry.m_state == PackageEntry::State::DANGLING || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+    return std::make_pair(entry.fee.value(), entry.vsize.value());\n+}\n+\n+std::optional<std::pair<CAmount, int64_t>> AncestorPackage::FilteredAncestorFeeAndVsize(const CTransactionRef& tx) const\n+{\n+    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\n+    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\n+    const auto& entry = entry_it->second;\n+    if (entry.m_state == PackageEntry::State::DANGLING || !entry.fee.has_value() || !entry.vsize.has_value()) return std::nullopt;\n+\n+    CAmount total_fee{0};\n+    int64_t total_vsize{0};\n+    for (const auto& txid : entry.ancestor_subset) {\n+        const auto& anc_entry = m_txid_to_entry.at(txid);\n+        // All non-PACKAGE ancestor_subset transactions should have been removed when the Skip* happened.\n+        if (Assume(anc_entry.m_state == PackageEntry::State::PACKAGE)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1367033825",
      "id" : 1367033825,
      "in_reply_to_id" : 1366763553,
      "line" : 150,
      "node_id" : "PRRC_kwDOABII585Re0fh",
      "original_commit_id" : "89913ee14e8e2a3247191966c66b3c3fcbeb45b8",
      "original_line" : 150,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 150,
      "pull_request_review_id" : 1690139721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367033825/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-20T14:14:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1367033825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Squashed 2 commits together. The big commit \"[validation] linearize using fees + submit ancestor subpackages\" implements the algorithm described in the op.",
      "created_at" : "2023-10-20T14:16:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1772823234",
      "id" : 1772823234,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585pqyLC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1772823234/reactions"
      },
      "updated_at" : "2023-10-20T14:16:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1772823234",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1368520437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1368520437"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e63e371c094ddf06f0b1b7ef427bb1ca47da640b\r\n\r\nWhat's the threat model with `some other peer will announce...`? e.g. I'm thinking of blocking an in-package LN transaction propagation by submitting something conflicting to the victim's peers",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-23T11:33:19Z",
      "diff_hunk" : "@@ -1595,47 +1636,121 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n-    auto multi_submission_result = quit_early || linearized_package.FilteredTxns().empty() ?\n-        PackageMempoolAcceptResult(package_state_quit_early, {}) :\n-        AcceptSubPackage(linearized_package.FilteredTxns(), args);\n-    PackageValidationState& package_state_final = multi_submission_result.m_state;\n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1368520437",
      "id" : 1368520437,
      "line" : 1612,
      "node_id" : "PRRC_kwDOABII585Rkfb1",
      "original_commit_id" : "e63e371c094ddf06f0b1b7ef427bb1ca47da640b",
      "original_line" : 1612,
      "original_position" : 132,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 452,
      "pull_request_review_id" : 1692309732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1368520437/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T10:10:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1368520437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1369783052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369783052"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9962efedb813e02034f2d1634efe79562c5adc19\r\n\r\nStill no definition of ancestor package it seems?",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-24T08:15:04Z",
      "diff_hunk" : "@@ -1387,49 +1387,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1369783052",
      "id" : 1369783052,
      "in_reply_to_id" : 1228287010,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RpTsM",
      "original_commit_id" : "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "original_line" : 1392,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1692309732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369783052/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T10:10:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369783052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1369846141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369846141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ea770e9a63e68466d4f1c4f5ad5bb5519ecf3efe\r\n\r\nWhere do we document why we don't drop the `child` and accept grandparent+parent1+parent2?",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-24T09:05:31Z",
      "diff_hunk" : "@@ -658,6 +667,198 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1369846141",
      "id" : 1369846141,
      "line" : 656,
      "node_id" : "PRRC_kwDOABII585RpjF9",
      "original_commit_id" : "ea770e9a63e68466d4f1c4f5ad5bb5519ecf3efe",
      "original_line" : 674,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 648,
      "pull_request_review_id" : 1692309732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369846141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T10:10:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1369846141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1370028136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370028136"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure if I understand what you mean fully, but the point here is to try to avoid an attack where somebody tries to block a transaction by stuffing invalid transactions into a package with it. Nodes will still be `inv`ing transactions meeting the peer's fee filter so, unless there is a CPFP or other missing inputs situation, the receiver won't need to download this transaction as a package. The model here is we assume we have at least 1 peer who is honest / isn't actively creating invalid packages.\r\n\r\nFor a LN commitment transaction + CPFP child, they'll announce the child, you'll download it, request the ancestor package, and then validate commitment transaction + child. I don't expect that there will be any other transactions in that package. Even if there is another descendant on the second anchor output or a grandchild, your node will still be told the existence of the CPFP child, and still be told the 2-transaction ancestor package if you request it.\r\n\r\n> blocking an in-package LN transaction propagation by submitting something conflicting to the victim's peers\r\n\r\nThis seems equivalent to a single transaction scenario. If all your peers have tx A which conflicts with tx B, then you probably won't hear about B. I don't think there's anything we can do about that here...",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-24T11:44:06Z",
      "diff_hunk" : "@@ -1595,47 +1636,121 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n-    auto multi_submission_result = quit_early || linearized_package.FilteredTxns().empty() ?\n-        PackageMempoolAcceptResult(package_state_quit_early, {}) :\n-        AcceptSubPackage(linearized_package.FilteredTxns(), args);\n-    PackageValidationState& package_state_final = multi_submission_result.m_state;\n+    // Clear temporary coins that were pulled in during PreChecks or created in PackageAddTransaction.\n+    CleanupTemporaryCoins();\n+\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1370028136",
      "id" : 1370028136,
      "in_reply_to_id" : 1368520437,
      "line" : 1612,
      "node_id" : "PRRC_kwDOABII585RqPho",
      "original_commit_id" : "e63e371c094ddf06f0b1b7ef427bb1ca47da640b",
      "original_line" : 1612,
      "original_position" : 132,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 452,
      "pull_request_review_id" : 1694635353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370028136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T11:44:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370028136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1370053115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370053115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Generally we are not considering non-ancestor-set-shaped candidate subsets (see other comments supporting this decision https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620538136 and https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1622227095), as they wouldn't be considered in our `BlockAssembler` algorithm anyway (and annoyingly they'd also resist eviction). Just doing ancestor-set-shaped subsets is also much simpler.",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-24T12:03:06Z",
      "diff_hunk" : "@@ -658,6 +667,198 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1370053115",
      "id" : 1370053115,
      "in_reply_to_id" : 1369846141,
      "line" : 656,
      "node_id" : "PRRC_kwDOABII585RqVn7",
      "original_commit_id" : "ea770e9a63e68466d4f1c4f5ad5bb5519ecf3efe",
      "original_line" : 674,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 648,
      "pull_request_review_id" : 1694676959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370053115/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T12:03:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370053115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1370618809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370618809"
         }
      },
      "author_association" : "MEMBER",
      "body" : "only assert in the file, is this desired vs `Assume`?",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-24T18:06:03Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_entry = m_txid_to_entry.at(parent_txid);\n+        if (parent_entry.ancestor_subset.empty()) {\n+            visit(parent_entry.tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        // This recursive call should not have included ourselves; it should be impossible for this\n+        // tx to be both an ancestor and a descendant of us.\n+        assert(m_txid_to_entry.at(curr_txid).ancestor_subset.empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1370618809",
      "id" : 1370618809,
      "line" : 46,
      "node_id" : "PRRC_kwDOABII585Rsfu5",
      "original_commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 46,
      "pull_request_review_id" : 1695559666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370618809/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T15:15:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370618809",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 1a3d5e4b828efe96038d71e838525a150f4ff204 modulo single question\r\n\r\nonly minor changes since last review.\r\n\r\nI'll rebase my additional fuzz target changes on top once there are more ACKs",
      "created_at" : "2023-10-24T18:09:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1777764536",
      "id" : 1777764536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585p9oi4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1777764536/reactions"
      },
      "updated_at" : "2023-10-24T18:09:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1777764536",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371491942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371491942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a0545f457c26a5d1e7ac2c0fab46213f3d07c739\r\n\r\nnit: It seems like the order (DFS/BFS or whatever) of inclusion into ancestors here doesn't matter at all. I wish the comment said that in the loop above.",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-25T10:10:28Z",
      "diff_hunk" : "@@ -237,14 +283,28 @@ void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n                 to_process.erase(iter);\n             }\n         }\n+        // Track the order in which transactions were selected.\n+        for (const auto& ancestor : ancestors) {\n+            m_inclusion_order.emplace(ancestor->first, sequence_num);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371491942",
      "id" : 1371491942,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII585Rv05m",
      "original_commit_id" : "a0545f457c26a5d1e7ac2c0fab46213f3d07c739",
      "original_line" : 288,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 87,
      "pull_request_review_id" : 1696896529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371491942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T11:06:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371491942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371536514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371536514"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a0545f457c26a5d1e7ac2c0fab46213f3d07c739\r\n\r\nwhen would this be possible?",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-25T10:50:03Z",
      "diff_hunk" : "@@ -201,8 +245,9 @@ void MiniMiner::SanityCheck() const\n         [&](const auto& txid){return m_entries_by_txid.find(txid) == m_entries_by_txid.end();}));\n }\n \n-void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+void MiniMiner::BuildMockTemplate(std::optional<CFeeRate> target_feerate)\n {\n+    uint32_t sequence_num{0};\n     while (!m_entries_by_txid.empty()) {\n         // Sort again, since transaction removal may change some m_entries' ancestor feerates.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371536514",
      "id" : 1371536514,
      "line" : 252,
      "node_id" : "PRRC_kwDOABII585Rv_yC",
      "original_commit_id" : "a0545f457c26a5d1e7ac2c0fab46213f3d07c739",
      "original_line" : 252,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 69,
      "pull_request_review_id" : 1696896529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371536514/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T11:06:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371536514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371870143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371870143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"Transactions included in an ancestor set together have the same sequence number\" is part of the docstring for `m_inclusion_order`. Also, note how topology is a separate \"score\" used to break ties in `AncestorPackage::PackageEntry::operator<` (also documented).\r\n\r\nIf I retouch, I can add a sentence that interdependency between the transactions in the ancestor set is not a concern when assigning the inclusion numbers in the comment here.",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-25T14:29:05Z",
      "diff_hunk" : "@@ -237,14 +283,28 @@ void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n                 to_process.erase(iter);\n             }\n         }\n+        // Track the order in which transactions were selected.\n+        for (const auto& ancestor : ancestors) {\n+            m_inclusion_order.emplace(ancestor->first, sequence_num);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371870143",
      "id" : 1371870143,
      "in_reply_to_id" : 1371491942,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII585RxRO_",
      "original_commit_id" : "a0545f457c26a5d1e7ac2c0fab46213f3d07c739",
      "original_line" : 288,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 87,
      "pull_request_review_id" : 1697528453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371870143/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T14:29:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371870143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371880775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371880775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "When a transaction's parent is mined and it isn't, its parent is no longer part of its ancestor fees and size. This may change its ancestor feerate.\r\n\r\nThe analogous concept in `BlockAssembler` is [`mapModifiedTx`](https://github.com/bitcoin/bitcoin/blob/64879f4c03b9d933898c0bb83d9b7e9c20729e51/src/node/miner.cpp#L297-L299).\r\n\r\nBtw, there are [review club notes](https://bitcoincore.reviews/26152) that may be helpful for understanding #27021.",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-25T14:36:13Z",
      "diff_hunk" : "@@ -201,8 +245,9 @@ void MiniMiner::SanityCheck() const\n         [&](const auto& txid){return m_entries_by_txid.find(txid) == m_entries_by_txid.end();}));\n }\n \n-void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+void MiniMiner::BuildMockTemplate(std::optional<CFeeRate> target_feerate)\n {\n+    uint32_t sequence_num{0};\n     while (!m_entries_by_txid.empty()) {\n         // Sort again, since transaction removal may change some m_entries' ancestor feerates.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1371880775",
      "id" : 1371880775,
      "in_reply_to_id" : 1371536514,
      "line" : 252,
      "node_id" : "PRRC_kwDOABII585RxT1H",
      "original_commit_id" : "a0545f457c26a5d1e7ac2c0fab46213f3d07c739",
      "original_line" : 252,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 69,
      "pull_request_review_id" : 1697546125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371880775/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-25T14:36:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1371880775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> ACK https://github.com/bitcoin/bitcoin/commit/1a3d5e4b828efe96038d71e838525a150f4ff204 modulo single question\r\n\r\nWhat's the question?",
      "created_at" : "2023-10-25T15:14:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1779509636",
      "id" : 1779509636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585qESmE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1779509636/reactions"
      },
      "updated_at" : "2023-10-25T15:14:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1779509636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "+2,344 diff sounds good to review on one branch, still have to answer past review comments.",
      "created_at" : "2023-10-26T03:45:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1780368821",
      "id" : 1780368821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585qHkW1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1780368821/reactions"
      },
      "updated_at" : "2023-10-26T03:45:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1780368821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1372700190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1372700190"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thank you. It's no big deal, it's mostly about reviewing the piece of code right above this one.",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-26T07:18:17Z",
      "diff_hunk" : "@@ -237,14 +283,28 @@ void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n                 to_process.erase(iter);\n             }\n         }\n+        // Track the order in which transactions were selected.\n+        for (const auto& ancestor : ancestors) {\n+            m_inclusion_order.emplace(ancestor->first, sequence_num);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1372700190",
      "id" : 1372700190,
      "in_reply_to_id" : 1371491942,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII585R0b4e",
      "original_commit_id" : "a0545f457c26a5d1e7ac2c0fab46213f3d07c739",
      "original_line" : 288,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 87,
      "pull_request_review_id" : 1698887372,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1372700190/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-26T07:18:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1372700190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-26T11:43:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1780951141",
      "id" : 1780951141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
      "node_id" : "IC_kwDOABII585qJyhl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1780951141/reactions"
      },
      "updated_at" : "2023-10-26T11:43:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1780951141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1373113393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1373113393"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Felt a bit showstopper-y, but I can change it to an `Assume` next time I retouch",
      "commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "created_at" : "2023-10-26T12:46:53Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+\n+/**Comparator for sorting m_txns which contains reference wrappers.*/\n+struct CompareEntry {\n+    template<typename T>\n+    bool operator()(const std::reference_wrapper<T> a, const std::reference_wrapper<T> b) const\n+    {\n+        return a.get() < b.get();\n+    }\n+};\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_entry = m_txid_to_entry.at(parent_txid);\n+        if (parent_entry.ancestor_subset.empty()) {\n+            visit(parent_entry.tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        // This recursive call should not have included ourselves; it should be impossible for this\n+        // tx to be both an ancestor and a descendant of us.\n+        assert(m_txid_to_entry.at(curr_txid).ancestor_subset.empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1373113393",
      "id" : 1373113393,
      "in_reply_to_id" : 1370618809,
      "line" : 46,
      "node_id" : "PRRC_kwDOABII585R2Awx",
      "original_commit_id" : "1a3d5e4b828efe96038d71e838525a150f4ff204",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/policy/ancestor_packages.cpp",
      "position" : 46,
      "pull_request_review_id" : 1699542001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1373113393/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-26T12:46:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1373113393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
