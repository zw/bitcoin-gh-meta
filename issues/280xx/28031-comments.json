[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28031).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28579](https://github.com/bitcoin/bitcoin/pull/28579) (refactor: Remove redundant checks in compat/assumptions.h by maflcko)\n* [#28481](https://github.com/bitcoin/bitcoin/pull/28481) (txorphanage: add size accounting, use wtxids, support multiple announcers by glozow)\n* [#28368](https://github.com/bitcoin/bitcoin/pull/28368) (Fee Estimator updates from Validation Interface/CScheduler thread by ismaelsadeeq)\n* [#28107](https://github.com/bitcoin/bitcoin/pull/28107) (util: Type-safe transaction identifiers by dergoegge)\n* [#27052](https://github.com/bitcoin/bitcoin/pull/27052) (test: rpc: add last block announcement time to getpeerinfo result by LarryRuane)\n* [#21515](https://github.com/bitcoin/bitcoin/pull/21515) (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-07-05T15:30:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1622002877",
      "id" : 1622002877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585grcy9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1622002877/reactions"
      },
      "updated_at" : "2023-10-12T21:45:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1622002877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253443521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253443521"
         }
      },
      "author_association" : "MEMBER",
      "body" : "make these be TXPACKAGES? then you get the entire \"story\" with a single log type (which helped me diagnose the `Timeout` issue)",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T17:50:11Z",
      "diff_hunk" : "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253443521",
      "id" : 1253443521,
      "line" : 3020,
      "node_id" : "PRRC_kwDOABII585KtgfB",
      "original_commit_id" : "543273d96e896adf5531ed961856aa0eb70cbe57",
      "original_line" : 2966,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 177,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253443521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253443521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253454308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454308"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`m_orphan_request_tracker` :pray: ",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T18:02:04Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253454308",
      "id" : 1253454308,
      "line" : 30,
      "node_id" : "PRRC_kwDOABII585KtjHk",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 30,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454308/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253457139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253457139"
         }
      },
      "author_association" : "MEMBER",
      "body" : "seems wrong/very noisy without this? e.g., this line https://github.com/bitcoin/bitcoin/pull/28031/files#diff-ece439372a3e31da3141ed8fda99b37381e32cdab17ca26fffd5dfd916c300c8R124 will fire constantly\r\n\r\n```suggestion\r\n        m_orphanage.EraseTx(ptx->GetWitnessHash());\r\n        orphan_request_tracker.ForgetTxHash(ptx->GetWitnessHash());\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T18:05:10Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253457139",
      "id" : 1253457139,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585Ktjzz",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 75,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253457139/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253457139",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253459892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253459892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "any principle on prefixing and postfixing `\\n` to everything in these logs?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T18:08:20Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253459892",
      "id" : 1253459892,
      "line" : 124,
      "node_id" : "PRRC_kwDOABII585Ktke0",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 124,
      "original_position" : 124,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 124,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253459892/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253459892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253461532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253461532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan request %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T18:10:14Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nResolving orphan %s, requesting by txids of parents from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+            const auto ptx = m_orphanage.GetTx(gtxid.GetHash());\n+            if (!ptx) {\n+                // We can't request ancpkginfo and we have no way of knowing what the missing\n+                // parents are (it could also be that the orphan has already been resolved).\n+                // Give up.\n+                orphan_request_tracker.ForgetTxHash(gtxid.GetHash());\n+                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253461532",
      "id" : 1253461532,
      "line" : 136,
      "node_id" : "PRRC_kwDOABII585Ktk4c",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 136,
      "original_position" : 136,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 136,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253461532/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253461532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253479136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253479136"
         }
      },
      "author_association" : "MEMBER",
      "body" : "trying to fetch after failure seems wrong\r\n\r\n```suggestion\r\n        m_orphanage.EraseTx(wtxid);\r\n        orphan_request_tracker.ForgetTxHash(wtxid);\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T18:26:54Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253479136",
      "id" : 1253479136,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII585KtpLg",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 80,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253479136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253479136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253619584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253619584"
         }
      },
      "author_association" : "MEMBER",
      "body" : "since we're using `size_t` for these fields, do we want to continue on with UB for release builds or do an assert?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T20:37:09Z",
      "diff_hunk" : "@@ -15,6 +14,16 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253619584",
      "id" : 1253619584,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII585KuLeA",
      "original_commit_id" : "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "original_line" : 21,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 16,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253619584/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253619584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253623061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253623061"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> [txorphanage] handle AddTx(nullptr)\r\n\r\nCould we motivate this change in the commit message?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T20:41:12Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253623061",
      "id" : 1253623061,
      "line" : 31,
      "node_id" : "PRRC_kwDOABII585KuMUV",
      "original_commit_id" : "6cd8be8a4c9ea6cd9b7e3bf55ab423d8fc6e8ac6",
      "original_line" : 31,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 26,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253623061/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253623061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253633358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253633358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`requestable_orphans` is more like `requestable_parents`?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T20:51:38Z",
      "diff_hunk" : "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253633358",
      "id" : 1253633358,
      "line" : 5961,
      "node_id" : "PRRC_kwDOABII585KuO1O",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 5926,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 306,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253633358/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253633358",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253643847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253643847"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggested comment, something like:\r\n\r\n\"We do not presume the parent will still be in the orphanage by the time a response is received, so we exclude the orphanage from the check when deciding what to request.\"\r\n\r\nIf that's wrong, then it needs better explanation than what exists in the commit message :) ",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-05T21:00:59Z",
      "diff_hunk" : "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253643847",
      "id" : 1253643847,
      "line" : 5963,
      "node_id" : "PRRC_kwDOABII585KuRZH",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 5928,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 308,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253643847/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253643847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254470451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254470451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why not just `ForgetTxHash` here? Why gate it on not being in the block?\r\n\r\nI'm presuming following commits will reveal the answer...",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T13:48:54Z",
      "diff_hunk" : "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254470451",
      "id" : 1254470451,
      "line" : 59,
      "node_id" : "PRRC_kwDOABII585KxbMz",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 54,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 59,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254470451/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254470451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254492129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254492129"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in other words, it includes anything they've told us about, even if we haven't acted on it in any way?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T14:03:29Z",
      "diff_hunk" : "@@ -59,6 +58,30 @@ class TxPackageTracker {\n      * still want to try to resolve. Remove its entries from the orphanage and other data\n      * structures. */\n     void MempoolRejectedTx(const uint256& wtxid);\n+\n+    /** Add a new orphan or an announcement for a known orphan. This should be called for every\n+     * peer that announces the orphan.  The orphan request tracker will decide when to request what\n+     * from which peer - use GetOrphanRequests().\n+     * @param[in]   tx      CTransactionRef if this is a new orphan, or nullptr if an announcement\n+     *                      for a known orphan.\n+     * @param[in]   reqtime Some time in the future when the orphan resolution information should be\n+     *                      requested. This may be further extended internally.\n+     */\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime);\n+\n+    /** Number of packages we are working on with this peer. Includes any entries in the orphan\n+     * tracker and in-flight requests. */\n+    size_t Count(NodeId nodeid) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254492129",
      "id" : 1254492129,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585Kxgfh",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 74,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.h",
      "position" : 75,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254492129/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254492129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254587582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254587582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Might be good to note that this will \"multi-count\" a single known orphan, counting the bytes for each node. Was wondering early in the PR why the update for this field and `m_total_orphan_bytes` wasn't atomic",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T15:15:44Z",
      "diff_hunk" : "@@ -98,6 +124,9 @@ class TxOrphanage {\n      *  transactions using their witness ids. */\n     std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(m_mutex);\n \n+    /** Map from nodeid to the amount of orphans provided by this peer, in bytes. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254587582",
      "id" : 1254587582,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII585Kx3y-",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 127,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 85,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254587582/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254587582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Looks like the CI fails:\r\n\r\n```\r\nï¿½[0mï¿½[0;31mp2p_orphan_handling.py                                 | â Failed  | 2407 s",
      "created_at" : "2023-07-06T15:25:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1623876865",
      "id" : 1623876865,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585gymUB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1623876865/reactions"
      },
      "updated_at" : "2023-07-06T15:25:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1623876865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Investigating, thanks @DrahtBot",
      "created_at" : "2023-07-06T15:32:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1623886758",
      "id" : 1623886758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585gyoum",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1623886758/reactions"
      },
      "updated_at" : "2023-07-06T15:32:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1623886758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254613476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254613476"
         }
      },
      "author_association" : "MEMBER",
      "body" : "you allow this to be `empty` one line below with a break; just belt and suspenders?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T15:37:02Z",
      "diff_hunk" : "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254613476",
      "id" : 1254613476,
      "line" : 198,
      "node_id" : "PRRC_kwDOABII585Kx-Hk",
      "original_commit_id" : "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "original_line" : 198,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 161,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254613476/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254613476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254615531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254615531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "initialize outside of loop?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T15:38:41Z",
      "diff_hunk" : "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);\n+                if (elem->second.announcers.empty()) break;\n+                // Pick a random peer from announcers set.\n+                FastRandomContext rng;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254615531",
      "id" : 1254615531,
      "line" : 201,
      "node_id" : "PRRC_kwDOABII585Kx-nr",
      "original_commit_id" : "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "original_line" : 201,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 164,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254615531/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254615531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254629352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629352"
         }
      },
      "author_association" : "MEMBER",
      "body" : "also check that `EraseTxNoLock` wasn't called, i.e. `m_orphans` still has the orphan tx",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T15:50:33Z",
      "diff_hunk" : "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254629352",
      "id" : 1254629352,
      "line" : 217,
      "node_id" : "PRRC_kwDOABII585KyB_o",
      "original_commit_id" : "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "original_line" : 217,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 131,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629352/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629352",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254629680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629680"
         }
      },
      "author_association" : "MEMBER",
      "body" : "check that the orphan tx is now missing from `m_orphans`?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T15:50:52Z",
      "diff_hunk" : "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.\n+        orphanage.EraseForPeer(node0);\n+        expected_node0_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // EraseForPeer should delete the orphan if it's the only announcer left.\n+        orphanage.EraseForPeer(node1);\n+        expected_total_count -= 1;\n+        expected_total_size -= tx_size;\n+        expected_node1_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254629680",
      "id" : 1254629680,
      "line" : 232,
      "node_id" : "PRRC_kwDOABII585KyCEw",
      "original_commit_id" : "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "original_line" : 232,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 146,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629680/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629680",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254679291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254679291"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can we programatically justify this magic :)",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-06T16:36:50Z",
      "diff_hunk" : "@@ -2058,7 +2058,7 @@ def received_wtxidrelay():\n         test_transaction_acceptance(self.nodes[0], self.wtx_node, tx2, with_witness=True, accepted=False)\n \n         # Expect a request for parent (tx) by txid despite use of WTX peer\n-        self.wtx_node.wait_for_getdata([tx.sha256], 60)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254679291",
      "id" : 1254679291,
      "line" : 2061,
      "node_id" : "PRRC_kwDOABII585KyOL7",
      "original_commit_id" : "0d945feaf6025a9f84fc1aa3f087422246793cba",
      "original_line" : 2061,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/p2p_segwit.py",
      "position" : 4,
      "pull_request_review_id" : 1515046495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254679291/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T16:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254679291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261403669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261403669"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be cleaner to write:\r\n```suggestion\r\n    if (!Assume(tx)) {\r\n        return false;\r\n    }\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:04:16Z",
      "diff_hunk" : "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);\n+    m_peer_bytes_used.at(peer) -= size;\n+    if (m_peer_bytes_used.at(peer) == 0) {\n+        m_peer_bytes_used.erase(peer);\n+    }\n+}\n \n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {\n+        Assume(false);\n+        return false;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261403669",
      "id" : 1261403669,
      "line" : 34,
      "node_id" : "PRRC_kwDOABII585LL34V",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 34,
      "original_position" : 29,
      "original_start_line" : 31,
      "path" : "src/txorphanage.cpp",
      "position" : 29,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261403669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 31,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261403669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261405442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261405442"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This can be dropped in favor of just checking that the CNodeState exists",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:05:21Z",
      "diff_hunk" : "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261405442",
      "id" : 1261405442,
      "line" : 1448,
      "node_id" : "PRRC_kwDOABII585LL4UC",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 1448,
      "original_position" : 67,
      "original_start_line" : 1447,
      "path" : "src/net_processing.cpp",
      "position" : 67,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261405442/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1447,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261405442",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261410424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261410424"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(I've mentioned this offline as well)\r\n\r\nThe locking assumptions around this check are weird because `m_txpackagetracker` has its own internal mutex where as `m_txrequest` is guarded by `cs_main`. There is nothing stopping `m_txpackagetracker->Count()` form returning something different right after this check. ",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:09:06Z",
      "diff_hunk" : "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;\n+    if (m_txpackagetracker->Count(nodeid) + m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261410424",
      "id" : 1261410424,
      "line" : 1449,
      "node_id" : "PRRC_kwDOABII585LL5h4",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 1449,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 68,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261410424/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261410424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261412063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261412063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nvoid PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const CTransactionRef& tx, std::chrono::microseconds current_time)\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:10:09Z",
      "diff_hunk" : "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261412063",
      "id" : 1261412063,
      "line" : 1444,
      "node_id" : "PRRC_kwDOABII585LL57f",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 1444,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 63,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261412063/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261412063",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261414179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261414179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Imo, it would be nicer to do the orphanage changes separately, including amended functional/unit/fuzz tests.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:11:36Z",
      "diff_hunk" : "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261414179",
      "id" : 1261414179,
      "line" : 17,
      "node_id" : "PRRC_kwDOABII585LL6cj",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 17,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 12,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261414179/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261414179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261416426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261416426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not a big fan of using `Assume` like this because we can't test these conditions but they **can** happen in production (if the caller is doing something wrong).\r\n\r\nI'd suggest just returning if these assumptions don't hold.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:13:34Z",
      "diff_hunk" : "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261416426",
      "id" : 1261416426,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII585LL6_q",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 21,
      "original_position" : 16,
      "original_start_line" : 20,
      "path" : "src/txorphanage.cpp",
      "position" : 16,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261416426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 20,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261416426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261419537"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419537"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be nice to add unit and fuzz tests for this",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:16:20Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261419537",
      "id" : 1261419537,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII585LL7wR",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 19,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.h",
      "position" : 19,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419537/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419537",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261419680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419680"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    void MempoolAcceptedTx(const CTransactionRef& tx);\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:16:29Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;\n+    };\n+\n+    explicit TxPackageTracker(const Options& options);\n+    ~TxPackageTracker();\n+\n+    // Orphanage wrapper functions\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool OrphanageHaveTx(const GenTxid& gtxid);\n+\n+    /** Extract a transaction from a peer's work set\n+     *  Returns nullptr if there are no transactions to work on.\n+     *  Otherwise returns the transaction reference, and removes\n+     *  it from the work set.\n+     */\n+    CTransactionRef GetTxToReconsider(NodeId peer);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void DisconnectedPeer(NodeId peer);\n+\n+    /** Erase all orphans included in or invalidated by a new block */\n+    void BlockConnected(const CBlock& block);\n+\n+    /** Does this peer have any orphans to validate? */\n+    bool HaveTxToReconsider(NodeId peer);\n+\n+    /** Return how many entries exist in the orphange */\n+    size_t OrphanageSize();\n+\n+    /** Should be called when a transaction is accepted to the mempool. If it was an orphan we were\n+     * trying to resolve, remove its entries from the orphanage and other data structures. If it is\n+     * the ancestor of an orphan, add the orphan to its associated peer's workset. */\n+    void MempoolAcceptedTx(const CTransactionRef& ptx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261419680",
      "id" : 1261419680,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII585LL7yg",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.h",
      "position" : 56,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419680/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419680",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261436145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261436145"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            // Add the orphan's parents. Net processing will filter out what we already have.\r\n            // Deduplicate parent txids, so that we don't have to loop over\r\n            // the same parent txid more than once down below.\r\n            std::set<uint256> unique_parents;\r\n            auto to_prevout = [](const CTxIn& in) { return in.prevout.hash; };\r\n            std::transform(ptx->vin.begin(), ptx->vin.end(), std::inserter(unique_parents, unique_parents.begin()), to_prevout);\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:31:16Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nResolving orphan %s, requesting by txids of parents from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+            const auto ptx = m_orphanage.GetTx(gtxid.GetHash());\n+            if (!ptx) {\n+                // We can't request ancpkginfo and we have no way of knowing what the missing\n+                // parents are (it could also be that the orphan has already been resolved).\n+                // Give up.\n+                orphan_request_tracker.ForgetTxHash(gtxid.GetHash());\n+                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+                continue;\n+            }\n+            // Add the orphan's parents. Net processing will filter out what we already have.\n+            // Deduplicate parent txids, so that we don't have to loop over\n+            // the same parent txid more than once down below.\n+            std::vector<uint256> unique_parents;\n+            unique_parents.reserve(ptx->vin.size());\n+            for (const auto& txin : ptx->vin) {\n+                // We start with all parents, and then remove duplicates below.\n+                unique_parents.push_back(txin.prevout.hash);\n+            }\n+            std::sort(unique_parents.begin(), unique_parents.end());\n+            unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261436145",
      "id" : 1261436145,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII585LL_zx",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 149,
      "original_position" : 149,
      "original_start_line" : 139,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 149,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261436145/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 139,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261436145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261440012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261440012"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would you mind adding some spacing around logical blocks in your code? I find a lot of the new code hard to read with a lack of spacing\r\n\r\ne.g.:\r\n```suggestion\r\n    {\r\n        AssertLockNotHeld(m_mutex);\r\n        LOCK(m_mutex);\r\n\r\n        std::vector<std::pair<NodeId, GenTxid>> expired;\r\n        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\r\n        for (const auto& entry : expired) {\r\n            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\r\n                entry.second.GetHash().ToString(), entry.first);\r\n        }\r\n\r\n        std::vector<GenTxid> results;\r\n        for (const auto& gtxid : tracker_requestable) {\r\n```",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T16:35:01Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261440012",
      "id" : 1261440012,
      "line" : 128,
      "node_id" : "PRRC_kwDOABII585LMAwM",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 128,
      "original_position" : 128,
      "original_start_line" : 118,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 128,
      "pull_request_review_id" : 1526722308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261440012/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 118,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-12T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261440012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261605505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261605505"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "There should be a `setmocktime` call with the initial time somewhere before the first `fastforward`, otherwise this can fail intermittently.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T18:56:05Z",
      "diff_hunk" : "@@ -0,0 +1,270 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+\"\"\"\n+\n+import random\n+import time\n+\n+from test_framework.messages import (\n+    CInv,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    MSG_TX,\n+    MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX,\n+    MSG_WTX,\n+    msg_getdata,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    NONPREF_PEER_TX_DELAY,\n+    ORPHAN_ANCESTOR_GETDATA_INTERVAL,\n+    OVERLOADED_PEER_TX_DELAY,\n+    p2p_lock,\n+    P2PTxInvStore,\n+    TXID_RELAY_DELAY,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_NOP,\n+    OP_RETURN,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# Time to fastforward (using setmocktime) before waiting for the node to send getdata(tx) in response\n+# to an inv(tx), in seconds. This delay includes all possible delays + 1, so it should only be used\n+# when the value of the delay is not interesting. If we want to test that the node waits x seconds\n+# for one peer and y seconds for another, use specific values instead.\n+TXREQUEST_TIME_SKIP = NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY + OVERLOADED_PEER_TX_DELAY + 1\n+\n+# Time to fastfoward (using setmocktime) in between subtests to ensure they do not interfere with\n+# one another, in seconds. Equal to 12 hours, which is enough to expire anything that may exist\n+# (though nothing should since state should be cleared) in p2p data structures.\n+LONG_TIME_SKIP = 12 * 60 * 60\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+            self.mocktime += LONG_TIME_SKIP\n+            self.nodes[0].setmocktime(self.mocktime)\n+    return wrapper\n+\n+class PeerTxRelayer(P2PTxInvStore):\n+    def __init__(self):\n+        super().__init__()\n+        self._tx_received = []\n+        self._getdata_received = []\n+\n+    @property\n+    def tx_received(self):\n+        with p2p_lock:\n+            return self._tx_received\n+\n+    @property\n+    def getdata_received(self):\n+        with p2p_lock:\n+            return self._getdata_received\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message)\n+\n+    def on_getdata(self, message):\n+        self._getdata_received.append(message)\n+\n+    def wait_for_getdata_txids(self, txids):\n+        def test_function():\n+            last_getdata = self.last_message.get('getdata')\n+            if not last_getdata:\n+                return False\n+            return all([item.type == MSG_WITNESS_TX and item.hash in txids for item in last_getdata.inv])\n+        self.wait_until(test_function, timeout=10)\n+\n+    def assert_message_ignored(self, message):\n+        \"\"\"Check that the node does not respond to this message with any of\n+        getdata, inv, tx.\n+        \"\"\"\n+        prev_lastmessage = self.last_message\n+        self.send_and_ping(message)\n+        after_lastmessage = self.last_message\n+        for msgtype in [\"getdata\", \"inv\", \"tx\"]:\n+            if msgtype not in prev_lastmessage:\n+                assert msgtype not in after_lastmessage\n+            else:\n+                assert_equal(prev_lastmessage[msgtype], after_lastmessage[msgtype])\n+\n+    def assert_never_requested(self, txhash):\n+        \"\"\"Check that the node has never sent us a getdata for this hash (int type)\"\"\"\n+        for getdata in self.getdata_received:\n+            for request in getdata.inv:\n+                assert request.hash != txhash\n+\n+class OrphanHandlingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.mocktime = int(time.time())\n+\n+    def create_package(self):\n+        \"\"\"Create package with 1 parent and 1 child, normal fees (no cpfp).\n+        \"\"\"\n+        parent = self.wallet.create_self_transfer()\n+        child = self.wallet.create_self_transfer(utxo_to_spend=parent['new_utxo'])\n+        orphan_wtxid = child[\"tx\"].getwtxid()\n+        orphan_tx = child[\"tx\"]\n+        parent_tx = parent[\"tx\"]\n+        return orphan_wtxid, orphan_tx, parent_tx\n+\n+    def create_large_orphan(self):\n+        \"\"\"Create huge orphan transaction\"\"\"\n+        tx = CTransaction()\n+        # Nonexistent UTXO\n+        tx.vin = [CTxIn(COutPoint(random.randrange(1 << 256), random.randrange(1, 100)))]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_NOP] * 390000)]\n+        tx.vout = [CTxOut(100, CScript([OP_RETURN, b'a' * 20]))]\n+        return tx\n+\n+    def fastforward(self, seconds):\n+        \"\"\"Convenience helper function to fast-forward, so we don't need to keep track of the\n+        starting time when we call setmocktime.\"\"\"\n+        self.mocktime += seconds\n+        self.nodes[0].setmocktime(self.mocktime)\n+\n+    @cleanup\n+    def test_orphan_handling_prefer_outbound(self):\n+        self.log.info(\"Test that the node prefers requesting from outbound peers\")\n+        node = self.nodes[0]\n+        orphan_wtxid, orphan_tx, parent_tx = self.create_package()\n+        orphan_inv = CInv(t=MSG_WTX, h=int(orphan_wtxid, 16))\n+\n+        peer_inbound = node.add_p2p_connection(PeerTxRelayer())\n+        peer_inbound.send_and_ping(msg_inv([orphan_inv]))\n+        self.fastforward(TXREQUEST_TIME_SKIP)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261605505",
      "id" : 1261605505,
      "line" : 160,
      "node_id" : "PRRC_kwDOABII585LMpKB",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 160,
      "original_position" : 160,
      "original_start_line" : null,
      "path" : "test/functional/p2p_orphan_handling.py",
      "position" : 160,
      "pull_request_review_id" : 1527052773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261605505/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T22:26:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261605505",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261645151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261645151"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "commit 543273d96e896adf5531ed961856aa0eb70cbe57:\r\nnit:  `uint256&` like in the line above?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T19:35:16Z",
      "diff_hunk" : "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261645151",
      "id" : 1261645151,
      "line" : 3017,
      "node_id" : "PRRC_kwDOABII585LMy1f",
      "original_commit_id" : "543273d96e896adf5531ed961856aa0eb70cbe57",
      "original_line" : 2963,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 173,
      "pull_request_review_id" : 1527052773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261645151/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T22:26:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261645151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261648754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261648754"
         }
      },
      "author_association" : "MEMBER",
      "body" : "hmmm, this is a `txid`, not a `wtxid`, which is essentially a no-op unless it's a non-segwit tx. What cases do we expect this `MempoolRejectedTx` is even needed? I added logging and will see if this case ever actually would be needed.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T19:39:24Z",
      "diff_hunk" : "@@ -5926,6 +5958,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {\n+                // We don't know that the transaction was rejected by mempool. But if the\n+                // transaction was added to mempool, we would have already called\n+                // MempoolAcceptedTx().\n+                m_txpackagetracker->MempoolRejectedTx(gtxid.GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261648754",
      "id" : 1261648754,
      "line" : 5967,
      "node_id" : "PRRC_kwDOABII585LMzty",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 5967,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 312,
      "pull_request_review_id" : 1527114151,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261648754/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261648754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261779747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261779747"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think there should ever be a `\\n` prefix, why would we want to separate the meta information (timestamp, threadname etc.) from the actual log entry?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T22:20:41Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261779747",
      "id" : 1261779747,
      "in_reply_to_id" : 1253459892,
      "line" : 124,
      "node_id" : "PRRC_kwDOABII585LNTsj",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 124,
      "original_position" : 124,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 124,
      "pull_request_review_id" : 1527052773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261779747/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T22:26:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261779747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261786477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786477"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could use `orphan_wtxid` introduced in the previous commit, here and in various other places.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-12T22:31:57Z",
      "diff_hunk" : "@@ -2966,7 +2966,7 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n             m_txpackagetracker->AddChildrenToWorkSet(*porphanTx);\n-            m_txpackagetracker->EraseOrphanTx(orphanHash);\n+            m_txpackagetracker->EraseOrphanTx(porphanTx->GetWitnessHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261786477",
      "id" : 1261786477,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LNVVt",
      "original_commit_id" : "4cbb63175398d9b8afe755d2adb24edbd2b4913b",
      "original_line" : 2969,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1527321195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786477/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T22:31:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1262316909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262316909"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah good point.\r\n\r\nIt seems that, given the need to synchronize between `TxRequestTracker` and the package tracking stuff, we should have them both guarded by 1 lock. Looking at https://github.com/bitcoin/bitcoin/pull/26151#pullrequestreview-1116661944 it seems like we could have a `m_txrequest GUARDED_BY(tx_download_mutex)`, `m_txpackagetracker GUARDED_BY(tx_download_mutex)`, and lock it from these peerman functions?\r\n\r\nAlternatively, I wonder if it makes sense to take it a step further and put this all in a `TxDownloadManager` module that wraps orphanage, txrequest, and package tracking.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-13T09:50:48Z",
      "diff_hunk" : "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;\n+    if (m_txpackagetracker->Count(nodeid) + m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1262316909",
      "id" : 1262316909,
      "in_reply_to_id" : 1261410424,
      "line" : 1449,
      "node_id" : "PRRC_kwDOABII585LPW1t",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 1449,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 68,
      "pull_request_review_id" : 1528060917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262316909/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-13T09:53:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262316909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1265917707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265917707"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\r\n(moved over from [27742](https://github.com/bitcoin/bitcoin/pull/27742#discussion_r1265739284)):\r\nThe approach to add a wtxid disguised as a txid to distinguish between legacy orphan processing and package relay seems a bit like a hack to me.\r\nI'm not strictly against it, but I guess I don't completely understand yet why it's necessary - the information whether a peer supports package relay does not change, so why can't we just always use `GenTxid::Wtxid(wtxid)` and check again in `GetOrphanRequests()` and elsewhere whether we do package relay with the peer instead of checking whether it's a txid / wtxid?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-17T21:23:30Z",
      "diff_hunk" : "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n     }\n-    void BlockConnected(const CBlock& block) { m_orphanage.EraseForBlock(block); }\n     void LimitOrphans(unsigned int max_orphans) { m_orphanage.LimitOrphans(max_orphans); }\n     bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n     size_t OrphanageSize() { return m_orphanage.Size(); }\n-    void MempoolAcceptedTx(const CTransactionRef& ptx)\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.AddChildrenToWorkSet(*ptx);\n         m_orphanage.EraseTx(ptx->GetWitnessHash());\n     }\n-    void MempoolRejectedTx(const uint256& wtxid)\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.EraseTx(wtxid);\n     }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1265917707",
      "id" : 1265917707,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII585LdF8L",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 87,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 91,
      "pull_request_review_id" : 1533720796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265917707/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-17T21:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265917707",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1266760855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266760855"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah good point, it's not necessary, we could just use `GenTxid::Wtxid` for all of them. :+1: ",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-18T13:16:53Z",
      "diff_hunk" : "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n     }\n-    void BlockConnected(const CBlock& block) { m_orphanage.EraseForBlock(block); }\n     void LimitOrphans(unsigned int max_orphans) { m_orphanage.LimitOrphans(max_orphans); }\n     bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n     size_t OrphanageSize() { return m_orphanage.Size(); }\n-    void MempoolAcceptedTx(const CTransactionRef& ptx)\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.AddChildrenToWorkSet(*ptx);\n         m_orphanage.EraseTx(ptx->GetWitnessHash());\n     }\n-    void MempoolRejectedTx(const uint256& wtxid)\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.EraseTx(wtxid);\n     }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1266760855",
      "id" : 1266760855,
      "in_reply_to_id" : 1265917707,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII585LgTyX",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 87,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 91,
      "pull_request_review_id" : 1535017514,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266760855/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-18T13:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266760855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1269622220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269622220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "also, adding wtxid logging at `MEMPOOLREJ` log is done would be <3 ",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-20T15:18:59Z",
      "diff_hunk" : "@@ -5926,6 +5958,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {\n+                // We don't know that the transaction was rejected by mempool. But if the\n+                // transaction was added to mempool, we would have already called\n+                // MempoolAcceptedTx().\n+                m_txpackagetracker->MempoolRejectedTx(gtxid.GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1269622220",
      "id" : 1269622220,
      "in_reply_to_id" : 1261648754,
      "line" : 5967,
      "node_id" : "PRRC_kwDOABII585LrOXM",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 5967,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 312,
      "pull_request_review_id" : 1539533894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269622220/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:18:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269622220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1270139854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270139854"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A comment can be added to precise this is the global not per-peer limit, at least on how it is used by `LimitOrphans()` (`DEFAULT_MAX_ORPHAN_TRANSACTIONS`).",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-21T01:16:51Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1270139854",
      "id" : 1270139854,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII585LtMvO",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.h",
      "position" : 24,
      "pull_request_review_id" : 1540338442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270139854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T02:21:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270139854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1270671380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270671380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This logging should be handled by the caller, since the caller sometimes isn't actually requesting the items!",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-21T13:22:30Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nResolving orphan %s, requesting by txids of parents from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+            const auto ptx = m_orphanage.GetTx(gtxid.GetHash());\n+            if (!ptx) {\n+                // We can't request ancpkginfo and we have no way of knowing what the missing\n+                // parents are (it could also be that the orphan has already been resolved).\n+                // Give up.\n+                orphan_request_tracker.ForgetTxHash(gtxid.GetHash());\n+                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+                continue;\n+            }\n+            // Add the orphan's parents. Net processing will filter out what we already have.\n+            // Deduplicate parent txids, so that we don't have to loop over\n+            // the same parent txid more than once down below.\n+            std::vector<uint256> unique_parents;\n+            unique_parents.reserve(ptx->vin.size());\n+            for (const auto& txin : ptx->vin) {\n+                // We start with all parents, and then remove duplicates below.\n+                unique_parents.push_back(txin.prevout.hash);\n+            }\n+            std::sort(unique_parents.begin(), unique_parents.end());\n+            unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n+            for (const auto& txid : unique_parents) {\n+                results.emplace_back(GenTxid::Txid(txid));\n+            }\n+            // Mark the orphan as requested\n+            orphan_request_tracker.RequestedTx(nodeid, gtxid.GetHash(), current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        }\n+        if (!results.empty()) LogPrint(BCLog::TXPACKAGES, \"\\nRequesting %u items from peer=%d\\n\", results.size(), nodeid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1270671380",
      "id" : 1270671380,
      "line" : 156,
      "node_id" : "PRRC_kwDOABII585LvOgU",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 156,
      "pull_request_review_id" : 1541149446,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270671380/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T13:22:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270671380",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272393191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272393191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done :+1: \r\nThis now has 2 logs:\r\n- TXPACKAGES \"accepted orphan tx (wtxid)\"\r\n- MEMPOOL \"AcceptToMemoryPool ... (txid)\" which matches the one in `ProcessMessage` for a tx message",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T15:04:00Z",
      "diff_hunk" : "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272393191",
      "id" : 1272393191,
      "in_reply_to_id" : 1253443521,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L1y3n",
      "original_commit_id" : "543273d96e896adf5531ed961856aa0eb70cbe57",
      "original_line" : 2966,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272393191/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272393191",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272414091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272414091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, thanks",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T15:20:22Z",
      "diff_hunk" : "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272414091",
      "id" : 1272414091,
      "in_reply_to_id" : 1261645151,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L13-L",
      "original_commit_id" : "543273d96e896adf5531ed961856aa0eb70cbe57",
      "original_line" : 2963,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272414091/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272414091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272416121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272416121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(this is deleted now)",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T15:21:57Z",
      "diff_hunk" : "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272416121",
      "id" : 1272416121,
      "in_reply_to_id" : 1253633358,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L14d5",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 5926,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272416121/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272416121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272426199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272426199"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. The reason for excluding orphanage is actually not applicable yet so I have dropped it for now.\r\n\r\nThis is really only applicable when we are requesting the `ancpkginfo` for a tx. We want to exclude orphanage because otherwise, `AlreadyHaveTx` will return true and we will never request `ancpkginfo`s.",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T15:29:45Z",
      "diff_hunk" : "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272426199",
      "id" : 1272426199,
      "in_reply_to_id" : 1253643847,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L167X",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 5928,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272426199/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272426199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272428700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272428700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the prefix",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T15:31:51Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272428700",
      "id" : 1272428700,
      "in_reply_to_id" : 1253459892,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L17ic",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 124,
      "original_position" : 124,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272428700/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272428700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272435787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272435787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T15:37:34Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272435787",
      "id" : 1272435787,
      "in_reply_to_id" : 1253454308,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L19RL",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272435787/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272435787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added in comment",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:17:28Z",
      "diff_hunk" : "@@ -98,6 +124,9 @@ class TxOrphanage {\n      *  transactions using their witness ids. */\n     std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(m_mutex);\n \n+    /** Map from nodeid to the amount of orphans provided by this peer, in bytes. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482595",
      "id" : 1272482595,
      "in_reply_to_id" : 1254587582,
      "line" : 140,
      "node_id" : "PRRC_kwDOABII585L2Isj",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 140,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 106,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482595/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482776"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482776"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, belt and suspenders - commented",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:17:39Z",
      "diff_hunk" : "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482776",
      "id" : 1272482776,
      "in_reply_to_id" : 1254613476,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L2IvY",
      "original_commit_id" : "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "original_line" : 198,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482776/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482776",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482864"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done thanks",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:17:44Z",
      "diff_hunk" : "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);\n+                if (elem->second.announcers.empty()) break;\n+                // Pick a random peer from announcers set.\n+                FastRandomContext rng;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482864",
      "id" : 1272482864,
      "in_reply_to_id" : 1254615531,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L2Iww",
      "original_commit_id" : "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "original_line" : 201,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482864/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482864",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272484902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272484902"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I actually think `ptx` is better, since it's a pointer?",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:19:28Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;\n+    };\n+\n+    explicit TxPackageTracker(const Options& options);\n+    ~TxPackageTracker();\n+\n+    // Orphanage wrapper functions\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool OrphanageHaveTx(const GenTxid& gtxid);\n+\n+    /** Extract a transaction from a peer's work set\n+     *  Returns nullptr if there are no transactions to work on.\n+     *  Otherwise returns the transaction reference, and removes\n+     *  it from the work set.\n+     */\n+    CTransactionRef GetTxToReconsider(NodeId peer);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void DisconnectedPeer(NodeId peer);\n+\n+    /** Erase all orphans included in or invalidated by a new block */\n+    void BlockConnected(const CBlock& block);\n+\n+    /** Does this peer have any orphans to validate? */\n+    bool HaveTxToReconsider(NodeId peer);\n+\n+    /** Return how many entries exist in the orphange */\n+    size_t OrphanageSize();\n+\n+    /** Should be called when a transaction is accepted to the mempool. If it was an orphan we were\n+     * trying to resolve, remove its entries from the orphanage and other data structures. If it is\n+     * the ancestor of an orphan, add the orphan to its associated peer's workset. */\n+    void MempoolAcceptedTx(const CTransactionRef& ptx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272484902",
      "id" : 1272484902,
      "in_reply_to_id" : 1261419680,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L2JQm",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.h",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272484902/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272484902",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272487194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487194"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:21:38Z",
      "diff_hunk" : "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272487194",
      "id" : 1272487194,
      "in_reply_to_id" : 1254629352,
      "line" : 216,
      "node_id" : "PRRC_kwDOABII585L2J0a",
      "original_commit_id" : "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "original_line" : 216,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 134,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487194/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487194",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272487261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487261"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:21:42Z",
      "diff_hunk" : "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.\n+        orphanage.EraseForPeer(node0);\n+        expected_node0_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // EraseForPeer should delete the orphan if it's the only announcer left.\n+        orphanage.EraseForPeer(node1);\n+        expected_total_count -= 1;\n+        expected_total_size -= tx_size;\n+        expected_node1_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272487261",
      "id" : 1272487261,
      "in_reply_to_id" : 1254629680,
      "line" : 232,
      "node_id" : "PRRC_kwDOABII585L2J1d",
      "original_commit_id" : "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "original_line" : 232,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 150,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487261/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272491186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491186"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree - returning when the assumption doesn't hold",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:25:20Z",
      "diff_hunk" : "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272491186",
      "id" : 1272491186,
      "in_reply_to_id" : 1261416426,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L2Kyy",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 21,
      "original_position" : 16,
      "original_start_line" : 20,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491186/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272492061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272492061"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Dropped the commit instead",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:26:10Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272492061",
      "id" : 1272492061,
      "in_reply_to_id" : 1253623061,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L2LAd",
      "original_commit_id" : "6cd8be8a4c9ea6cd9b7e3bf55ab423d8fc6e8ac6",
      "original_line" : 31,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272492061/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272492061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272508221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272508221"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, added at the top of `run_test`",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:42:43Z",
      "diff_hunk" : "@@ -0,0 +1,270 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+\"\"\"\n+\n+import random\n+import time\n+\n+from test_framework.messages import (\n+    CInv,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    MSG_TX,\n+    MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX,\n+    MSG_WTX,\n+    msg_getdata,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    NONPREF_PEER_TX_DELAY,\n+    ORPHAN_ANCESTOR_GETDATA_INTERVAL,\n+    OVERLOADED_PEER_TX_DELAY,\n+    p2p_lock,\n+    P2PTxInvStore,\n+    TXID_RELAY_DELAY,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_NOP,\n+    OP_RETURN,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# Time to fastforward (using setmocktime) before waiting for the node to send getdata(tx) in response\n+# to an inv(tx), in seconds. This delay includes all possible delays + 1, so it should only be used\n+# when the value of the delay is not interesting. If we want to test that the node waits x seconds\n+# for one peer and y seconds for another, use specific values instead.\n+TXREQUEST_TIME_SKIP = NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY + OVERLOADED_PEER_TX_DELAY + 1\n+\n+# Time to fastfoward (using setmocktime) in between subtests to ensure they do not interfere with\n+# one another, in seconds. Equal to 12 hours, which is enough to expire anything that may exist\n+# (though nothing should since state should be cleared) in p2p data structures.\n+LONG_TIME_SKIP = 12 * 60 * 60\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+            self.mocktime += LONG_TIME_SKIP\n+            self.nodes[0].setmocktime(self.mocktime)\n+    return wrapper\n+\n+class PeerTxRelayer(P2PTxInvStore):\n+    def __init__(self):\n+        super().__init__()\n+        self._tx_received = []\n+        self._getdata_received = []\n+\n+    @property\n+    def tx_received(self):\n+        with p2p_lock:\n+            return self._tx_received\n+\n+    @property\n+    def getdata_received(self):\n+        with p2p_lock:\n+            return self._getdata_received\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message)\n+\n+    def on_getdata(self, message):\n+        self._getdata_received.append(message)\n+\n+    def wait_for_getdata_txids(self, txids):\n+        def test_function():\n+            last_getdata = self.last_message.get('getdata')\n+            if not last_getdata:\n+                return False\n+            return all([item.type == MSG_WITNESS_TX and item.hash in txids for item in last_getdata.inv])\n+        self.wait_until(test_function, timeout=10)\n+\n+    def assert_message_ignored(self, message):\n+        \"\"\"Check that the node does not respond to this message with any of\n+        getdata, inv, tx.\n+        \"\"\"\n+        prev_lastmessage = self.last_message\n+        self.send_and_ping(message)\n+        after_lastmessage = self.last_message\n+        for msgtype in [\"getdata\", \"inv\", \"tx\"]:\n+            if msgtype not in prev_lastmessage:\n+                assert msgtype not in after_lastmessage\n+            else:\n+                assert_equal(prev_lastmessage[msgtype], after_lastmessage[msgtype])\n+\n+    def assert_never_requested(self, txhash):\n+        \"\"\"Check that the node has never sent us a getdata for this hash (int type)\"\"\"\n+        for getdata in self.getdata_received:\n+            for request in getdata.inv:\n+                assert request.hash != txhash\n+\n+class OrphanHandlingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.mocktime = int(time.time())\n+\n+    def create_package(self):\n+        \"\"\"Create package with 1 parent and 1 child, normal fees (no cpfp).\n+        \"\"\"\n+        parent = self.wallet.create_self_transfer()\n+        child = self.wallet.create_self_transfer(utxo_to_spend=parent['new_utxo'])\n+        orphan_wtxid = child[\"tx\"].getwtxid()\n+        orphan_tx = child[\"tx\"]\n+        parent_tx = parent[\"tx\"]\n+        return orphan_wtxid, orphan_tx, parent_tx\n+\n+    def create_large_orphan(self):\n+        \"\"\"Create huge orphan transaction\"\"\"\n+        tx = CTransaction()\n+        # Nonexistent UTXO\n+        tx.vin = [CTxIn(COutPoint(random.randrange(1 << 256), random.randrange(1, 100)))]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_NOP] * 390000)]\n+        tx.vout = [CTxOut(100, CScript([OP_RETURN, b'a' * 20]))]\n+        return tx\n+\n+    def fastforward(self, seconds):\n+        \"\"\"Convenience helper function to fast-forward, so we don't need to keep track of the\n+        starting time when we call setmocktime.\"\"\"\n+        self.mocktime += seconds\n+        self.nodes[0].setmocktime(self.mocktime)\n+\n+    @cleanup\n+    def test_orphan_handling_prefer_outbound(self):\n+        self.log.info(\"Test that the node prefers requesting from outbound peers\")\n+        node = self.nodes[0]\n+        orphan_wtxid, orphan_tx, parent_tx = self.create_package()\n+        orphan_inv = CInv(t=MSG_WTX, h=int(orphan_wtxid, 16))\n+\n+        peer_inbound = node.add_p2p_connection(PeerTxRelayer())\n+        peer_inbound.send_and_ping(msg_inv([orphan_inv]))\n+        self.fastforward(TXREQUEST_TIME_SKIP)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272508221",
      "id" : 1272508221,
      "in_reply_to_id" : 1261605505,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L2O89",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 160,
      "original_position" : 160,
      "original_start_line" : null,
      "path" : "test/functional/p2p_orphan_handling.py",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272508221/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272508221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272514305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272514305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added comment",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-07-24T16:49:03Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272514305",
      "id" : 1272514305,
      "in_reply_to_id" : 1270139854,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L2QcB",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.h",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272514305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272514305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-07-25T10:54:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1649608050",
      "id" : 1649608050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585iUwVy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1649608050/reactions"
      },
      "updated_at" : "2023-07-25T10:54:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1649608050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279714521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279714521"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 543273d96e896adf5531ed961856aa0eb70cbe57 \"[log] log ProcessOrphanTx() events by wtxid\"\r\n\r\nPerhaps log both txid and wtxid?",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-31T18:22:41Z",
      "diff_hunk" : "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279714521",
      "id" : 1279714521,
      "line" : 3020,
      "node_id" : "PRRC_kwDOABII585MRuTZ",
      "original_commit_id" : "543273d96e896adf5531ed961856aa0eb70cbe57",
      "original_line" : 2966,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 177,
      "pull_request_review_id" : 1555503183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279714521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T19:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279714521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279730123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279730123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 29d9d326d5193bb9a410a8881eabc93de5dd6266 \"[txorphanage] track size of stored orphans, total and by peer\"\r\n\r\nThis function is unimplemented.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-31T18:39:46Z",
      "diff_hunk" : "@@ -61,7 +62,31 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    size_t TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    size_t BytesFromPeer(NodeId peer) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        auto peer_bytes_it = m_peer_bytes_used.find(peer);\n+        return peer_bytes_it == m_peer_bytes_used.end() ? 0 : peer_bytes_it->second;\n+    }\n+\n+    /** Remove a peer from an orphan's announcers list, erasing the orphan if this is the only peer\n+     * who announced it. If the orphan doesn't exist or does not list this peer as an announcer, do nothing. */\n+    void EraseOrphanOfPeer(const uint256& wtxid, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279730123",
      "id" : 1279730123,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MRyHL",
      "original_commit_id" : "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "original_line" : 81,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : null,
      "pull_request_review_id" : 1555503183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279730123/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T19:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279730123",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279743325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279743325"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 974d864419dd98be6e32dec3ee11f5082b060b1b \"[refactor] make TxPackageTracker responsible for EraseTx and AddChildrenToWorkset\"\r\n\r\nThis line seems a bit unrelated to this commit as there is no pre-existing `EraseTx`.",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-31T18:53:43Z",
      "diff_hunk" : "@@ -4286,6 +4285,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {\n                     AddToCompactExtraTransactions(ptx);\n                 }\n+                m_txpackagetracker->MempoolRejectedTx(tx.GetWitnessHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279743325",
      "id" : 1279743325,
      "line" : 4320,
      "node_id" : "PRRC_kwDOABII585MR1Vd",
      "original_commit_id" : "974d864419dd98be6e32dec3ee11f5082b060b1b",
      "original_line" : 4288,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 289,
      "pull_request_review_id" : 1555503183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279743325/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T19:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279743325",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279747416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279747416"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In b5ab45e595bbcedbd602b6385b83e9ffd983f216 \"[p2p/refactor] make TxPackageTracker responsible for orphan resolution\"\r\n\r\nnit: indentation",
      "commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "created_at" : "2023-07-31T18:58:14Z",
      "diff_hunk" : "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279747416",
      "id" : 1279747416,
      "line" : 15,
      "node_id" : "PRRC_kwDOABII585MR2VY",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 15,
      "original_position" : 12,
      "original_start_line" : 14,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : 15,
      "pull_request_review_id" : 1555503183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279747416/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 14,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-31T19:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279747416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Opened #28199 with tests that may help us ensure this PR isn't changing specific behaviors. Marking this as draft as it depends on that one.",
      "created_at" : "2023-08-03T14:09:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1664055615",
      "id" : 1664055615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585jL3k_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664055615/reactions"
      },
      "updated_at" : "2023-08-03T14:09:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664055615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293972937"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293972937"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, fixed",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:09:26Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293972937",
      "id" : 1293972937,
      "in_reply_to_id" : 1253457139,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIHXJ",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293972937/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293972937",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293973180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973180"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:09:46Z",
      "diff_hunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293973180",
      "id" : 1293973180,
      "in_reply_to_id" : 1253479136,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIHa8",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973180/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293973655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed these to `if(!Assume(...)) return;`",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:10:24Z",
      "diff_hunk" : "@@ -15,6 +14,16 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293973655",
      "id" : 1293973655,
      "in_reply_to_id" : 1253619584,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIHiX",
      "original_commit_id" : "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "original_line" : 21,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293974858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293974858"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Replaced the exposure of `Count` to `CheckIsEmpty()` functions",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:12:01Z",
      "diff_hunk" : "@@ -59,6 +58,30 @@ class TxPackageTracker {\n      * still want to try to resolve. Remove its entries from the orphanage and other data\n      * structures. */\n     void MempoolRejectedTx(const uint256& wtxid);\n+\n+    /** Add a new orphan or an announcement for a known orphan. This should be called for every\n+     * peer that announces the orphan.  The orphan request tracker will decide when to request what\n+     * from which peer - use GetOrphanRequests().\n+     * @param[in]   tx      CTransactionRef if this is a new orphan, or nullptr if an announcement\n+     *                      for a known orphan.\n+     * @param[in]   reqtime Some time in the future when the orphan resolution information should be\n+     *                      requested. This may be further extended internally.\n+     */\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime);\n+\n+    /** Number of packages we are working on with this peer. Includes any entries in the orphan\n+     * tracker and in-flight requests. */\n+    size_t Count(NodeId nodeid) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293974858",
      "id" : 1293974858,
      "in_reply_to_id" : 1254492129,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIH1K",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 74,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.h",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293974858/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293974858",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293975342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293975342"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:12:38Z",
      "diff_hunk" : "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);\n+    m_peer_bytes_used.at(peer) -= size;\n+    if (m_peer_bytes_used.at(peer) == 0) {\n+        m_peer_bytes_used.erase(peer);\n+    }\n+}\n \n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {\n+        Assume(false);\n+        return false;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293975342",
      "id" : 1293975342,
      "in_reply_to_id" : 1261403669,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIH8u",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 34,
      "original_position" : 29,
      "original_start_line" : 31,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293975342/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293975342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Logging both :+1: ",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:13:57Z",
      "diff_hunk" : "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976284",
      "id" : 1293976284,
      "in_reply_to_id" : 1279714521,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIILc",
      "original_commit_id" : "543273d96e896adf5531ed961856aa0eb70cbe57",
      "original_line" : 2966,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976284/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976378"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Deleted from that commit",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:14:06Z",
      "diff_hunk" : "@@ -61,7 +62,31 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    size_t TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    size_t BytesFromPeer(NodeId peer) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        auto peer_bytes_it = m_peer_bytes_used.find(peer);\n+        return peer_bytes_it == m_peer_bytes_used.end() ? 0 : peer_bytes_it->second;\n+    }\n+\n+    /** Remove a peer from an orphan's announcers list, erasing the orphan if this is the only peer\n+     * who announced it. If the orphan doesn't exist or does not list this peer as an announcer, do nothing. */\n+    void EraseOrphanOfPeer(const uint256& wtxid, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976378",
      "id" : 1293976378,
      "in_reply_to_id" : 1279730123,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIIM6",
      "original_commit_id" : "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "original_line" : 81,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976378/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rearranged the commits so it's more clear where the erasure is new",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:14:29Z",
      "diff_hunk" : "@@ -4286,6 +4285,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {\n                     AddToCompactExtraTransactions(ptx);\n                 }\n+                m_txpackagetracker->MempoolRejectedTx(tx.GetWitnessHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976670",
      "id" : 1293976670,
      "in_reply_to_id" : 1279743325,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIIRe",
      "original_commit_id" : "974d864419dd98be6e32dec3ee11f5082b060b1b",
      "original_line" : 4288,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:14:35Z",
      "diff_hunk" : "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976720",
      "id" : 1293976720,
      "in_reply_to_id" : 1279747416,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIISQ",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 15,
      "original_position" : 12,
      "original_start_line" : 14,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : null,
      "pull_request_review_id" : 1543694803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976720/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293978623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293978623"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added `MEMPOOLREJ` log and successful `AcceptToMemoryPool` log for both orphan and non-orphan tx results.",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:17:06Z",
      "diff_hunk" : "@@ -5926,6 +5958,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {\n+                // We don't know that the transaction was rejected by mempool. But if the\n+                // transaction was added to mempool, we would have already called\n+                // MempoolAcceptedTx().\n+                m_txpackagetracker->MempoolRejectedTx(gtxid.GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293978623",
      "id" : 1293978623,
      "in_reply_to_id" : 1261648754,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIIv_",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 5967,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1577664198,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293978623/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:17:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293978623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293981371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981371"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is gone now, replaced with registration of `ConnectionInfo` when the node first connects.",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:21:02Z",
      "diff_hunk" : "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293981371",
      "id" : 1293981371,
      "in_reply_to_id" : 1261405442,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIJa7",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 1448,
      "original_position" : 67,
      "original_start_line" : 1447,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1577668817,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981371/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:21:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981371",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293981811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981811"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the special casing. I can't remember why it comes into play later, but if I do, I'll add it when it's needed.",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-14T21:21:45Z",
      "diff_hunk" : "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293981811",
      "id" : 1293981811,
      "in_reply_to_id" : 1254470451,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NIJhz",
      "original_commit_id" : "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "original_line" : 54,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/node/txpackagetracker.cpp",
      "position" : null,
      "pull_request_review_id" : 1577669739,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981811/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-14T21:21:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981811",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-08-21T11:15:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1686133845",
      "id" : 1686133845,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585kgFxV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1686133845/reactions"
      },
      "updated_at" : "2023-08-21T11:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1686133845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Some thoughts about logging:\r\n> \r\n> After testing this on mainnet for a bit, I think it would be nice to be able to follow the fate of each individual orphan in `BCLog::TXPACKAGES`: We currently have a tx-level based log entry for addition (âstored orphan...\"), but nothing for removal, so having additional log entries in `MempoolAcceptedTx()` for succesful resolution and `MempoolRejectedTx()` for failure would be nice, maybe also a tx-level message for removal due to expiration and overflow.\r\n> \r\n> If this became too spammy, we could use different severities, but I think it shouldn't be too bad except if you just started with an empty mempool?\r\n> \r\n> Also, could we log wtxids whenever possible? There is currently a bit of a mix.\r\n\r\n> also, adding wtxid logging at `MEMPOOLREJ` log is done would be <3\r\n\r\n@mzumsande @instagibbs\r\nI've split the commits adding new logs and wtxids to the logging to its own small PR, #28364\r\n\r\n(Also, rebased.)",
      "created_at" : "2023-08-29T13:35:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1697460511",
      "id" : 1697460511,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585lLTEf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697460511/reactions"
      },
      "updated_at" : "2023-08-29T13:35:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697460511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309014848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309014848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "let's rename `orphanHash` while we're here to something that doesn't sound like txid",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T15:31:35Z",
      "diff_hunk" : "@@ -226,7 +234,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309014848",
      "id" : 1309014848,
      "line" : 224,
      "node_id" : "PRRC_kwDOABII585OBftA",
      "original_commit_id" : "b34c7ba883906a4f49afdfd7d55614bded21bfff",
      "original_line" : 229,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 243,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309014848/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309014848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309036008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309036008"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 1ea66e8c2ce9e05e1346c1363196073eec554292 `[refactor] consolidate invalid ATMP processing` \r\n\r\nthis loop is already taken care of in `ProcessValidTx`, no?\r\n\r\n",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T15:48:27Z",
      "diff_hunk" : "@@ -4178,28 +4237,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             ProcessValidTx(ptx, pfrom.GetId(), result.m_replaced_transactions.value());\n             pfrom.m_last_tx_time = GetTime<std::chrono::seconds>();\n-        }\n-        else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n-        {\n-            bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-\n-            // Deduplicate parent txids, so that we don't have to loop over\n-            // the same parent txid more than once down below.\n-            std::vector<uint256> unique_parents;\n-            unique_parents.reserve(tx.vin.size());\n-            for (const CTxIn& txin : tx.vin) {\n-                // We start with all parents, and then remove duplicates below.\n-                unique_parents.push_back(txin.prevout.hash);\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309036008",
      "id" : 1309036008,
      "line" : 4002,
      "node_id" : "PRRC_kwDOABII585OBk3o",
      "original_commit_id" : "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "original_line" : 4240,
      "original_position" : 192,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 567,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309036008/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309036008",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309046360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309046360"
         }
      },
      "author_association" : "MEMBER",
      "body" : "note: this is now being called in the case of `TX_MISSING_INPUTS` where it wasn't prior\r\n\r\nis this a behavior change? Looks like if it has rejected parents additional things can happen.",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T15:56:20Z",
      "diff_hunk" : "@@ -2954,54 +3052,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphan_wtxid);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n+                orphanHash.ToString(),\n+                orphan_wtxid.ToString(),\n+                peer.m_id,\n+                state.ToString());\n+            // Ignoring the return value. Within orphan processing, we do not make\n+            // additional orphan resolution requests when a transaction is missing inputs.\n+            ProcessInvalidTx(porphanTx, peer.m_id, state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309046360",
      "id" : 1309046360,
      "line" : 2819,
      "node_id" : "PRRC_kwDOABII585OBnZY",
      "original_commit_id" : "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "original_line" : 3063,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 463,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309046360/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309046360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309059673"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309059673"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n    /** Return total amount of orphans stored by this peer, in bytes. */\r\n```",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T16:07:01Z",
      "diff_hunk" : "@@ -61,7 +61,28 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    unsigned int TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    /** Return total amount of orphans stored by this transaction, in bytes. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309059673",
      "id" : 1309059673,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585OBqpZ",
      "original_commit_id" : "af6602e7ff224d99f937a1dba440ce060cada390",
      "original_line" : 71,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : null,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309059673/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309059673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309061201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309061201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is this a necessary optimization? the next check would catch this case as well",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T16:08:17Z",
      "diff_hunk" : "@@ -266,3 +299,24 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+void TxOrphanage::EraseOrphanOfPeer(const uint256& wtxid, NodeId peer)\n+{\n+    AssertLockNotHeld(m_mutex);\n+    LOCK(m_mutex);\n+    // Nothing to do if this peer isn't storing any orphans.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309061201",
      "id" : 1309061201,
      "line" : 313,
      "node_id" : "PRRC_kwDOABII585OBrBR",
      "original_commit_id" : "0e27954b7116f97b51de32aea14e074a9ee57717",
      "original_line" : 306,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 261,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309061201/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309061201",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309078749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309078749"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't see it being used anywhere?",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T16:23:54Z",
      "diff_hunk" : "@@ -45,13 +45,13 @@ class TxOrphanage {\n \n     /** Maybe erase all orphans announced by a peer (eg, after that peer disconnects). If an orphan\n      * has been announced by another peer, don't erase, just remove this peer from the list of announcers. */\n-    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+    std::vector<uint256> EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309078749",
      "id" : 1309078749,
      "line" : 48,
      "node_id" : "PRRC_kwDOABII585OBvTd",
      "original_commit_id" : "ed557d07c6fba763a62eed721be492521ed17445",
      "original_line" : 48,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 31,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309078749/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309078749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309081997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309081997"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in `[txorphanage] store parent txids in OrphanTx`\r\n\r\nIs this just the deduplicated set of txids to possibly fetch, if still in orphanage?",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T16:26:46Z",
      "diff_hunk" : "@@ -101,6 +104,8 @@ class TxOrphanage {\n         int64_t nTimeExpire;\n         size_t list_pos;\n         std::set<NodeId> announcers;\n+        /** Txids of the missing parents to request. Determined by peerman. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309081997",
      "id" : 1309081997,
      "line" : 107,
      "node_id" : "PRRC_kwDOABII585OBwGN",
      "original_commit_id" : "ed557d07c6fba763a62eed721be492521ed17445",
      "original_line" : 107,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 97,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309081997/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309081997",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309109595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309109595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "if a block is being connected, why don't we just unconditionally wipe `m_recent_rejects`? Could delete `hashRecentRejectsChainTip` as well",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T16:52:01Z",
      "diff_hunk" : "@@ -1880,6 +1880,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n         }\n     }\n \n+    if (m_chainman.ActiveChain().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309109595",
      "id" : 1309109595,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585OB21b",
      "original_commit_id" : "94f9de3eacc2f6375a4f5ad15a9ec4ced2d30424",
      "original_line" : 1883,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309109595/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309109595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309141841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309141841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can already exist in orphanage\r\n\r\n```Suggestion\r\n    /** Add a potentially new orphan transaction. Returns whether this orphan is going to be processed and the\r\n```",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T17:22:37Z",
      "diff_hunk" : "@@ -68,6 +68,13 @@ class TxDownloadManager {\n \n     /** Should be called when a notfound for a tx has been received. */\n     void ReceivedNotFound(NodeId nodeid, const std::vector<uint256>& txhashes) { m_impl->ReceivedNotFound(nodeid, txhashes); }\n+\n+    /** Add a new orphan transaction. Returns whether this orphan is going to be processed and the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309141841",
      "id" : 1309141841,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585OB-tR",
      "original_commit_id" : "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "original_line" : 72,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/node/txdownloadman.h",
      "position" : 67,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309141841/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309141841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309147840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309147840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I find the `should_process`/`will_process` interaction a bit non-obvious on the surface\r\n\r\nIt's detecting an orphan that you may want to fetch, then attempting to add to the orphanage, and checking if it's newly-entered?",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T17:28:23Z",
      "diff_hunk" : "@@ -4016,39 +4016,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         } else {\n             bool should_process_orphan = ProcessInvalidTx(ptx, pfrom.GetId(), state);\n             if (should_process_orphan) {\n-                // Deduplicate parent txids, so that we don't have to loop over\n-                // the same parent txid more than once down below.\n-                std::vector<uint256> unique_parents;\n-                unique_parents.reserve(tx.vin.size());\n-                for (const CTxIn& txin : tx.vin) {\n-                    // We start with all parents, and then remove duplicates below.\n-                    unique_parents.push_back(txin.prevout.hash);\n-                }\n-                std::sort(unique_parents.begin(), unique_parents.end());\n-                unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n                 const auto current_time{GetTime<std::chrono::microseconds>()};\n-\n-                for (const uint256& parent_txid : unique_parents) {\n-                    // Here, we only have the txid (and not wtxid) of the\n-                    // inputs, so we only request in txid mode, even for\n-                    // wtxidrelay peers.\n-                    // Eventually we should replace this with an improved\n-                    // protocol for getting all unconfirmed parents.\n-                    const auto gtxid{GenTxid::Txid(parent_txid)};\n-                    AddKnownTx(*peer, parent_txid);\n-                    m_txdownloadman.ReceivedTxInv(pfrom.GetId(), gtxid, current_time);\n-                }\n-\n-                if (m_txdownloadman.GetOrphanageRef().AddTx(ptx, pfrom.GetId(), unique_parents)) {\n+                const auto& [will_process_orphan, unique_parents] = m_txdownloadman.NewOrphanTx(ptx, pfrom.GetId(), current_time);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309147840",
      "id" : 1309147840,
      "line" : 4009,
      "node_id" : "PRRC_kwDOABII585OCALA",
      "original_commit_id" : "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "original_line" : 4020,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 609,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309147840/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309147840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309157968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309157968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nothing being protected here anymore",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T17:38:44Z",
      "diff_hunk" : "@@ -690,8 +688,7 @@ class PeerManagerImpl final : public PeerManager\n     CTxMemPool& m_mempool;\n \n     /** Protects tx download, rejection filter. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309157968",
      "id" : 1309157968,
      "line" : 690,
      "node_id" : "PRRC_kwDOABII585OCCpQ",
      "original_commit_id" : "f6e0d98b1ff2e6ee0cc0777fb98f0e8022fa42b0",
      "original_line" : 690,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 118,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309157968/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309157968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309160578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309160578"
         }
      },
      "author_association" : "MEMBER",
      "body" : "would it make sense to have the arg be a `GenTxid`",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T17:41:30Z",
      "diff_hunk" : "@@ -195,6 +201,9 @@ class TxRequestTracker {\n     /** Count how many announcements are being tracked in total across all peers and transaction hashes. */\n     size_t Size() const;\n \n+    /** For some tx hash (either txid or wtxid), return all peers with non-COMPLETED announcements. */\n+    std::vector<NodeId> GetCandidatePeers(const uint256& txhash) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309160578",
      "id" : 1309160578,
      "line" : 205,
      "node_id" : "PRRC_kwDOABII585OCDSC",
      "original_commit_id" : "711419ffc0cdfa0ca18cb1988d0314b9f62cd441",
      "original_line" : 205,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/txrequest.h",
      "position" : 18,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309160578/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309160578",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309163045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309163045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can you push it down to where `erased_wtxids` is used since it's only used once?",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T17:44:02Z",
      "diff_hunk" : "@@ -22,22 +25,30 @@ void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n     LOCK(m_tx_download_mutex);\n     m_orphanage.EraseForPeer(nodeid);\n     m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n }\n \n void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n-    m_orphanage.EraseForBlock(block);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309163045",
      "id" : 1309163045,
      "line" : 35,
      "node_id" : "PRRC_kwDOABII585OCD4l",
      "original_commit_id" : "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "original_line" : 35,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 35,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309163045/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309163045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309169470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309169470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "do we really want to log unconditionally?",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T17:50:41Z",
      "diff_hunk" : "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309169470",
      "id" : 1309169470,
      "line" : 238,
      "node_id" : "PRRC_kwDOABII585OCFc-",
      "original_commit_id" : "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "original_line" : 238,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 238,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309169470/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309169470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309179289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309179289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "print args are flipped",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T18:00:26Z",
      "diff_hunk" : "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",\n+                     nodeid, orphan_gtxid.GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309179289",
      "id" : 1309179289,
      "line" : 260,
      "node_id" : "PRRC_kwDOABII585OCH2Z",
      "original_commit_id" : "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "original_line" : 260,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 260,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309179289/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309179289",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309211039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309211039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "under what circumstances is this expected? Eviction of the orphan in the orphanage, but outstanding resolution request? A comment to the expected conditions would be helpful for documentation.",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T18:35:19Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309211039",
      "id" : 1309211039,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII585OCPmf",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 259,
      "original_position" : 259,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 259,
      "pull_request_review_id" : 1600730903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309211039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T18:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309211039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309300862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309300862"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this adds an announcer even if the INV is txid type, even though the assumption is wtxid arg",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T20:05:40Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309300862",
      "id" : 1309300862,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII585OClh-",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 199,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 199,
      "pull_request_review_id" : 1601193815,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309300862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T20:05:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309300862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309301097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309301097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ok, it's happening because of: https://github.com/bitcoin/bitcoin/pull/28031/files#r1309300862\r\n\r\nsee logs:\r\n```\r\n2023-08-29T19:19:00.066912Z [mempoolrej] 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31 (wtxid=d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219) from peer=2 was not accepted: bad-txns-inputs-missingorspent\r\n2023-08-29T19:19:00.066970Z [txpackages] stored orphan tx 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31 (wtxid=d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219) (mapsz 4 outsz 5)\r\n2023-08-29T19:19:00.066990Z [txpackages] adding peer=2 as a candidate for resolving orphan d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219\r\n2023-08-29T19:19:00.067015Z [txpackages] adding peer=6 as a candidate for resolving orphan d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219\r\n2023-08-29T19:19:00.067027Z [txpackages] added peer=6 as announcer of orphan tx d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219\r\n2023-08-29T19:19:04.361970Z [txpackages] adding peer=21 as a candidate for resolving orphan 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31\r\n2023-08-29T19:19:06.399524Z [txpackages] couldn't find parent txids to resolve orphan 21 with peer=259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31\r\n2023-08-29T19:20:02.183893Z timeout of in-flight orphan resolution d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219 for peer=6\r\n2023-08-29T19:21:02.206171Z timeout of in-flight orphan resolution d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219 for peer=2\r\n2023-08-29T19:21:02.206223Z [txpackages]    removed orphan tx 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31 (wtxid=d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219)\r\n```",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-29T20:05:56Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309301097",
      "id" : 1309301097,
      "in_reply_to_id" : 1309211039,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII585OCllp",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 259,
      "original_position" : 259,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 259,
      "pull_request_review_id" : 1601194178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309301097/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-29T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309301097",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1310493509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                // Schedule with no delay, i.e. not using ReceivedTxInv(). It should be requested immediately\r\n```",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-30T15:53:57Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1310493509",
      "id" : 1310493509,
      "line" : 250,
      "node_id" : "PRRC_kwDOABII585OHItF",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 250,
      "original_position" : 250,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 250,
      "pull_request_review_id" : 1603028137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493509/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-30T15:53:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1310493806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493806"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the simplest solution is just filter this addition based on wtxid-ness, since this only helps in the multi-announcer case, which wouldn't be a regression, iiuc",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-08-30T15:54:11Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1310493806",
      "id" : 1310493806,
      "in_reply_to_id" : 1309300862,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII585OHIxu",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 199,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 199,
      "pull_request_review_id" : 1603028712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493806/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-30T15:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1314853760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314853760"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ooh thanks :+1: ",
      "commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "created_at" : "2023-09-04T11:57:30Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1314853760",
      "id" : 1314853760,
      "in_reply_to_id" : 1309300862,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII585OXxOA",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 199,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 199,
      "pull_request_review_id" : 1609400936,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314853760/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-04T11:57:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314853760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "think this can be rebased since tests are merged",
      "created_at" : "2023-09-12T19:35:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1716305920",
      "id" : 1716305920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585mTMAA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1716305920/reactions"
      },
      "updated_at" : "2023-09-12T19:35:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1716305920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased but not all comments addressed yet, still working on it.",
      "created_at" : "2023-09-13T07:56:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1717130928",
      "id" : 1717130928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585mWVaw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717130928/reactions"
      },
      "updated_at" : "2023-09-13T07:56:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717130928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1324124766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324124766"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-13T07:56:30Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1324124766",
      "id" : 1324124766,
      "in_reply_to_id" : 1310493509,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585O7Ipe",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 250,
      "original_position" : 250,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : null,
      "pull_request_review_id" : 1623927052,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324124766/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-13T07:56:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324124766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1324126258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324126258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, just did a gate on IsWtxid. Don't think that many non-wtxidrelay nodes are still out there anyway.",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-13T07:57:41Z",
      "diff_hunk" : "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1324126258",
      "id" : 1324126258,
      "in_reply_to_id" : 1309300862,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585O7JAy",
      "original_commit_id" : "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "original_line" : 199,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : null,
      "pull_request_review_id" : 1623929268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324126258/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-13T07:57:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324126258",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326089320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326089320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T14:57:05Z",
      "diff_hunk" : "@@ -101,6 +104,8 @@ class TxOrphanage {\n         int64_t nTimeExpire;\n         size_t list_pos;\n         std::set<NodeId> announcers;\n+        /** Txids of the missing parents to request. Determined by peerman. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326089320",
      "id" : 1326089320,
      "in_reply_to_id" : 1309081997,
      "line" : 114,
      "node_id" : "PRRC_kwDOABII585PCoRo",
      "original_commit_id" : "ed557d07c6fba763a62eed721be492521ed17445",
      "original_line" : 114,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 118,
      "pull_request_review_id" : 1627107908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326089320/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T14:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326089320",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326094730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326094730"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed, I think in a past implementation I was using it but I'm not anymore",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:00:31Z",
      "diff_hunk" : "@@ -45,13 +45,13 @@ class TxOrphanage {\n \n     /** Maybe erase all orphans announced by a peer (eg, after that peer disconnects). If an orphan\n      * has been announced by another peer, don't erase, just remove this peer from the list of announcers. */\n-    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+    std::vector<uint256> EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326094730",
      "id" : 1326094730,
      "in_reply_to_id" : 1309078749,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII585PCpmK",
      "original_commit_id" : "ed557d07c6fba763a62eed721be492521ed17445",
      "original_line" : 52,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 49,
      "pull_request_review_id" : 1627116146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326094730/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326094730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326096588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326096588"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're right, removed in #28481",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:01:49Z",
      "diff_hunk" : "@@ -266,3 +299,24 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+void TxOrphanage::EraseOrphanOfPeer(const uint256& wtxid, NodeId peer)\n+{\n+    AssertLockNotHeld(m_mutex);\n+    LOCK(m_mutex);\n+    // Nothing to do if this peer isn't storing any orphans.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326096588",
      "id" : 1326096588,
      "in_reply_to_id" : 1309061201,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PCqDM",
      "original_commit_id" : "0e27954b7116f97b51de32aea14e074a9ee57717",
      "original_line" : 313,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1627116146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326096588/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326096588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326097640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326097640"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed to `orphan_wtxid` in #28481",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:02:33Z",
      "diff_hunk" : "@@ -226,7 +234,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326097640",
      "id" : 1326097640,
      "in_reply_to_id" : 1309014848,
      "line" : 229,
      "node_id" : "PRRC_kwDOABII585PCqTo",
      "original_commit_id" : "b34c7ba883906a4f49afdfd7d55614bded21bfff",
      "original_line" : 229,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 241,
      "pull_request_review_id" : 1627116146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326097640/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326097640",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326104953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326104953"
         }
      },
      "author_association" : "MEMBER",
      "body" : "haha, fixed in #28481",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:07:53Z",
      "diff_hunk" : "@@ -61,7 +61,28 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    unsigned int TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    /** Return total amount of orphans stored by this transaction, in bytes. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326104953",
      "id" : 1326104953,
      "in_reply_to_id" : 1309059673,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PCsF5",
      "original_commit_id" : "af6602e7ff224d99f937a1dba440ce060cada390",
      "original_line" : 71,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : null,
      "pull_request_review_id" : 1627116146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326104953/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326104953",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326111728"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326111728"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Imo, it would be nicer to do the orphanage changes separately, including amended functional/unit/fuzz tests.\r\n\r\nOpened #28481 for orphanage changes",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:12:50Z",
      "diff_hunk" : "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326111728",
      "id" : 1326111728,
      "in_reply_to_id" : 1261414179,
      "line" : 25,
      "node_id" : "PRRC_kwDOABII585PCtvw",
      "original_commit_id" : "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "original_line" : 25,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 12,
      "pull_request_review_id" : 1627142339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326111728/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:12:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326111728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326131972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326131972"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, behavior change. To make more concrete:\r\n1. We get an orphan C with 2 missing parents, A and B\r\n2. We reject A\r\n3. We get B and accept it\r\n4. We add C to workset and process it in `ProcessOrphanTx`.\r\n5. Here, since we find A in recent_rejects, we also add C to recent_rejects when we wouldn't have before.\r\n\r\nI think this is good actually... :thinking: ",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:27:52Z",
      "diff_hunk" : "@@ -2954,54 +3052,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphan_wtxid);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n+                orphanHash.ToString(),\n+                orphan_wtxid.ToString(),\n+                peer.m_id,\n+                state.ToString());\n+            // Ignoring the return value. Within orphan processing, we do not make\n+            // additional orphan resolution requests when a transaction is missing inputs.\n+            ProcessInvalidTx(porphanTx, peer.m_id, state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326131972",
      "id" : 1326131972,
      "in_reply_to_id" : 1309046360,
      "line" : 2818,
      "node_id" : "PRRC_kwDOABII585PCysE",
      "original_commit_id" : "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "original_line" : 2818,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 471,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326131972/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326131972",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326150320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326150320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:40:09Z",
      "diff_hunk" : "@@ -22,22 +25,30 @@ void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n     LOCK(m_tx_download_mutex);\n     m_orphanage.EraseForPeer(nodeid);\n     m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n }\n \n void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n-    m_orphanage.EraseForBlock(block);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326150320",
      "id" : 1326150320,
      "in_reply_to_id" : 1309163045,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PC3Kw",
      "original_commit_id" : "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "original_line" : 35,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : null,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326150320/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326150320",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326154532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326154532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oop changed",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:42:23Z",
      "diff_hunk" : "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326154532",
      "id" : 1326154532,
      "in_reply_to_id" : 1309169470,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PC4Mk",
      "original_commit_id" : "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "original_line" : 239,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : null,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326154532/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326154532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326155952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326155952"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:43:17Z",
      "diff_hunk" : "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",\n+                     nodeid, orphan_gtxid.GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326155952",
      "id" : 1326155952,
      "in_reply_to_id" : 1309179289,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PC4iw",
      "original_commit_id" : "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "original_line" : 262,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : null,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326155952/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326155952",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326156757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326156757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:43:50Z",
      "diff_hunk" : "@@ -68,6 +68,13 @@ class TxDownloadManager {\n \n     /** Should be called when a notfound for a tx has been received. */\n     void ReceivedNotFound(NodeId nodeid, const std::vector<uint256>& txhashes) { m_impl->ReceivedNotFound(nodeid, txhashes); }\n+\n+    /** Add a new orphan transaction. Returns whether this orphan is going to be processed and the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326156757",
      "id" : 1326156757,
      "in_reply_to_id" : 1309141841,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PC4vV",
      "original_commit_id" : "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "original_line" : 67,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/node/txdownloadman.h",
      "position" : null,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326156757/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326156757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326158206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326158206"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Probably not?",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:44:44Z",
      "diff_hunk" : "@@ -195,6 +201,9 @@ class TxRequestTracker {\n     /** Count how many announcements are being tracked in total across all peers and transaction hashes. */\n     size_t Size() const;\n \n+    /** For some tx hash (either txid or wtxid), return all peers with non-COMPLETED announcements. */\n+    std::vector<NodeId> GetCandidatePeers(const uint256& txhash) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326158206",
      "id" : 1326158206,
      "in_reply_to_id" : 1309160578,
      "line" : 205,
      "node_id" : "PRRC_kwDOABII585PC5F-",
      "original_commit_id" : "711419ffc0cdfa0ca18cb1988d0314b9f62cd441",
      "original_line" : 205,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/txrequest.h",
      "position" : 18,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326158206/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326158206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326171767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326171767"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed comment",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:53:05Z",
      "diff_hunk" : "@@ -690,8 +688,7 @@ class PeerManagerImpl final : public PeerManager\n     CTxMemPool& m_mempool;\n \n     /** Protects tx download, rejection filter. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326171767",
      "id" : 1326171767,
      "in_reply_to_id" : 1309157968,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PC8Z3",
      "original_commit_id" : "f6e0d98b1ff2e6ee0cc0777fb98f0e8022fa42b0",
      "original_line" : 690,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326171767/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326171767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326174919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326174919"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep. We only want to `AddToCompactExtraTransactions` if this is a new orphan that we're actually keeping. We might fail to add it to orphanage if it's full.",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-14T15:55:03Z",
      "diff_hunk" : "@@ -4016,39 +4016,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         } else {\n             bool should_process_orphan = ProcessInvalidTx(ptx, pfrom.GetId(), state);\n             if (should_process_orphan) {\n-                // Deduplicate parent txids, so that we don't have to loop over\n-                // the same parent txid more than once down below.\n-                std::vector<uint256> unique_parents;\n-                unique_parents.reserve(tx.vin.size());\n-                for (const CTxIn& txin : tx.vin) {\n-                    // We start with all parents, and then remove duplicates below.\n-                    unique_parents.push_back(txin.prevout.hash);\n-                }\n-                std::sort(unique_parents.begin(), unique_parents.end());\n-                unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n                 const auto current_time{GetTime<std::chrono::microseconds>()};\n-\n-                for (const uint256& parent_txid : unique_parents) {\n-                    // Here, we only have the txid (and not wtxid) of the\n-                    // inputs, so we only request in txid mode, even for\n-                    // wtxidrelay peers.\n-                    // Eventually we should replace this with an improved\n-                    // protocol for getting all unconfirmed parents.\n-                    const auto gtxid{GenTxid::Txid(parent_txid)};\n-                    AddKnownTx(*peer, parent_txid);\n-                    m_txdownloadman.ReceivedTxInv(pfrom.GetId(), gtxid, current_time);\n-                }\n-\n-                if (m_txdownloadman.GetOrphanageRef().AddTx(ptx, pfrom.GetId(), unique_parents)) {\n+                const auto& [will_process_orphan, unique_parents] = m_txdownloadman.NewOrphanTx(ptx, pfrom.GetId(), current_time);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326174919",
      "id" : 1326174919,
      "in_reply_to_id" : 1309147840,
      "line" : 4008,
      "node_id" : "PRRC_kwDOABII585PC9LH",
      "original_commit_id" : "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "original_line" : 4008,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 588,
      "pull_request_review_id" : 1627181389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326174919/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-14T15:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326174919",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1327603515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327603515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIRC I was fine with it, just making sure I understood!",
      "commit_id" : "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "created_at" : "2023-09-15T17:37:09Z",
      "diff_hunk" : "@@ -2954,54 +3052,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphan_wtxid);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n+                orphanHash.ToString(),\n+                orphan_wtxid.ToString(),\n+                peer.m_id,\n+                state.ToString());\n+            // Ignoring the return value. Within orphan processing, we do not make\n+            // additional orphan resolution requests when a transaction is missing inputs.\n+            ProcessInvalidTx(porphanTx, peer.m_id, state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1327603515",
      "id" : 1327603515,
      "in_reply_to_id" : 1309046360,
      "line" : 2818,
      "node_id" : "PRRC_kwDOABII585PIZ87",
      "original_commit_id" : "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "original_line" : 2818,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 471,
      "pull_request_review_id" : 1629438595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327603515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-15T17:37:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327603515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-02T21:54:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1743824638",
      "id" : 1743824638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585n8Kb-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743824638/reactions"
      },
      "updated_at" : "2023-10-02T21:54:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743824638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1357413789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357413789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "caught by your new fuzzer: Note that the parent txid is already in the orphanage by this line, we try to re-request something we already have locally in our orphanage. \r\n\r\n```Suggestion\r\n                if (m_orphanage.HaveTxAndPeer(GenTxid::Txid(txid), nodeid)) continue;\r\n                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\r\n```",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-12T20:56:48Z",
      "diff_hunk" : "@@ -0,0 +1,448 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // If already connected (shouldn't happen in practice), exit early.\n+    if (m_peer_info.count(nodeid) > 0) return;\n+\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+\n+    if (m_peer_info.count(nodeid) > 0) {\n+        if (m_peer_info.at(nodeid).m_connection_info.m_wtxid_relay) m_num_wtxid_peers -= 1;\n+        m_peer_info.erase(nodeid);\n+    }\n+}\n+\n+void TxDownloadImpl::UpdatedBlockTipSync() EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // If the chain tip has changed previously rejected transactions\n+    // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+    // or a double-spend. Reset the rejects filter and give those\n+    // txs a second chance.\n+    m_recent_rejects.reset();\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        if (ptx->HasWitness()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+    // Orphanage may include transactions conflicted by this block. There should not be any\n+    // transactions in m_orphan_resolution_tracker that aren't in orphanage, so this should include\n+    // all of the relevant orphans we were working on.\n+    for (const auto& erased_wtxid : m_orphanage.EraseForBlock(block)) {\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(erased_wtxid);\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : m_orphanage.EraseForBlock(block)) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(),\n+                     tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (m_peer_info.count(peer) == 0) return;\n+    if (m_orphanage.HaveTx(gtxid) || (gtxid.IsWtxid() && m_orphanage.HaveTx(GenTxid::Txid(gtxid.GetHash())))) {\n+        if (gtxid.IsWtxid()) {\n+            AddOrphanAnnouncer(peer, gtxid.GetHash(), now, /*is_new=*/false);\n+        }\n+        return;\n+    }\n+    // If this inv is by txid, check by txid. If it's by wtxid, also check by txid to attempt to\n+    // catch same-txid-different-witness.\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrint(BCLog::TXPACKAGES, \"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+        Assume(!m_orphanage.HaveTxAndPeer(orphan_gtxid, nodeid));\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        Assume(m_orphanage.HaveTxAndPeer(orphan_gtxid, nodeid));\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay instead of using ReceivedTxInv. This means it's scheduled\n+                // for request immediately unless there is already a request out for the same txhash\n+                // (e.g. if there is another orphan that needs this parent).\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1357413789",
      "id" : 1357413789,
      "line" : 279,
      "node_id" : "PRRC_kwDOABII585Q6H2d",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 279,
      "original_position" : 275,
      "original_start_line" : null,
      "path" : "src/node/txdownload_impl.cpp",
      "position" : 279,
      "pull_request_review_id" : 1675011535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357413789/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1357413789",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1358488871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358488871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like this happens in a few places? wouldn't type safety for the constructor be nice\r\n\r\n```suggestion\r\n                                   orphanage.HaveTx(GenTxid::Wtxid(ref->GetWitnessHash())));\r\n```",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-13T16:29:56Z",
      "diff_hunk" : "@@ -91,8 +93,11 @@ FUZZ_TARGET(txorphan, .init = initialize_orphanage)\n                     {\n                         CTransactionRef ref = orphanage.GetTxToReconsider(peer_id);\n                         if (ref) {\n-                            bool have_tx = orphanage.HaveTx(GenTxid::Txid(ref->GetHash())) || orphanage.HaveTx(GenTxid::Wtxid(ref->GetHash()));\n-                            Assert(have_tx);\n+                            Assert(orphanage.HaveTx(GenTxid::Txid(ref->GetHash())) ||\n+                                   orphanage.HaveTx(GenTxid::Wtxid(ref->GetHash())));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1358488871",
      "id" : 1358488871,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Q-OUn",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 97,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/fuzz/txorphan.cpp",
      "position" : null,
      "pull_request_review_id" : 1675011535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358488871/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T18:47:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358488871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1358646666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358646666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "we should `+=` like the above call or do `++` for both I think",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-13T18:10:48Z",
      "diff_hunk" : "@@ -138,32 +212,38 @@ void TxOrphanage::LimitOrphans(unsigned int max_orphans)\n         if (nErased > 0) LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx due to expiration\\n\", nErased);\n     }\n     FastRandomContext rng;\n-    while (m_orphans.size() > max_orphans)\n+    while (m_orphans.size() > max_orphans || m_total_orphan_bytes > max_total_size)\n     {\n         // Evict a random orphan:\n         size_t randompos = rng.randrange(m_orphan_list.size());\n-        EraseTxNoLock(m_orphan_list[randompos]->first);\n+        const auto& wtxid = m_orphan_list[randompos]->second.tx->GetWitnessHash();\n+        expired_and_evicted.emplace_back(wtxid);\n+        EraseTxNoLock(wtxid);\n         ++nEvicted;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1358646666",
      "id" : 1358646666,
      "line" : 223,
      "node_id" : "PRRC_kwDOABII585Q-02K",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 223,
      "original_position" : 195,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 214,
      "pull_request_review_id" : 1675011535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358646666/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-13T18:47:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358646666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1358670755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358670755"
         }
      },
      "author_association" : "MEMBER",
      "body" : "for fuzz/txorphan\r\n```\r\necho Kv//////////////lJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSU//////////////////////////////+A////////kEEKJf//ev///////8P///////8AAIH//wkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkB/wD8///SQP///////////////////////////////////4D///////+QQQol//96////////w/////////8KJf//ev//////////kEEKJf//1v///wP/////kEH///+QQQo1//8BPwAAv67Kf/////8u//////////////////////////////////////////////////////////////////////////96AP/1///////S0P//IP96AP////////+A////////kEEKJf//ev//////////kEEKJf//1v///wP/////kEH///+QQQo1//96/////P////+QQQol/yX//3r//////////wol///W//////////97e3t7e3t7e3t7e3t7e3t7e3t7e/+QQQol//96//////////////8s/yb/ | base64 -d > crash.txt\r\n```\r\n\r\nThese call `EraseTxNoLock` without doing m_peer_work_set management:\r\nTxOrphanage::EraseForBlock\r\nTxOrphanage::LimitOrphans\r\n\r\nThis results in fuzzer crashes where it's (still) in the peer's work set, but not counted as an announcer since it's been evicted(then later sent).\r\n\r\nAny time `EraseTx{NoLock}` is called we need to make sure that `m_peer_work_set` is appropriately being cleaned.\r\n\r\nTwo other spots I haven't thought through yet but I suspect need the same fix:\r\nTxDownloadImpl::MempoolAcceptedTx\r\nTxDownloadImpl::MempoolRejectedTx\r\n\r\nedit:\r\n\r\nlatter two mempool things are called; cleanup needs to happen! working on it",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-13T18:28:41Z",
      "diff_hunk" : "@@ -226,18 +317,64 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+                const uint256& orphan_wtxid = orphanTx.GetWitnessHash();\n+                vOrphanErase.push_back(orphan_wtxid);\n             }\n         }\n     }\n \n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseTxNoLock(orphanHash);\n+        for (const uint256& orphan_wtxid : vOrphanErase) {\n+            nErased += EraseTxNoLock(orphan_wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1358670755",
      "id" : 1358670755,
      "line" : 330,
      "node_id" : "PRRC_kwDOABII585Q-6uj",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 330,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 325,
      "pull_request_review_id" : 1675011535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358670755/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T14:27:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1358670755",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1360742645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360742645"
         }
      },
      "author_association" : "MEMBER",
      "body" : "should be able to assert that there also exists an announcement for this node?",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-16T14:21:35Z",
      "diff_hunk" : "@@ -0,0 +1,406 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <node/context.h>\n+#include <node/mempool_args.h>\n+#include <node/miner.h>\n+#include <node/txdownloadman.h>\n+#include <node/txdownload_impl.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <util/hasher.h>\n+#include <util/rbf.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+\n+constexpr size_t NUM_COINS{50};\n+COutPoint COINS[NUM_COINS];\n+\n+static TxValidationResult TESTED_TX_RESULTS[] = {\n+    // Skip TX_RESULT_UNSET\n+    TxValidationResult::TX_CONSENSUS,\n+    TxValidationResult::TX_RECENT_CONSENSUS_CHANGE,\n+    TxValidationResult::TX_INPUTS_NOT_STANDARD,\n+    TxValidationResult::TX_NOT_STANDARD,\n+    TxValidationResult::TX_MISSING_INPUTS,\n+    TxValidationResult::TX_PREMATURE_SPEND,\n+    TxValidationResult::TX_WITNESS_MUTATED,\n+    TxValidationResult::TX_WITNESS_STRIPPED,\n+    TxValidationResult::TX_CONFLICT,\n+    TxValidationResult::TX_MEMPOOL_POLICY,\n+    // Skip TX_NO_MEMPOOL\n+};\n+\n+// Precomputed transactions. Some may conflict with each other.\n+std::vector<CTransactionRef> TRANSACTIONS;\n+\n+// Limit the total number of peers because we don't expect coverage to change much with lots more peers.\n+constexpr int NUM_PEERS = 16;\n+\n+// Precomputed random durations (positive and negative, each ~exponentially distributed).\n+std::chrono::microseconds TIME_SKIPS[128];\n+\n+static CTransactionRef MakeTransactionSpending(const std::vector<COutPoint>& outpoints, size_t num_outputs, bool add_witness)\n+{\n+    CMutableTransaction tx;\n+    // If no outpoints are given, create a random one.\n+    for (const auto& outpoint : outpoints) {\n+        tx.vin.emplace_back(CTxIn(outpoint));\n+    }\n+    if (add_witness) {\n+        tx.vin[0].scriptWitness.stack.push_back({1});\n+    }\n+    tx.vout.emplace_back(CENT, P2WSH_OP_TRUE);\n+    return MakeTransactionRef(tx);\n+}\n+void initialize()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{NUM_COINS}; ++i) {\n+        COINS[i] = COutPoint{(HashWriter() << i).GetHash(), i};\n+    }\n+    size_t outpoints_index = 0;\n+    // 2 transactions same txid different witness\n+    {\n+        auto tx1{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/false)};\n+        auto tx2{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/true)};\n+        Assert(tx1->GetHash() == tx2->GetHash());\n+        TRANSACTIONS.emplace_back(tx1);\n+        TRANSACTIONS.emplace_back(tx2);\n+        outpoints_index += 1;\n+    }\n+    // 2 parents 1 child\n+    {\n+        auto tx_parent_1{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent_1);\n+        auto tx_parent_2{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/false)};\n+        TRANSACTIONS.emplace_back(tx_parent_2);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent_1->GetHash(), 0}, COutPoint{tx_parent_2->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // 1 parent 2 children\n+    {\n+        auto tx_parent{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/2, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 1}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // chain of 5 segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/true)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // chain of 5 non-segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/false)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // Also create a loose tx for each outpoint. Some of these transactions conflict with the above\n+    // or have the same txid.\n+    for (const auto& outpoint : COINS) {\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({outpoint}, /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+\n+    // Create random-looking time jumps\n+    int i = 0;\n+    // TIME_SKIPS[N] for N=0..15 is just N microseconds.\n+    for (; i < 16; ++i) {\n+        TIME_SKIPS[i] = std::chrono::microseconds{i};\n+    }\n+    // TIME_SKIPS[N] for N=16..127 has randomly-looking but roughly exponentially increasing values up to\n+    // 198.416453 seconds.\n+    for (; i < 128; ++i) {\n+        int diff_bits = ((i - 10) * 2) / 9;\n+        uint64_t diff = 1 + (CSipHasher(0, 0).Write(i).Finalize() >> (64 - diff_bits));\n+        TIME_SKIPS[i] = TIME_SKIPS[i - 1] + std::chrono::microseconds{diff};\n+    }\n+}\n+\n+FUZZ_TARGET(txdownloadman, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize txdownloadman\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    node::TxDownloadManager txdownloadman{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = fuzzed_data_provider.ConsumeBool(),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownloadman.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownloadman.DisconnectedPeer(rand_peer);\n+                txdownloadman.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownloadman.UpdatedBlockTipSync();\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownloadman.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownloadman.BlockDisconnected();\n+            },\n+            [&] {\n+                txdownloadman.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownloadman.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownloadman.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownloadman.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownloadman.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownloadman.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownloadman.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(ptx->GetWitnessHash())));\n+                }\n+            }\n+        );\n+        time += fuzzed_data_provider.PickValueInArray(TIME_SKIPS);\n+    }\n+    // Disconnect everybody, check that all data structures are empty.\n+    for (NodeId nodeid = 0; nodeid <= NUM_PEERS; ++nodeid) {\n+        txdownloadman.DisconnectedPeer(nodeid);\n+        txdownloadman.CheckIsEmpty(nodeid);\n+    }\n+    txdownloadman.CheckIsEmpty();\n+}\n+\n+// Give node 0 relay permissions, and nobody else. This helps us remember who is a RelayPermissions\n+// peer without tracking anything (this is only for the txdownload_impl target).\n+static bool HasRelayPermissions(NodeId peer) { return peer == 0; }\n+\n+static void CheckInvariants(const node::TxDownloadImpl& txdownload_impl, size_t max_orphan_count, unsigned int max_orphan_size)\n+{\n+    LOCK(txdownload_impl.m_tx_download_mutex);\n+    const TxOrphanage& orphanage = txdownload_impl.m_orphanage;\n+    // All transactions in the orphanage should have unique txids.\n+    std::set<uint256> unique_orphanage_txids;\n+    unsigned int expected_total_orphan_bytes{0};\n+    for (const auto& wtxid : orphanage.GetAllWtxids()) {\n+        auto ptx{orphanage.GetTx(wtxid)};\n+        Assert(ptx);\n+        Assert(unique_orphanage_txids.insert(ptx->GetHash()).second);\n+        expected_total_orphan_bytes += ptx->GetTotalSize();\n+    }\n+    Assert(orphanage.TotalOrphanBytes() == expected_total_orphan_bytes);\n+    Assert(orphanage.TotalOrphanBytes() <= max_orphan_size);\n+    Assert(orphanage.Size() == unique_orphanage_txids.size());\n+    Assert(orphanage.Size() <= max_orphan_count);\n+\n+    // A transaction should never be both in m_txrequest and m_orphan_resolution_tracker. That would\n+    // mean that we have the tx in our orphanage and yet are still trying to download it.\n+    for (const auto& tx : TRANSACTIONS) {\n+        // We're using GetCandidatePeers() to check whether a hash is present in a TxRequestTracker.\n+        const auto txrequest_candidates_wtxid{txdownload_impl.m_txrequest.GetCandidatePeers(tx->GetWitnessHash())};\n+        const auto orphan_reso_candidates{txdownload_impl.m_orphan_resolution_tracker.GetCandidatePeers(tx->GetWitnessHash())};\n+        const bool in_txrequest{!txrequest_candidates_wtxid.empty()};\n+        const bool in_orphan_reso{!orphan_reso_candidates.empty()};\n+        // A transaction (by wtxid) should only be in either orphan_reso_candidates or m_txrequest.\n+        Assert(!in_txrequest || !in_orphan_reso);\n+        if (in_orphan_reso) Assert(orphanage.HaveTx(GenTxid::Wtxid(tx->GetWitnessHash())));\n+\n+        // If a (tx, peer) pair is in the orphan resolution tracker, it should also be in the orphanage.\n+        for (const auto nodeid : orphan_reso_candidates) {\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(tx->GetWitnessHash()), nodeid));\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Txid(tx->GetHash()), nodeid));\n+        }\n+    }\n+\n+    // We should never have more than the maximum in-flight requests out for a peer.\n+    for (NodeId peer = 0; peer < NUM_PEERS; ++peer) {\n+        if (!HasRelayPermissions(peer)) {\n+            Assert(txdownload_impl.m_txrequest.CountInFlight(peer) <= node::MAX_PEER_TX_REQUEST_IN_FLIGHT);\n+        }\n+    }\n+}\n+\n+FUZZ_TARGET(txdownload_impl, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize a TxDownloadImpl\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    const auto max_orphan_size = DEFAULT_MAX_ORPHAN_TOTAL_SIZE;\n+    node::TxDownloadImpl txdownload_impl{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = HasRelayPermissions(rand_peer),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownload_impl.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownload_impl.DisconnectedPeer(rand_peer);\n+                txdownload_impl.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownload_impl.UpdatedBlockTipSync();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownload_impl.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownload_impl.BlockDisconnected();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                txdownload_impl.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownload_impl.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownload_impl.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownload_impl.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownload_impl.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownload_impl.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                    LOCK(txdownload_impl.m_tx_download_mutex);\n+                    Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(rand_tx->GetWitnessHash()), rand_peer));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownload_impl.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownload_impl.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1360742645",
      "id" : 1360742645,
      "line" : 386,
      "node_id" : "PRRC_kwDOABII585RG0j1",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 386,
      "original_position" : 386,
      "original_start_line" : null,
      "path" : "src/test/fuzz/txdownloadman.cpp",
      "position" : 386,
      "pull_request_review_id" : 1680112612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360742645/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T16:56:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360742645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1360781018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360781018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "pushed another couple fixes to https://github.com/instagibbs/bitcoin/tree/orphan-resolution-module-oct-12 , was same issue as before just in\r\n\r\nTxDownloadImpl::MempoolAcceptedTx\r\nTxDownloadImpl::MempoolRejectedTx\r\n\r\nas noted before",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-16T14:46:36Z",
      "diff_hunk" : "@@ -226,18 +317,64 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+                const uint256& orphan_wtxid = orphanTx.GetWitnessHash();\n+                vOrphanErase.push_back(orphan_wtxid);\n             }\n         }\n     }\n \n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseTxNoLock(orphanHash);\n+        for (const uint256& orphan_wtxid : vOrphanErase) {\n+            nErased += EraseTxNoLock(orphan_wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1360781018",
      "id" : 1360781018,
      "in_reply_to_id" : 1358670755,
      "line" : 330,
      "node_id" : "PRRC_kwDOABII585RG97a",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 330,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 325,
      "pull_request_review_id" : 1680112612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360781018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T16:56:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360781018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1360925170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360925170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "hahahahaha\r\nUnfortunately #28107 doesn't help in this case since this function takes a gentxid, but I've rebased on top of that PR.",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-16T16:20:21Z",
      "diff_hunk" : "@@ -91,8 +93,11 @@ FUZZ_TARGET(txorphan, .init = initialize_orphanage)\n                     {\n                         CTransactionRef ref = orphanage.GetTxToReconsider(peer_id);\n                         if (ref) {\n-                            bool have_tx = orphanage.HaveTx(GenTxid::Txid(ref->GetHash())) || orphanage.HaveTx(GenTxid::Wtxid(ref->GetHash()));\n-                            Assert(have_tx);\n+                            Assert(orphanage.HaveTx(GenTxid::Txid(ref->GetHash())) ||\n+                                   orphanage.HaveTx(GenTxid::Wtxid(ref->GetHash())));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1360925170",
      "id" : 1360925170,
      "in_reply_to_id" : 1358488871,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RHhHy",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 97,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/fuzz/txorphan.cpp",
      "position" : null,
      "pull_request_review_id" : 1680466402,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360925170/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-16T16:20:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1360925170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-16T18:26:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1765055868",
      "id" : 1765055868,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585pNJ18",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1765055868/reactions"
      },
      "updated_at" : "2023-10-16T18:26:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1765055868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1361749152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361749152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "an entry in `orphan_resolution_tracker`?",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-17T08:45:50Z",
      "diff_hunk" : "@@ -0,0 +1,406 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <node/context.h>\n+#include <node/mempool_args.h>\n+#include <node/miner.h>\n+#include <node/txdownloadman.h>\n+#include <node/txdownload_impl.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <util/hasher.h>\n+#include <util/rbf.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+\n+constexpr size_t NUM_COINS{50};\n+COutPoint COINS[NUM_COINS];\n+\n+static TxValidationResult TESTED_TX_RESULTS[] = {\n+    // Skip TX_RESULT_UNSET\n+    TxValidationResult::TX_CONSENSUS,\n+    TxValidationResult::TX_RECENT_CONSENSUS_CHANGE,\n+    TxValidationResult::TX_INPUTS_NOT_STANDARD,\n+    TxValidationResult::TX_NOT_STANDARD,\n+    TxValidationResult::TX_MISSING_INPUTS,\n+    TxValidationResult::TX_PREMATURE_SPEND,\n+    TxValidationResult::TX_WITNESS_MUTATED,\n+    TxValidationResult::TX_WITNESS_STRIPPED,\n+    TxValidationResult::TX_CONFLICT,\n+    TxValidationResult::TX_MEMPOOL_POLICY,\n+    // Skip TX_NO_MEMPOOL\n+};\n+\n+// Precomputed transactions. Some may conflict with each other.\n+std::vector<CTransactionRef> TRANSACTIONS;\n+\n+// Limit the total number of peers because we don't expect coverage to change much with lots more peers.\n+constexpr int NUM_PEERS = 16;\n+\n+// Precomputed random durations (positive and negative, each ~exponentially distributed).\n+std::chrono::microseconds TIME_SKIPS[128];\n+\n+static CTransactionRef MakeTransactionSpending(const std::vector<COutPoint>& outpoints, size_t num_outputs, bool add_witness)\n+{\n+    CMutableTransaction tx;\n+    // If no outpoints are given, create a random one.\n+    for (const auto& outpoint : outpoints) {\n+        tx.vin.emplace_back(CTxIn(outpoint));\n+    }\n+    if (add_witness) {\n+        tx.vin[0].scriptWitness.stack.push_back({1});\n+    }\n+    tx.vout.emplace_back(CENT, P2WSH_OP_TRUE);\n+    return MakeTransactionRef(tx);\n+}\n+void initialize()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{NUM_COINS}; ++i) {\n+        COINS[i] = COutPoint{(HashWriter() << i).GetHash(), i};\n+    }\n+    size_t outpoints_index = 0;\n+    // 2 transactions same txid different witness\n+    {\n+        auto tx1{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/false)};\n+        auto tx2{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/true)};\n+        Assert(tx1->GetHash() == tx2->GetHash());\n+        TRANSACTIONS.emplace_back(tx1);\n+        TRANSACTIONS.emplace_back(tx2);\n+        outpoints_index += 1;\n+    }\n+    // 2 parents 1 child\n+    {\n+        auto tx_parent_1{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent_1);\n+        auto tx_parent_2{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/false)};\n+        TRANSACTIONS.emplace_back(tx_parent_2);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent_1->GetHash(), 0}, COutPoint{tx_parent_2->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // 1 parent 2 children\n+    {\n+        auto tx_parent{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/2, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 1}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // chain of 5 segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/true)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // chain of 5 non-segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/false)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // Also create a loose tx for each outpoint. Some of these transactions conflict with the above\n+    // or have the same txid.\n+    for (const auto& outpoint : COINS) {\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({outpoint}, /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+\n+    // Create random-looking time jumps\n+    int i = 0;\n+    // TIME_SKIPS[N] for N=0..15 is just N microseconds.\n+    for (; i < 16; ++i) {\n+        TIME_SKIPS[i] = std::chrono::microseconds{i};\n+    }\n+    // TIME_SKIPS[N] for N=16..127 has randomly-looking but roughly exponentially increasing values up to\n+    // 198.416453 seconds.\n+    for (; i < 128; ++i) {\n+        int diff_bits = ((i - 10) * 2) / 9;\n+        uint64_t diff = 1 + (CSipHasher(0, 0).Write(i).Finalize() >> (64 - diff_bits));\n+        TIME_SKIPS[i] = TIME_SKIPS[i - 1] + std::chrono::microseconds{diff};\n+    }\n+}\n+\n+FUZZ_TARGET(txdownloadman, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize txdownloadman\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    node::TxDownloadManager txdownloadman{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = fuzzed_data_provider.ConsumeBool(),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownloadman.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownloadman.DisconnectedPeer(rand_peer);\n+                txdownloadman.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownloadman.UpdatedBlockTipSync();\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownloadman.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownloadman.BlockDisconnected();\n+            },\n+            [&] {\n+                txdownloadman.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownloadman.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownloadman.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownloadman.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownloadman.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownloadman.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownloadman.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(ptx->GetWitnessHash())));\n+                }\n+            }\n+        );\n+        time += fuzzed_data_provider.PickValueInArray(TIME_SKIPS);\n+    }\n+    // Disconnect everybody, check that all data structures are empty.\n+    for (NodeId nodeid = 0; nodeid <= NUM_PEERS; ++nodeid) {\n+        txdownloadman.DisconnectedPeer(nodeid);\n+        txdownloadman.CheckIsEmpty(nodeid);\n+    }\n+    txdownloadman.CheckIsEmpty();\n+}\n+\n+// Give node 0 relay permissions, and nobody else. This helps us remember who is a RelayPermissions\n+// peer without tracking anything (this is only for the txdownload_impl target).\n+static bool HasRelayPermissions(NodeId peer) { return peer == 0; }\n+\n+static void CheckInvariants(const node::TxDownloadImpl& txdownload_impl, size_t max_orphan_count, unsigned int max_orphan_size)\n+{\n+    LOCK(txdownload_impl.m_tx_download_mutex);\n+    const TxOrphanage& orphanage = txdownload_impl.m_orphanage;\n+    // All transactions in the orphanage should have unique txids.\n+    std::set<uint256> unique_orphanage_txids;\n+    unsigned int expected_total_orphan_bytes{0};\n+    for (const auto& wtxid : orphanage.GetAllWtxids()) {\n+        auto ptx{orphanage.GetTx(wtxid)};\n+        Assert(ptx);\n+        Assert(unique_orphanage_txids.insert(ptx->GetHash()).second);\n+        expected_total_orphan_bytes += ptx->GetTotalSize();\n+    }\n+    Assert(orphanage.TotalOrphanBytes() == expected_total_orphan_bytes);\n+    Assert(orphanage.TotalOrphanBytes() <= max_orphan_size);\n+    Assert(orphanage.Size() == unique_orphanage_txids.size());\n+    Assert(orphanage.Size() <= max_orphan_count);\n+\n+    // A transaction should never be both in m_txrequest and m_orphan_resolution_tracker. That would\n+    // mean that we have the tx in our orphanage and yet are still trying to download it.\n+    for (const auto& tx : TRANSACTIONS) {\n+        // We're using GetCandidatePeers() to check whether a hash is present in a TxRequestTracker.\n+        const auto txrequest_candidates_wtxid{txdownload_impl.m_txrequest.GetCandidatePeers(tx->GetWitnessHash())};\n+        const auto orphan_reso_candidates{txdownload_impl.m_orphan_resolution_tracker.GetCandidatePeers(tx->GetWitnessHash())};\n+        const bool in_txrequest{!txrequest_candidates_wtxid.empty()};\n+        const bool in_orphan_reso{!orphan_reso_candidates.empty()};\n+        // A transaction (by wtxid) should only be in either orphan_reso_candidates or m_txrequest.\n+        Assert(!in_txrequest || !in_orphan_reso);\n+        if (in_orphan_reso) Assert(orphanage.HaveTx(GenTxid::Wtxid(tx->GetWitnessHash())));\n+\n+        // If a (tx, peer) pair is in the orphan resolution tracker, it should also be in the orphanage.\n+        for (const auto nodeid : orphan_reso_candidates) {\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(tx->GetWitnessHash()), nodeid));\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Txid(tx->GetHash()), nodeid));\n+        }\n+    }\n+\n+    // We should never have more than the maximum in-flight requests out for a peer.\n+    for (NodeId peer = 0; peer < NUM_PEERS; ++peer) {\n+        if (!HasRelayPermissions(peer)) {\n+            Assert(txdownload_impl.m_txrequest.CountInFlight(peer) <= node::MAX_PEER_TX_REQUEST_IN_FLIGHT);\n+        }\n+    }\n+}\n+\n+FUZZ_TARGET(txdownload_impl, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize a TxDownloadImpl\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    const auto max_orphan_size = DEFAULT_MAX_ORPHAN_TOTAL_SIZE;\n+    node::TxDownloadImpl txdownload_impl{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = HasRelayPermissions(rand_peer),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownload_impl.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownload_impl.DisconnectedPeer(rand_peer);\n+                txdownload_impl.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownload_impl.UpdatedBlockTipSync();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownload_impl.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownload_impl.BlockDisconnected();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                txdownload_impl.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownload_impl.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownload_impl.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownload_impl.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownload_impl.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownload_impl.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                    LOCK(txdownload_impl.m_tx_download_mutex);\n+                    Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(rand_tx->GetWitnessHash()), rand_peer));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownload_impl.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownload_impl.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1361749152",
      "id" : 1361749152,
      "in_reply_to_id" : 1360742645,
      "line" : 386,
      "node_id" : "PRRC_kwDOABII585RKqSg",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 386,
      "original_position" : 386,
      "original_start_line" : null,
      "path" : "src/test/fuzz/txdownloadman.cpp",
      "position" : 386,
      "pull_request_review_id" : 1681738183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361749152/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T08:45:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361749152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1361762903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361762903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it a problem to lazily handle transactions in peer work sets that have been deleted from the orphanage? It's cleaner to `remove_work_from_all_sets` of course, but it iterates through every entry in `m_peer_work_set` so there is a performance difference but the external outcome is the same.\r\n\r\nI think erasing proactively in `EraseOrphanOfPeer` is necessary because the tx isn't deleted. Trying to avoid returning the tx in `GetTxToReconsider(peer)` after we've already decided to give up on (tx, peer).",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-17T08:56:07Z",
      "diff_hunk" : "@@ -226,18 +317,64 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+                const uint256& orphan_wtxid = orphanTx.GetWitnessHash();\n+                vOrphanErase.push_back(orphan_wtxid);\n             }\n         }\n     }\n \n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseTxNoLock(orphanHash);\n+        for (const uint256& orphan_wtxid : vOrphanErase) {\n+            nErased += EraseTxNoLock(orphan_wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1361762903",
      "id" : 1361762903,
      "in_reply_to_id" : 1358670755,
      "line" : 330,
      "node_id" : "PRRC_kwDOABII585RKtpX",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 330,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 325,
      "pull_request_review_id" : 1681759296,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361762903/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T08:56:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361762903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1361785701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361785701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> TxOrphanage::EraseForBlock\r\n> TxOrphanage::LimitOrphans\r\n\r\n> This results in fuzzer crashes where it's (still) in the peer's work set, but not counted as an announcer since it's been evicted(then later sent).\r\n\r\nQuestion: is it crashing because the tx is being returned from `GetTxToReconsider`? Seems weird as it should return a nullptr if it gets a tx that isn't there anymore...\r\n\r\nOOhhhhhhhhh could it be that it's re-added? My guess:\r\n1. `AddTx(tx_child, peer)`\r\n2. `AddChildrenToWorkSet(tx_parent)` -> peer workset contains tx_child\r\n3. `EraseTx(tx_child)` -> peer workset still contains tx_child but we expect orphanage to lazily delete that when we call `GetTxToReconsider`\r\n4. `AddTx(tx_child, other_peer)` (makes no sense but we're fuzzing)\r\n5. `GetTxToReconsider(peer)` returns `tx_child` even though it's not in `orphan_resolution_tracker`",
      "commit_id" : "c8e701e379de2225e9f904d0946743167bf24700",
      "created_at" : "2023-10-17T09:11:50Z",
      "diff_hunk" : "@@ -226,18 +317,64 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+                const uint256& orphan_wtxid = orphanTx.GetWitnessHash();\n+                vOrphanErase.push_back(orphan_wtxid);\n             }\n         }\n     }\n \n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseTxNoLock(orphanHash);\n+        for (const uint256& orphan_wtxid : vOrphanErase) {\n+            nErased += EraseTxNoLock(orphan_wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1361785701",
      "id" : 1361785701,
      "in_reply_to_id" : 1358670755,
      "line" : 330,
      "node_id" : "PRRC_kwDOABII585RKzNl",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 330,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 325,
      "pull_request_review_id" : 1681795962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361785701/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T09:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1361785701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362141412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362141412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Is it a problem to lazily handle transactions in peer work sets that have been deleted from the orphanage?\r\n\r\nSince `GetTxToReconsider` appears to be used in a single spot, and it really doesn't matter that it once was announced, then erased, then reconsidered for a peer, I suppose the fuzz test should just be modified to not crash :) ",
      "commit_id" : "e2e262fc1f6ea41d6f46b8db713c12df035464f6",
      "created_at" : "2023-10-17T13:43:22Z",
      "diff_hunk" : "@@ -226,18 +317,64 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+                const uint256& orphan_wtxid = orphanTx.GetWitnessHash();\n+                vOrphanErase.push_back(orphan_wtxid);\n             }\n         }\n     }\n \n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseTxNoLock(orphanHash);\n+        for (const uint256& orphan_wtxid : vOrphanErase) {\n+            nErased += EraseTxNoLock(orphan_wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362141412",
      "id" : 1362141412,
      "in_reply_to_id" : 1358670755,
      "line" : 332,
      "node_id" : "PRRC_kwDOABII585RMKDk",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 332,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 328,
      "pull_request_review_id" : 1682412120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362141412/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:43:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362141412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362147326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362147326"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Was going to suggest adding a check for `OrphanTx.announcers`, but it may not actually exist as discussed elsewhere.",
      "commit_id" : "e2e262fc1f6ea41d6f46b8db713c12df035464f6",
      "created_at" : "2023-10-17T13:46:36Z",
      "diff_hunk" : "@@ -0,0 +1,406 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <node/context.h>\n+#include <node/mempool_args.h>\n+#include <node/miner.h>\n+#include <node/txdownloadman.h>\n+#include <node/txdownload_impl.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <util/hasher.h>\n+#include <util/rbf.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+\n+constexpr size_t NUM_COINS{50};\n+COutPoint COINS[NUM_COINS];\n+\n+static TxValidationResult TESTED_TX_RESULTS[] = {\n+    // Skip TX_RESULT_UNSET\n+    TxValidationResult::TX_CONSENSUS,\n+    TxValidationResult::TX_RECENT_CONSENSUS_CHANGE,\n+    TxValidationResult::TX_INPUTS_NOT_STANDARD,\n+    TxValidationResult::TX_NOT_STANDARD,\n+    TxValidationResult::TX_MISSING_INPUTS,\n+    TxValidationResult::TX_PREMATURE_SPEND,\n+    TxValidationResult::TX_WITNESS_MUTATED,\n+    TxValidationResult::TX_WITNESS_STRIPPED,\n+    TxValidationResult::TX_CONFLICT,\n+    TxValidationResult::TX_MEMPOOL_POLICY,\n+    // Skip TX_NO_MEMPOOL\n+};\n+\n+// Precomputed transactions. Some may conflict with each other.\n+std::vector<CTransactionRef> TRANSACTIONS;\n+\n+// Limit the total number of peers because we don't expect coverage to change much with lots more peers.\n+constexpr int NUM_PEERS = 16;\n+\n+// Precomputed random durations (positive and negative, each ~exponentially distributed).\n+std::chrono::microseconds TIME_SKIPS[128];\n+\n+static CTransactionRef MakeTransactionSpending(const std::vector<COutPoint>& outpoints, size_t num_outputs, bool add_witness)\n+{\n+    CMutableTransaction tx;\n+    // If no outpoints are given, create a random one.\n+    for (const auto& outpoint : outpoints) {\n+        tx.vin.emplace_back(CTxIn(outpoint));\n+    }\n+    if (add_witness) {\n+        tx.vin[0].scriptWitness.stack.push_back({1});\n+    }\n+    tx.vout.emplace_back(CENT, P2WSH_OP_TRUE);\n+    return MakeTransactionRef(tx);\n+}\n+void initialize()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{NUM_COINS}; ++i) {\n+        COINS[i] = COutPoint{(HashWriter() << i).GetHash(), i};\n+    }\n+    size_t outpoints_index = 0;\n+    // 2 transactions same txid different witness\n+    {\n+        auto tx1{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/false)};\n+        auto tx2{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/true)};\n+        Assert(tx1->GetHash() == tx2->GetHash());\n+        TRANSACTIONS.emplace_back(tx1);\n+        TRANSACTIONS.emplace_back(tx2);\n+        outpoints_index += 1;\n+    }\n+    // 2 parents 1 child\n+    {\n+        auto tx_parent_1{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent_1);\n+        auto tx_parent_2{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/false)};\n+        TRANSACTIONS.emplace_back(tx_parent_2);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent_1->GetHash(), 0}, COutPoint{tx_parent_2->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // 1 parent 2 children\n+    {\n+        auto tx_parent{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/2, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 1}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // chain of 5 segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/true)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // chain of 5 non-segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/false)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // Also create a loose tx for each outpoint. Some of these transactions conflict with the above\n+    // or have the same txid.\n+    for (const auto& outpoint : COINS) {\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({outpoint}, /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+\n+    // Create random-looking time jumps\n+    int i = 0;\n+    // TIME_SKIPS[N] for N=0..15 is just N microseconds.\n+    for (; i < 16; ++i) {\n+        TIME_SKIPS[i] = std::chrono::microseconds{i};\n+    }\n+    // TIME_SKIPS[N] for N=16..127 has randomly-looking but roughly exponentially increasing values up to\n+    // 198.416453 seconds.\n+    for (; i < 128; ++i) {\n+        int diff_bits = ((i - 10) * 2) / 9;\n+        uint64_t diff = 1 + (CSipHasher(0, 0).Write(i).Finalize() >> (64 - diff_bits));\n+        TIME_SKIPS[i] = TIME_SKIPS[i - 1] + std::chrono::microseconds{diff};\n+    }\n+}\n+\n+FUZZ_TARGET(txdownloadman, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize txdownloadman\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    node::TxDownloadManager txdownloadman{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = fuzzed_data_provider.ConsumeBool(),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownloadman.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownloadman.DisconnectedPeer(rand_peer);\n+                txdownloadman.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownloadman.UpdatedBlockTipSync();\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownloadman.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownloadman.BlockDisconnected();\n+            },\n+            [&] {\n+                txdownloadman.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownloadman.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownloadman.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownloadman.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownloadman.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownloadman.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownloadman.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(ptx->GetWitnessHash())));\n+                }\n+            }\n+        );\n+        time += fuzzed_data_provider.PickValueInArray(TIME_SKIPS);\n+    }\n+    // Disconnect everybody, check that all data structures are empty.\n+    for (NodeId nodeid = 0; nodeid <= NUM_PEERS; ++nodeid) {\n+        txdownloadman.DisconnectedPeer(nodeid);\n+        txdownloadman.CheckIsEmpty(nodeid);\n+    }\n+    txdownloadman.CheckIsEmpty();\n+}\n+\n+// Give node 0 relay permissions, and nobody else. This helps us remember who is a RelayPermissions\n+// peer without tracking anything (this is only for the txdownload_impl target).\n+static bool HasRelayPermissions(NodeId peer) { return peer == 0; }\n+\n+static void CheckInvariants(const node::TxDownloadImpl& txdownload_impl, size_t max_orphan_count, unsigned int max_orphan_size)\n+{\n+    LOCK(txdownload_impl.m_tx_download_mutex);\n+    const TxOrphanage& orphanage = txdownload_impl.m_orphanage;\n+    // All transactions in the orphanage should have unique txids.\n+    std::set<uint256> unique_orphanage_txids;\n+    unsigned int expected_total_orphan_bytes{0};\n+    for (const auto& wtxid : orphanage.GetAllWtxids()) {\n+        auto ptx{orphanage.GetTx(wtxid)};\n+        Assert(ptx);\n+        Assert(unique_orphanage_txids.insert(ptx->GetHash()).second);\n+        expected_total_orphan_bytes += ptx->GetTotalSize();\n+    }\n+    Assert(orphanage.TotalOrphanBytes() == expected_total_orphan_bytes);\n+    Assert(orphanage.TotalOrphanBytes() <= max_orphan_size);\n+    Assert(orphanage.Size() == unique_orphanage_txids.size());\n+    Assert(orphanage.Size() <= max_orphan_count);\n+\n+    // A transaction should never be both in m_txrequest and m_orphan_resolution_tracker. That would\n+    // mean that we have the tx in our orphanage and yet are still trying to download it.\n+    for (const auto& tx : TRANSACTIONS) {\n+        // We're using GetCandidatePeers() to check whether a hash is present in a TxRequestTracker.\n+        const auto txrequest_candidates_wtxid{txdownload_impl.m_txrequest.GetCandidatePeers(tx->GetWitnessHash())};\n+        const auto orphan_reso_candidates{txdownload_impl.m_orphan_resolution_tracker.GetCandidatePeers(tx->GetWitnessHash())};\n+        const bool in_txrequest{!txrequest_candidates_wtxid.empty()};\n+        const bool in_orphan_reso{!orphan_reso_candidates.empty()};\n+        // A transaction (by wtxid) should only be in either orphan_reso_candidates or m_txrequest.\n+        Assert(!in_txrequest || !in_orphan_reso);\n+        if (in_orphan_reso) Assert(orphanage.HaveTx(GenTxid::Wtxid(tx->GetWitnessHash())));\n+\n+        // If a (tx, peer) pair is in the orphan resolution tracker, it should also be in the orphanage.\n+        for (const auto nodeid : orphan_reso_candidates) {\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(tx->GetWitnessHash()), nodeid));\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Txid(tx->GetHash()), nodeid));\n+        }\n+    }\n+\n+    // We should never have more than the maximum in-flight requests out for a peer.\n+    for (NodeId peer = 0; peer < NUM_PEERS; ++peer) {\n+        if (!HasRelayPermissions(peer)) {\n+            Assert(txdownload_impl.m_txrequest.CountInFlight(peer) <= node::MAX_PEER_TX_REQUEST_IN_FLIGHT);\n+        }\n+    }\n+}\n+\n+FUZZ_TARGET(txdownload_impl, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize a TxDownloadImpl\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    const auto max_orphan_size = DEFAULT_MAX_ORPHAN_TOTAL_SIZE;\n+    node::TxDownloadImpl txdownload_impl{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = HasRelayPermissions(rand_peer),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownload_impl.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownload_impl.DisconnectedPeer(rand_peer);\n+                txdownload_impl.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownload_impl.UpdatedBlockTipSync();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownload_impl.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownload_impl.BlockDisconnected();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                txdownload_impl.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownload_impl.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownload_impl.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownload_impl.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownload_impl.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownload_impl.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                    LOCK(txdownload_impl.m_tx_download_mutex);\n+                    Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(rand_tx->GetWitnessHash()), rand_peer));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownload_impl.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownload_impl.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362147326",
      "id" : 1362147326,
      "in_reply_to_id" : 1360742645,
      "line" : 386,
      "node_id" : "PRRC_kwDOABII585RMLf-",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 386,
      "original_position" : 386,
      "original_start_line" : null,
      "path" : "src/test/fuzz/txdownloadman.cpp",
      "position" : 386,
      "pull_request_review_id" : 1682420114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362147326/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:46:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362147326",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362166630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362166630"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "e2e262fc1f6ea41d6f46b8db713c12df035464f6",
      "created_at" : "2023-10-17T13:56:55Z",
      "diff_hunk" : "@@ -138,32 +212,38 @@ void TxOrphanage::LimitOrphans(unsigned int max_orphans)\n         if (nErased > 0) LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx due to expiration\\n\", nErased);\n     }\n     FastRandomContext rng;\n-    while (m_orphans.size() > max_orphans)\n+    while (m_orphans.size() > max_orphans || m_total_orphan_bytes > max_total_size)\n     {\n         // Evict a random orphan:\n         size_t randompos = rng.randrange(m_orphan_list.size());\n-        EraseTxNoLock(m_orphan_list[randompos]->first);\n+        const auto& wtxid = m_orphan_list[randompos]->second.tx->GetWitnessHash();\n+        expired_and_evicted.emplace_back(wtxid);\n+        EraseTxNoLock(wtxid);\n         ++nEvicted;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362166630",
      "id" : 1362166630,
      "in_reply_to_id" : 1358646666,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RMQNm",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 223,
      "original_position" : 195,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1682445646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362166630/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:56:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362166630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362171915"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362171915"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed `Assert(HaveTxAndPeer())` in the fuzzer, and added comments for when we clean up the work sets and when we don't",
      "commit_id" : "e2e262fc1f6ea41d6f46b8db713c12df035464f6",
      "created_at" : "2023-10-17T13:59:47Z",
      "diff_hunk" : "@@ -226,18 +317,64 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+                const uint256& orphan_wtxid = orphanTx.GetWitnessHash();\n+                vOrphanErase.push_back(orphan_wtxid);\n             }\n         }\n     }\n \n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseTxNoLock(orphanHash);\n+        for (const uint256& orphan_wtxid : vOrphanErase) {\n+            nErased += EraseTxNoLock(orphan_wtxid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362171915",
      "id" : 1362171915,
      "in_reply_to_id" : 1358670755,
      "line" : 332,
      "node_id" : "PRRC_kwDOABII585RMRgL",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 332,
      "original_position" : 285,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 328,
      "pull_request_review_id" : 1682452903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362171915/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T13:59:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362171915",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362173882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362173882"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That, and we can't check `announcers` because it's private ",
      "commit_id" : "e2e262fc1f6ea41d6f46b8db713c12df035464f6",
      "created_at" : "2023-10-17T14:00:27Z",
      "diff_hunk" : "@@ -0,0 +1,406 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <node/context.h>\n+#include <node/mempool_args.h>\n+#include <node/miner.h>\n+#include <node/txdownloadman.h>\n+#include <node/txdownload_impl.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <util/hasher.h>\n+#include <util/rbf.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+\n+constexpr size_t NUM_COINS{50};\n+COutPoint COINS[NUM_COINS];\n+\n+static TxValidationResult TESTED_TX_RESULTS[] = {\n+    // Skip TX_RESULT_UNSET\n+    TxValidationResult::TX_CONSENSUS,\n+    TxValidationResult::TX_RECENT_CONSENSUS_CHANGE,\n+    TxValidationResult::TX_INPUTS_NOT_STANDARD,\n+    TxValidationResult::TX_NOT_STANDARD,\n+    TxValidationResult::TX_MISSING_INPUTS,\n+    TxValidationResult::TX_PREMATURE_SPEND,\n+    TxValidationResult::TX_WITNESS_MUTATED,\n+    TxValidationResult::TX_WITNESS_STRIPPED,\n+    TxValidationResult::TX_CONFLICT,\n+    TxValidationResult::TX_MEMPOOL_POLICY,\n+    // Skip TX_NO_MEMPOOL\n+};\n+\n+// Precomputed transactions. Some may conflict with each other.\n+std::vector<CTransactionRef> TRANSACTIONS;\n+\n+// Limit the total number of peers because we don't expect coverage to change much with lots more peers.\n+constexpr int NUM_PEERS = 16;\n+\n+// Precomputed random durations (positive and negative, each ~exponentially distributed).\n+std::chrono::microseconds TIME_SKIPS[128];\n+\n+static CTransactionRef MakeTransactionSpending(const std::vector<COutPoint>& outpoints, size_t num_outputs, bool add_witness)\n+{\n+    CMutableTransaction tx;\n+    // If no outpoints are given, create a random one.\n+    for (const auto& outpoint : outpoints) {\n+        tx.vin.emplace_back(CTxIn(outpoint));\n+    }\n+    if (add_witness) {\n+        tx.vin[0].scriptWitness.stack.push_back({1});\n+    }\n+    tx.vout.emplace_back(CENT, P2WSH_OP_TRUE);\n+    return MakeTransactionRef(tx);\n+}\n+void initialize()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{NUM_COINS}; ++i) {\n+        COINS[i] = COutPoint{(HashWriter() << i).GetHash(), i};\n+    }\n+    size_t outpoints_index = 0;\n+    // 2 transactions same txid different witness\n+    {\n+        auto tx1{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/false)};\n+        auto tx2{MakeTransactionSpending({COINS[outpoints_index]}, /*num_outputs=*/5, /*add_witness=*/true)};\n+        Assert(tx1->GetHash() == tx2->GetHash());\n+        TRANSACTIONS.emplace_back(tx1);\n+        TRANSACTIONS.emplace_back(tx2);\n+        outpoints_index += 1;\n+    }\n+    // 2 parents 1 child\n+    {\n+        auto tx_parent_1{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent_1);\n+        auto tx_parent_2{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/1, /*add_witness=*/false)};\n+        TRANSACTIONS.emplace_back(tx_parent_2);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent_1->GetHash(), 0}, COutPoint{tx_parent_2->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // 1 parent 2 children\n+    {\n+        auto tx_parent{MakeTransactionSpending({COINS[outpoints_index++]}, /*num_outputs=*/2, /*add_witness=*/true)};\n+        TRANSACTIONS.emplace_back(tx_parent);\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 0}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({COutPoint{tx_parent->GetHash(), 1}},\n+                                                            /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+    // chain of 5 segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/true)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // chain of 5 non-segwit\n+    {\n+        COutPoint& last_outpoint = COINS[outpoints_index++];\n+        for (auto i{0}; i < 5; ++i) {\n+            auto tx{MakeTransactionSpending({last_outpoint}, /*num_outputs=*/1, /*add_witness=*/false)};\n+            TRANSACTIONS.emplace_back(tx);\n+            last_outpoint = COutPoint{tx->GetHash(), 0};\n+        }\n+    }\n+    // Also create a loose tx for each outpoint. Some of these transactions conflict with the above\n+    // or have the same txid.\n+    for (const auto& outpoint : COINS) {\n+        TRANSACTIONS.emplace_back(MakeTransactionSpending({outpoint}, /*num_outputs=*/1, /*add_witness=*/true));\n+    }\n+\n+    // Create random-looking time jumps\n+    int i = 0;\n+    // TIME_SKIPS[N] for N=0..15 is just N microseconds.\n+    for (; i < 16; ++i) {\n+        TIME_SKIPS[i] = std::chrono::microseconds{i};\n+    }\n+    // TIME_SKIPS[N] for N=16..127 has randomly-looking but roughly exponentially increasing values up to\n+    // 198.416453 seconds.\n+    for (; i < 128; ++i) {\n+        int diff_bits = ((i - 10) * 2) / 9;\n+        uint64_t diff = 1 + (CSipHasher(0, 0).Write(i).Finalize() >> (64 - diff_bits));\n+        TIME_SKIPS[i] = TIME_SKIPS[i - 1] + std::chrono::microseconds{diff};\n+    }\n+}\n+\n+FUZZ_TARGET(txdownloadman, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize txdownloadman\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    node::TxDownloadManager txdownloadman{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = fuzzed_data_provider.ConsumeBool(),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownloadman.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownloadman.DisconnectedPeer(rand_peer);\n+                txdownloadman.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownloadman.UpdatedBlockTipSync();\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownloadman.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownloadman.BlockDisconnected();\n+            },\n+            [&] {\n+                txdownloadman.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownloadman.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownloadman.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownloadman.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownloadman.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownloadman.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownloadman.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownloadman.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);\n+                    Assert(txdownloadman.AlreadyHaveTx(GenTxid::Wtxid(ptx->GetWitnessHash())));\n+                }\n+            }\n+        );\n+        time += fuzzed_data_provider.PickValueInArray(TIME_SKIPS);\n+    }\n+    // Disconnect everybody, check that all data structures are empty.\n+    for (NodeId nodeid = 0; nodeid <= NUM_PEERS; ++nodeid) {\n+        txdownloadman.DisconnectedPeer(nodeid);\n+        txdownloadman.CheckIsEmpty(nodeid);\n+    }\n+    txdownloadman.CheckIsEmpty();\n+}\n+\n+// Give node 0 relay permissions, and nobody else. This helps us remember who is a RelayPermissions\n+// peer without tracking anything (this is only for the txdownload_impl target).\n+static bool HasRelayPermissions(NodeId peer) { return peer == 0; }\n+\n+static void CheckInvariants(const node::TxDownloadImpl& txdownload_impl, size_t max_orphan_count, unsigned int max_orphan_size)\n+{\n+    LOCK(txdownload_impl.m_tx_download_mutex);\n+    const TxOrphanage& orphanage = txdownload_impl.m_orphanage;\n+    // All transactions in the orphanage should have unique txids.\n+    std::set<uint256> unique_orphanage_txids;\n+    unsigned int expected_total_orphan_bytes{0};\n+    for (const auto& wtxid : orphanage.GetAllWtxids()) {\n+        auto ptx{orphanage.GetTx(wtxid)};\n+        Assert(ptx);\n+        Assert(unique_orphanage_txids.insert(ptx->GetHash()).second);\n+        expected_total_orphan_bytes += ptx->GetTotalSize();\n+    }\n+    Assert(orphanage.TotalOrphanBytes() == expected_total_orphan_bytes);\n+    Assert(orphanage.TotalOrphanBytes() <= max_orphan_size);\n+    Assert(orphanage.Size() == unique_orphanage_txids.size());\n+    Assert(orphanage.Size() <= max_orphan_count);\n+\n+    // A transaction should never be both in m_txrequest and m_orphan_resolution_tracker. That would\n+    // mean that we have the tx in our orphanage and yet are still trying to download it.\n+    for (const auto& tx : TRANSACTIONS) {\n+        // We're using GetCandidatePeers() to check whether a hash is present in a TxRequestTracker.\n+        const auto txrequest_candidates_wtxid{txdownload_impl.m_txrequest.GetCandidatePeers(tx->GetWitnessHash())};\n+        const auto orphan_reso_candidates{txdownload_impl.m_orphan_resolution_tracker.GetCandidatePeers(tx->GetWitnessHash())};\n+        const bool in_txrequest{!txrequest_candidates_wtxid.empty()};\n+        const bool in_orphan_reso{!orphan_reso_candidates.empty()};\n+        // A transaction (by wtxid) should only be in either orphan_reso_candidates or m_txrequest.\n+        Assert(!in_txrequest || !in_orphan_reso);\n+        if (in_orphan_reso) Assert(orphanage.HaveTx(GenTxid::Wtxid(tx->GetWitnessHash())));\n+\n+        // If a (tx, peer) pair is in the orphan resolution tracker, it should also be in the orphanage.\n+        for (const auto nodeid : orphan_reso_candidates) {\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(tx->GetWitnessHash()), nodeid));\n+            Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Txid(tx->GetHash()), nodeid));\n+        }\n+    }\n+\n+    // We should never have more than the maximum in-flight requests out for a peer.\n+    for (NodeId peer = 0; peer < NUM_PEERS; ++peer) {\n+        if (!HasRelayPermissions(peer)) {\n+            Assert(txdownload_impl.m_txrequest.CountInFlight(peer) <= node::MAX_PEER_TX_REQUEST_IN_FLIGHT);\n+        }\n+    }\n+}\n+\n+FUZZ_TARGET(txdownload_impl, .init = initialize)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // Initialize a TxDownloadImpl\n+    const auto& node = g_setup->m_node;\n+    CTxMemPool pool{MemPoolOptionsForTest(node)};\n+    const auto max_orphan_count = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 300);\n+    const auto max_orphan_size = DEFAULT_MAX_ORPHAN_TOTAL_SIZE;\n+    node::TxDownloadImpl txdownload_impl{node::TxDownloadOptions{max_orphan_count, pool}};\n+\n+    std::chrono::microseconds time{244466666};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        NodeId rand_peer = fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, NUM_PEERS);\n+\n+        // Transaction can be one of the premade ones or a randomly generated one\n+        auto rand_tx = fuzzed_data_provider.ConsumeBool() ?\n+            MakeTransactionSpending({fuzzed_data_provider.PickValueInArray(COINS)},\n+                                    /*num_outputs=*/fuzzed_data_provider.ConsumeIntegralInRange(1, 500),\n+                                    /*add_witness=*/fuzzed_data_provider.ConsumeBool()) :\n+            TRANSACTIONS.at(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, TRANSACTIONS.size() - 1));\n+\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                node::TxDownloadConnectionInfo info{\n+                    .m_preferred = fuzzed_data_provider.ConsumeBool(),\n+                    .m_relay_permissions = HasRelayPermissions(rand_peer),\n+                    .m_wtxid_relay = fuzzed_data_provider.ConsumeBool()\n+                };\n+                txdownload_impl.ConnectedPeer(rand_peer, info);\n+            },\n+            [&] {\n+                txdownload_impl.DisconnectedPeer(rand_peer);\n+                txdownload_impl.CheckIsEmpty(rand_peer);\n+            },\n+            [&] {\n+                txdownload_impl.UpdatedBlockTipSync();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_rejects.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                CBlock block;\n+                block.vtx.push_back(rand_tx);\n+                txdownload_impl.BlockConnected(block, ConsumeUInt256(fuzzed_data_provider));\n+            },\n+            [&] {\n+                txdownload_impl.BlockDisconnected();\n+                LOCK(txdownload_impl.m_tx_download_mutex);\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetWitnessHash()));\n+                Assert(!txdownload_impl.m_recent_confirmed_transactions.contains(rand_tx->GetHash()));\n+            },\n+            [&] {\n+                txdownload_impl.MempoolAcceptedTx(rand_tx);\n+            },\n+            [&] {\n+                auto result = fuzzed_data_provider.PickValueInArray(TESTED_TX_RESULTS);\n+                txdownload_impl.MempoolRejectedTx(rand_tx, result);\n+            },\n+            [&] {\n+                GenTxid gtxid = fuzzed_data_provider.ConsumeBool() ?\n+                                GenTxid::Txid(rand_tx->GetHash()) :\n+                                GenTxid::Wtxid(rand_tx->GetWitnessHash());\n+                txdownload_impl.ReceivedTxInv(rand_peer, gtxid, time);\n+            },\n+            [&] {\n+                txdownload_impl.GetRequestsToSend(rand_peer, time);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedTx(rand_peer, rand_tx);\n+            },\n+            [&] {\n+                txdownload_impl.ReceivedNotFound(rand_peer, {rand_tx->GetWitnessHash()});\n+            },\n+            [&] {\n+                const auto res = txdownload_impl.NewOrphanTx(rand_tx, rand_peer, time);\n+                if (res.first) {\n+                    Assert(txdownload_impl.AlreadyHaveTx(GenTxid::Wtxid(rand_tx->GetWitnessHash())));\n+                    LOCK(txdownload_impl.m_tx_download_mutex);\n+                    Assert(txdownload_impl.m_orphanage.HaveTxAndPeer(GenTxid::Wtxid(rand_tx->GetWitnessHash()), rand_peer));\n+                }\n+            },\n+            [&] {\n+                const bool expect_work{txdownload_impl.HaveMoreWork(rand_peer)};\n+                const auto ptx = txdownload_impl.GetTxToReconsider(rand_peer);\n+                // expect_work=true doesn't necessarily mean the next item from the workset isn't a\n+                // nullptr, as the transaction could have been removed from orphanage without being\n+                // removed from the peer's workset.\n+                if (ptx) {\n+                    // However, if there was a non-null tx in the workset, HaveMoreWork should have\n+                    // returned true.\n+                    Assert(expect_work);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1362173882",
      "id" : 1362173882,
      "in_reply_to_id" : 1360742645,
      "line" : 386,
      "node_id" : "PRRC_kwDOABII585RMR-6",
      "original_commit_id" : "36f4d0d544cf2170ec7b3ffc2a632e6ec869057d",
      "original_line" : 386,
      "original_position" : 386,
      "original_start_line" : null,
      "path" : "src/test/fuzz/txdownloadman.cpp",
      "position" : 386,
      "pull_request_review_id" : 1682455580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362173882/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-17T14:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1362173882",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "worked through https://github.com/bitcoin/bitcoin/pull/28031/commits/e2e262fc1f6ea41d6f46b8db713c12df035464f6\r\n\r\nAll suggestions taken(or withdrawn by myself).",
      "created_at" : "2023-10-17T14:04:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1766490177",
      "id" : 1766490177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585pSoBB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1766490177/reactions"
      },
      "updated_at" : "2023-10-17T14:04:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1766490177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note I know there's a \"needs rebase\" label but that's because I rebased on top of 28107",
      "created_at" : "2023-10-20T14:44:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1772873648",
      "id" : 1772873648,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
      "node_id" : "IC_kwDOABII585pq-ew",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1772873648/reactions"
      },
      "updated_at" : "2023-10-20T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1772873648",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
