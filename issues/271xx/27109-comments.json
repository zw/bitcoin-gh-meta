[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [darosior](https://github.com/bitcoin/bitcoin/pull/27109#pullrequestreview-1636191808) |\n| Concept ACK | [jamesob](https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433262848), [jonatack](https://github.com/bitcoin/bitcoin/pull/27109#pullrequestreview-1301984484), [kristapsk](https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433509860), [theStack](https://github.com/bitcoin/bitcoin/pull/27109#pullrequestreview-1302901104), [brunoerg](https://github.com/bitcoin/bitcoin/pull/27109#pullrequestreview-1305801592), [RandyMcMillan](https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1655711887) |\n| Stale ACK | [Sjors](https://github.com/bitcoin/bitcoin/pull/27109#pullrequestreview-1370421385) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "created_at" : "2023-02-16T12:49:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433038607",
      "id" : 1433038607,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Vam8P",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433038607/reactions"
      },
      "updated_at" : "2023-09-20T17:39:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433038607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nProbably worth just squashing this down to 1 commit.",
      "created_at" : "2023-02-16T15:26:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433262848",
      "id" : 1433262848,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585VbdsA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433262848/reactions"
      },
      "updated_at" : "2023-02-16T15:26:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433262848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108648411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108648411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe for `OP_0`, `OP_1`..`OP_16`, `OP_1NEGATE`, elaborate a bit by stating they they push an element onto the stack, and perhaps give the exact byte encoding rather than just the number.\r\n\r\nE.g. `OP_3 = 0x53, // Push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)`",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T15:31:29Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // empty array of bytes",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108648411",
      "id" : 1108648411,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CFKHb",
      "original_commit_id" : "ea38a2d75aca7125d60ae8f918aaaf95f4f28a99",
      "original_line" : 72,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301715668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108648411/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:36:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108648411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108651477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108651477"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also, perhaps use `/**< ... */` or `//!< ..` so that doxygen will pick the descriptions up.",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T15:32:56Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // empty array of bytes",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108651477",
      "id" : 1108651477,
      "in_reply_to_id" : 1108648411,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CFK3V",
      "original_commit_id" : "ea38a2d75aca7125d60ae8f918aaaf95f4f28a99",
      "original_line" : 72,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301715668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108651477/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108651477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108652111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108652111"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I can't really parse what you're trying to say here.",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T15:33:24Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // empty array of bytes\n+    OP_FALSE = OP_0, // empty array of bytes\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // -1\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // 1\n+    OP_TRUE=OP_1, // 1\n+    OP_2 = 0x52, // 2\n+    OP_3 = 0x53, // 3\n+    OP_4 = 0x54, // 4\n+    OP_5 = 0x55, // 5\n+    OP_6 = 0x56, // 6\n+    OP_7 = 0x57, // 7\n+    OP_8 = 0x58, // 8\n+    OP_9 = 0x59, // 9\n+    OP_10 = 0x5a, // 10\n+    OP_11 = 0x5b, // 11\n+    OP_12 = 0x5c, // 12\n+    OP_13 = 0x5d, // 13\n+    OP_14 = 0x5e, // 14\n+    OP_15 = 0x5f, // 15\n+    OP_16 = 0x60, // 16\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if neither OP_IF, OP_NOTIF, OP_ELSE not executed, execute the statement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108652111",
      "id" : 1108652111,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CFLBP",
      "original_commit_id" : "ea38a2d75aca7125d60ae8f918aaaf95f4f28a99",
      "original_line" : 104,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301715668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108652111/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:36:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108652111",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108652728"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108652728"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add whether or not it also applies in unexecuted branches?",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T15:33:53Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // empty array of bytes\n+    OP_FALSE = OP_0, // empty array of bytes\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // -1\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // 1\n+    OP_TRUE=OP_1, // 1\n+    OP_2 = 0x52, // 2\n+    OP_3 = 0x53, // 3\n+    OP_4 = 0x54, // 4\n+    OP_5 = 0x55, // 5\n+    OP_6 = 0x56, // 6\n+    OP_7 = 0x57, // 7\n+    OP_8 = 0x58, // 8\n+    OP_9 = 0x59, // 9\n+    OP_10 = 0x5a, // 10\n+    OP_11 = 0x5b, // 11\n+    OP_12 = 0x5c, // 12\n+    OP_13 = 0x5d, // 13\n+    OP_14 = 0x5e, // 14\n+    OP_15 = 0x5f, // 15\n+    OP_16 = 0x60, // 16\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if neither OP_IF, OP_NOTIF, OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false\n+    OP_RETURN = 0x6a, // mark tx invalid",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108652728",
      "id" : 1108652728,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CFLK4",
      "original_commit_id" : "ea38a2d75aca7125d60ae8f918aaaf95f4f28a99",
      "original_line" : 107,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301715668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108652728/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:36:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108652728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108653671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108653671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"second-top\" sounds a bit strange to me; perhaps \"second from the top\"?\r\n\r\nAlternatively: \"remove the two top stack items\" ?",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T15:34:35Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // empty array of bytes\n+    OP_FALSE = OP_0, // empty array of bytes\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // -1\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // 1\n+    OP_TRUE=OP_1, // 1\n+    OP_2 = 0x52, // 2\n+    OP_3 = 0x53, // 3\n+    OP_4 = 0x54, // 4\n+    OP_5 = 0x55, // 5\n+    OP_6 = 0x56, // 6\n+    OP_7 = 0x57, // 7\n+    OP_8 = 0x58, // 8\n+    OP_9 = 0x59, // 9\n+    OP_10 = 0x5a, // 10\n+    OP_11 = 0x5b, // 11\n+    OP_12 = 0x5c, // 12\n+    OP_13 = 0x5d, // 13\n+    OP_14 = 0x5e, // 14\n+    OP_15 = 0x5f, // 15\n+    OP_16 = 0x60, // 16\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if neither OP_IF, OP_NOTIF, OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false\n+    OP_RETURN = 0x6a, // mark tx invalid\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b, // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d, // remove top and second-top stack item",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108653671",
      "id" : 1108653671,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CFLZn",
      "original_commit_id" : "ea38a2d75aca7125d60ae8f918aaaf95f4f28a99",
      "original_line" : 112,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301715668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108653671/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:36:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108653671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108654824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108654824"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps add whether this also applies in unexecuted branches? What does the unconditionally refer to?",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T15:35:30Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // empty array of bytes\n+    OP_FALSE = OP_0, // empty array of bytes\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // -1\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // 1\n+    OP_TRUE=OP_1, // 1\n+    OP_2 = 0x52, // 2\n+    OP_3 = 0x53, // 3\n+    OP_4 = 0x54, // 4\n+    OP_5 = 0x55, // 5\n+    OP_6 = 0x56, // 6\n+    OP_7 = 0x57, // 7\n+    OP_8 = 0x58, // 8\n+    OP_9 = 0x59, // 9\n+    OP_10 = 0x5a, // 10\n+    OP_11 = 0x5b, // 11\n+    OP_12 = 0x5c, // 12\n+    OP_13 = 0x5d, // 13\n+    OP_14 = 0x5e, // 14\n+    OP_15 = 0x5f, // 15\n+    OP_16 = 0x60, // 16\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if neither OP_IF, OP_NOTIF, OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false\n+    OP_RETURN = 0x6a, // mark tx invalid\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b, // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d, // remove top and second-top stack item\n+    OP_2DUP = 0x6e, // duplicate top and second-top stack item\n+    OP_3DUP = 0x6f, // duplicate top, second-top and third-top stack item\n+    OP_2OVER = 0x70, // copy third and fourth top stack items to the top\n+    OP_2ROT = 0x71, // move fifth and sixth top stack items to the top\n+    OP_2SWAP = 0x72, // swap: top and second-top <-> third and fourth top items of stack\n+    OP_IFDUP = 0x73, // if top stack value != 0, duplicate it\n+    OP_DEPTH = 0x74, // push the current number of stack items onto the stack\n+    OP_DROP = 0x75, // remove top stack item\n+    OP_DUP = 0x76, // duplicate top stack item\n+    OP_NIP = 0x77, // remove second-top stack item\n+    OP_OVER = 0x78, // copy second-top stack item to the top\n+    OP_PICK = 0x79, // copy item N back in stack to the top\n+    OP_ROLL = 0x7a, // move item N back in stack\n+    OP_ROT = 0x7b, // move third-top stack item to the top\n+    OP_SWAP = 0x7c, // swap top two items of stack\n+    OP_TUCK = 0x7d, // copy top stack item and insert before second-top\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e, // disabled, fail the script unconditionally",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108654824",
      "id" : 1108654824,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CFLro",
      "original_commit_id" : "ea38a2d75aca7125d60ae8f918aaaf95f4f28a99",
      "original_line" : 131,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301715668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108654824/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:36:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108654824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108656534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108656534"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps clarify that this does not pop the top element whose size is inspected.",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T15:36:45Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // empty array of bytes\n+    OP_FALSE = OP_0, // empty array of bytes\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // -1\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // 1\n+    OP_TRUE=OP_1, // 1\n+    OP_2 = 0x52, // 2\n+    OP_3 = 0x53, // 3\n+    OP_4 = 0x54, // 4\n+    OP_5 = 0x55, // 5\n+    OP_6 = 0x56, // 6\n+    OP_7 = 0x57, // 7\n+    OP_8 = 0x58, // 8\n+    OP_9 = 0x59, // 9\n+    OP_10 = 0x5a, // 10\n+    OP_11 = 0x5b, // 11\n+    OP_12 = 0x5c, // 12\n+    OP_13 = 0x5d, // 13\n+    OP_14 = 0x5e, // 14\n+    OP_15 = 0x5f, // 15\n+    OP_16 = 0x60, // 16\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if neither OP_IF, OP_NOTIF, OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false\n+    OP_RETURN = 0x6a, // mark tx invalid\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b, // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d, // remove top and second-top stack item\n+    OP_2DUP = 0x6e, // duplicate top and second-top stack item\n+    OP_3DUP = 0x6f, // duplicate top, second-top and third-top stack item\n+    OP_2OVER = 0x70, // copy third and fourth top stack items to the top\n+    OP_2ROT = 0x71, // move fifth and sixth top stack items to the top\n+    OP_2SWAP = 0x72, // swap: top and second-top <-> third and fourth top items of stack\n+    OP_IFDUP = 0x73, // if top stack value != 0, duplicate it\n+    OP_DEPTH = 0x74, // push the current number of stack items onto the stack\n+    OP_DROP = 0x75, // remove top stack item\n+    OP_DUP = 0x76, // duplicate top stack item\n+    OP_NIP = 0x77, // remove second-top stack item\n+    OP_OVER = 0x78, // copy second-top stack item to the top\n+    OP_PICK = 0x79, // copy item N back in stack to the top\n+    OP_ROLL = 0x7a, // move item N back in stack\n+    OP_ROT = 0x7b, // move third-top stack item to the top\n+    OP_SWAP = 0x7c, // swap top two items of stack\n+    OP_TUCK = 0x7d, // copy top stack item and insert before second-top\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e, // disabled, fail the script unconditionally\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally\n+    OP_LEFT = 0x80, // disabled, fail the script unconditionally\n+    OP_RIGHT = 0x81, // disabled, fail the script unconditionally\n+    OP_SIZE = 0x82, // push the length of top stack item",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108656534",
      "id" : 1108656534,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CFMGW",
      "original_commit_id" : "ea38a2d75aca7125d60ae8f918aaaf95f4f28a99",
      "original_line" : 135,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301715668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108656534/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108656534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Grateful for kind feedbacks, @sipa\r\nI made commit to reflect feedbacks, and squashed this PR down to 1 commit!",
      "created_at" : "2023-02-16T16:56:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433401897",
      "id" : 1433401897,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Vb_op",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433401897/reactions"
      },
      "updated_at" : "2023-02-16T17:23:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433401897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/Hyunhum/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Hyunhum/followers",
         "following_url" : "https://api.github.com/users/Hyunhum/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Hyunhum/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Hyunhum",
         "id" : 73169711,
         "login" : "Hyunhum",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/Hyunhum/orgs",
         "received_events_url" : "https://api.github.com/users/Hyunhum/received_events",
         "repos_url" : "https://api.github.com/users/Hyunhum/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Hyunhum/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Hyunhum/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Hyunhum"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108823232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108823232"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and elsewhere in your changes.\r\n```suggestion\r\n    OP_RESERVED = 0x50, // mark tx invalid unless occurring in an unexecuted OP_IF branch\r\n```\r\n\r\n(You can run a spelling check by running `test/lint/lint-spelling.py` from the repository root.)",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T17:44:23Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x-1\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108823232",
      "id" : 1108823232,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF0zA",
      "original_commit_id" : "4e8f9cb8db6c12e77cba3b7b1e25bc32de75b5ce",
      "original_line" : 78,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301984484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108823232/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T17:57:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108823232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108827460"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108827460"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    OP_ENDIF = 0x68, // end if/else block (must include, otherwise tx becomes invalid)\r\n```",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T17:46:36Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x-1\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE=OP_1, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52, // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53, // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54, // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55, // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56, // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57, // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58, // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59, // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a, // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b, // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c, // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d, // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e, // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f, // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60, // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108827460",
      "id" : 1108827460,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF11E",
      "original_commit_id" : "4e8f9cb8db6c12e77cba3b7b1e25bc32de75b5ce",
      "original_line" : 105,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301984484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108827460/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T17:57:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108827460",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108829461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108829461"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    OP_3DUP = 0x6f, // duplicate top, second from top and third from top stack items\r\n```",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T17:47:45Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x-1\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE=OP_1, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52, // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53, // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54, // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55, // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56, // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57, // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58, // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59, // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a, // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b, // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c, // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d, // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e, // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f, // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60, // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b, // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d, // remove the two top stack items\n+    OP_2DUP = 0x6e, // duplicate top and second from top stack item\n+    OP_3DUP = 0x6f, // duplicate top, second from top and third from top stack item",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108829461",
      "id" : 1108829461,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF2UV",
      "original_commit_id" : "4e8f9cb8db6c12e77cba3b7b1e25bc32de75b5ce",
      "original_line" : 114,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301984484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108829461/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T17:57:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108829461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108829784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108829784"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    OP_2DUP = 0x6e, // duplicate top and second from top stack items\r\n```",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T17:47:58Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x-1\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE=OP_1, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52, // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53, // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54, // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55, // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56, // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57, // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58, // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59, // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a, // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b, // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c, // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d, // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e, // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f, // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60, // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b, // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d, // remove the two top stack items\n+    OP_2DUP = 0x6e, // duplicate top and second from top stack item",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108829784",
      "id" : 1108829784,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF2ZY",
      "original_commit_id" : "4e8f9cb8db6c12e77cba3b7b1e25bc32de75b5ce",
      "original_line" : 113,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301984484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108829784/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T17:57:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108829784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108831224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108831224"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and in the next 8 lines and also in additional lines after that.\r\n```suggestion\r\n    OP_CAT = 0x7e, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\r\n```",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T17:48:59Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x-1\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE=OP_1, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52, // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53, // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54, // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55, // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56, // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57, // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58, // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59, // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a, // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b, // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c, // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d, // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e, // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f, // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60, // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b, // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d, // remove the two top stack items\n+    OP_2DUP = 0x6e, // duplicate top and second from top stack item\n+    OP_3DUP = 0x6f, // duplicate top, second from top and third from top stack item\n+    OP_2OVER = 0x70, // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71, // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72, // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73, // if top stack value != 0, duplicate it\n+    OP_DEPTH = 0x74, // push the current number of stack items onto the stack\n+    OP_DROP = 0x75, // remove top stack item\n+    OP_DUP = 0x76, // duplicate top stack item\n+    OP_NIP = 0x77, // remove second from top stack item\n+    OP_OVER = 0x78, // copy second from top stack item to the top\n+    OP_PICK = 0x79, // copy item N back in stack to the top\n+    OP_ROLL = 0x7a, // move item N back in stack\n+    OP_ROT = 0x7b, // move third from top stack item to the top\n+    OP_SWAP = 0x7c, // swap top two items of stack\n+    OP_TUCK = 0x7d, // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108831224",
      "id" : 1108831224,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF2v4",
      "original_commit_id" : "4e8f9cb8db6c12e77cba3b7b1e25bc32de75b5ce",
      "original_line" : 131,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301984484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108831224/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T17:57:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108831224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108833548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108833548"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    OP_NEGATE = 0x8f, // multiply the top stack item by -1\r\n```",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T17:50:46Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x-1\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE=OP_1, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52, // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53, // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54, // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55, // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56, // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57, // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58, // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59, // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a, // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b, // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c, // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d, // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e, // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f, // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60, // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement\n+    OP_NOTIF = 0x64, // if top stack value false, execute the statement\n+    OP_VERIF = 0x65, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67, // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68, // end if/else block(must include, otherwise tx become invalid)\n+    OP_VERIFY = 0x69, // mark tx invalid if top stack value false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b, // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d, // remove the two top stack items\n+    OP_2DUP = 0x6e, // duplicate top and second from top stack item\n+    OP_3DUP = 0x6f, // duplicate top, second from top and third from top stack item\n+    OP_2OVER = 0x70, // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71, // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72, // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73, // if top stack value != 0, duplicate it\n+    OP_DEPTH = 0x74, // push the current number of stack items onto the stack\n+    OP_DROP = 0x75, // remove top stack item\n+    OP_DUP = 0x76, // duplicate top stack item\n+    OP_NIP = 0x77, // remove second from top stack item\n+    OP_OVER = 0x78, // copy second from top stack item to the top\n+    OP_PICK = 0x79, // copy item N back in stack to the top\n+    OP_ROLL = 0x7a, // move item N back in stack\n+    OP_ROT = 0x7b, // move third from top stack item to the top\n+    OP_SWAP = 0x7c, // swap top two items of stack\n+    OP_TUCK = 0x7d, // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82, // push the length of top stack item(not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_AND = 0x84, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_OR = 0x85, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87, // return 1 if the inputs are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b, // 1 added to the top stack item\n+    OP_1SUB = 0x8c, // 1 subtracted from the top stack item\n+    OP_2MUL = 0x8d, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e, // disabled, fail the script unconditionally(apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f, // multiply the tops stack item by -1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108833548",
      "id" : 1108833548,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF3UM",
      "original_commit_id" : "4e8f9cb8db6c12e77cba3b7b1e25bc32de75b5ce",
      "original_line" : 152,
      "original_position" : 180,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1301984484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108833548/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T17:57:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108833548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-02-16T18:07:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433504037",
      "id" : 1433504037,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585VcYkl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433504037/reactions"
      },
      "updated_at" : "2023-02-16T18:07:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433504037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-02-16T18:12:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433509860",
      "id" : 1433509860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585VcZ_k",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433509860/reactions"
      },
      "updated_at" : "2023-02-16T18:12:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433509860",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108865017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108865017"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd just say `\"\"` or `the empty array`. \"\\x\" isn't any valid syntax I know.",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T18:21:09Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108865017",
      "id" : 1108865017,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF-_5",
      "original_commit_id" : "bcff35a76e6f364b86759b61b766ed58b50ccd52",
      "original_line" : 72,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1302042129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108865017/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T18:22:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108865017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108865326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108865326"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It pushes `\"\\x81\"` (the byte array consisting of a single byte with value 129).",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T18:21:28Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\\x\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x-1\" onto the stack (which is interpreted as -1 by numerical opcodes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1108865326",
      "id" : 1108865326,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CF_Eu",
      "original_commit_id" : "bcff35a76e6f364b86759b61b766ed58b50ccd52",
      "original_line" : 77,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1302042129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108865326/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T18:22:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108865326",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "applying clang-formatting:\r\nper `src/.clang-format`\r\nmay be useful\r\n\r\nhttps://github.com/RandyMcMillan/bitcoin/commit/99e3dc536dca94dffd703e77572f6dca91f4bb26\r\n\r\npatch:\r\nhttps://raw.githubusercontent.com/bitcoin/bitcoin/433d01c67657f49773a649ba48c264cda833e783/clang-format.patch",
      "created_at" : "2023-02-16T20:05:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1433649698",
      "id" : 1433649698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Vc8Ii",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433649698/reactions"
      },
      "updated_at" : "2023-02-16T20:16:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433649698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1109011531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109011531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We should probably be consistent in describing how Script deals with true/false, since it's later described as `if top stack value != 0`.  Maybe add a section along the lines of:\r\n\r\n``` \r\n/** \r\n* Opcodes that take a true/false value will evaluate the following as false:\r\n*     an empty vector\r\n*     a vector (of any length) of all zero bytes \r\n*     a single byte of \"\\x80\" ('negative zero')\r\n*     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\r\n*\r\n* Any other value will evaluate to true.\r\n* /\r\n```\r\n\r\nI'd also say ` if the top stack value is true,`, and indicate that it consumes the stack item.",
      "commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "created_at" : "2023-02-16T20:52:33Z",
      "diff_hunk" : "@@ -69,143 +69,143 @@ std::vector<unsigned char> ToByteVector(const T& in)\n enum opcodetype\n {\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00, // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0, // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f, // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50, // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE=OP_1, // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52, // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53, // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54, // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55, // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56, // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57, // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58, // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59, // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a, // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b, // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c, // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d, // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e, // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f, // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60, // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61, // do nothing\n+    OP_VER = 0x62, // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63, // if top stack value true, execute the statement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1109011531",
      "id" : 1109011531,
      "line" : 100,
      "node_id" : "PRRC_kwDOABII585CGixL",
      "original_commit_id" : "49bdfa51ef27863193701d0befd094d9f2b99227",
      "original_line" : 100,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 66,
      "pull_request_review_id" : 1302261728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109011531/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T20:58:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109011531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/116917595?v=4",
         "events_url" : "https://api.github.com/users/john-moffett/events{/privacy}",
         "followers_url" : "https://api.github.com/users/john-moffett/followers",
         "following_url" : "https://api.github.com/users/john-moffett/following{/other_user}",
         "gists_url" : "https://api.github.com/users/john-moffett/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/john-moffett",
         "id" : 116917595,
         "login" : "john-moffett",
         "node_id" : "U_kgDOBvgFWw",
         "organizations_url" : "https://api.github.com/users/john-moffett/orgs",
         "received_events_url" : "https://api.github.com/users/john-moffett/received_events",
         "repos_url" : "https://api.github.com/users/john-moffett/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/john-moffett/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/john-moffett/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/john-moffett"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "clang-format applied and description for evaluating false added!",
      "created_at" : "2023-02-17T02:47:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1434020186",
      "id" : 1434020186,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585VeWla",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434020186/reactions"
      },
      "updated_at" : "2023-02-17T02:47:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434020186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/Hyunhum/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Hyunhum/followers",
         "following_url" : "https://api.github.com/users/Hyunhum/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Hyunhum/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Hyunhum",
         "id" : 73169711,
         "login" : "Hyunhum",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/Hyunhum/orgs",
         "received_events_url" : "https://api.github.com/users/Hyunhum/received_events",
         "repos_url" : "https://api.github.com/users/Hyunhum/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Hyunhum/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Hyunhum/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Hyunhum"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1109449787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109449787"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\r\n```",
      "commit_id" : "d6ab4d5157ddaaaf30dc3661aadf84ad869dea6e",
      "created_at" : "2023-02-17T08:46:37Z",
      "diff_hunk" : "@@ -68,144 +68,153 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1109449787",
      "id" : 1109449787,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585CINw7",
      "original_commit_id" : "d6ab4d5157ddaaaf30dc3661aadf84ad869dea6e",
      "original_line" : 85,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 42,
      "pull_request_review_id" : 1302901104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109449787/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-17T08:51:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109449787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1109456114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109456114"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "would also use the active form here\r\n```suggestion\r\n    OP_1ADD = 0x8b,      // add 1 to the top stack item\r\n    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\r\n```",
      "commit_id" : "d6ab4d5157ddaaaf30dc3661aadf84ad869dea6e",
      "created_at" : "2023-02-17T08:48:51Z",
      "diff_hunk" : "@@ -68,144 +68,153 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // return 1 if the inputs are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // 1 added to the top stack item\n+    OP_1SUB = 0x8c,      // 1 subtracted from the top stack item",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1109456114",
      "id" : 1109456114,
      "line" : 158,
      "node_id" : "PRRC_kwDOABII585CIPTy",
      "original_commit_id" : "d6ab4d5157ddaaaf30dc3661aadf84ad869dea6e",
      "original_line" : 158,
      "original_position" : 187,
      "original_start_line" : 157,
      "path" : "src/script/script.h",
      "position" : 187,
      "pull_request_review_id" : 1302901104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109456114/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 157,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-17T08:51:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109456114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  It will help a lot for developers who want to do script programming.\r\n\r\nNo strong opinion, but this purpose is already served by this [detailed wiki article](https://en.bitcoin.it/wiki/Script#Opcodes) presenting how each opcode works along with a bit of history. Using a \"opcode, input, output, description\" table it is even probably better at explaining what each opcode does than we can ever get in code comments.",
      "created_at" : "2023-02-17T10:06:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1434416059",
      "id" : 1434416059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Vf3O7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434416059/reactions"
      },
      "updated_at" : "2023-02-17T10:06:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434416059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Detailed wiki does help dev! However, it's just a complementary material. \r\nIf simple description on script.h, \r\n1. Bitcoin repo itself leads the standard description of opcodes, does not depend on external ones\r\n2. Newly added opcode can be described here first\r\n3. dev can get info easier and publicly discuss more to utilize script\r\n\r\nThese are my personal opinion, and any opinion is welcome!",
      "created_at" : "2023-02-17T10:27:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1434438615",
      "id" : 1434438615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Vf8vX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434438615/reactions"
      },
      "updated_at" : "2023-02-17T10:27:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434438615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/Hyunhum/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Hyunhum/followers",
         "following_url" : "https://api.github.com/users/Hyunhum/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Hyunhum/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Hyunhum",
         "id" : 73169711,
         "login" : "Hyunhum",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/Hyunhum/orgs",
         "received_events_url" : "https://api.github.com/users/Hyunhum/received_events",
         "repos_url" : "https://api.github.com/users/Hyunhum/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Hyunhum/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Hyunhum/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Hyunhum"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > It will help a lot for developers who want to do script programming.\r\n> \r\n> No strong opinion, but this purpose is already served by this [detailed wiki article](https://en.bitcoin.it/wiki/Script#Opcodes) presenting how each opcode works along with a bit of history. Using a \"opcode, input, output, description\" table it is even probably better at explaining what each opcode does than we can ever get in code comments.\r\n\r\nAgree with this. So many single line comments look weird. If wiki has some outdated or incorrect information, maybe that can be updated and use its link in the comment above all opcodes.",
      "created_at" : "2023-02-20T11:07:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1436763116",
      "id" : 1436763116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Vo0Ps",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1436763116/reactions"
      },
      "updated_at" : "2023-02-20T11:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1436763116",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I followed the way [miniscript.h](https://github.com/bitcoin/bitcoin/blob/master/src/script/miniscript.h) comments. There are so many single lines as well, and look fine & helpful in my opinion.\r\nHowever, I think it's also not bad to add a simple overall description and wiki link above all opcodes, only if wiki is well managed. I prefer single line comments, though.",
      "created_at" : "2023-02-20T13:20:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1437016840",
      "id" : 1437016840,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585VpyMI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1437016840/reactions"
      },
      "updated_at" : "2023-02-22T09:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1437016840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "NIT\r\n\r\n```bash\r\ncd src/ && clang-format --lines 68:148 -i script/script.h\r\n```\r\n\r\n```c\r\ndiff --git a/src/script/script.h b/src/script/script.h\r\nindex 35211ff376..5143593029 100644\r\n--- a/src/script/script.h\r\n+++ b/src/script/script.h\r\n@@ -66,17 +66,16 @@ std::vector<unsigned char> ToByteVector(const T& in)\r\n }\r\n \r\n /** Script opcodes */\r\n-enum opcodetype\r\n-{\r\n-/**\r\n- * Opcodes that take a true/false value will evaluate the following as false:\r\n- *     an empty vector\r\n- *     a vector (of any length) of all zero bytes\r\n- *     a single byte of \"\\x80\" ('negative zero')\r\n- *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\r\n- *\r\n- * Any other value will evaluate to true.\r\n- */\r\n+enum opcodetype {\r\n+    /**\r\n+     * Opcodes that take a true/false value will evaluate the following as false:\r\n+     *     an empty vector\r\n+     *     a vector (of any length) of all zero bytes\r\n+     *     a single byte of \"\\x80\" ('negative zero')\r\n+     *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\r\n+     *\r\n+     * Any other value will evaluate to true.\r\n+     */\r\n     // push value\r\n     OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\r\n     OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\r\n\r\n\r\n```",
      "created_at" : "2023-02-20T16:05:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1437246550",
      "id" : 1437246550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585VqqRW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1437246550/reactions"
      },
      "updated_at" : "2023-02-20T16:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1437246550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> NIT\r\n> \r\n> ```shell\r\n> cd src/ && clang-format --lines 68:148 -i script/script.h\r\n> ```\r\n> \r\n> ```c\r\n> diff --git a/src/script/script.h b/src/script/script.h\r\n> index 35211ff376..5143593029 100644\r\n> --- a/src/script/script.h\r\n> +++ b/src/script/script.h\r\n> @@ -66,17 +66,16 @@ std::vector<unsigned char> ToByteVector(const T& in)\r\n>  }\r\n>  \r\n>  /** Script opcodes */\r\n> -enum opcodetype\r\n> -{\r\n> -/**\r\n> - * Opcodes that take a true/false value will evaluate the following as false:\r\n> - *     an empty vector\r\n> - *     a vector (of any length) of all zero bytes\r\n> - *     a single byte of \"\\x80\" ('negative zero')\r\n> - *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\r\n> - *\r\n> - * Any other value will evaluate to true.\r\n> - */\r\n> +enum opcodetype {\r\n> +    /**\r\n> +     * Opcodes that take a true/false value will evaluate the following as false:\r\n> +     *     an empty vector\r\n> +     *     a vector (of any length) of all zero bytes\r\n> +     *     a single byte of \"\\x80\" ('negative zero')\r\n> +     *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\r\n> +     *\r\n> +     * Any other value will evaluate to true.\r\n> +     */\r\n>      // push value\r\n>      OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\r\n>      OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\r\n> ```\r\n\r\nBecause it's global comment for opcodes, I didn't indent. Reference might be [this](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h#L224).",
      "created_at" : "2023-02-21T02:08:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1437763548",
      "id" : 1437763548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Vsofc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 2,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1437763548/reactions"
      },
      "updated_at" : "2023-02-21T05:51:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1437763548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-02-24T23:46:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1444733518",
      "id" : 1444733518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585WHOJO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1444733518/reactions"
      },
      "updated_at" : "2023-02-24T23:46:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1444733518",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1131953155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131953155"
         }
      },
      "author_association" : "NONE",
      "body" : "misspelled occurring (more instances further below)",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-10T05:10:00Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1131953155",
      "id" : 1131953155,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII585DeDwD",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 108,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 75,
      "pull_request_review_id" : 1334173844,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131953155/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T16:42:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131953155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/43024885?v=4",
         "events_url" : "https://api.github.com/users/vostrnad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vostrnad/followers",
         "following_url" : "https://api.github.com/users/vostrnad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vostrnad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vostrnad",
         "id" : 43024885,
         "login" : "vostrnad",
         "node_id" : "MDQ6VXNlcjQzMDI0ODg1",
         "organizations_url" : "https://api.github.com/users/vostrnad/orgs",
         "received_events_url" : "https://api.github.com/users/vostrnad/received_events",
         "repos_url" : "https://api.github.com/users/vostrnad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vostrnad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vostrnad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vostrnad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1131953241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131953241"
         }
      },
      "author_association" : "NONE",
      "body" : "typo in multi",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-10T05:10:08Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // return 1 if the inputs are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1\n+\n+    OP_ADD = 0x93,    // pop top two stack items and push their sum\n+    OP_SUB = 0x94,    // pop top two stack items and push the second minus the top\n+    OP_MUL = 0x95,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_DIV = 0x96,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_MOD = 0x97,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LSHIFT = 0x98, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RSHIFT = 0x99, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+\n+    OP_BOOLAND = 0x9a,            // return 1 if both top two stack items are not 0, otherwise 0\n+    OP_BOOLOR = 0x9b,             // return 1 if top or second from top stack item is not 0, otherwise 0\n+    OP_NUMEQUAL = 0x9c,           // return 1 if inputs are equal, otherwise 0\n+    OP_NUMEQUALVERIFY = 0x9d,     // execute OP_NUMEQUAL, then OP_VERIFY afterward\n+    OP_NUMNOTEQUAL = 0x9e,        // return 1 if inputs are not equal, otherwise 0\n+    OP_LESSTHAN = 0x9f,           // pop top two stack items and push 1 if second from top < top, otherwise 0\n+    OP_GREATERTHAN = 0xa0,        // pop top two stack items and push 1 if second from top > top, otherwise 0\n+    OP_LESSTHANOREQUAL = 0xa1,    // pop top two stack items and push 1 if second from top <= top, otherwise 0\n+    OP_GREATERTHANOREQUAL = 0xa2, // pop top two stack items and push 1 if second from top >= top, otherwise 0\n+    OP_MIN = 0xa3,                // pop the top two items and push the smaller\n+    OP_MAX = 0xa4,                // pop the top two items and push the bigger\n+\n+    OP_WITHIN = 0xa5, // pop the top three items and push 1 if third from top > top >= second from top, otherwise 0\n \n     // crypto\n-    OP_RIPEMD160 = 0xa6,\n-    OP_SHA1 = 0xa7,\n-    OP_SHA256 = 0xa8,\n-    OP_HASH160 = 0xa9,\n-    OP_HASH256 = 0xaa,\n-    OP_CODESEPARATOR = 0xab,\n-    OP_CHECKSIG = 0xac,\n-    OP_CHECKSIGVERIFY = 0xad,\n-    OP_CHECKMULTISIG = 0xae,\n-    OP_CHECKMULTISIGVERIFY = 0xaf,\n+    OP_RIPEMD160 = 0xa6,           // hash input using RIPEMD-160\n+    OP_SHA1 = 0xa7,                // hash input using SHA-1\n+    OP_SHA256 = 0xa8,              // hash input using SHA-256\n+    OP_HASH160 = 0xa9,             // hash input using SHA-256, then RIPEMD-160\n+    OP_HASH256 = 0xaa,             // hash input using SHA-256 twice\n+    OP_CODESEPARATOR = 0xab,       // all of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR\n+    OP_CHECKSIG = 0xac,            // push 1 if signature is valid for tx hash and public key, otherwise 0\n+    OP_CHECKSIGVERIFY = 0xad,      // execute OP_CHECKSIG, then OP_VERIFY afterward\n+    OP_CHECKMULTISIG = 0xae,       // OP_CHECKSIG for muti-signature",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1131953241",
      "id" : 1131953241,
      "line" : 197,
      "node_id" : "PRRC_kwDOABII585DeDxZ",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 197,
      "original_position" : 236,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 236,
      "pull_request_review_id" : 1334173844,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131953241/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T16:42:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131953241",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/43024885?v=4",
         "events_url" : "https://api.github.com/users/vostrnad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vostrnad/followers",
         "following_url" : "https://api.github.com/users/vostrnad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vostrnad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vostrnad",
         "id" : 43024885,
         "login" : "vostrnad",
         "node_id" : "MDQ6VXNlcjQzMDI0ODg1",
         "organizations_url" : "https://api.github.com/users/vostrnad/orgs",
         "received_events_url" : "https://api.github.com/users/vostrnad/received_events",
         "repos_url" : "https://api.github.com/users/vostrnad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vostrnad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vostrnad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vostrnad"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Need more reviewers to be merged?",
      "created_at" : "2023-03-31T01:44:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1491173572",
      "id" : 1491173572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585Y4YDE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491173572/reactions"
      },
      "updated_at" : "2023-03-31T01:44:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491173572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154247024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154247024"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can be added in a followup if you don't want to lose ACKs:\r\n\r\n```cpp\r\nOP_CHECKSIGADD = 0xba,            // pop the public key, N and a signature, push N if signature is empty, fail if it's invalid, otherwise push N + 1 (see BIP 342)\r\n```",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T09:26:49Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // return 1 if the inputs are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1\n+\n+    OP_ADD = 0x93,    // pop top two stack items and push their sum\n+    OP_SUB = 0x94,    // pop top two stack items and push the second minus the top\n+    OP_MUL = 0x95,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_DIV = 0x96,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_MOD = 0x97,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LSHIFT = 0x98, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RSHIFT = 0x99, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+\n+    OP_BOOLAND = 0x9a,            // return 1 if both top two stack items are not 0, otherwise 0\n+    OP_BOOLOR = 0x9b,             // return 1 if top or second from top stack item is not 0, otherwise 0\n+    OP_NUMEQUAL = 0x9c,           // return 1 if inputs are equal, otherwise 0\n+    OP_NUMEQUALVERIFY = 0x9d,     // execute OP_NUMEQUAL, then OP_VERIFY afterward\n+    OP_NUMNOTEQUAL = 0x9e,        // return 1 if inputs are not equal, otherwise 0\n+    OP_LESSTHAN = 0x9f,           // pop top two stack items and push 1 if second from top < top, otherwise 0\n+    OP_GREATERTHAN = 0xa0,        // pop top two stack items and push 1 if second from top > top, otherwise 0\n+    OP_LESSTHANOREQUAL = 0xa1,    // pop top two stack items and push 1 if second from top <= top, otherwise 0\n+    OP_GREATERTHANOREQUAL = 0xa2, // pop top two stack items and push 1 if second from top >= top, otherwise 0\n+    OP_MIN = 0xa3,                // pop the top two items and push the smaller\n+    OP_MAX = 0xa4,                // pop the top two items and push the bigger\n+\n+    OP_WITHIN = 0xa5, // pop the top three items and push 1 if third from top > top >= second from top, otherwise 0\n \n     // crypto\n-    OP_RIPEMD160 = 0xa6,\n-    OP_SHA1 = 0xa7,\n-    OP_SHA256 = 0xa8,\n-    OP_HASH160 = 0xa9,\n-    OP_HASH256 = 0xaa,\n-    OP_CODESEPARATOR = 0xab,\n-    OP_CHECKSIG = 0xac,\n-    OP_CHECKSIGVERIFY = 0xad,\n-    OP_CHECKMULTISIG = 0xae,\n-    OP_CHECKMULTISIGVERIFY = 0xaf,\n+    OP_RIPEMD160 = 0xa6,           // hash input using RIPEMD-160\n+    OP_SHA1 = 0xa7,                // hash input using SHA-1\n+    OP_SHA256 = 0xa8,              // hash input using SHA-256\n+    OP_HASH160 = 0xa9,             // hash input using SHA-256, then RIPEMD-160\n+    OP_HASH256 = 0xaa,             // hash input using SHA-256 twice\n+    OP_CODESEPARATOR = 0xab,       // all of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR\n+    OP_CHECKSIG = 0xac,            // push 1 if signature is valid for tx hash and public key, otherwise 0\n+    OP_CHECKSIGVERIFY = 0xad,      // execute OP_CHECKSIG, then OP_VERIFY afterward\n+    OP_CHECKMULTISIG = 0xae,       // OP_CHECKSIG for muti-signature\n+    OP_CHECKMULTISIGVERIFY = 0xaf, // execute OP_CHECKMULTISIG, then OP_VERIFY afterward\n \n     // expansion\n-    OP_NOP1 = 0xb0,\n-    OP_CHECKLOCKTIMEVERIFY = 0xb1,\n-    OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,\n-    OP_CHECKSEQUENCEVERIFY = 0xb2,\n-    OP_NOP3 = OP_CHECKSEQUENCEVERIFY,\n-    OP_NOP4 = 0xb3,\n-    OP_NOP5 = 0xb4,\n-    OP_NOP6 = 0xb5,\n-    OP_NOP7 = 0xb6,\n-    OP_NOP8 = 0xb7,\n-    OP_NOP9 = 0xb8,\n-    OP_NOP10 = 0xb9,\n+    OP_NOP1 = 0xb0,                   // do nothing\n+    OP_CHECKLOCKTIMEVERIFY = 0xb1,    // BIP65 (absolute lock time)\n+    OP_NOP2 = OP_CHECKLOCKTIMEVERIFY, // BIP65 (absolute lock time)\n+    OP_CHECKSEQUENCEVERIFY = 0xb2,    // BIP68 and BIP112 (relative lock time)\n+    OP_NOP3 = OP_CHECKSEQUENCEVERIFY, // BIP68 and BIP112 (relative lock time)\n+    OP_NOP4 = 0xb3,                   // do nothing\n+    OP_NOP5 = 0xb4,                   // do nothing\n+    OP_NOP6 = 0xb5,                   // do nothing\n+    OP_NOP7 = 0xb6,                   // do nothing\n+    OP_NOP8 = 0xb7,                   // do nothing\n+    OP_NOP9 = 0xb8,                   // do nothing\n+    OP_NOP10 = 0xb9,                  // do nothing\n \n     // Opcode added by BIP 342 (Tapscript)\n     OP_CHECKSIGADD = 0xba,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154247024",
      "id" : 1154247024,
      "line" : 215,
      "node_id" : "PRRC_kwDOABII585EzGlw",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 215,
      "original_position" : 266,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 266,
      "pull_request_review_id" : 1366594749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154247024/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T12:43:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154247024",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154337691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154337691"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note to other reviewers: this is implemented in `CastToBool()` in `interpreter.cpp`, which is used by `OP_IF`, `OP_NOTIF`, `OP_VERIFY`, `OP_IFDUP`, `OP_NUMEQUALVERIFY` and after executing the `scriptPubKey`.",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T11:01:31Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154337691",
      "id" : 1154337691,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII585Ezcub",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 72,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 5,
      "pull_request_review_id" : 1366594749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154337691/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T12:43:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154337691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154350939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154350939"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could add: `is true (1 for tapscript)`\r\n\r\nAlthough we probably don't want to go into too much detail here, this is still useful to point out since it directly contradicts the `true` / `false` explanation at the top.",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T11:16:53Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154350939",
      "id" : 1154350939,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII585Ezf9b",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 109,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 76,
      "pull_request_review_id" : 1366594749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154350939/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T12:43:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154350939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154351337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154351337"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could add: `is false (\"\" for tapscript)`",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T11:17:16Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154351337",
      "id" : 1154351337,
      "line" : 110,
      "node_id" : "PRRC_kwDOABII585EzgDp",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 110,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 77,
      "pull_request_review_id" : 1366594749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154351337/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T12:43:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154351337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154357244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154357244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note for other reviewers, the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Script) provides a useful hint on how to read Satoshi's comments in `interpreter.cpp`:\r\n\r\n> the inputs and outputs are both described by items as if they were pushed on the stack in that order. So for example, \"x1 x2\" indicates pushing value x1 on the stack, then x2, such that x1 is at the bottom of the stack, and x2 is at the top\r\n\r\nThis also explains why items from the stack are read \"out of order\":\r\n\r\n```\r\nvaltype vch1 = stacktop(-4);\r\nvaltype vch2 = stacktop(-3);\r\n```\r\n\r\nI.e. they are read in the sequence that they were pushed.",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T11:24:22Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154357244",
      "id" : 1154357244,
      "line" : 124,
      "node_id" : "PRRC_kwDOABII585Ezhf8",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 124,
      "original_position" : 110,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 110,
      "pull_request_review_id" : 1366594749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154357244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T12:43:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154357244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154398410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154398410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I still have no idea how `OP_CODESEPARATOR` works, but that will take more than one code comment to explain.",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T12:10:17Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // return 1 if the inputs are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1\n+\n+    OP_ADD = 0x93,    // pop top two stack items and push their sum\n+    OP_SUB = 0x94,    // pop top two stack items and push the second minus the top\n+    OP_MUL = 0x95,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_DIV = 0x96,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_MOD = 0x97,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LSHIFT = 0x98, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RSHIFT = 0x99, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+\n+    OP_BOOLAND = 0x9a,            // return 1 if both top two stack items are not 0, otherwise 0\n+    OP_BOOLOR = 0x9b,             // return 1 if top or second from top stack item is not 0, otherwise 0\n+    OP_NUMEQUAL = 0x9c,           // return 1 if inputs are equal, otherwise 0\n+    OP_NUMEQUALVERIFY = 0x9d,     // execute OP_NUMEQUAL, then OP_VERIFY afterward\n+    OP_NUMNOTEQUAL = 0x9e,        // return 1 if inputs are not equal, otherwise 0\n+    OP_LESSTHAN = 0x9f,           // pop top two stack items and push 1 if second from top < top, otherwise 0\n+    OP_GREATERTHAN = 0xa0,        // pop top two stack items and push 1 if second from top > top, otherwise 0\n+    OP_LESSTHANOREQUAL = 0xa1,    // pop top two stack items and push 1 if second from top <= top, otherwise 0\n+    OP_GREATERTHANOREQUAL = 0xa2, // pop top two stack items and push 1 if second from top >= top, otherwise 0\n+    OP_MIN = 0xa3,                // pop the top two items and push the smaller\n+    OP_MAX = 0xa4,                // pop the top two items and push the bigger\n+\n+    OP_WITHIN = 0xa5, // pop the top three items and push 1 if third from top > top >= second from top, otherwise 0\n \n     // crypto\n-    OP_RIPEMD160 = 0xa6,\n-    OP_SHA1 = 0xa7,\n-    OP_SHA256 = 0xa8,\n-    OP_HASH160 = 0xa9,\n-    OP_HASH256 = 0xaa,\n-    OP_CODESEPARATOR = 0xab,\n-    OP_CHECKSIG = 0xac,\n-    OP_CHECKSIGVERIFY = 0xad,\n-    OP_CHECKMULTISIG = 0xae,\n-    OP_CHECKMULTISIGVERIFY = 0xaf,\n+    OP_RIPEMD160 = 0xa6,           // hash input using RIPEMD-160\n+    OP_SHA1 = 0xa7,                // hash input using SHA-1\n+    OP_SHA256 = 0xa8,              // hash input using SHA-256\n+    OP_HASH160 = 0xa9,             // hash input using SHA-256, then RIPEMD-160\n+    OP_HASH256 = 0xaa,             // hash input using SHA-256 twice\n+    OP_CODESEPARATOR = 0xab,       // all of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154398410",
      "id" : 1154398410,
      "line" : 194,
      "node_id" : "PRRC_kwDOABII585EzrjK",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 194,
      "original_position" : 233,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 233,
      "pull_request_review_id" : 1366594749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154398410/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T12:43:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154398410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154694800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154694800"
         }
      },
      "author_association" : "NONE",
      "body" : "Additionally, at least according to Bitcoin Optech, \"multisignature\" should not be confused with \"multisig\": https://bitcoinops.org/en/topics/multisignature/",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T16:48:00Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // return 1 if the inputs are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1\n+\n+    OP_ADD = 0x93,    // pop top two stack items and push their sum\n+    OP_SUB = 0x94,    // pop top two stack items and push the second minus the top\n+    OP_MUL = 0x95,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_DIV = 0x96,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_MOD = 0x97,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LSHIFT = 0x98, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RSHIFT = 0x99, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+\n+    OP_BOOLAND = 0x9a,            // return 1 if both top two stack items are not 0, otherwise 0\n+    OP_BOOLOR = 0x9b,             // return 1 if top or second from top stack item is not 0, otherwise 0\n+    OP_NUMEQUAL = 0x9c,           // return 1 if inputs are equal, otherwise 0\n+    OP_NUMEQUALVERIFY = 0x9d,     // execute OP_NUMEQUAL, then OP_VERIFY afterward\n+    OP_NUMNOTEQUAL = 0x9e,        // return 1 if inputs are not equal, otherwise 0\n+    OP_LESSTHAN = 0x9f,           // pop top two stack items and push 1 if second from top < top, otherwise 0\n+    OP_GREATERTHAN = 0xa0,        // pop top two stack items and push 1 if second from top > top, otherwise 0\n+    OP_LESSTHANOREQUAL = 0xa1,    // pop top two stack items and push 1 if second from top <= top, otherwise 0\n+    OP_GREATERTHANOREQUAL = 0xa2, // pop top two stack items and push 1 if second from top >= top, otherwise 0\n+    OP_MIN = 0xa3,                // pop the top two items and push the smaller\n+    OP_MAX = 0xa4,                // pop the top two items and push the bigger\n+\n+    OP_WITHIN = 0xa5, // pop the top three items and push 1 if third from top > top >= second from top, otherwise 0\n \n     // crypto\n-    OP_RIPEMD160 = 0xa6,\n-    OP_SHA1 = 0xa7,\n-    OP_SHA256 = 0xa8,\n-    OP_HASH160 = 0xa9,\n-    OP_HASH256 = 0xaa,\n-    OP_CODESEPARATOR = 0xab,\n-    OP_CHECKSIG = 0xac,\n-    OP_CHECKSIGVERIFY = 0xad,\n-    OP_CHECKMULTISIG = 0xae,\n-    OP_CHECKMULTISIGVERIFY = 0xaf,\n+    OP_RIPEMD160 = 0xa6,           // hash input using RIPEMD-160\n+    OP_SHA1 = 0xa7,                // hash input using SHA-1\n+    OP_SHA256 = 0xa8,              // hash input using SHA-256\n+    OP_HASH160 = 0xa9,             // hash input using SHA-256, then RIPEMD-160\n+    OP_HASH256 = 0xaa,             // hash input using SHA-256 twice\n+    OP_CODESEPARATOR = 0xab,       // all of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR\n+    OP_CHECKSIG = 0xac,            // push 1 if signature is valid for tx hash and public key, otherwise 0\n+    OP_CHECKSIGVERIFY = 0xad,      // execute OP_CHECKSIG, then OP_VERIFY afterward\n+    OP_CHECKMULTISIG = 0xae,       // OP_CHECKSIG for muti-signature",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154694800",
      "id" : 1154694800,
      "in_reply_to_id" : 1131953241,
      "line" : 197,
      "node_id" : "PRRC_kwDOABII585E0z6Q",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 197,
      "original_position" : 236,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 236,
      "pull_request_review_id" : 1367277425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154694800/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T16:48:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154694800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/43024885?v=4",
         "events_url" : "https://api.github.com/users/vostrnad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vostrnad/followers",
         "following_url" : "https://api.github.com/users/vostrnad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vostrnad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vostrnad",
         "id" : 43024885,
         "login" : "vostrnad",
         "node_id" : "MDQ6VXNlcjQzMDI0ODg1",
         "organizations_url" : "https://api.github.com/users/vostrnad/orgs",
         "received_events_url" : "https://api.github.com/users/vostrnad/received_events",
         "repos_url" : "https://api.github.com/users/vostrnad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vostrnad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vostrnad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vostrnad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154696924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154696924"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess we can say \"for multiple signatures\" (but nobody reading this deep inside the codebase will be confused)",
      "commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "created_at" : "2023-03-31T16:50:40Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occuring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occuring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // return 1 if the inputs are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occuring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1\n+\n+    OP_ADD = 0x93,    // pop top two stack items and push their sum\n+    OP_SUB = 0x94,    // pop top two stack items and push the second minus the top\n+    OP_MUL = 0x95,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_DIV = 0x96,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_MOD = 0x97,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LSHIFT = 0x98, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RSHIFT = 0x99, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+\n+    OP_BOOLAND = 0x9a,            // return 1 if both top two stack items are not 0, otherwise 0\n+    OP_BOOLOR = 0x9b,             // return 1 if top or second from top stack item is not 0, otherwise 0\n+    OP_NUMEQUAL = 0x9c,           // return 1 if inputs are equal, otherwise 0\n+    OP_NUMEQUALVERIFY = 0x9d,     // execute OP_NUMEQUAL, then OP_VERIFY afterward\n+    OP_NUMNOTEQUAL = 0x9e,        // return 1 if inputs are not equal, otherwise 0\n+    OP_LESSTHAN = 0x9f,           // pop top two stack items and push 1 if second from top < top, otherwise 0\n+    OP_GREATERTHAN = 0xa0,        // pop top two stack items and push 1 if second from top > top, otherwise 0\n+    OP_LESSTHANOREQUAL = 0xa1,    // pop top two stack items and push 1 if second from top <= top, otherwise 0\n+    OP_GREATERTHANOREQUAL = 0xa2, // pop top two stack items and push 1 if second from top >= top, otherwise 0\n+    OP_MIN = 0xa3,                // pop the top two items and push the smaller\n+    OP_MAX = 0xa4,                // pop the top two items and push the bigger\n+\n+    OP_WITHIN = 0xa5, // pop the top three items and push 1 if third from top > top >= second from top, otherwise 0\n \n     // crypto\n-    OP_RIPEMD160 = 0xa6,\n-    OP_SHA1 = 0xa7,\n-    OP_SHA256 = 0xa8,\n-    OP_HASH160 = 0xa9,\n-    OP_HASH256 = 0xaa,\n-    OP_CODESEPARATOR = 0xab,\n-    OP_CHECKSIG = 0xac,\n-    OP_CHECKSIGVERIFY = 0xad,\n-    OP_CHECKMULTISIG = 0xae,\n-    OP_CHECKMULTISIGVERIFY = 0xaf,\n+    OP_RIPEMD160 = 0xa6,           // hash input using RIPEMD-160\n+    OP_SHA1 = 0xa7,                // hash input using SHA-1\n+    OP_SHA256 = 0xa8,              // hash input using SHA-256\n+    OP_HASH160 = 0xa9,             // hash input using SHA-256, then RIPEMD-160\n+    OP_HASH256 = 0xaa,             // hash input using SHA-256 twice\n+    OP_CODESEPARATOR = 0xab,       // all of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR\n+    OP_CHECKSIG = 0xac,            // push 1 if signature is valid for tx hash and public key, otherwise 0\n+    OP_CHECKSIGVERIFY = 0xad,      // execute OP_CHECKSIG, then OP_VERIFY afterward\n+    OP_CHECKMULTISIG = 0xae,       // OP_CHECKSIG for muti-signature",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1154696924",
      "id" : 1154696924,
      "in_reply_to_id" : 1131953241,
      "line" : 197,
      "node_id" : "PRRC_kwDOABII585E00bc",
      "original_commit_id" : "40f36d0a3dac568bc9b05dea021d83986d8add84",
      "original_line" : 197,
      "original_position" : 236,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 236,
      "pull_request_review_id" : 1367280691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154696924/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-31T16:50:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1154696924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Added followup commit for tapscript(+ suggestion from @vostrnad )!",
      "created_at" : "2023-04-03T04:58:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1493661021",
      "id" : 1493661021,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585ZB3Vd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1493661021/reactions"
      },
      "updated_at" : "2023-04-03T04:58:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1493661021",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK 45926671dbf9e4919bf6aaee90e0d90f89830ce5\r\n\r\nNit: consider moving the typo fixes to the first commit (or just squash both). ",
      "created_at" : "2023-04-03T10:46:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1494093330",
      "id" : 1494093330,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585ZDg4S",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1494093330/reactions"
      },
      "updated_at" : "2023-04-03T10:46:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1494093330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Looking for code reviewers! appreciate voluntary dedication in advance ð",
      "created_at" : "2023-04-24T06:04:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1519433917",
      "id" : 1519433917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585akLi9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1519433917/reactions"
      },
      "updated_at" : "2023-04-24T06:04:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1519433917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1204876854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204876854"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\r\n```",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-05-25T00:24:45Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1204876854",
      "id" : 1204876854,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585H0PY2",
      "original_commit_id" : "74ce38868197b162633e3f1ac44d06bf634b7200",
      "original_line" : 127,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1442915123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204876854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-25T00:34:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204876854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1204878968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204878968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should probably also mention here that the inputs are popped from the stack? E.g. something like\r\n`pop two top stack items and push 1 if they are equal, 0 otherwise`",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-05-25T00:30:10Z",
      "diff_hunk" : "@@ -68,139 +68,148 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true, execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false, execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is false, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // return 1 if the inputs are equal, 0 otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1204878968",
      "id" : 1204878968,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585H0P54",
      "original_commit_id" : "74ce38868197b162633e3f1ac44d06bf634b7200",
      "original_line" : 151,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1442915123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204878968/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-25T00:34:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204878968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks! I've fixed it.",
      "created_at" : "2023-05-25T02:19:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1562164731",
      "id" : 1562164731,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585dHL37",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1562164731/reactions"
      },
      "updated_at" : "2023-05-25T02:19:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1562164731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "rebase done!",
      "created_at" : "2023-05-25T10:13:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1562645400",
      "id" : 1562645400,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585dJBOY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1562645400/reactions"
      },
      "updated_at" : "2023-05-25T10:13:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1562645400",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@MarcoFalke would u mind to review this?",
      "created_at" : "2023-06-02T11:31:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1573587610",
      "id" : 1573587610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585dywqa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1573587610/reactions"
      },
      "updated_at" : "2023-06-02T11:31:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1573587610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR has two stale acks and seems like a safe documentation change. I think it would be good to merge if original reviewers want to reack or anyone else wants to review.",
      "created_at" : "2023-07-19T19:46:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1642661487",
      "id" : 1642661487,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585h6QZv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642661487/reactions"
      },
      "updated_at" : "2023-07-19T19:46:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642661487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269592881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269592881"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In the text below it seems somewhat arbitrary whether opcodes have an effect when appearing in unexecuted branches. I suggest instead adding something like this up front:\r\n\r\n```\r\n * Unless specified otherwise, all opcodes below only have an effect when they occur in executed branches.\r\n```",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:00:03Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269592881",
      "id" : 1269592881,
      "line" : 81,
      "node_id" : "PRRC_kwDOABII585LrHMx",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 79,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 14,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269592881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269592881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269594285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269594285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion: \"mark transaction invalid.\"",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:01:04Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269594285",
      "id" : 1269594285,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrHit",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 87,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269594285/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269594285",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269595880"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269595880"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion : \"mark transaction invalid\"",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:02:05Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269595880",
      "id" : 1269595880,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrH7o",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 108,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269595880/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269595880",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269596736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269596736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "More precise: `(exactly \"\\x01\" for tapscript)`",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:02:47Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269596736",
      "id" : 1269596736,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrIJA",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 109,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269596736/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269596736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269597677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269597677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion: \"mark tx invalid\"",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:03:32Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269597677",
      "id" : 1269597677,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrIXt",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 116,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269597677/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269597677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269598813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269598813"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it would be useful to use a notation like `[ ... x0 x1] -> [... x0 x1 x0 x1]` for these opcodes instead of trying to explain in English.",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:04:28Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269598813",
      "id" : 1269598813,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrIpd",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 122,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269598813/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269598813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269600035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269600035"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion: \"mark tx invalid, even when occurring in unexecuted branch\" (here and below), for consistency with language elsewhere.",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:05:26Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269600035",
      "id" : 1269600035,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrI8j",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 140,
      "original_position" : 131,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269600035/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269600035",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269603850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269603850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use `\"\\x01\"` and `\"\"` instead of 1 and 0 (as 1 and 0 are interpretations, which have multiple possible encodings).",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:07:25Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269603850",
      "id" : 1269603850,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrJ4K",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 151,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269603850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269603850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269604485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269604485"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion: \"mark tx invalid\"",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:07:46Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occurring in an unexecuted OP_IF branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269604485",
      "id" : 1269604485,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrKCF",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 153,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269604485/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269604485",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269605109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269605109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"mark tx invalid even when occurring in unexecuted branch\"",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:08:11Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269605109",
      "id" : 1269605109,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrKL1",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 159,
      "original_position" : 188,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269605109/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269605109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269605464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269605464"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"replace top stack item by its absolute value\"",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:08:27Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269605464",
      "id" : 1269605464,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrKRY",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 162,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269605464/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269605464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269606018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269606018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`convert 0 to \"\\x01\" and everything else to \"\"`",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:08:53Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269606018",
      "id" : 1269606018,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrKaC",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 163,
      "original_position" : 192,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269606018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269606018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269607781"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269607781"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"return\" is imprecise I think. How about `Replace top stack item by \"\" if its value is 0, otherwise by \"\\x01\"`?",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:10:16Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269607781",
      "id" : 1269607781,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrK1l",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 164,
      "original_position" : 193,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269607781/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269607781",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269608736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269608736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`Pop two top stack items and push \"\\x01\" if they are both true, \"\" otherwise` (and similar things below).",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:11:02Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1\n+\n+    OP_ADD = 0x93,    // pop top two stack items and push their sum\n+    OP_SUB = 0x94,    // pop top two stack items and push the second minus the top\n+    OP_MUL = 0x95,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_DIV = 0x96,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_MOD = 0x97,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LSHIFT = 0x98, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RSHIFT = 0x99, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+\n+    OP_BOOLAND = 0x9a,            // return 1 if both top two stack items are not 0, otherwise 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269608736",
      "id" : 1269608736,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrLEg",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 174,
      "original_position" : 203,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269608736/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269608736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269610954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269610954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What \"input\"? I suggest `Replace top stack item by its RIPEMD-160 hash`.",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-20T15:12:39Z",
      "diff_hunk" : "@@ -68,142 +68,151 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_IF = 0x63,       // if top stack value is true (1 for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_VERNOTIF = 0x66, // mark tx invalid even when occurring in an unexecuted OP_IF branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark tx invalid if top stack value is false, unless occurring in an unexecuted OP_IF branch\n+    OP_RETURN = 0x6a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // remove the two top stack items\n+    OP_2DUP = 0x6e,         // duplicate top and second from top stack items\n+    OP_3DUP = 0x6f,         // duplicate top, second from top and third from top stack items\n+    OP_2OVER = 0x70,        // copy third and fourth from top stack items to the top\n+    OP_2ROT = 0x71,         // move fifth and sixth from top stack items to the top\n+    OP_2SWAP = 0x72,        // swap: top and second from top <-> third and fourth from top items of stack\n+    OP_IFDUP = 0x73,        // if top stack value is true, duplicate it\n+    OP_DEPTH = 0x74,        // push the current number of stack items onto the stack\n+    OP_DROP = 0x75,         // remove top stack item\n+    OP_DUP = 0x76,          // duplicate top stack item\n+    OP_NIP = 0x77,          // remove second from top stack item\n+    OP_OVER = 0x78,         // copy second from top stack item to the top\n+    OP_PICK = 0x79,         // copy item N back in stack to the top\n+    OP_ROLL = 0x7a,         // move item N back in stack to the top\n+    OP_ROT = 0x7b,          // move third from top stack item to the top\n+    OP_SWAP = 0x7c,         // swap top two items of stack\n+    OP_TUCK = 0x7d,         // copy top stack item and insert before second from top item\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SUBSTR = 0x7f, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LEFT = 0x80,   // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RIGHT = 0x81,  // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_AND = 0x84,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_OR = 0x85,          // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_XOR = 0x86,         // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_EQUAL = 0x87,       // pop two top stack items and push 1 if they are equal, 0 otherwise\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n+    OP_RESERVED2 = 0x8a,   // mark tx invalid unless occurring in an unexecuted OP_IF branch\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_2DIV = 0x8e,      // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // absolute the top stack item value\n+    OP_NOT = 0x91,       // convert 0 to 1 and else to 0\n+    OP_0NOTEQUAL = 0x92, // return 0 if the input is 0, otherwise 1\n+\n+    OP_ADD = 0x93,    // pop top two stack items and push their sum\n+    OP_SUB = 0x94,    // pop top two stack items and push the second minus the top\n+    OP_MUL = 0x95,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_DIV = 0x96,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_MOD = 0x97,    // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_LSHIFT = 0x98, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+    OP_RSHIFT = 0x99, // disabled, fail the script unconditionally (apply in an unexecuted conditional branch)\n+\n+    OP_BOOLAND = 0x9a,            // return 1 if both top two stack items are not 0, otherwise 0\n+    OP_BOOLOR = 0x9b,             // return 1 if top or second from top stack item is not 0, otherwise 0\n+    OP_NUMEQUAL = 0x9c,           // return 1 if inputs are equal, otherwise 0\n+    OP_NUMEQUALVERIFY = 0x9d,     // execute OP_NUMEQUAL, then OP_VERIFY afterward\n+    OP_NUMNOTEQUAL = 0x9e,        // return 1 if inputs are not equal, otherwise 0\n+    OP_LESSTHAN = 0x9f,           // pop top two stack items and push 1 if second from top < top, otherwise 0\n+    OP_GREATERTHAN = 0xa0,        // pop top two stack items and push 1 if second from top > top, otherwise 0\n+    OP_LESSTHANOREQUAL = 0xa1,    // pop top two stack items and push 1 if second from top <= top, otherwise 0\n+    OP_GREATERTHANOREQUAL = 0xa2, // pop top two stack items and push 1 if second from top >= top, otherwise 0\n+    OP_MIN = 0xa3,                // pop the top two items and push the smaller\n+    OP_MAX = 0xa4,                // pop the top two items and push the bigger\n+\n+    OP_WITHIN = 0xa5, // pop the top three items and push 1 if third from top > top >= second from top, otherwise 0\n \n     // crypto\n-    OP_RIPEMD160 = 0xa6,\n-    OP_SHA1 = 0xa7,\n-    OP_SHA256 = 0xa8,\n-    OP_HASH160 = 0xa9,\n-    OP_HASH256 = 0xaa,\n-    OP_CODESEPARATOR = 0xab,\n-    OP_CHECKSIG = 0xac,\n-    OP_CHECKSIGVERIFY = 0xad,\n-    OP_CHECKMULTISIG = 0xae,\n-    OP_CHECKMULTISIGVERIFY = 0xaf,\n+    OP_RIPEMD160 = 0xa6,           // hash input using RIPEMD-160",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1269610954",
      "id" : 1269610954,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrLnK",
      "original_commit_id" : "b20eacdd3ba046547653bb79d7e123c4dc4f95f9",
      "original_line" : 189,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1539481239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269610954/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269610954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thx! I updated",
      "created_at" : "2023-07-21T12:46:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1645528886",
      "id" : 1645528886,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585iFMc2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1645528886/reactions"
      },
      "updated_at" : "2023-07-21T12:46:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1645528886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@vostrnad's comment makes sense to me. I'll hold off re-reviewing until that's either done or decided against.",
      "created_at" : "2023-07-28T12:22:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1655594515",
      "id" : 1655594515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585irl4T",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1655594515/reactions"
      },
      "updated_at" : "2023-07-28T12:22:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1655594515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1277557756"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277557756"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\r\n`pop two` doesn't quite work (IMO).\r\n\r\nit makes the order somewhat ambiguous.\r\n\r\nfor example:\r\n\r\n`pop pop add push` is more correct. no? \r\n\r\nBeing more explicit in this way will make the `OP_SUB` make more sense, no?.\r\n\r\n`pop pop subtract push`\r\n\r\n\r\nfor `OP_ADD` it isn't much of an issue.\r\n\r\n`` 1 + 1 = 2 ``\r\n\r\n`` 1 + -1 = 0 ``\r\n\r\n`` -1 + 1 = 0 ``\r\n\r\n\r\n\r\n\r\nfor `OP_SUB` it may be an issue.\r\n\r\n``1 - 1 = 0``\r\n\r\n``1 - -1 = 0``\r\n\r\n``-1 - 1 = -2``\r\n\r\n*in common arithmetic notation",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-28T13:38:30Z",
      "diff_hunk" : "@@ -68,142 +68,153 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ *\n+ * Unless specified otherwise, all opcodes below only have an effect when they occur in executed branches.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark transaction invalid\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark transaction invalid\n+    OP_IF = 0x63,       // if top stack value is true (exactly \"\\x01\" for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_VERNOTIF = 0x66, // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark transaction invalid if top stack value is false\n+    OP_RETURN = 0x6a,   // mark transaction invalid\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // [ ... x0 x1 ] -> [ ... ]\n+    OP_2DUP = 0x6e,         // [ ... x0 x1 ] -> [ ... x0 x1 x0 x1 ]\n+    OP_3DUP = 0x6f,         // [ ... x0 x1 x2 ] -> [ ... x0 x1 x2 x0 x1 x2 ]\n+    OP_2OVER = 0x70,        // [ ... x0 x1 x2 x3 ] -> [ ... x0 x1 x2 x3 x0 x1 ]\n+    OP_2ROT = 0x71,         // [ ... x0 x1 x2 x3 x4 x5 ] -> [ ... x2 x3 x4 x5 x0 x1 ]\n+    OP_2SWAP = 0x72,        // [ ... x0 x1 x2 x3 ] -> [ ... x2 x3 x0 x1 ]\n+    OP_IFDUP = 0x73,        // if top stack value is true, OP_DUP\n+    OP_DEPTH = 0x74,        // [ x0 x1 ... xN ] -> [ x0 x1 ... xN N+1 ]\n+    OP_DROP = 0x75,         // [ ... x0 ] -> [ ... ]\n+    OP_DUP = 0x76,          // [ ... x0 ] -> [ ... x0 x0 ]\n+    OP_NIP = 0x77,          // [ ... x0 x1 ] -> [ ... x1 ]\n+    OP_OVER = 0x78,         // [ ... x0 x1 ] -> [ ... x0 x1 x0 ]\n+    OP_PICK = 0x79,         // [ ... x0 x1 ... xN N+1 ] -> [ ... x0 x1 ... xN x0 ]\n+    OP_ROLL = 0x7a,         // [ ... x0 x1 ... xN N+1 ] -> [ ... x1 ... xN x0 ]\n+    OP_ROT = 0x7b,          // [ ... x0 x1 x2 ] -> [ ... x1 x2 x0 ]\n+    OP_SWAP = 0x7c,         // [ ... x0 x1 ] -> [ ... x1 x0]\n+    OP_TUCK = 0x7d,         // [ ... x0 x1 ] -> [ ... x1 x0 x1 ]\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_SUBSTR = 0x7f, // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_LEFT = 0x80,   // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_RIGHT = 0x81,  // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_AND = 0x84,         // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_OR = 0x85,          // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_XOR = 0x86,         // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_EQUAL = 0x87,       // pop two top stack items and push \"\\x01\" if they are equal, otherwise \"\"\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark transaction invalid\n+    OP_RESERVED2 = 0x8a,   // mark transaction invalid\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_2DIV = 0x8e,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // replace top stack item by its absolute value\n+    OP_NOT = 0x91,       // replace top stack item by \"\\x01\" if its value is 0, otherwise \"\"\n+    OP_0NOTEQUAL = 0x92, // replace top stack item by \"\" if its value is 0, otherwise by \"\\x01\"\n+\n+    OP_ADD = 0x93,    // pop two top stack items and push their sum\n+    OP_SUB = 0x94,    // pop two top stack items and push the second minus the top",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1277557756",
      "id" : 1277557756,
      "line" : 169,
      "node_id" : "PRRC_kwDOABII585MJfv8",
      "original_commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "original_line" : 169,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 198,
      "pull_request_review_id" : 1552145110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277557756/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-28T13:43:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277557756",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1277560378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277560378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "see above.\r\n\r\nbetter boolean notation here would be great.",
      "commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "created_at" : "2023-07-28T13:40:59Z",
      "diff_hunk" : "@@ -68,142 +68,153 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ *\n+ * Unless specified otherwise, all opcodes below only have an effect when they occur in executed branches.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark transaction invalid\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark transaction invalid\n+    OP_IF = 0x63,       // if top stack value is true (exactly \"\\x01\" for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_VERNOTIF = 0x66, // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark transaction invalid if top stack value is false\n+    OP_RETURN = 0x6a,   // mark transaction invalid\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // [ ... x0 x1 ] -> [ ... ]\n+    OP_2DUP = 0x6e,         // [ ... x0 x1 ] -> [ ... x0 x1 x0 x1 ]\n+    OP_3DUP = 0x6f,         // [ ... x0 x1 x2 ] -> [ ... x0 x1 x2 x0 x1 x2 ]\n+    OP_2OVER = 0x70,        // [ ... x0 x1 x2 x3 ] -> [ ... x0 x1 x2 x3 x0 x1 ]\n+    OP_2ROT = 0x71,         // [ ... x0 x1 x2 x3 x4 x5 ] -> [ ... x2 x3 x4 x5 x0 x1 ]\n+    OP_2SWAP = 0x72,        // [ ... x0 x1 x2 x3 ] -> [ ... x2 x3 x0 x1 ]\n+    OP_IFDUP = 0x73,        // if top stack value is true, OP_DUP\n+    OP_DEPTH = 0x74,        // [ x0 x1 ... xN ] -> [ x0 x1 ... xN N+1 ]\n+    OP_DROP = 0x75,         // [ ... x0 ] -> [ ... ]\n+    OP_DUP = 0x76,          // [ ... x0 ] -> [ ... x0 x0 ]\n+    OP_NIP = 0x77,          // [ ... x0 x1 ] -> [ ... x1 ]\n+    OP_OVER = 0x78,         // [ ... x0 x1 ] -> [ ... x0 x1 x0 ]\n+    OP_PICK = 0x79,         // [ ... x0 x1 ... xN N+1 ] -> [ ... x0 x1 ... xN x0 ]\n+    OP_ROLL = 0x7a,         // [ ... x0 x1 ... xN N+1 ] -> [ ... x1 ... xN x0 ]\n+    OP_ROT = 0x7b,          // [ ... x0 x1 x2 ] -> [ ... x1 x2 x0 ]\n+    OP_SWAP = 0x7c,         // [ ... x0 x1 ] -> [ ... x1 x0]\n+    OP_TUCK = 0x7d,         // [ ... x0 x1 ] -> [ ... x1 x0 x1 ]\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_SUBSTR = 0x7f, // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_LEFT = 0x80,   // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_RIGHT = 0x81,  // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_AND = 0x84,         // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_OR = 0x85,          // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_XOR = 0x86,         // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_EQUAL = 0x87,       // pop two top stack items and push \"\\x01\" if they are equal, otherwise \"\"\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark transaction invalid\n+    OP_RESERVED2 = 0x8a,   // mark transaction invalid\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_2DIV = 0x8e,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // replace top stack item by its absolute value\n+    OP_NOT = 0x91,       // replace top stack item by \"\\x01\" if its value is 0, otherwise \"\"\n+    OP_0NOTEQUAL = 0x92, // replace top stack item by \"\" if its value is 0, otherwise by \"\\x01\"\n+\n+    OP_ADD = 0x93,    // pop two top stack items and push their sum\n+    OP_SUB = 0x94,    // pop two top stack items and push the second minus the top\n+    OP_MUL = 0x95,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_DIV = 0x96,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_MOD = 0x97,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_LSHIFT = 0x98, // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_RSHIFT = 0x99, // mark transaction invalid even when occurring in an unexecuted branch\n+\n+    OP_BOOLAND = 0x9a,            // pop two top stack items and push \"\\x01\" if they are both true, \"\" otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1277560378",
      "id" : 1277560378,
      "line" : 176,
      "node_id" : "PRRC_kwDOABII585MJgY6",
      "original_commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "original_line" : 176,
      "original_position" : 205,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : 205,
      "pull_request_review_id" : 1552145110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277560378/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-28T13:43:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277560378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-07-28T13:46:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1655711887",
      "id" : 1655711887,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585isCiP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1655711887/reactions"
      },
      "updated_at" : "2023-07-28T13:46:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1655711887",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1284186407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284186407"
         }
      },
      "author_association" : "NONE",
      "body" : "I understand what you intended but it does not seem to be interpreted in that way for `pop two top stack items`. `pop pop add push` is more confusing to me. I appreciate your feedback",
      "commit_id" : "fd0db18db581dac691bc3da6e6971ab908768dd9",
      "created_at" : "2023-08-04T09:14:01Z",
      "diff_hunk" : "@@ -68,142 +68,153 @@ std::vector<unsigned char> ToByteVector(const T& in)\n /** Script opcodes */\n enum opcodetype\n {\n+/**\n+ * Opcodes that take a true/false value will evaluate the following as false:\n+ *     an empty vector\n+ *     a vector (of any length) of all zero bytes\n+ *     a single byte of \"\\x80\" ('negative zero')\n+ *     a vector (of any length) of all zero bytes except the last byte is \"\\x80\"\n+ *\n+ * Any other value will evaluate to true.\n+ *\n+ * Unless specified otherwise, all opcodes below only have an effect when they occur in executed branches.\n+ */\n     // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n+    OP_0 = 0x00,         // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_FALSE = OP_0,     // push \"\" onto the stack (which is an empty array of bytes)\n+    OP_PUSHDATA1 = 0x4c, // read the next byte as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA2 = 0x4d, // read the next 2 bytes as N and push the next N bytes as an array onto the stack\n+    OP_PUSHDATA4 = 0x4e, // read the next 4 bytes as N and push the next N bytes as an array onto the stack\n+    OP_1NEGATE = 0x4f,   // push \"\\x81\" onto the stack (which is interpreted as -1 by numerical opcodes)\n+    OP_RESERVED = 0x50,  // mark transaction invalid\n+    OP_1 = 0x51,         // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_TRUE = OP_1,      // push \"\\x01\" onto the stack (which is interpreted as 1 by numerical opcodes)\n+    OP_2 = 0x52,         // push \"\\x02\" onto the stack (which is interpreted as 2 by numerical opcodes)\n+    OP_3 = 0x53,         // push \"\\x03\" onto the stack (which is interpreted as 3 by numerical opcodes)\n+    OP_4 = 0x54,         // push \"\\x04\" onto the stack (which is interpreted as 4 by numerical opcodes)\n+    OP_5 = 0x55,         // push \"\\x05\" onto the stack (which is interpreted as 5 by numerical opcodes)\n+    OP_6 = 0x56,         // push \"\\x06\" onto the stack (which is interpreted as 6 by numerical opcodes)\n+    OP_7 = 0x57,         // push \"\\x07\" onto the stack (which is interpreted as 7 by numerical opcodes)\n+    OP_8 = 0x58,         // push \"\\x08\" onto the stack (which is interpreted as 8 by numerical opcodes)\n+    OP_9 = 0x59,         // push \"\\x09\" onto the stack (which is interpreted as 9 by numerical opcodes)\n+    OP_10 = 0x5a,        // push \"\\x0A\" onto the stack (which is interpreted as 10 by numerical opcodes)\n+    OP_11 = 0x5b,        // push \"\\x0B\" onto the stack (which is interpreted as 11 by numerical opcodes)\n+    OP_12 = 0x5c,        // push \"\\x0C\" onto the stack (which is interpreted as 12 by numerical opcodes)\n+    OP_13 = 0x5d,        // push \"\\x0D\" onto the stack (which is interpreted as 13 by numerical opcodes)\n+    OP_14 = 0x5e,        // push \"\\x0E\" onto the stack (which is interpreted as 14 by numerical opcodes)\n+    OP_15 = 0x5f,        // push \"\\x0F\" onto the stack (which is interpreted as 15 by numerical opcodes)\n+    OP_16 = 0x60,        // push \"\\x10\" onto the stack (which is interpreted as 16 by numerical opcodes)\n \n     // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n+    OP_NOP = 0x61,      // do nothing\n+    OP_VER = 0x62,      // mark transaction invalid\n+    OP_IF = 0x63,       // if top stack value is true (exactly \"\\x01\" for tapscript), execute the statement\n+    OP_NOTIF = 0x64,    // if top stack value is false (\"\" for tapscript), execute the statement\n+    OP_VERIF = 0x65,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_VERNOTIF = 0x66, // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_ELSE = 0x67,     // if the preceding OP_IF, OP_NOTIF or OP_ELSE not executed, execute the statement\n+    OP_ENDIF = 0x68,    // end if/else block (must include, otherwise tx becomes invalid)\n+    OP_VERIFY = 0x69,   // mark transaction invalid if top stack value is false\n+    OP_RETURN = 0x6a,   // mark transaction invalid\n \n     // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n+    OP_TOALTSTACK = 0x6b,   // pop an item from the main stack onto the alt stack\n+    OP_FROMALTSTACK = 0x6c, // pop an item from the alt stack onto the main stack\n+    OP_2DROP = 0x6d,        // [ ... x0 x1 ] -> [ ... ]\n+    OP_2DUP = 0x6e,         // [ ... x0 x1 ] -> [ ... x0 x1 x0 x1 ]\n+    OP_3DUP = 0x6f,         // [ ... x0 x1 x2 ] -> [ ... x0 x1 x2 x0 x1 x2 ]\n+    OP_2OVER = 0x70,        // [ ... x0 x1 x2 x3 ] -> [ ... x0 x1 x2 x3 x0 x1 ]\n+    OP_2ROT = 0x71,         // [ ... x0 x1 x2 x3 x4 x5 ] -> [ ... x2 x3 x4 x5 x0 x1 ]\n+    OP_2SWAP = 0x72,        // [ ... x0 x1 x2 x3 ] -> [ ... x2 x3 x0 x1 ]\n+    OP_IFDUP = 0x73,        // if top stack value is true, OP_DUP\n+    OP_DEPTH = 0x74,        // [ x0 x1 ... xN ] -> [ x0 x1 ... xN N+1 ]\n+    OP_DROP = 0x75,         // [ ... x0 ] -> [ ... ]\n+    OP_DUP = 0x76,          // [ ... x0 ] -> [ ... x0 x0 ]\n+    OP_NIP = 0x77,          // [ ... x0 x1 ] -> [ ... x1 ]\n+    OP_OVER = 0x78,         // [ ... x0 x1 ] -> [ ... x0 x1 x0 ]\n+    OP_PICK = 0x79,         // [ ... x0 x1 ... xN N+1 ] -> [ ... x0 x1 ... xN x0 ]\n+    OP_ROLL = 0x7a,         // [ ... x0 x1 ... xN N+1 ] -> [ ... x1 ... xN x0 ]\n+    OP_ROT = 0x7b,          // [ ... x0 x1 x2 ] -> [ ... x1 x2 x0 ]\n+    OP_SWAP = 0x7c,         // [ ... x0 x1 ] -> [ ... x1 x0]\n+    OP_TUCK = 0x7d,         // [ ... x0 x1 ] -> [ ... x1 x0 x1 ]\n \n     // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n+    OP_CAT = 0x7e,    // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_SUBSTR = 0x7f, // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_LEFT = 0x80,   // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_RIGHT = 0x81,  // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_SIZE = 0x82,   // push the length of top stack item (not pop the top element whose size is inspected)\n \n     // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n+    OP_INVERT = 0x83,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_AND = 0x84,         // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_OR = 0x85,          // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_XOR = 0x86,         // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_EQUAL = 0x87,       // pop two top stack items and push \"\\x01\" if they are equal, otherwise \"\"\n+    OP_EQUALVERIFY = 0x88, // execute OP_EQUAL, then OP_VERIFY afterward\n+    OP_RESERVED1 = 0x89,   // mark transaction invalid\n+    OP_RESERVED2 = 0x8a,   // mark transaction invalid\n \n     // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n+    OP_1ADD = 0x8b,      // add 1 to the top stack item\n+    OP_1SUB = 0x8c,      // subtract 1 from the top stack item\n+    OP_2MUL = 0x8d,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_2DIV = 0x8e,      // mark transaction invalid even when occurring in an unexecuted branch\n+    OP_NEGATE = 0x8f,    // multiply the top stack item by -1\n+    OP_ABS = 0x90,       // replace top stack item by its absolute value\n+    OP_NOT = 0x91,       // replace top stack item by \"\\x01\" if its value is 0, otherwise \"\"\n+    OP_0NOTEQUAL = 0x92, // replace top stack item by \"\" if its value is 0, otherwise by \"\\x01\"\n+\n+    OP_ADD = 0x93,    // pop two top stack items and push their sum\n+    OP_SUB = 0x94,    // pop two top stack items and push the second minus the top",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#discussion_r1284186407",
      "id" : 1284186407,
      "in_reply_to_id" : 1277557756,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MiyEn",
      "original_commit_id" : "4db63a5a7cb5f0b6e03c8263ed44988b31e4eb41",
      "original_line" : 169,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 1562493297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27109",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284186407/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T09:14:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284186407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Seems no one's against @vostrnad suggestion, I convert all single lines to block comments, add textual description with notation and reference for OP_SUCCESS opcodes in case of tapscript.\r\nI didn't include history much. In my opinion, description only for function itself looks clean and explicit which fits with main purpose of this.",
      "created_at" : "2023-08-04T09:47:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1665337473",
      "id" : 1665337473,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585jQwiB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665337473/reactions"
      },
      "updated_at" : "2023-08-04T09:47:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665337473",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Probably worth just squashing this down to 1 commit.\r\n\r\nIndeed.",
      "created_at" : "2023-08-04T10:21:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1665379268",
      "id" : 1665379268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585jQ6vE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665379268/reactions"
      },
      "updated_at" : "2023-08-04T10:21:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665379268",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Understood. Thanks for everyone who put efforts into here tghð",
      "created_at" : "2023-09-21T02:25:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1728671587",
      "id" : 1728671587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585nCW9j",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728671587/reactions"
      },
      "updated_at" : "2023-09-21T02:25:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728671587",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "For those who might look for this, I just created repo for it [here](https://github.com/ChrisCho-H/bitcoin-script).",
      "created_at" : "2023-09-21T04:28:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1728747681",
      "id" : 1728747681,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585nCpih",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728747681/reactions"
      },
      "updated_at" : "2023-09-21T04:28:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728747681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73169711?v=4",
         "events_url" : "https://api.github.com/users/ChrisCho-H/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ChrisCho-H/followers",
         "following_url" : "https://api.github.com/users/ChrisCho-H/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ChrisCho-H/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ChrisCho-H",
         "id" : 73169711,
         "login" : "ChrisCho-H",
         "node_id" : "MDQ6VXNlcjczMTY5NzEx",
         "organizations_url" : "https://api.github.com/users/ChrisCho-H/orgs",
         "received_events_url" : "https://api.github.com/users/ChrisCho-H/received_events",
         "repos_url" : "https://api.github.com/users/ChrisCho-H/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ChrisCho-H/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ChrisCho-H/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ChrisCho-H"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "For anyone interested in documenting opcodes, there is now https://opcodeexplained.com/ ([GitHub repo here](https://github.com/thunderbiscuit/opcode-explained)).",
      "created_at" : "2023-11-08T22:52:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27109#issuecomment-1802827804",
      "id" : 1802827804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27109",
      "node_id" : "IC_kwDOABII585rdPgc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1802827804/reactions"
      },
      "updated_at" : "2023-11-08T22:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1802827804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/43024885?v=4",
         "events_url" : "https://api.github.com/users/vostrnad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vostrnad/followers",
         "following_url" : "https://api.github.com/users/vostrnad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vostrnad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vostrnad",
         "id" : 43024885,
         "login" : "vostrnad",
         "node_id" : "MDQ6VXNlcjQzMDI0ODg1",
         "organizations_url" : "https://api.github.com/users/vostrnad/orgs",
         "received_events_url" : "https://api.github.com/users/vostrnad/received_events",
         "repos_url" : "https://api.github.com/users/vostrnad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vostrnad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vostrnad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vostrnad"
      }
   }
]
