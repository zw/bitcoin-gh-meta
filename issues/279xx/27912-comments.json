[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28222](https://github.com/bitcoin/bitcoin/pull/28222) (Use shared_ptr for CNode inside CConnman by willcl-ark)\n* [#27213](https://github.com/bitcoin/bitcoin/pull/27213) (p2p: Diversify automatic outbound connections with respect to networks by amitiuttarwar)\n* [#26938](https://github.com/bitcoin/bitcoin/pull/26938) ([WIP] p2p: asmap, avoid inbound connections from a specific AS by brunoerg)\n* [#25832](https://github.com/bitcoin/bitcoin/pull/25832) (tracing: network connection tracepoints by 0xB10C)\n* [#25572](https://github.com/bitcoin/bitcoin/pull/25572) (refactor: Introduce EvictionManager and use it for the inbound eviction logic by dergoegge)\n* [#25268](https://github.com/bitcoin/bitcoin/pull/25268) (refactor: Introduce EvictionManager by dergoegge)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-19T10:26:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1596928845",
      "id" : 1596928845,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585fLzNN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1596928845/reactions"
      },
      "updated_at" : "2023-08-05T23:59:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1596928845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1233973528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233973528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think `m_disconnect_mutex` already prevents this from happening",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T12:15:21Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);\n+            for (CNode* pnode : nodes_copy) {\n+                if (pnode->fDisconnect) {\n+                    // remove from m_nodes\n+                    m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    m_nodes_disconnected.push_back(pnode);\n+                }\n             }\n         }\n     }\n     {\n+        LOCK(m_disconnect_mutex);\n         // Delete disconnected nodes\n         std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n         for (CNode* pnode : nodes_disconnected_copy)\n         {\n             // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n+            // Prevent two threads trying to delete the same node: set nRefCount to -1 first",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1233973528",
      "id" : 1233973528,
      "line" : 1152,
      "node_id" : "PRRC_kwDOABII585JjPEY",
      "original_commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "original_line" : 1152,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 44,
      "pull_request_review_id" : 1486091302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233973528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T12:15:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233973528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234060495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234060495"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm you may be right, I might have gone too far with that. What I was trying to protect against was checking the number of references in one instruction, and permitting another thread to increase the `refCount` in the meantime before we remove the node in the subsequent lines. But, it looks like we don't have any functions which would increase the `refCount` during normal operation (only incremented on new connections), so probably unnecessary here.\r\n\r\nIf I'm honest, I kind of prefer this belt-and-suspenders way myself, but would be easily persuaded that it's superfluous or worse than current behaviour (useless extra locking).\r\n\r\nI felt a bit nevous about nesting `m_disconnect_mutex` inside of `m_nodes_mutex`, but it seemed like it was slightly preferable to just locking `m_nodes_mutex` for the whole of `DisconnectNodes()` as that's used in many other operations. I don't think there is any way `StopNodes()` and `DisconnectNodes()` can lock each other here though. Would you agree?",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T13:22:43Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);\n+            for (CNode* pnode : nodes_copy) {\n+                if (pnode->fDisconnect) {\n+                    // remove from m_nodes\n+                    m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    m_nodes_disconnected.push_back(pnode);\n+                }\n             }\n         }\n     }\n     {\n+        LOCK(m_disconnect_mutex);\n         // Delete disconnected nodes\n         std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n         for (CNode* pnode : nodes_disconnected_copy)\n         {\n             // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n+            // Prevent two threads trying to delete the same node: set nRefCount to -1 first",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234060495",
      "id" : 1234060495,
      "in_reply_to_id" : 1233973528,
      "line" : 1152,
      "node_id" : "PRRC_kwDOABII585JjkTP",
      "original_commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "original_line" : 1152,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 44,
      "pull_request_review_id" : 1486230879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234060495/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T13:22:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234060495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234096330"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234096330"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The CNode reference counting is a total nightmare and we should (and have in the past: https://github.com/bitcoin/bitcoin/pull/10738/) try to get rid of it at some point.\r\n\r\n> permitting another thread to increase the refCount in the meantime before we remove the node in the subsequent lines.\r\n\r\nThis is actually possible with and without your patch and the way we protect against this is by not calling `CNode::AddRef` after nodes where moved to the disconnection queue.\r\n\r\n```c++\r\nif (pnode->nRefCount.compare_exchange_strong(expectedRefCount, -1)) {\r\n    // Theoretically, nothing stops a different thread from calling `AddRef()` while we are here\r\n    m_nodes_disconnected.remove(pnode);\r\n    DeleteNode(pnode);\r\n}\r\n```\r\n\r\n>  But, it looks like we don't have any functions which would increase the refCount during normal operation (only incremented on new connections), so probably unnecessary here.\r\n\r\nOur RAII helper [`NodesSnapshot`](https://github.com/bitcoin/bitcoin/blob/7f0b79ea132d22ad5212c1d3ff4325715ca5ac12/src/net.h#L1189) does call `AddRef` during normal operation (e.g. before processing messages) but `NodesSnapshot` doesn't take a snapshot of `m_nodes_disconnected` so it's fine.\r\n\r\n> I don't think there is any way StopNodes() and DisconnectNodes() can lock each other here though. \r\n\r\nAgreed, as long as you always lock in the same order (which afaict you do).",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T13:50:14Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);\n+            for (CNode* pnode : nodes_copy) {\n+                if (pnode->fDisconnect) {\n+                    // remove from m_nodes\n+                    m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    m_nodes_disconnected.push_back(pnode);\n+                }\n             }\n         }\n     }\n     {\n+        LOCK(m_disconnect_mutex);\n         // Delete disconnected nodes\n         std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n         for (CNode* pnode : nodes_disconnected_copy)\n         {\n             // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n+            // Prevent two threads trying to delete the same node: set nRefCount to -1 first",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234096330",
      "id" : 1234096330,
      "in_reply_to_id" : 1233973528,
      "line" : 1152,
      "node_id" : "PRRC_kwDOABII585JjtDK",
      "original_commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "original_line" : 1152,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 44,
      "pull_request_review_id" : 1486285896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234096330/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T13:50:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234096330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234104223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234104223"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it better to lock `m_disconnect_mutex` for the duration of the `node_copy` loop or to move it right before `m_nodes_disconnected`? Not sure about the performance hit of repeatedly locking+unlocking in the latter case",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T13:56:29Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234104223",
      "id" : 1234104223,
      "line" : 1126,
      "node_id" : "PRRC_kwDOABII585Jju-f",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1126,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 10,
      "pull_request_review_id" : 1486297426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234104223/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T15:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234104223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234117290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234117290"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`nPrevNodeCount` needs a mutex now since it's called from `ThreadI2PSocketHandler` also",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T14:07:40Z",
      "diff_hunk" : "@@ -1158,16 +1162,18 @@ void CConnman::DisconnectNodes()\n void CConnman::NotifyNumConnectionsChanged()\n {\n     size_t nodes_size;\n+    bool should_notify{false};\n     {\n         LOCK(m_nodes_mutex);\n         nodes_size = m_nodes.size();\n-    }\n-    if(nodes_size != nPrevNodeCount) {\n-        nPrevNodeCount = nodes_size;\n-        if (m_client_interface) {\n-            m_client_interface->NotifyNumConnectionsChanged(nodes_size);\n+        if(nodes_size != nPrevNodeCount) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234117290",
      "id" : 1234117290,
      "line" : 1169,
      "node_id" : "PRRC_kwDOABII585JjyKq",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1169,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 63,
      "pull_request_review_id" : 1486297426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234117290/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T15:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234117290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234125273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234125273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not familiar with the GUI code, but could this call to `m_client_interface->NotifyNumConnectionsChanged` race?",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T14:14:15Z",
      "diff_hunk" : "@@ -1158,16 +1162,18 @@ void CConnman::DisconnectNodes()\n void CConnman::NotifyNumConnectionsChanged()\n {\n     size_t nodes_size;\n+    bool should_notify{false};\n     {\n         LOCK(m_nodes_mutex);\n         nodes_size = m_nodes.size();\n-    }\n-    if(nodes_size != nPrevNodeCount) {\n-        nPrevNodeCount = nodes_size;\n-        if (m_client_interface) {\n-            m_client_interface->NotifyNumConnectionsChanged(nodes_size);\n+        if(nodes_size != nPrevNodeCount) {\n+            nPrevNodeCount = nodes_size;\n+            should_notify = true;\n         }\n     }\n+    if (should_notify && m_client_interface) {\n+        m_client_interface->NotifyNumConnectionsChanged(nodes_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234125273",
      "id" : 1234125273,
      "line" : 1175,
      "node_id" : "PRRC_kwDOABII585Jj0HZ",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1175,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 69,
      "pull_request_review_id" : 1486297426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234125273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T15:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234125273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234141403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234141403"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree with @dergoegge. Don't think `StopNodes()` can race with `DisconnectNodes()` since `StopThreads()` is called first",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T14:28:02Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);\n+            for (CNode* pnode : nodes_copy) {\n+                if (pnode->fDisconnect) {\n+                    // remove from m_nodes\n+                    m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    m_nodes_disconnected.push_back(pnode);\n+                }\n             }\n         }\n     }\n     {\n+        LOCK(m_disconnect_mutex);\n         // Delete disconnected nodes\n         std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n         for (CNode* pnode : nodes_disconnected_copy)\n         {\n             // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n+            // Prevent two threads trying to delete the same node: set nRefCount to -1 first",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234141403",
      "id" : 1234141403,
      "in_reply_to_id" : 1233973528,
      "line" : 1152,
      "node_id" : "PRRC_kwDOABII585Jj4Db",
      "original_commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "original_line" : 1152,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 44,
      "pull_request_review_id" : 1486297426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234141403/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T15:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234141403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234142286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234142286"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think `NotifyNumConnectionsChanged` is necessary here, but I could understand the consistency argument",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T14:28:50Z",
      "diff_hunk" : "@@ -1390,6 +1396,18 @@ void CConnman::ThreadSocketHandler()\n     }\n }\n \n+void CConnman::ThreadI2PSocketHandler()\n+{\n+    AssertLockNotHeld(m_total_bytes_sent_mutex);\n+\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\n+    while (!interruptNet) {\n+        DisconnectNodes();\n+        NotifyNumConnectionsChanged();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234142286",
      "id" : 1234142286,
      "line" : 1406,
      "node_id" : "PRRC_kwDOABII585Jj4RO",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1406,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 85,
      "pull_request_review_id" : 1486297426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234142286/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T15:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234142286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234143155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234143155"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "github won't let me comment on untouched lines, but minor nit: `threadI2PAcceptIncoming` could be renamed to `threadI2PSocketHandler`?",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T14:29:32Z",
      "diff_hunk" : "@@ -1390,6 +1396,18 @@ void CConnman::ThreadSocketHandler()\n     }\n }\n \n+void CConnman::ThreadI2PSocketHandler()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234143155",
      "id" : 1234143155,
      "line" : 1399,
      "node_id" : "PRRC_kwDOABII585Jj4ez",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1399,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 78,
      "pull_request_review_id" : 1486297426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234143155/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T15:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234143155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234174606"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234174606"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Setting `advertising_listen_addr` to false each time at the top of the function causes each I2P connection to log an `AddLocal(...)` line. I think this could be used to perform a disk-fill attack (my debug.log grew several MB in several minutes) . Prior to this patch, it was set once before the `while(!interrupt)` so it wouldn't trigger every time on a new connection",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T14:56:08Z",
      "diff_hunk" : "@@ -2089,34 +2107,31 @@ void CConnman::ThreadI2PAcceptIncoming()\n     bool advertising_listen_addr = false;\n     i2p::Connection conn;\n \n-    while (!interruptNet) {\n-\n-        if (!m_i2p_sam_session->Listen(conn)) {\n-            if (advertising_listen_addr && conn.me.IsValid()) {\n-                RemoveLocal(conn.me);\n-                advertising_listen_addr = false;\n-            }\n-\n-            interruptNet.sleep_for(err_wait);\n-            if (err_wait < err_wait_cap) {\n-                err_wait *= 2;\n-            }\n-\n-            continue;\n+    if (!m_i2p_sam_session->Listen(conn)) {\n+        if (advertising_listen_addr && conn.me.IsValid()) {\n+            RemoveLocal(conn.me);\n+            advertising_listen_addr = false;\n         }\n \n-        if (!advertising_listen_addr) {\n-            AddLocal(conn.me, LOCAL_MANUAL);\n-            advertising_listen_addr = true;\n+        interruptNet.sleep_for(err_wait);\n+        if (err_wait < err_wait_cap) {\n+            err_wait *= 2;\n         }\n \n-        if (!m_i2p_sam_session->Accept(conn)) {\n-            continue;\n-        }\n+        return;\n+    }\n+\n+    if (!advertising_listen_addr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234174606",
      "id" : 1234174606,
      "line" : 2124,
      "node_id" : "PRRC_kwDOABII585JkAKO",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 2124,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 140,
      "pull_request_review_id" : 1486297426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234174606/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T15:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234174606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235105278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235105278"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I am also not familiar with the GUI code, but IIUC I don't think this should race as the lines above lock the mutex and update `nPrevNodeCount` inside it, so even if two threads called this function, t1 would lock first and update the `nPrevNodeCount``, and when it unlocked (and notified) t2 would find that `nodes_size()` was equal to `nPrevNodeCount` and so would exit without calling `NotifyNumConnectionsChanged`.\r\n\r\nBut this should still send a notification per connection count change on either thread.\r\n\r\nThat said, it's easy enough to move this block inside the `m_nodes_mutex` block to be safer, and I may do just that..\r\n\r\nCould change the function to:\r\n\r\n```cpp\r\nvoid CConnman::NotifyNumConnectionsChanged()\r\n{\r\n    size_t nodes_size;\r\n    bool should_notify{false};\r\n    {\r\n        LOCK(m_nodes_mutex);\r\n        nodes_size = m_nodes.size();\r\n        if(nodes_size != nPrevNodeCount) {\r\n            nPrevNodeCount = nodes_size;\r\n            should_notify = true;\r\n        }\r\n        if (should_notify && m_client_interface) {\r\n            m_client_interface->NotifyNumConnectionsChanged(nodes_size);\r\n        }\r\n    }\r\n}\r\n```",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-20T11:05:57Z",
      "diff_hunk" : "@@ -1158,16 +1162,18 @@ void CConnman::DisconnectNodes()\n void CConnman::NotifyNumConnectionsChanged()\n {\n     size_t nodes_size;\n+    bool should_notify{false};\n     {\n         LOCK(m_nodes_mutex);\n         nodes_size = m_nodes.size();\n-    }\n-    if(nodes_size != nPrevNodeCount) {\n-        nPrevNodeCount = nodes_size;\n-        if (m_client_interface) {\n-            m_client_interface->NotifyNumConnectionsChanged(nodes_size);\n+        if(nodes_size != nPrevNodeCount) {\n+            nPrevNodeCount = nodes_size;\n+            should_notify = true;\n         }\n     }\n+    if (should_notify && m_client_interface) {\n+        m_client_interface->NotifyNumConnectionsChanged(nodes_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235105278",
      "id" : 1235105278,
      "in_reply_to_id" : 1234125273,
      "line" : 1175,
      "node_id" : "PRRC_kwDOABII585JnjX-",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1175,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 69,
      "pull_request_review_id" : 1487890956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235105278/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-20T11:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235105278",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235123227"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235123227"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ignore this, I was confused by github's indentation",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-20T11:23:21Z",
      "diff_hunk" : "@@ -1158,16 +1162,18 @@ void CConnman::DisconnectNodes()\n void CConnman::NotifyNumConnectionsChanged()\n {\n     size_t nodes_size;\n+    bool should_notify{false};\n     {\n         LOCK(m_nodes_mutex);\n         nodes_size = m_nodes.size();\n-    }\n-    if(nodes_size != nPrevNodeCount) {\n-        nPrevNodeCount = nodes_size;\n-        if (m_client_interface) {\n-            m_client_interface->NotifyNumConnectionsChanged(nodes_size);\n+        if(nodes_size != nPrevNodeCount) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235123227",
      "id" : 1235123227,
      "in_reply_to_id" : 1234117290,
      "line" : 1169,
      "node_id" : "PRRC_kwDOABII585Jnnwb",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1169,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 63,
      "pull_request_review_id" : 1487920764,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235123227/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-20T11:23:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235123227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235143245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235143245"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it's possible that:\r\n- t1 locks `m_nodes_mutex`, checks `nodes_size` and updates `nPrevNodeCount` & `should_notify`\r\n- t1 unlocks the mutex and something else gets scheduled by the CPU\r\n- the connection count is updated again\r\n- t2 locks `m_nodes_mutex` and sets `should_notify`\r\n- t2 unlocks the mutex and calls `NotifyNumConnectionsChanged`\r\n- t1 gets scheduled and calls `NotifyNumConnectionsChanged`\r\n\r\nMy concern here was whether it's ok if `NotifyNumConnectionsChanged` is called simultaneously from 2 threads? I think it'd be good to have `nPrevNodeCount` to have a `GUARDED_BY(m_nodes_mutex)` annotation",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-20T11:42:29Z",
      "diff_hunk" : "@@ -1158,16 +1162,18 @@ void CConnman::DisconnectNodes()\n void CConnman::NotifyNumConnectionsChanged()\n {\n     size_t nodes_size;\n+    bool should_notify{false};\n     {\n         LOCK(m_nodes_mutex);\n         nodes_size = m_nodes.size();\n-    }\n-    if(nodes_size != nPrevNodeCount) {\n-        nPrevNodeCount = nodes_size;\n-        if (m_client_interface) {\n-            m_client_interface->NotifyNumConnectionsChanged(nodes_size);\n+        if(nodes_size != nPrevNodeCount) {\n+            nPrevNodeCount = nodes_size;\n+            should_notify = true;\n         }\n     }\n+    if (should_notify && m_client_interface) {\n+        m_client_interface->NotifyNumConnectionsChanged(nodes_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235143245",
      "id" : 1235143245,
      "in_reply_to_id" : 1234125273,
      "line" : 1175,
      "node_id" : "PRRC_kwDOABII585JnspN",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1175,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 69,
      "pull_request_review_id" : 1487952389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235143245/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-20T11:43:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235143245",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235173474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235173474"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that's as currently implemented (perhap GitHub diff throwing you again)?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2d33e62f6260e9bdde76a31df3b6ffbd20d17db6/src/net.cpp#L1125-L1143",
      "commit_id" : "21dae9698aa11fcaf1f59943d963369cc0d04771",
      "created_at" : "2023-06-20T12:10:53Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1235173474",
      "id" : 1235173474,
      "in_reply_to_id" : 1234104223,
      "line" : 1126,
      "node_id" : "PRRC_kwDOABII585Jn0Bi",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1126,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 10,
      "pull_request_review_id" : 1488000560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235173474/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-20T12:10:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235173474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks @Crypt-iQ for the review. I pushed 21dae96 which includes most of the suggested changes:\r\n\r\n* `NotifyNumConnectionsChanged` now inside `m_nodes_mutex` block\r\n* moved `advertising_listen_addr` to a class member on `CConnman` initialised to `false`\r\n* Took the suggestion to rename the thread while touching\r\n* guarded `nPrevNodeCount` with `m_nodes_mutex`",
      "created_at" : "2023-06-20T12:18:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1598666154",
      "id" : 1598666154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585fSbWq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1598666154/reactions"
      },
      "updated_at" : "2023-06-20T12:18:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1598666154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1236582023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1236582023"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I meant like _rightttt_ before `m_nodes_disconnect.push_back(pnode)`. But don't think it matters so feel free to ignore",
      "commit_id" : "21dae9698aa11fcaf1f59943d963369cc0d04771",
      "created_at" : "2023-06-21T08:11:43Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1236582023",
      "id" : 1236582023,
      "in_reply_to_id" : 1234104223,
      "line" : 1126,
      "node_id" : "PRRC_kwDOABII585JtL6H",
      "original_commit_id" : "2d33e62f6260e9bdde76a31df3b6ffbd20d17db6",
      "original_line" : 1126,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 10,
      "pull_request_review_id" : 1490076603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1236582023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T08:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1236582023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I acknowledge the problem described in https://github.com/bitcoin/bitcoin/issues/27843: `ThreadI2PAcceptIncoming()` calls `CreateNodeFromAcceptedSocket()`. The latter checks `nInbound >= nMaxInbound` and calls `AttemptToEvictConnection()` if that is true, but the eviction is done asynchronously - `AttemptToEvictConnection()` only marks it for disconnect and leaves the actual disconnection and socket closure to another thread for a later time (`ThreadSocketHandler()`). Until that other thread actually does the disconnect, `ThreadI2PAcceptIncoming()` may call `CreateNodeFromAcceptedSocket()` way too many times, ending up with N excess connections above 125 (the new I2P ones) and N other connections marked for disconnect, but not disconnected until `ThreadSocketHandler()` calls `DisconnectNodes()`.\r\n\r\nI intended `ThreadI2PAcceptIncoming()` to be just low level socket-accept function, an alternative to `AcceptConnection()` (which may be better named as `AcceptConnectionTCP()`). And then all the higher level logic (e.g. capping the number of connections) to happen in `CreateNodeFromAcceptedSocket()`. It indeed checks `nMaxInbound` but does the disconnect asynchronously. It works for `AcceptConnection()` because the async happens to be in the same thread. But it will not work if that is decoupled or if a new one is added later to accept connections by other means (other than TCP and I2P/SAM).\r\n\r\nI did not look deeply in the code in this PR, but I gather it drags some high level logic (cap number of connections) to `ThreadI2PAcceptIncoming()`. This seems suboptimal because now the higher level logic is in two places. If a new accept method is added, then it would have to be replicated there too. And `ThreadI2PAcceptIncoming()` becomes not just low level socket-accept function.\r\n\r\nWhat about changing `AttemptToEvictConnection()` to disconnect synchronously? It is called from just one place. Something like:\r\n\r\n```diff\r\n--- i/src/net.cpp\r\n+++ w/src/net.cpp\r\n@@ -927,12 +927,13 @@ bool CConnman::AttemptToEvictConnection()\r\n     }\r\n     LOCK(m_nodes_mutex);\r\n     for (CNode* pnode : m_nodes) {\r\n         if (pnode->GetId() == *node_id_to_evict) {\r\n             LogPrint(BCLog::NET, \"selected %s connection for eviction peer=%d; disconnecting\\n\", pnode->ConnectionType\r\n             pnode->fDisconnect = true;\r\n+            DisconnectNodes();\r\n             return true;\r\n         }\r\n     }\r\n     return false;\r\n }\r\n```\r\n\r\n(modulo trying to avoid the recursive lock of `m_nodes_mutex` and maybe some optimization because `DisconnectNodes()` iterates on all nodes and in this case we know which node is marked for disconnect).",
      "created_at" : "2023-06-26T15:34:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1607731240",
      "id" : 1607731240,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585f1Ago",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1607731240/reactions"
      },
      "updated_at" : "2023-06-26T15:34:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1607731240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes I agree and like this approach better.\r\n\r\nI had created a `ThreadI2PSocketHandler()` thread which essentially had the same loop as `ThreadSocketHandler()`. The repetition of `DisconnectNodes()` and `NotifyNumConnectionsChanged()` in two threads seemed annoying (and needed a few new locks) and I was considering whether a _new_ seperate thread should just handle disconnecting nodes marked for disconnection and notifications, but I think doing it as part of `CreateNodeFromAcceptedSocket()` (in `AttemptToEvictConnection()`) makes more sense so will work on this.",
      "created_at" : "2023-06-29T12:37:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1613098947",
      "id" : 1613098947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585gJe_D",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613098947/reactions"
      },
      "updated_at" : "2023-06-29T12:37:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613098947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "OK I've pushed a new set of changes which now disconnects nodes synchronously inside of `AttemptToEvictConnection`.  \r\n\r\n@Crypt-iQ I'd be curious if you still see these new changes as resolving the issue in #27843? I havent' gotten your test patch working to my satisfaction yet (or at least, I don't see positive eviction candidate selection during it so it wouldn't overflow `nMaxInbound` even without these changes).",
      "created_at" : "2023-07-04T15:38:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1620461536",
      "id" : 1620461536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585glkfg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620461536/reactions"
      },
      "updated_at" : "2023-07-04T15:38:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620461536",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259704670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259704670"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This need not be `RecursiveMutex`?\r\n\r\n```suggestion\r\n    mutable Mutex m_nodes_disconnected_mutex;\r\n```",
      "commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "created_at" : "2023-07-11T13:02:37Z",
      "diff_hunk" : "@@ -1043,7 +1045,8 @@ class CConnman\n     std::vector<std::string> m_added_nodes GUARDED_BY(m_added_nodes_mutex);\n     mutable Mutex m_added_nodes_mutex;\n     std::vector<CNode*> m_nodes GUARDED_BY(m_nodes_mutex);\n-    std::list<CNode*> m_nodes_disconnected;\n+    mutable RecursiveMutex m_nodes_disconnected_mutex;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259704670",
      "id" : 1259704670,
      "line" : 1048,
      "node_id" : "PRRC_kwDOABII585LFZFe",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 1048,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 14,
      "pull_request_review_id" : 1524221824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259704670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-11T16:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259704670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259711622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259711622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This can end up with a double-free if two threads concurrently execute it.\r\n\r\n1. Thread1 makes a copy of `m_nodes_disconnected` and releases `m_nodes_disconnected_mutex`\r\n2. Thread2 does the same\r\n3. Thread1 starts iterating on its own copy and calls `DeleteDisconnectedNode()` on the first element which calls `DeleteNode()` which calls `delete pnode;`\r\n4. Thread2 does the same on its own copy, a second `delete` on the same `CNode` object.",
      "commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "created_at" : "2023-07-11T13:08:14Z",
      "diff_hunk" : "@@ -1119,32 +1157,16 @@ void CConnman::DisconnectNodes()\n         {\n             if (pnode->fDisconnect)\n             {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n-\n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n-\n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n-\n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                DisconnectAndReleaseNode(pnode);\n             }\n         }\n     }\n+    // Delete disconnected nodes\n+    std::list<CNode*> disconnected_nodes_copy{};\n+    WITH_LOCK(m_nodes_disconnected_mutex, disconnected_nodes_copy = m_nodes_disconnected);\n+    for (CNode* pnode : disconnected_nodes_copy)\n     {\n-        // Delete disconnected nodes\n-        std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n-        for (CNode* pnode : nodes_disconnected_copy)\n-        {\n-            // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n-                m_nodes_disconnected.remove(pnode);\n-                DeleteNode(pnode);\n-            }\n-        }\n+        DeleteDisconnectedNode(pnode);\n     }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259711622",
      "id" : 1259711622,
      "line" : 1170,
      "node_id" : "PRRC_kwDOABII585LFayG",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 1170,
      "original_position" : 109,
      "original_start_line" : 1166,
      "path" : "src/net.cpp",
      "position" : 109,
      "pull_request_review_id" : 1524221824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259711622/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1166,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-11T16:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259711622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259736855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259736855"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Same double-free as above (even though when this code in `StopNodes()` is executed, then the other threads that could access `m_nodes_disconnected` should have been exited by `StopThreads()` already, but better not rely on that).",
      "commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "created_at" : "2023-07-11T13:26:23Z",
      "diff_hunk" : "@@ -2481,10 +2503,12 @@ void CConnman::StopNodes()\n         DeleteNode(pnode);\n     }\n \n-    for (CNode* pnode : m_nodes_disconnected) {\n+    std::list<CNode*> disconnected_nodes{};\n+    WITH_LOCK(m_nodes_disconnected_mutex, disconnected_nodes = m_nodes_disconnected);\n+    for (CNode* pnode : disconnected_nodes) {\n         DeleteNode(pnode);\n     }\n-    m_nodes_disconnected.clear();\n+    WITH_LOCK(m_nodes_disconnected_mutex, m_nodes_disconnected.clear());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259736855",
      "id" : 1259736855,
      "line" : 2511,
      "node_id" : "PRRC_kwDOABII585LFg8X",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 2511,
      "original_position" : 123,
      "original_start_line" : 2484,
      "path" : "src/net.cpp",
      "position" : 123,
      "pull_request_review_id" : 1524221824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259736855/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2484,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-07-11T16:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259736855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259898235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259898235"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could be called concurrently by two threads for the same `CNode`.",
      "commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "created_at" : "2023-07-11T15:19:28Z",
      "diff_hunk" : "@@ -918,14 +919,23 @@ bool CConnman::AttemptToEvictConnection()\n     if (!node_id_to_evict) {\n         return false;\n     }\n-    LOCK(m_nodes_mutex);\n-    for (CNode* pnode : m_nodes) {\n-        if (pnode->GetId() == *node_id_to_evict) {\n-            LogPrint(BCLog::NET, \"selected %s connection for eviction peer=%d; disconnecting\\n\", pnode->ConnectionTypeAsString(), pnode->GetId());\n-            pnode->fDisconnect = true;\n-            return true;\n+    CNode* evicted_node{nullptr};\n+    {\n+        LOCK(m_nodes_mutex);\n+        for (CNode* pnode : m_nodes) {\n+            if (pnode->GetId() == *node_id_to_evict) {\n+                LogPrint(BCLog::NET, \"selected %s connection for eviction peer=%d; disconnecting\\n\", pnode->ConnectionTypeAsString(), pnode->GetId());\n+                pnode->fDisconnect = true;\n+                evicted_node = pnode;\n+                break;\n+            }\n         }\n     }\n+    if (evicted_node) {\n+        DisconnectAndReleaseNode(evicted_node);\n+        DeleteDisconnectedNode(evicted_node);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259898235",
      "id" : 1259898235,
      "line" : 936,
      "node_id" : "PRRC_kwDOABII585LGIV7",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 936,
      "original_position" : 32,
      "original_start_line" : 934,
      "path" : "src/net.cpp",
      "position" : 32,
      "pull_request_review_id" : 1524221824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259898235/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 934,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-11T16:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259898235",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1260735849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260735849"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, this is what I tried to prevent against in an [earlier version](https://github.com/bitcoin/bitcoin/commit/7ad6edb44d599bdd9f8c6e5aae5899c97436b675#diff-00021eed586a482abdb09d6cdada1d90115abe988a91421851960e26658bed02R1152-R1154), but in that version I think it was [superfluous](https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1233973528), however here it would be appropriate to use so that only one thread would actually perform the deletion ever.",
      "commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "created_at" : "2023-07-12T07:37:07Z",
      "diff_hunk" : "@@ -1119,32 +1157,16 @@ void CConnman::DisconnectNodes()\n         {\n             if (pnode->fDisconnect)\n             {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n-\n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n-\n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n-\n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                DisconnectAndReleaseNode(pnode);\n             }\n         }\n     }\n+    // Delete disconnected nodes\n+    std::list<CNode*> disconnected_nodes_copy{};\n+    WITH_LOCK(m_nodes_disconnected_mutex, disconnected_nodes_copy = m_nodes_disconnected);\n+    for (CNode* pnode : disconnected_nodes_copy)\n     {\n-        // Delete disconnected nodes\n-        std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n-        for (CNode* pnode : nodes_disconnected_copy)\n-        {\n-            // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n-                m_nodes_disconnected.remove(pnode);\n-                DeleteNode(pnode);\n-            }\n-        }\n+        DeleteDisconnectedNode(pnode);\n     }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1260735849",
      "id" : 1260735849,
      "in_reply_to_id" : 1259711622,
      "line" : 1170,
      "node_id" : "PRRC_kwDOABII585LJU1p",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 1170,
      "original_position" : 109,
      "original_start_line" : 1166,
      "path" : "src/net.cpp",
      "position" : 109,
      "pull_request_review_id" : 1525709158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260735849/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1166,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-12T07:37:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260735849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1265436928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265436928"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok I've used a `GlobalMutex` for this now. I never Recursive behaviour but was getting clang static analysis errors without. Looking at _sync.h_ it seems that `GlobalMutex` should be the correct type for this I think.",
      "commit_id" : "912d8e491437d3252c4ebfa36c6bd4e9582ff363",
      "created_at" : "2023-07-17T14:17:10Z",
      "diff_hunk" : "@@ -1043,7 +1045,8 @@ class CConnman\n     std::vector<std::string> m_added_nodes GUARDED_BY(m_added_nodes_mutex);\n     mutable Mutex m_added_nodes_mutex;\n     std::vector<CNode*> m_nodes GUARDED_BY(m_nodes_mutex);\n-    std::list<CNode*> m_nodes_disconnected;\n+    mutable RecursiveMutex m_nodes_disconnected_mutex;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1265436928",
      "id" : 1265436928,
      "in_reply_to_id" : 1259704670,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LbQkA",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 1048,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 1532916522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265436928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-17T14:17:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265436928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1265441313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265441313"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`DeleteNode()` now gated behind `if (pnode->nRefCount.compare_exchange_strong(expectedRefCount, -1))` so it can only be called once (by a single thread).",
      "commit_id" : "912d8e491437d3252c4ebfa36c6bd4e9582ff363",
      "created_at" : "2023-07-17T14:19:57Z",
      "diff_hunk" : "@@ -1119,32 +1157,16 @@ void CConnman::DisconnectNodes()\n         {\n             if (pnode->fDisconnect)\n             {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n-\n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n-\n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n-\n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                DisconnectAndReleaseNode(pnode);\n             }\n         }\n     }\n+    // Delete disconnected nodes\n+    std::list<CNode*> disconnected_nodes_copy{};\n+    WITH_LOCK(m_nodes_disconnected_mutex, disconnected_nodes_copy = m_nodes_disconnected);\n+    for (CNode* pnode : disconnected_nodes_copy)\n     {\n-        // Delete disconnected nodes\n-        std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n-        for (CNode* pnode : nodes_disconnected_copy)\n-        {\n-            // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n-                m_nodes_disconnected.remove(pnode);\n-                DeleteNode(pnode);\n-            }\n-        }\n+        DeleteDisconnectedNode(pnode);\n     }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1265441313",
      "id" : 1265441313,
      "in_reply_to_id" : 1259711622,
      "line" : 1173,
      "node_id" : "PRRC_kwDOABII585LbRoh",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 1173,
      "original_position" : 109,
      "original_start_line" : 1166,
      "path" : "src/net.cpp",
      "position" : 112,
      "pull_request_review_id" : 1532922905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265441313/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1169,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-17T14:19:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265441313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> OK I've pushed a new set of changes which now disconnects nodes synchronously inside of `AttemptToEvictConnection`.\r\n> \r\n> @Crypt-iQ I'd be curious if you still see these new changes as resolving the issue in #27843? I havent' gotten your test patch working to my satisfaction yet (or at least, I don't see positive eviction candidate selection during it so it wouldn't overflow `nMaxInbound` even without these changes).\r\n\r\nSorry I have been a bit short on time recently, but let me know when to test it and I'll do it",
      "created_at" : "2023-07-17T14:49:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1638306663",
      "id" : 1638306663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585hppNn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1638306663/reactions"
      },
      "updated_at" : "2023-07-17T14:49:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1638306663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1266938623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266938623"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`GlobalMutex` silences some of the thread safety analysis and was introduced to overcome some limitations on those, is supposed to be used only for mutexes that are defined globally. I agree it is confusing. I don't like it and have a plan to remove `GlobalMutex` but it is stuck at https://github.com/bitcoin/bitcoin/pull/25390.\r\n\r\n<details>\r\n<summary>[patch] change to Mutex</summary>\r\n\r\n```diff\r\ndiff --git i/src/net.cpp w/src/net.cpp\r\nindex c2160e945f..c8ee95a3d0 100644\r\n--- i/src/net.cpp\r\n+++ w/src/net.cpp\r\n@@ -886,12 +886,14 @@ size_t CConnman::SocketSendData(CNode& node) const\r\n  *   to forge.  In order to partition a node the attacker must be\r\n  *   simultaneously better at all of them than honest peers.\r\n  *   If we find a candidate perform the eviction.\r\n  */\r\n bool CConnman::AttemptToEvictConnection()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     std::vector<NodeEvictionCandidate> vEvictionCandidates;\r\n     {\r\n \r\n         LOCK(m_nodes_mutex);\r\n         for (const CNode* node : m_nodes) {\r\n             if (node->fDisconnect)\r\n@@ -937,12 +939,14 @@ bool CConnman::AttemptToEvictConnection()\r\n         return true;\r\n     }\r\n     return false;\r\n }\r\n \r\n void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     struct sockaddr_storage sockaddr;\r\n     socklen_t len = sizeof(sockaddr);\r\n     auto sock = hListenSocket.sock->Accept((struct sockaddr*)&sockaddr, &len);\r\n     CAddress addr;\r\n \r\n     if (!sock) {\r\n@@ -1107,23 +1111,27 @@ bool CConnman::AddConnection(const std::string& address, ConnectionType conn_typ\r\n     OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);\r\n     return true;\r\n }\r\n \r\n void CConnman::DeleteDisconnectedNode(CNode* pnode)\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     // Destroy the object only after other threads have stopped using it.\r\n     // Prevent double free by setting nRefCount to -1 before delete.\r\n     int expectedRefCount = 0;\r\n     if (pnode->nRefCount.compare_exchange_strong(expectedRefCount, -1)) {\r\n         WITH_LOCK(m_nodes_disconnected_mutex, m_nodes_disconnected.remove(pnode));\r\n         DeleteNode(pnode);\r\n     }\r\n }\r\n \r\n void CConnman::DisconnectAndReleaseNode(CNode* pnode)\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     LOCK(m_nodes_mutex);\r\n     if (std::find(m_nodes.begin(), m_nodes.end(), pnode) != m_nodes.end()) {\r\n \r\n         // remove from m_nodes\r\n         m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\r\n \r\n@@ -1138,12 +1146,14 @@ void CConnman::DisconnectAndReleaseNode(CNode* pnode)\r\n         WITH_LOCK(m_nodes_disconnected_mutex, m_nodes_disconnected.push_back(pnode));\r\n     }\r\n }\r\n \r\n void CConnman::DisconnectNodes()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     {\r\n         LOCK(m_nodes_mutex);\r\n \r\n         if (!fNetworkActive) {\r\n             // Disconnect any connected nodes\r\n             for (CNode* pnode : m_nodes) {\r\n@@ -1270,12 +1280,13 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\r\n \r\n     return events_per_sock;\r\n }\r\n \r\n void CConnman::SocketHandler()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\r\n \r\n     Sock::EventsPerSock events_per_sock;\r\n \r\n     {\r\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\r\n@@ -1381,12 +1392,14 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\r\n         if (InactivityCheck(*pnode)) pnode->fDisconnect = true;\r\n     }\r\n }\r\n \r\n void CConnman::SocketHandlerListening(const Sock::EventsPerSock& events_per_sock)\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     for (const ListenSocket& listen_socket : vhListenSocket) {\r\n         if (interruptNet) {\r\n             return;\r\n         }\r\n         const auto it = events_per_sock.find(listen_socket.sock);\r\n         if (it != events_per_sock.end() && it->second.occurred & Sock::RECV) {\r\n@@ -1394,12 +1407,13 @@ void CConnman::SocketHandlerListening(const Sock::EventsPerSock& events_per_sock\r\n         }\r\n     }\r\n }\r\n \r\n void CConnman::ThreadSocketHandler()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\r\n \r\n     while (!interruptNet)\r\n     {\r\n         DisconnectNodes();\r\n         NotifyNumConnectionsChanged();\r\n@@ -2093,12 +2107,14 @@ void CConnman::ThreadMessageHandler()\r\n         fMsgProcWake = false;\r\n     }\r\n }\r\n \r\n void CConnman::ThreadI2PAcceptIncoming()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     static constexpr auto err_wait_begin = 1s;\r\n     static constexpr auto err_wait_cap = 5min;\r\n     auto err_wait = err_wait_begin;\r\n \r\n     bool advertising_listen_addr = false;\r\n     i2p::Connection conn;\r\n@@ -2481,12 +2497,14 @@ void CConnman::StopThreads()\r\n     if (threadSocketHandler.joinable())\r\n         threadSocketHandler.join();\r\n }\r\n \r\n void CConnman::StopNodes()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     if (fAddressesInitialized) {\r\n         DumpAddresses();\r\n         fAddressesInitialized = false;\r\n \r\n         if (m_use_addrman_outgoing) {\r\n             // Anchor connections are only dumped during clean shutdown.\r\ndiff --git i/src/net.h w/src/net.h\r\nindex d5833d7e2d..d45f3c606f 100644\r\n--- i/src/net.h\r\n+++ w/src/net.h\r\n@@ -760,15 +760,17 @@ public:\r\n \r\n     ~CConnman();\r\n \r\n     bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !m_added_nodes_mutex, !m_addr_fetches_mutex, !mutexMsgProc);\r\n \r\n     void StopThreads();\r\n-    void StopNodes();\r\n-    void Stop()\r\n+    void StopNodes() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex)\r\n     {\r\n+        AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n         StopThreads();\r\n         StopNodes();\r\n     };\r\n \r\n     void Interrupt() EXCLUSIVE_LOCKS_REQUIRED(!mutexMsgProc);\r\n     bool GetNetworkActive() const { return fNetworkActive; };\r\n@@ -917,31 +919,31 @@ private:\r\n \r\n     void ThreadOpenAddedConnections() EXCLUSIVE_LOCKS_REQUIRED(!m_added_nodes_mutex, !m_unused_i2p_sessions_mutex);\r\n     void AddAddrFetch(const std::string& strDest) EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex);\r\n     void ProcessAddrFetch() EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex, !m_unused_i2p_sessions_mutex);\r\n     void ThreadOpenConnections(std::vector<std::string> connect) EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex, !m_added_nodes_mutex, !m_nodes_mutex, !m_unused_i2p_sessions_mutex);\r\n     void ThreadMessageHandler() EXCLUSIVE_LOCKS_REQUIRED(!mutexMsgProc);\r\n-    void ThreadI2PAcceptIncoming();\r\n-    void AcceptConnection(const ListenSocket& hListenSocket);\r\n+    void ThreadI2PAcceptIncoming() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void AcceptConnection(const ListenSocket& hListenSocket) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n \r\n     /**\r\n      * Create a `CNode` object from a socket that has just been accepted and add the node to\r\n      * the `m_nodes` member.\r\n      * @param[in] sock Connected socket to communicate with the peer.\r\n      * @param[in] permission_flags The peer's permissions.\r\n      * @param[in] addr_bind The address and port at our side of the connection.\r\n      * @param[in] addr The address and port at the peer's side of the connection.\r\n      */\r\n     void CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\r\n                                       NetPermissionFlags permission_flags,\r\n                                       const CAddress& addr_bind,\r\n-                                      const CAddress& addr);\r\n+                                      const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n \r\n-    void DeleteDisconnectedNode(CNode* pnode);\r\n-    void DisconnectAndReleaseNode(CNode* pnode);\r\n-    void DisconnectNodes();\r\n+    void DeleteDisconnectedNode(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void DisconnectAndReleaseNode(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void DisconnectNodes() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n     void NotifyNumConnectionsChanged();\r\n     /** Return true if the peer is inactive and should be disconnected. */\r\n     bool InactivityCheck(const CNode& node) const;\r\n \r\n     /**\r\n      * Generate a collection of sockets to check for IO readiness.\r\n@@ -950,13 +952,13 @@ private:\r\n      */\r\n     Sock::EventsPerSock GenerateWaitSockets(Span<CNode* const> nodes);\r\n \r\n     /**\r\n      * Check connected and listening sockets for IO readiness and process them accordingly.\r\n      */\r\n-    void SocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !mutexMsgProc);\r\n+    void SocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex, !m_total_bytes_sent_mutex, !mutexMsgProc);\r\n \r\n     /**\r\n      * Do the read/write for connected sockets that are ready for IO.\r\n      * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\r\n      * @param[in] events_per_sock Sockets that are ready for IO.\r\n      */\r\n@@ -965,15 +967,15 @@ private:\r\n         EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !mutexMsgProc);\r\n \r\n     /**\r\n      * Accept incoming connections, one from each read-ready listening socket.\r\n      * @param[in] events_per_sock Sockets that are ready for IO.\r\n      */\r\n-    void SocketHandlerListening(const Sock::EventsPerSock& events_per_sock);\r\n+    void SocketHandlerListening(const Sock::EventsPerSock& events_per_sock) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n \r\n-    void ThreadSocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !mutexMsgProc);\r\n+    void ThreadSocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex, !m_total_bytes_sent_mutex, !mutexMsgProc);\r\n     void ThreadDNSAddressSeed() EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex, !m_nodes_mutex);\r\n \r\n     uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\r\n \r\n     CNode* FindNode(const CNetAddr& ip);\r\n     CNode* FindNode(const CSubNet& subNet);\r\n@@ -983,13 +985,13 @@ private:\r\n     /**\r\n      * Determine whether we're already connected to a given address, in order to\r\n      * avoid initiating duplicate connections.\r\n      */\r\n     bool AlreadyConnectedToAddress(const CAddress& addr);\r\n \r\n-    bool AttemptToEvictConnection();\r\n+    bool AttemptToEvictConnection() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type) EXCLUSIVE_LOCKS_REQUIRED(!m_unused_i2p_sessions_mutex);\r\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\r\n \r\n     void DeleteNode(CNode* pnode);\r\n \r\n     NodeId GetNewNodeId();\r\n@@ -1042,13 +1044,13 @@ private:\r\n     const NetGroupManager& m_netgroupman;\r\n     std::deque<std::string> m_addr_fetches GUARDED_BY(m_addr_fetches_mutex);\r\n     Mutex m_addr_fetches_mutex;\r\n     std::vector<std::string> m_added_nodes GUARDED_BY(m_added_nodes_mutex);\r\n     mutable Mutex m_added_nodes_mutex;\r\n     std::vector<CNode*> m_nodes GUARDED_BY(m_nodes_mutex);\r\n-    GlobalMutex m_nodes_disconnected_mutex;\r\n+    Mutex m_nodes_disconnected_mutex;\r\n     std::list<CNode*> m_nodes_disconnected GUARDED_BY(m_nodes_disconnected_mutex);\r\n     mutable RecursiveMutex m_nodes_mutex;\r\n     std::atomic<NodeId> nLastNodeId{0};\r\n     unsigned int nPrevNodeCount{0};\r\n \r\n     /**\r\n\r\n```\r\n\r\n</details>",
      "commit_id" : "912d8e491437d3252c4ebfa36c6bd4e9582ff363",
      "created_at" : "2023-07-18T15:22:14Z",
      "diff_hunk" : "@@ -1043,7 +1045,8 @@ class CConnman\n     std::vector<std::string> m_added_nodes GUARDED_BY(m_added_nodes_mutex);\n     mutable Mutex m_added_nodes_mutex;\n     std::vector<CNode*> m_nodes GUARDED_BY(m_nodes_mutex);\n-    std::list<CNode*> m_nodes_disconnected;\n+    mutable RecursiveMutex m_nodes_disconnected_mutex;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1266938623",
      "id" : 1266938623,
      "in_reply_to_id" : 1259704670,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Lg_L_",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 1048,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 1534955685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266938623/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T04:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266938623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1266975864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266975864"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\nwith lock: copy x to temp\r\nprocess temp without lock\r\nwith lock: clear x <-- some element may have been inserted between the locks and it will be removed without processing\r\n```\r\n\r\nbetter do:\r\n```cpp\r\n{\r\n    LOCK(m_nodes_disconnected_mutex);\r\n    disconnected_nodes = m_nodes_disconnected;\r\n    m_nodes_disconnected.clear();\r\n}\r\n\r\nfor (CNode* pnode : disconnected_nodes) {\r\n    DeleteNode(pnode);\r\n}\r\n```\r\n\r\nthis will avoid the double-free as well",
      "commit_id" : "912d8e491437d3252c4ebfa36c6bd4e9582ff363",
      "created_at" : "2023-07-18T15:47:07Z",
      "diff_hunk" : "@@ -2481,10 +2503,12 @@ void CConnman::StopNodes()\n         DeleteNode(pnode);\n     }\n \n-    for (CNode* pnode : m_nodes_disconnected) {\n+    std::list<CNode*> disconnected_nodes{};\n+    WITH_LOCK(m_nodes_disconnected_mutex, disconnected_nodes = m_nodes_disconnected);\n+    for (CNode* pnode : disconnected_nodes) {\n         DeleteNode(pnode);\n     }\n-    m_nodes_disconnected.clear();\n+    WITH_LOCK(m_nodes_disconnected_mutex, m_nodes_disconnected.clear());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1266975864",
      "id" : 1266975864,
      "in_reply_to_id" : 1259736855,
      "line" : 2514,
      "node_id" : "PRRC_kwDOABII585LhIR4",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 2514,
      "original_position" : 123,
      "original_start_line" : 2484,
      "path" : "src/net.cpp",
      "position" : 126,
      "pull_request_review_id" : 1534955685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266975864/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2484,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-07-19T04:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266975864",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1267530707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1267530707"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I love this lock free pattern!\r\n\r\nThe variable used as a guard (`nRefCount`) has to be outside of the object being protected. Otherwise if two threads execute it concurrently the first one may swap from 0 to -1 and `delete` the object. Then the second thread will end up reading freed memory when it tries to use `nRefCount`.\r\n\r\nThis should be safe:\r\n\r\n```cpp\r\n    // Delete disconnected nodes. Call DeleteNode() without holding m_nodes_mutex or m_nodes_disconnected_mutex.\r\n    std::vector<CNode*> to_delete;\r\n    { \r\n        LOCK(m_nodes_disconnected_mutex);\r\n        for (auto it = m_nodes_disconnected.begin(); it != m_nodes_disconnected.end();) { \r\n            CNode* node = *it;\r\n            if (node->GetRefCount() == 0) { \r\n                it = m_nodes_disconnected.erase(it);\r\n                to_delete.push_back(node);\r\n            } else { \r\n                ++it;\r\n            } \r\n        } \r\n    } \r\n    for (CNode* node : to_delete) { \r\n        DeleteNode(node);\r\n    } \r\n```",
      "commit_id" : "912d8e491437d3252c4ebfa36c6bd4e9582ff363",
      "created_at" : "2023-07-19T04:48:19Z",
      "diff_hunk" : "@@ -1119,32 +1157,16 @@ void CConnman::DisconnectNodes()\n         {\n             if (pnode->fDisconnect)\n             {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n-\n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n-\n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n-\n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                DisconnectAndReleaseNode(pnode);\n             }\n         }\n     }\n+    // Delete disconnected nodes\n+    std::list<CNode*> disconnected_nodes_copy{};\n+    WITH_LOCK(m_nodes_disconnected_mutex, disconnected_nodes_copy = m_nodes_disconnected);\n+    for (CNode* pnode : disconnected_nodes_copy)\n     {\n-        // Delete disconnected nodes\n-        std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n-        for (CNode* pnode : nodes_disconnected_copy)\n-        {\n-            // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n-                m_nodes_disconnected.remove(pnode);\n-                DeleteNode(pnode);\n-            }\n-        }\n+        DeleteDisconnectedNode(pnode);\n     }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1267530707",
      "id" : 1267530707,
      "in_reply_to_id" : 1259711622,
      "line" : 1173,
      "node_id" : "PRRC_kwDOABII585LjPvT",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 1173,
      "original_position" : 109,
      "original_start_line" : 1166,
      "path" : "src/net.cpp",
      "position" : 112,
      "pull_request_review_id" : 1534955685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1267530707/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1169,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-19T04:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1267530707",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1267534028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1267534028"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`DisconnectAndReleaseNode()` is safe because its body is protected by `m_nodes_mutex`. But `DeleteDisconnectedNode()` is not - two threads could race to call `delete` on the `CNode` object. It looks ok to iterate the whole `m_disconnected_nodes` here to avoid that, like in the [other place](https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1267530707).\r\n",
      "commit_id" : "912d8e491437d3252c4ebfa36c6bd4e9582ff363",
      "created_at" : "2023-07-19T04:55:05Z",
      "diff_hunk" : "@@ -918,14 +919,23 @@ bool CConnman::AttemptToEvictConnection()\n     if (!node_id_to_evict) {\n         return false;\n     }\n-    LOCK(m_nodes_mutex);\n-    for (CNode* pnode : m_nodes) {\n-        if (pnode->GetId() == *node_id_to_evict) {\n-            LogPrint(BCLog::NET, \"selected %s connection for eviction peer=%d; disconnecting\\n\", pnode->ConnectionTypeAsString(), pnode->GetId());\n-            pnode->fDisconnect = true;\n-            return true;\n+    CNode* evicted_node{nullptr};\n+    {\n+        LOCK(m_nodes_mutex);\n+        for (CNode* pnode : m_nodes) {\n+            if (pnode->GetId() == *node_id_to_evict) {\n+                LogPrint(BCLog::NET, \"selected %s connection for eviction peer=%d; disconnecting\\n\", pnode->ConnectionTypeAsString(), pnode->GetId());\n+                pnode->fDisconnect = true;\n+                evicted_node = pnode;\n+                break;\n+            }\n         }\n     }\n+    if (evicted_node) {\n+        DisconnectAndReleaseNode(evicted_node);\n+        DeleteDisconnectedNode(evicted_node);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1267534028",
      "id" : 1267534028,
      "in_reply_to_id" : 1259898235,
      "line" : 936,
      "node_id" : "PRRC_kwDOABII585LjQjM",
      "original_commit_id" : "a3903cc1864021a47c2928c379cd17306b3f6f64",
      "original_line" : 936,
      "original_position" : 32,
      "original_start_line" : 934,
      "path" : "src/net.cpp",
      "position" : 32,
      "pull_request_review_id" : 1534955685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1267534028/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 934,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-19T04:56:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1267534028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Here is a patch on top of this PR that should address all concerns above about thread safetyness.\r\n\r\n<details>\r\n<summary>[patch] thread safe</summary>\r\n\r\n```diff\r\ndiff --git i/src/net.cpp w/src/net.cpp\r\nindex c2160e945f..058f615dd5 100644\r\n--- i/src/net.cpp\r\n+++ w/src/net.cpp\r\n@@ -886,12 +886,14 @@ size_t CConnman::SocketSendData(CNode& node) const\r\n  *   to forge.  In order to partition a node the attacker must be\r\n  *   simultaneously better at all of them than honest peers.\r\n  *   If we find a candidate perform the eviction.\r\n  */\r\n bool CConnman::AttemptToEvictConnection()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     std::vector<NodeEvictionCandidate> vEvictionCandidates;\r\n     {\r\n \r\n         LOCK(m_nodes_mutex);\r\n         for (const CNode* node : m_nodes) {\r\n             if (node->fDisconnect)\r\n@@ -916,33 +918,37 @@ bool CConnman::AttemptToEvictConnection()\r\n         }\r\n     }\r\n     const std::optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));\r\n     if (!node_id_to_evict) {\r\n         return false;\r\n     }\r\n-    CNode* evicted_node{nullptr};\r\n+    bool disconnected{false};\r\n     {\r\n         LOCK(m_nodes_mutex);\r\n-        for (CNode* pnode : m_nodes) {\r\n-            if (pnode->GetId() == *node_id_to_evict) {\r\n-                LogPrint(BCLog::NET, \"selected %s connection for eviction peer=%d; disconnecting\\n\", pnode->ConnectionTypeAsString(), pnode->GetId());\r\n-                pnode->fDisconnect = true;\r\n-                evicted_node = pnode;\r\n+        for (auto it = m_nodes.begin(); it != m_nodes.end(); ++it) {\r\n+            CNode* node = *it;\r\n+            if (node->GetId() == *node_id_to_evict) {\r\n+                LogPrint(BCLog::NET, \"selected %s connection for eviction peer=%d; disconnecting\\n\", node->ConnectionTypeAsString(), node->GetId());\r\n+                node->fDisconnect = true;\r\n+                DisconnectAndReleaseNode(node);\r\n+                disconnected = true;\r\n+                m_nodes.erase(it);\r\n                 break;\r\n             }\r\n         }\r\n     }\r\n-    if (evicted_node) {\r\n-        DisconnectAndReleaseNode(evicted_node);\r\n-        DeleteDisconnectedNode(evicted_node);\r\n+    if (disconnected) {\r\n+        DeleteDisconnectedNodes();\r\n         return true;\r\n     }\r\n     return false;\r\n }\r\n \r\n void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     struct sockaddr_storage sockaddr;\r\n     socklen_t len = sizeof(sockaddr);\r\n     auto sock = hListenSocket.sock->Accept((struct sockaddr*)&sockaddr, &len);\r\n     CAddress addr;\r\n \r\n     if (!sock) {\r\n@@ -1105,45 +1111,56 @@ bool CConnman::AddConnection(const std::string& address, ConnectionType conn_typ\r\n     if (!grant) return false;\r\n \r\n     OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);\r\n     return true;\r\n }\r\n \r\n-void CConnman::DeleteDisconnectedNode(CNode* pnode)\r\n+void CConnman::DeleteDisconnectedNodes()\r\n {\r\n-    // Destroy the object only after other threads have stopped using it.\r\n-    // Prevent double free by setting nRefCount to -1 before delete.\r\n-    int expectedRefCount = 0;\r\n-    if (pnode->nRefCount.compare_exchange_strong(expectedRefCount, -1)) {\r\n-        WITH_LOCK(m_nodes_disconnected_mutex, m_nodes_disconnected.remove(pnode));\r\n-        DeleteNode(pnode);\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n+    // Delete disconnected nodes. Call DeleteNode() without holding m_nodes_mutex or m_nodes_disconnected_mutex.\r\n+    std::vector<CNode*> to_delete;\r\n+\r\n+    {\r\n+        LOCK(m_nodes_disconnected_mutex);\r\n+        for (auto it = m_nodes_disconnected.begin(); it != m_nodes_disconnected.end();) {\r\n+            CNode* node = *it;\r\n+            if (node->GetRefCount() == 0) {\r\n+                it = m_nodes_disconnected.erase(it);\r\n+                to_delete.push_back(node);\r\n+            } else {\r\n+                ++it;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    for (CNode* node : to_delete) {\r\n+        DeleteNode(node);\r\n     }\r\n }\r\n \r\n-void CConnman::DisconnectAndReleaseNode(CNode* pnode)\r\n+void CConnman::DisconnectAndReleaseNode(CNode* node)\r\n {\r\n-    LOCK(m_nodes_mutex);\r\n-    if (std::find(m_nodes.begin(), m_nodes.end(), pnode) != m_nodes.end()) {\r\n-\r\n-        // remove from m_nodes\r\n-        m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n \r\n-        // release outbound grant (if any)\r\n-        pnode->grantOutbound.Release();\r\n+    // release outbound grant (if any)\r\n+    node->grantOutbound.Release();\r\n \r\n-        // close socket and cleanup\r\n-        pnode->CloseSocketDisconnect();\r\n+    // close socket and cleanup\r\n+    node->CloseSocketDisconnect();\r\n \r\n-        // hold in disconnected pool until all refs are released\r\n-        pnode->Release();\r\n-        WITH_LOCK(m_nodes_disconnected_mutex, m_nodes_disconnected.push_back(pnode));\r\n-    }\r\n+    // hold in disconnected pool until all refs are released\r\n+    node->Release();\r\n+    WITH_LOCK(m_nodes_disconnected_mutex, m_nodes_disconnected.push_back(node));\r\n }\r\n \r\n void CConnman::DisconnectNodes()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     {\r\n         LOCK(m_nodes_mutex);\r\n \r\n         if (!fNetworkActive) {\r\n             // Disconnect any connected nodes\r\n             for (CNode* pnode : m_nodes) {\r\n@@ -1152,28 +1169,25 @@ void CConnman::DisconnectNodes()\r\n                     pnode->fDisconnect = true;\r\n                 }\r\n             }\r\n         }\r\n \r\n         // Disconnect unused nodes\r\n-        std::vector<CNode*> nodes_copy = m_nodes;\r\n-        for (CNode* pnode : nodes_copy)\r\n-        {\r\n-            if (pnode->fDisconnect)\r\n-            {\r\n-                DisconnectAndReleaseNode(pnode);\r\n-            }\r\n-        }\r\n-    }\r\n-    // Delete disconnected nodes\r\n-    std::list<CNode*> disconnected_nodes_copy{};\r\n-    WITH_LOCK(m_nodes_disconnected_mutex, disconnected_nodes_copy = m_nodes_disconnected);\r\n-    for (CNode* pnode : disconnected_nodes_copy)\r\n-    {\r\n-        DeleteDisconnectedNode(pnode);\r\n+        m_nodes.erase(std::remove_if(m_nodes.begin(),\r\n+                                     m_nodes.end(),\r\n+                                     [this](CNode* node) {\r\n+                                         if (node->fDisconnect) {\r\n+                                             DisconnectAndReleaseNode(node);\r\n+                                             return true;\r\n+                                         }\r\n+                                         return false;\r\n+                                     }),\r\n+                      m_nodes.end());\r\n     }\r\n+\r\n+    DeleteDisconnectedNodes();\r\n }\r\n \r\n void CConnman::NotifyNumConnectionsChanged()\r\n {\r\n     size_t nodes_size;\r\n     {\r\n@@ -1270,12 +1284,13 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\r\n \r\n     return events_per_sock;\r\n }\r\n \r\n void CConnman::SocketHandler()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\r\n \r\n     Sock::EventsPerSock events_per_sock;\r\n \r\n     {\r\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\r\n@@ -1381,12 +1396,14 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\r\n         if (InactivityCheck(*pnode)) pnode->fDisconnect = true;\r\n     }\r\n }\r\n \r\n void CConnman::SocketHandlerListening(const Sock::EventsPerSock& events_per_sock)\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     for (const ListenSocket& listen_socket : vhListenSocket) {\r\n         if (interruptNet) {\r\n             return;\r\n         }\r\n         const auto it = events_per_sock.find(listen_socket.sock);\r\n         if (it != events_per_sock.end() && it->second.occurred & Sock::RECV) {\r\n@@ -1394,12 +1411,13 @@ void CConnman::SocketHandlerListening(const Sock::EventsPerSock& events_per_sock\r\n         }\r\n     }\r\n }\r\n \r\n void CConnman::ThreadSocketHandler()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\r\n \r\n     while (!interruptNet)\r\n     {\r\n         DisconnectNodes();\r\n         NotifyNumConnectionsChanged();\r\n@@ -2093,12 +2111,14 @@ void CConnman::ThreadMessageHandler()\r\n         fMsgProcWake = false;\r\n     }\r\n }\r\n \r\n void CConnman::ThreadI2PAcceptIncoming()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     static constexpr auto err_wait_begin = 1s;\r\n     static constexpr auto err_wait_cap = 5min;\r\n     auto err_wait = err_wait_begin;\r\n \r\n     bool advertising_listen_addr = false;\r\n     i2p::Connection conn;\r\n@@ -2481,12 +2501,14 @@ void CConnman::StopThreads()\r\n     if (threadSocketHandler.joinable())\r\n         threadSocketHandler.join();\r\n }\r\n \r\n void CConnman::StopNodes()\r\n {\r\n+    AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n     if (fAddressesInitialized) {\r\n         DumpAddresses();\r\n         fAddressesInitialized = false;\r\n \r\n         if (m_use_addrman_outgoing) {\r\n             // Anchor connections are only dumped during clean shutdown.\r\ndiff --git i/src/net.h w/src/net.h\r\nindex d5833d7e2d..6cdf8cb462 100644\r\n--- i/src/net.h\r\n+++ w/src/net.h\r\n@@ -760,15 +760,17 @@ public:\r\n \r\n     ~CConnman();\r\n \r\n     bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !m_added_nodes_mutex, !m_addr_fetches_mutex, !mutexMsgProc);\r\n \r\n     void StopThreads();\r\n-    void StopNodes();\r\n-    void Stop()\r\n+    void StopNodes() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex)\r\n     {\r\n+        AssertLockNotHeld(m_nodes_disconnected_mutex);\r\n+\r\n         StopThreads();\r\n         StopNodes();\r\n     };\r\n \r\n     void Interrupt() EXCLUSIVE_LOCKS_REQUIRED(!mutexMsgProc);\r\n     bool GetNetworkActive() const { return fNetworkActive; };\r\n@@ -917,31 +919,31 @@ private:\r\n \r\n     void ThreadOpenAddedConnections() EXCLUSIVE_LOCKS_REQUIRED(!m_added_nodes_mutex, !m_unused_i2p_sessions_mutex);\r\n     void AddAddrFetch(const std::string& strDest) EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex);\r\n     void ProcessAddrFetch() EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex, !m_unused_i2p_sessions_mutex);\r\n     void ThreadOpenConnections(std::vector<std::string> connect) EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex, !m_added_nodes_mutex, !m_nodes_mutex, !m_unused_i2p_sessions_mutex);\r\n     void ThreadMessageHandler() EXCLUSIVE_LOCKS_REQUIRED(!mutexMsgProc);\r\n-    void ThreadI2PAcceptIncoming();\r\n-    void AcceptConnection(const ListenSocket& hListenSocket);\r\n+    void ThreadI2PAcceptIncoming() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void AcceptConnection(const ListenSocket& hListenSocket) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n \r\n     /**\r\n      * Create a `CNode` object from a socket that has just been accepted and add the node to\r\n      * the `m_nodes` member.\r\n      * @param[in] sock Connected socket to communicate with the peer.\r\n      * @param[in] permission_flags The peer's permissions.\r\n      * @param[in] addr_bind The address and port at our side of the connection.\r\n      * @param[in] addr The address and port at the peer's side of the connection.\r\n      */\r\n     void CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\r\n                                       NetPermissionFlags permission_flags,\r\n                                       const CAddress& addr_bind,\r\n-                                      const CAddress& addr);\r\n+                                      const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n \r\n-    void DeleteDisconnectedNode(CNode* pnode);\r\n-    void DisconnectAndReleaseNode(CNode* pnode);\r\n-    void DisconnectNodes();\r\n+    void DisconnectAndReleaseNode(CNode* node) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void DeleteDisconnectedNodes() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n+    void DisconnectNodes() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n     void NotifyNumConnectionsChanged();\r\n     /** Return true if the peer is inactive and should be disconnected. */\r\n     bool InactivityCheck(const CNode& node) const;\r\n \r\n     /**\r\n      * Generate a collection of sockets to check for IO readiness.\r\n@@ -950,13 +952,13 @@ private:\r\n      */\r\n     Sock::EventsPerSock GenerateWaitSockets(Span<CNode* const> nodes);\r\n \r\n     /**\r\n      * Check connected and listening sockets for IO readiness and process them accordingly.\r\n      */\r\n-    void SocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !mutexMsgProc);\r\n+    void SocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex, !m_total_bytes_sent_mutex, !mutexMsgProc);\r\n \r\n     /**\r\n      * Do the read/write for connected sockets that are ready for IO.\r\n      * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\r\n      * @param[in] events_per_sock Sockets that are ready for IO.\r\n      */\r\n@@ -965,15 +967,15 @@ private:\r\n         EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !mutexMsgProc);\r\n \r\n     /**\r\n      * Accept incoming connections, one from each read-ready listening socket.\r\n      * @param[in] events_per_sock Sockets that are ready for IO.\r\n      */\r\n-    void SocketHandlerListening(const Sock::EventsPerSock& events_per_sock);\r\n+    void SocketHandlerListening(const Sock::EventsPerSock& events_per_sock) EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n \r\n-    void ThreadSocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !mutexMsgProc);\r\n+    void ThreadSocketHandler() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex, !m_total_bytes_sent_mutex, !mutexMsgProc);\r\n     void ThreadDNSAddressSeed() EXCLUSIVE_LOCKS_REQUIRED(!m_addr_fetches_mutex, !m_nodes_mutex);\r\n \r\n     uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\r\n \r\n     CNode* FindNode(const CNetAddr& ip);\r\n     CNode* FindNode(const CSubNet& subNet);\r\n@@ -983,13 +985,13 @@ private:\r\n     /**\r\n      * Determine whether we're already connected to a given address, in order to\r\n      * avoid initiating duplicate connections.\r\n      */\r\n     bool AlreadyConnectedToAddress(const CAddress& addr);\r\n \r\n-    bool AttemptToEvictConnection();\r\n+    bool AttemptToEvictConnection() EXCLUSIVE_LOCKS_REQUIRED(!m_nodes_disconnected_mutex);\r\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type) EXCLUSIVE_LOCKS_REQUIRED(!m_unused_i2p_sessions_mutex);\r\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\r\n \r\n     void DeleteNode(CNode* pnode);\r\n \r\n     NodeId GetNewNodeId();\r\n@@ -1042,13 +1044,13 @@ private:\r\n     const NetGroupManager& m_netgroupman;\r\n     std::deque<std::string> m_addr_fetches GUARDED_BY(m_addr_fetches_mutex);\r\n     Mutex m_addr_fetches_mutex;\r\n     std::vector<std::string> m_added_nodes GUARDED_BY(m_added_nodes_mutex);\r\n     mutable Mutex m_added_nodes_mutex;\r\n     std::vector<CNode*> m_nodes GUARDED_BY(m_nodes_mutex);\r\n-    GlobalMutex m_nodes_disconnected_mutex;\r\n+    Mutex m_nodes_disconnected_mutex;\r\n     std::list<CNode*> m_nodes_disconnected GUARDED_BY(m_nodes_disconnected_mutex);\r\n     mutable RecursiveMutex m_nodes_mutex;\r\n     std::atomic<NodeId> nLastNodeId{0};\r\n     unsigned int nPrevNodeCount{0};\r\n \r\n     /**\r\n```\r\n</details>",
      "created_at" : "2023-07-19T10:09:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1641806637",
      "id" : 1641806637,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585h2_st",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1641806637/reactions"
      },
      "updated_at" : "2023-07-19T10:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1641806637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the review and patch @vasild, I will try to review it over the weekend and keep this moving forward.\r\n\r\nI have in the mean time been considering a totally different approach to thread-safe deletion of nodes from `CConnman`, but it's somewhat more invasive (in terms of LOC)... I was experimenting with whether `m_nodes` would work better as a vector of `share_ptr`, meaning they could be added and removed from `m_nodes` (and `m_nodes_disconnected`) much more safely from the perspective of other threads...\r\n\r\nIf you are also interested in this approach, I'd be curious to know what you thought of it. Althought \"cleaner\" in the end I think the change is too expensive for too-little benefit...\r\n\r\nhttps://github.com/willcl-ark/bitcoin/tree/2023-07_shared-ptr-cnode",
      "created_at" : "2023-08-04T15:37:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1665802905",
      "id" : 1665802905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585jSiKZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665802905/reactions"
      },
      "updated_at" : "2023-08-04T15:37:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665802905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes! I was thinking about the same! We are doing some manual refcounting here which is creating all kinds of headaches and is prone to bugs. There is a neat solution already for this `std::shared_ptr`. Long term, this is a must have IMO.\r\n\r\nTo minimize the size of the initial PR, I guess you can just change `CConnman::m_nodes` and `CConnman::m_nodes_disconnected` from `std::vector<CNode*>` to `std::vector<CNodeRef>` and the needed changes to get that to compile and work.\r\n\r\nLater I think we don't even need `m_nodes_disconnected` because we can do the `FinalizeNode()` from the `CNode` destructor. For example - give the `CNode` constructor a callback function that it will invoke from its destructor. Then just remove the `shared_ptr` objects from `m_nodes` or elsewhere and when their refcount drops to zero the destructor will be called and it will call `FinalizeNode()`.\r\n\r\nPS [2023-07_shared-ptr-cnode](https://github.com/willcl-ark/bitcoin/tree/2023-07_shared-ptr-cnode) does not look too bad.",
      "created_at" : "2023-08-04T16:03:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1665852012",
      "id" : 1665852012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585jSuJs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665852012/reactions"
      },
      "updated_at" : "2023-08-04T16:04:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1665852012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-08-06T17:47:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1666931675",
      "id" : 1666931675,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585jW1vb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1666931675/reactions"
      },
      "updated_at" : "2023-08-06T17:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1666931675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--13523179cfe9479db18ec6c5d236f789-->\nThere hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? â¡ï¸ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? â¡ï¸ Please close.\n* Did the author lose interest or time to work on this? â¡ï¸ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "created_at" : "2023-11-04T00:43:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1793273348",
      "id" : 1793273348,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585q4y4E",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793273348/reactions"
      },
      "updated_at" : "2023-11-04T00:43:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793273348",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
