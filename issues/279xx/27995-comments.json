[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Given the current fee rate estimation algorithm has no prediction power when the mempool conditions change, it is common to pay too little or too much, what is especially true while we increase the confirmation target.  \r\n   \r\nIn Wasabi we use the feerate histogram to \"correct\" the fee rate estimations provided by our node and to keep them between an acceptable range. There are many things that can be done but we just want to be sure our users participating in coinjoins don't pay more than everybody else and also that they don't pay too little and are among the top 200Mb txs, just to reduce the chances of been purged.\r\n\r\nhttps://github.com/zkSNACKs/WalletWasabi/blob/6a7c8965cec291f41aab328a684ab8105653a8ac/WalletWasabi/Extensions/RPCClientExtensions.cs#L147\r\n\r\nI think that something like this is not risky and it can improves the estimations by making them \"safer\". Basically, the idea is to mimic what we humans do: look at the mempool and if the txs that pay more are paying 50s/b don't pay 100s/b because it makes no sense, or at least it doesn't in most of the cases. ",
      "created_at" : "2023-06-28T19:31:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27995#issuecomment-1611989703",
      "id" : 1611989703,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995",
      "node_id" : "IC_kwDOABII585gFQLH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1611989703/reactions"
      },
      "updated_at" : "2023-06-28T19:31:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1611989703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "The highest paying transactions that are 'stuck' in the mempool are useful for fee estimation. For reasonably small transactions the fee is just below what you need to pay to get included.\r\n\r\nThis method isn't affected by users who are over-paying and is robust against miners being paid out-of-band.\r\n\r\nHowever, it does respond slowly to changes in mempool conditions",
      "created_at" : "2023-06-30T11:35:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27995#issuecomment-1614527967",
      "id" : 1614527967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995",
      "node_id" : "IC_kwDOABII585gO73f",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1614527967/reactions"
      },
      "updated_at" : "2023-06-30T11:35:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1614527967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2528683?v=4",
         "events_url" : "https://api.github.com/users/ErikDeSmedt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ErikDeSmedt/followers",
         "following_url" : "https://api.github.com/users/ErikDeSmedt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ErikDeSmedt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ErikDeSmedt",
         "id" : 2528683,
         "login" : "ErikDeSmedt",
         "node_id" : "MDQ6VXNlcjI1Mjg2ODM=",
         "organizations_url" : "https://api.github.com/users/ErikDeSmedt/orgs",
         "received_events_url" : "https://api.github.com/users/ErikDeSmedt/received_events",
         "repos_url" : "https://api.github.com/users/ErikDeSmedt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ErikDeSmedt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ErikDeSmedt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ErikDeSmedt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fee rates are a everyday discussion in many teams I guess. This is from today's internal discussion about a problem in our UI regarding fees:\r\n![image](https://github.com/bitcoin/bitcoin/assets/127973/78b99290-9620-419c-9cf0-6c47817d6003)\r\n",
      "created_at" : "2023-06-30T13:17:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27995#issuecomment-1614639756",
      "id" : 1614639756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995",
      "node_id" : "IC_kwDOABII585gPXKM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1614639756/reactions"
      },
      "updated_at" : "2023-06-30T13:17:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1614639756",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "free rate meed to be in union or better tet need to be unifited  i would recomend dev team implament  someting simulor to mempool.spoce \r\n\r\nall so on asidenote i request dev team to reintraduce mining funchion to bitcoin core but have it mainly used for asic miners as cpu and gpu mining of bitcoin isnt safisent \r\n",
      "created_at" : "2023-07-08T16:47:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27995#issuecomment-1627397920",
      "id" : 1627397920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995",
      "node_id" : "IC_kwDOABII585hAB8g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1627397920/reactions"
      },
      "updated_at" : "2023-07-08T16:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1627397920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/65166064?v=4",
         "events_url" : "https://api.github.com/users/WaynePerth74/events{/privacy}",
         "followers_url" : "https://api.github.com/users/WaynePerth74/followers",
         "following_url" : "https://api.github.com/users/WaynePerth74/following{/other_user}",
         "gists_url" : "https://api.github.com/users/WaynePerth74/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/WaynePerth74",
         "id" : 65166064,
         "login" : "WaynePerth74",
         "node_id" : "MDQ6VXNlcjY1MTY2MDY0",
         "organizations_url" : "https://api.github.com/users/WaynePerth74/orgs",
         "received_events_url" : "https://api.github.com/users/WaynePerth74/received_events",
         "repos_url" : "https://api.github.com/users/WaynePerth74/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/WaynePerth74/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/WaynePerth74/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/WaynePerth74"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nOne approach to implementing a package-aware mempool-based fee estimator (Edit after #28762)\r\n\r\n### Process\r\nWhenever we want to estimate fees for a confirmation target we:\r\n1. Generate the fee rate histogram with the mempool transactions.\r\n2. Aggregate the fee rates and their respective vsize values until reaching the desired confirmation target in terms of blocks:\r\n    i) For a 1 block confirmation target, aggregate the highest fee rates until the sum of their vsize's equals the maximum block weight.\r\n    e.g For a 3-block confirmation target, do the step above thrice using the third aggregated fee rates.\r\n3. Calculate the median fee rate of the confirmation target aggregated fee rates.\r\n4. Take the median fee rate as the confirmation target fee rate.\r\n\r\n### Sanity check\r\n* Whenever a new block is connected, we create a new block template which will give us the list of transactions we expect to be included in the new block. This can be used for comparison (as a sanity check) vs miner-generated blocks, to give us more confidence that our mempool somewhat-closely resembles miner mempools and can be somewhat relied upon for fee estimation:\r\n\r\n    * Tracking the number of times we expect a transaction to be mined and it's not.\r\n    * Track the number of times a high fee rate transaction is not confirmed. A transaction will be eligible to be high fee only if it's greater than e.g. the median fee rate of transactions in the newly connected block?\r\n\r\n* To determine whether node policy diverges from the network's aggregate policy we will:\r\n    1. Check that transactions we expect to be confirmed and are not (e.g. for up to three blocks) are below an as-yet undetermined threshold (10%?).\r\n    2. Check our mempool has seen another as-yet undetermined threshold % of the transactions in the last `n` (3?) blocks.\r\n\r\n    If both conditions are met, high fee-rate transactions in our mempool are getting confirmed, our mempool has likely not diverged from the global network aggregate policy.\r\n\r\n* Before generating any fee rate histogram we will:\r\n    1. exclude high fee rate transactions that failed to be included in block (e.g., three times) with all their descendants.\r\n\r\n\r\n## Implementation\r\n\r\n* Modify the `mini_miner` block-building algorithm to generate a fee rate histogram after building a block template (fee rate histogram is an array of fee rates along with their corresponding sizes, arranged in descending order, the higher fee rate listed first with their corresponding vsize)\r\n\r\n#### Naive approach of generating fee rate histogram\r\n\r\n* Manually generate mempool transactions `manual_entries` and their descendants `descendant_caches` from `CTxMempool`, this has the downside of locking and `mempool_cs` while we go through the whole mempool transactions and their descendant.\r\n\r\n* Use `manual_entries` and `descendant_caches` to get fee rate histogram with mini miner.\r\n\r\n### Improved approach of generating fee rate histogram\r\n\r\n* Implement a mempool-based fee estimator that will subscribe to the validation interface (similar to the one done in `CBlockPolicyEstimator` #28368)\r\n\r\n* Create a parallel (lightweight) \"mempool\" of unconfirmed transactions with their fee rates, and descendants.\r\n\r\n* Use the lightweight mempool to get fee rate histogram from mini miner.\r\n\r\n\r\n* Modify mini miner to build a block template with a target visize and return the transactions of the block template it built.\r\n\r\n* We can use either the [Naive](#naive-approach-of-generating-fee-rate-histogram) or [Improved](#improved-approach-of-generating-fee-rate-histogram)  appraoch to get the mempool transactions `manual_entries` and their descendants `descendant_caches` and generate a `DEFAULT_BLOCK_MAX_WEIGHT` block template.\r\n\r\n## Questions\r\n\r\n1. Whenever we estimate fees with the naive approach we generate a fee rate histogram with the whole mempool, we are locking mempool `cs` and creating `manual_entries` and `descendant_caches`, is that efficient?\r\n\r\n2. Every time a new block is connected we generate a block template to perform a sanity check with the naive approach this locks mempool `cs` to create `manual_entries` and `descendant_caches`, is that efficient? \r\n\r\nWe are building a normal block template with the default limit for this, the sanity checks execute in the background.\r\n\r\nIf this locking issue is a concern, to solve it I think the mempool-based fee estimator will have to implement the improved approach, which has the downside of creating another lightweight mempool, for a resource-constrained node, we can provide the option of turning it off?\r\n\r\nThe lightweight mempool DS might just be the cache of the mini miner constructor\r\n\r\n```\r\nconst std::vector<MiniMinerMempoolEntry>& manual_entries,\r\nconst std::map<Txid, std::set<Txid>>& descendant_caches\r\n```\r\n\r\nMiniMinerMempoolEntry DS https://github.com/bitcoin/bitcoin/blob/f2cc718e6920b8c45be107e2eb5ac84c4b839e50/src/node/mini_miner.h#L25\r\n\r\n\r\nThis work is the result of some discussions with @willcl-ark @glozow\r\n\r\nI would like to have feedback on the approaches before creating a PR.",
      "created_at" : "2023-10-02T09:26:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27995#issuecomment-1742684817",
      "id" : 1742684817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995",
      "node_id" : "IC_kwDOABII585n30KR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1742684817/reactions"
      },
      "updated_at" : "2023-11-06T11:58:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1742684817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "A minimalist implementation of the second idea (\"look at the rate and feerate of transactions entering the mempool currently\"): https://code.samourai.io/oxt/one_dollar_fee_estimator\r\n\r\nFrom our observations, the estimator behaves rather well under current network conditions but as noted in the original post, no fee estimator should be used automatically without safeguards put in place. \r\n",
      "created_at" : "2023-12-14T16:28:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27995#issuecomment-1856162406",
      "id" : 1856162406,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995",
      "node_id" : "IC_kwDOABII585uospm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1856162406/reactions"
      },
      "updated_at" : "2023-12-14T16:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1856162406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5204318?v=4",
         "events_url" : "https://api.github.com/users/LaurentMT/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LaurentMT/followers",
         "following_url" : "https://api.github.com/users/LaurentMT/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LaurentMT/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LaurentMT",
         "id" : 5204318,
         "login" : "LaurentMT",
         "node_id" : "MDQ6VXNlcjUyMDQzMTg=",
         "organizations_url" : "https://api.github.com/users/LaurentMT/orgs",
         "received_events_url" : "https://api.github.com/users/LaurentMT/received_events",
         "repos_url" : "https://api.github.com/users/LaurentMT/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LaurentMT/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LaurentMT/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LaurentMT"
      }
   }
]
