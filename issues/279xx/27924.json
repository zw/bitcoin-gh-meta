{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "fabed982ad9143cddaca8346f6b4c243dd84e0c4 re-enabled the assert `assert(banmap == banmap_read)` in `banman`:\r\n```cpp\r\nban_man.DumpBanlist();\r\nSetMockTime(ConsumeTime(fuzzed_data_provider));\r\nbanmap_t banmap;\r\nban_man.GetBanned(banmap);\r\nBanMan ban_man_read{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ 0};\r\nbanmap_t banmap_read;\r\nban_man_read.GetBanned(banmap_read);\r\nassert(banmap == banmap_read);\r\n```\r\n\r\nHowever, my server crashed because of it. Debugging it I could realize the problem is the function `LookupSubnet`. \r\n\r\nDuring the execution that caused the crash, the banman has been filled with the following subnets:\r\n```sh\r\n2e:6f6e:696f:6ef3:a080:b18d:5d5d:5d00%2038004089/121\r\n191:b491:7979:7979:7979:7979:79ff:ff80%2037980897/121\r\n207:fc26:b9ce:7aae:798b:5f2d:1d39:4380%2038004089/121\r\n676:c962:7962:b787:b392:fed8:7058:c500%2038004089/121\r\n...\r\n```\r\n\r\nAfter dumping it (`DumpBanlist`), we initialize a `BanMan` reading same file:\r\n```cpp\r\nBanMan ban_man_read{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ 0};\r\nbanmap_t banmap_read;\r\nban_man_read.GetBanned(banmap_read);\r\n```\r\nHowever, when we initialize a `BanMan` it will - at some point - call `BanMapFromJson`.\r\n\r\nTaking a look at `BanMapFromJson`, I noticed we have:\r\n```cpp\r\nif (!LookupSubNet(subnet_str, subnet)) {\r\n    LogPrintf(\"Dropping entry with unparseable address or subnet (%s) from ban list\\n\", subnet_str);\r\n    continue;\r\n}\r\n```\r\nCalling `LookupSubNet`, for example, with `2e:6f6e:696f:6ef3:a080:b18d:5d5d:5d00%2038004089/121`, will return true, but the subnet will be `2e:6f6e:696f:6ef3:a080:b18d:5d5d:5d00%31097` making the assertion `assert(banmap == banmap_read)` to fail.\r\n\r\n-----------\r\n\r\nGot this with macOS Ventura 13.0.\r\n```sh\r\n./configure --enable-fuzz --with-sanitizers=fuzzer,address,undefined --disable-asm CC=$(brew --prefix llvm)/bin/clang CXX=$(brew --prefix llvm)/bin/clang++\r\n```\r\n\r\nCrash:\r\n```sh\r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 3851287319\r\nINFO: Loaded 1 modules   (1130675 inline 8-bit counters): 1130675 [0x107b6cd60, 0x107c80e13), \r\nINFO: Loaded 1 PC tables (1130675 PCs): 1130675 [0x107c80e18,0x108dc1948), \r\nsrc/test/fuzz/fuzz: Running 1 inputs 1 time(s) each.\r\nRunning: crash-cc17009262908f232f471481d1ad808e2bf6dc14\r\nAssertion failed: (banmap == banmap_read), function banman_fuzz_target, file banman.cpp, line 112.\r\n==79739== ERROR: libFuzzer: deadly signal\r\n    #0 0x10a453ea4 in __sanitizer_print_stack_trace+0x28 (libclang_rt.asan_osx_dynamic.dylib:arm64+0x5bea4) (BuildId: 5c04277be4ee3a049b85963fe58ab4e132000000200000000100000000000b00)\r\n    #1 0x1070bf970 in fuzzer::PrintStackTrace() FuzzerUtil.cpp:210\r\n    #2 0x1070a3d8c in fuzzer::Fuzzer::CrashCallback() FuzzerLoop.cpp:233\r\n    #3 0x18065c2a0 in _sigtramp+0x34 (libsystem_platform.dylib:arm64+0x42a0) (BuildId: 781896702f47332c9a59a210157aa97b32000000200000000100000000000d00)\r\n    #4 0xfa7f80018062dce8  (<unknown module>)\r\n    #5 0x51270001805672c4  (<unknown module>)\r\n    #6 0x614a00018056661c  (<unknown module>)\r\n    #7 0x382f000104c37c88  (<unknown module>)\r\n    #8 0x1052468f8 in LLVMFuzzerTestOneInput fuzz.cpp:169\r\n    #9 0x1070a51c8 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:617\r\n    #10 0x107091590 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) FuzzerDriver.cpp:324\r\n    #11 0x1070967c4 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:860\r\n    #12 0x1070c0bc0 in main FuzzerMain.cpp:20\r\n    #13 0x180303e4c  (<unknown module>)\r\n    #14 0x7d03fffffffffffc  (<unknown module>)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\n```\r\n\r\nSeed:\r\n```sh\r\nX3J1bmViYX39GgAAAAAAAAD///8AACsAXAAAAFx00UUXXXQBFRUVFRUVFRUVFRVvLwB/AAAAgAABAAABAQcAAACRtJGdEZGRQAAAAMQgf38AQAqRkf/w/6cCAZG0kXl5eXl5eXl5ef//////////eXl5eXl5eXl5eXl5eXl5jMCDHsFtvdtVxH7U1agiqUM6FTiq9Tg1OfCMddTHrRhzOQ0wCFHRVS3D7kqAmf4ii4FzNYkn9XcN8ubYNitv6cgN9E1kKPbQJOCC2dYrPDwDDQHZQeqOD7K+uD8GdslieWK3h7OS/thwWMUdw+KmgryaSZvunotnNKkz/uq98HjtQrUH/LUmUeb7pTZHqTApZ3jXVmGS2Muo96HLI9g3d0EG5LHce+mRSy2jB6TFuBRAQpwjghLRiU+S75ltwhrmRUXBfa4kpmjq2FrBYiVbbTYisifxMsnvPS7ix+IwpTats2ewEGQITg/MeZbhvKcZxxczHeb6ht1PrRV4/o/msCwN2d8RVC0DYh2gqj1aC06cGMXgoZw+T3ll5CH8dghESnW98W3i283GUy/3tSwPV8GLot5X/DupHLge/RQxtmgnIJhXgq/UMzTL7XK9y1oMooLSPiDhJiVmrKE95f549o1H9UZXSx1mwGCqap51HHrCSsnjiP13Wn1+WtyEUUAObNBDhcSjuHMMWY95B938zoOKTbFpyY3gzAi5Z8ujR2KmnEaKT4MKAVGQAAAAAAAAAAAAAAAAAAAAAP5W0ABJaWjFneFMmuY9koAoGVtScppmwwOw9++Ufx0dTyvFjZHkROJ6mlu0UKCvY6sTccKSugFu0/QncpR5/DBzYqTSe0OKQSMhzIN2HQEAo05OWxU9XQsTKRfg/bSB1//EXudt4jZEIyns29ZRAAAAAAAAAAB5cXFxcXFxcXFxcXFxcXFxcXl5PgAAAAAAAABwkZiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmEAAAC5vbmlvbvOggLGNXV1dDV0NAABVlEQAXRAAP11d+gj/f7+12l1VlABdEF0AROA9//////8I/38I/yZ/CP9/CP9/CP9/CP9/B/9/CHl5eXn/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeXl5eQB5ecJ5eQF0eXl5eXl5eXl5eXkAgDsAAACAeXkmeXmwV3P1HqaLvq9HJCO3LQzu6Khz1/N6ndp/+0uXhvDVw6ekexeobSVOnFS7455nfwXAfGVyqxh8mvHWMdOKECKCa6HLBzj/rHbPG+HNtG/wvAIH/Ca5znqueYtfLR05Q66eoEheVZbgZSZn9xtbTUOMCPf+fwZ/3/wCs5ve9RqjRhRopnTXzm6R53SyY8OhPkjZfmHekZiP4qpCUN0rFIU8cZojTVAUZWJjT7OKXmAgZ5GWTGuyos8GKQMfmo4KCFuwt0/0+x9aKSC2z5JDTqebow5cVrdEjrozEjNXNL36tvOaLdGvcMfJ8xlUmOjI6DU+pmEn4ZUXUxUu9CnwZ8ZsjJcs0bOiVJd5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eYeHeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5fXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5/YfYfutDeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXkAeXl5eeEeeXl5eXl6eYATE3l5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl9eXl5eQCAOwAAAIB5eXl5eQ==\r\n```\r\n\r\n\r\n\r\n-----------\r\n\r\nThe following diff reproduces the behavior:\r\n\r\n```diff\r\ndiff --git a/src/test/banman_tests.cpp b/src/test/banman_tests.cpp\r\nindex cebe3629d..d24f55979 100644\r\n--- a/src/test/banman_tests.cpp\r\n+++ b/src/test/banman_tests.cpp\r\n@@ -20,11 +20,12 @@ BOOST_AUTO_TEST_CASE(file)\r\n     SetMockTime(777s);\r\n     const fs::path banlist_path{m_args.GetDataDirBase() / \"banlist_test\"};\r\n     {\r\n+        const std::string suspect_subnet{\"2e:6f6e:696f:6ef3:a080:b18d:5d5d:5d00%2038004089/121\"};\r\n         const std::string entries_write{\r\n             \"{ \\\"banned_nets\\\": [\"\r\n             \"  { \\\"version\\\": 1, \\\"ban_created\\\": 0, \\\"banned_until\\\": 778, \\\"address\\\": \\\"aaaaaaaaa\\\" },\"\r\n             \"  { \\\"version\\\": 2, \\\"ban_created\\\": 0, \\\"banned_until\\\": 778, \\\"address\\\": \\\"bbbbbbbbb\\\" },\"\r\n-            \"  { \\\"version\\\": 1, \\\"ban_created\\\": 0, \\\"banned_until\\\": 778, \\\"address\\\": \\\"1.0.0.0/8\\\" }\"\r\n+            \"  { \\\"version\\\": 1, \\\"ban_created\\\": 0, \\\"banned_until\\\": 778, \\\"address\\\": \\\"2e:6f6e:696f:6ef3:a080:b18d:5d5d:5d00%2038004089/121\\\" }\"\r\n             \"] }\",\r\n         };\r\n         BOOST_REQUIRE(WriteBinaryFile(banlist_path + \".json\", entries_write));\r\n@@ -36,6 +37,11 @@ BOOST_AUTO_TEST_CASE(file)\r\n             banmap_t entries_read;\r\n             banman.GetBanned(entries_read);\r\n             BOOST_CHECK_EQUAL(entries_read.size(), 1);\r\n+\r\n+            for (const auto& it : entries_read) {\r\n+                CSubNet sub_net = it.first;\r\n+                BOOST_CHECK_EQUAL(sub_net.ToString(), suspect_subnet);\r\n+            }\r\n         }\r\n     }\r\n }\r\n```\r\n\r\n\r\n```diff\r\ndiff --git a/test/functional/rpc_setban.py b/test/functional/rpc_setban.py\r\nindex b4f3d77e5..93a19920c 100755\r\n--- a/test/functional/rpc_setban.py\r\n+++ b/test/functional/rpc_setban.py\r\n@@ -25,6 +25,10 @@ class SetBanTests(BitcoinTestFramework):\r\n         peerinfo = self.nodes[1].getpeerinfo()[0]\r\n         assert not \"noban\" in peerinfo[\"permissions\"]\r\n \r\n+        subnet = \"2e:6f6e:696f:6ef3:a080:b18d:5d5d:5d00%2038004089/121\"\r\n+        self.nodes[1].setban(subnet, \"add\")\r\n+        assert self.is_banned(self.nodes[1], subnet)\r\n+\r\n         # Node 0 get banned by Node 1\r\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\r\n```",
   "closed_at" : "2023-11-13T10:57:08Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 23,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27924/comments",
   "created_at" : "2023-06-20T22:00:20Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27924/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/27924",
   "id" : 1766261858,
   "labels" : [
      {
         "color" : "660000",
         "default" : false,
         "description" : "",
         "id" : 234879,
         "name" : "macOS",
         "node_id" : "MDU6TGFiZWwyMzQ4Nzk=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/macOS"
      },
      {
         "color" : "d4c5f9",
         "default" : false,
         "description" : null,
         "id" : 62963516,
         "name" : "Tests",
         "node_id" : "MDU6TGFiZWw2Mjk2MzUxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27924/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585pRwRi",
   "number" : 27924,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27924/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : "completed",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27924/timeline",
   "title" : "fuzz: banman, Assertion `banmap == banmap_read' failed",
   "updated_at" : "2023-11-13T10:57:09Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27924",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
      "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
      "followers_url" : "https://api.github.com/users/brunoerg/followers",
      "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/brunoerg",
      "id" : 19480819,
      "login" : "brunoerg",
      "node_id" : "MDQ6VXNlcjE5NDgwODE5",
      "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
      "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
      "repos_url" : "https://api.github.com/users/brunoerg/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/brunoerg"
   }
}
