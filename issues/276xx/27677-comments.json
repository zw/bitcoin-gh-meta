[
   {
      "author_association" : "MEMBER",
      "body" : "Nice! Here's the transcript of the above mentioned presentation: https://btctranscripts.com/bitcoin-core-dev-tech/2023-04-25-mempool-clustering/\r\n\r\n It's also worth noting that although this proposal introduces a new limit, for the cluster size, it could potentially supersede some other limits (e.g. `-limitancestorcount`, `-limitancestorsize`, `-limitdescendantcount`, `-limitdescendantsize`) if the maximum cluster size is large enough. Though if the limit is in vbytes, then someone assuming a limit in count might still hit a non backwards compatible policy limit.",
      "created_at" : "2023-05-17T09:25:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551056767",
      "id" : 1551056767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585ccz9_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551056767/reactions"
      },
      "updated_at" : "2023-05-17T09:26:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551056767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for sharing all those details, this is great!\r\nI can only comment as someone who relies a lot on mempool/transaction relay for lightning: my opinion may thus be biased.\r\nI believe that lightning's security will *always* depend on the ability to get specific transactions confirmed before a given block, so anything that can help transaction propagation is important for us (and I believe this will be true for most L2 contracts).\r\n\r\n> Philosophically, is it problematic for RBF rules to be even more of a \"black box\" than the BIP 125 algorithm?\r\n\r\nIt isn't for me, as long as we can *somehow* RBF once we're ready to pay the price.\r\nThe way lightning implementations currently RBF is via trial-and-error, not by trying to abide by the BIP 125 rules.\r\nWe simply lower the change output of the transaction we're trying to RBF and/or add another input, try broadcasting, and try again with more fees if `bitcoind` rejects it (or if we still don't see our transaction confirming).\r\nSo we're already treating RBF as a black box, and don't care about making it \"more\" of a black box.\r\n\r\n> Are there usage patterns for wallets or other protocols that would be fundamentally harmed by cluster size limits? Do we know what values would be acceptable or what values would be insufficient?\r\n\r\nMost L2 contracts will only start once the \"contract transaction\" (channel funding transaction in the lightning case) is confirmed.\r\nIn the lightning case, the cluster we generate currently consists of:\r\n\r\n- a commitment transaction (no unconfirmed ancestors)\r\n- a CPFP child for that commitment transaction (which may bring its set of unconfirmed ancestors)\r\n\r\nThe commitment transaction may be as large as `MAX_STANDARD_TX_WEIGHT`, so we want the cluster size to allow that (but it's obvious that the limit needs to be higher than that anyway). Since L2 contracts generate trees of transactions, I believe they should always be able to get away with confirming each level of that tree independently, which means they only ever need one transaction and one CPFP child, nothing more (but we can probably make those contracts more fee-efficient if the cluster size allows more than that). @instagibbs does that fundamentally change with Eltoo? I guess not.\r\n\r\nThe CPFP child brings its own cluster with it, so the larger the cluster size limit is, the more of our utxos we're able to use to create our CPFP transaction. The limits chosen here will have to be arbitrary, and wallets will simply have to make sure their utxos confirm to be able to use them for CPFP. This is already the case because of the descendant limits, so it shouldn't be fundamentally more harmful?\r\n",
      "created_at" : "2023-05-17T15:34:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551620933",
      "id" : 1551620933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585ce9tF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551620933/reactions"
      },
      "updated_at" : "2023-05-17T15:34:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551620933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> does that fundamentally change with Eltoo? I guess not.\r\n\r\nNo, all pin-avoiding designs I've thought of are 0-fee parent, CPFP-ing child.",
      "created_at" : "2023-05-17T17:10:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551776409",
      "id" : 1551776409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cfjqZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551776409/reactions"
      },
      "updated_at" : "2023-05-17T17:10:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551776409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The commitment transaction may be as large as `MAX_STANDARD_TX_WEIGHT`, so we want the cluster size to allow that (but it's obvious that the limit needs to be higher than that anyway).\r\n\r\n`MAX_STANDARD_TX_WEIGHT` is 400,000 weight units. If 65 byte transactions are (made) standard, and assuming those are at least 100 weight units, that's a maximum of ~4000 per cluster. My understanding was that doing an optimal sort for a given cluster, requires it to have a few dozen transactions. Though less than perfect sort may be fine. 1/10th of a block sounds a fairly big though.",
      "created_at" : "2023-05-17T19:59:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551970982",
      "id" : 1551970982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cgTKm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551970982/reactions"
      },
      "updated_at" : "2023-05-17T19:59:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551970982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  My understanding was that doing an optimal sort for a given cluster, requires it to have a few dozen transactions. \r\n\r\nIt's the opposite really. A cluster with 1 transaction is always optimally ordered (because only one order exists). The bigger a cluster (in number of transactions) is, the harder it is to find the optimal ordering. Up to 15-20 transactions we may be able to find it using an exponential-time algorithm; above that we need to either just use the ancestor-feerate based order, or some heuristical algorithm that may approach optimality.",
      "created_at" : "2023-05-17T20:02:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551974824",
      "id" : 1551974824,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cgUGo",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551974824/reactions"
      },
      "updated_at" : "2023-05-17T20:03:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551974824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@t-bast Thanks for your comments!\r\n\r\n> The commitment transaction may be as large as MAX_STANDARD_TX_WEIGHT, so we want the cluster size to allow that (but it's obvious that the limit needs to be higher than that anyway).\r\n\r\nFYI -- I was thinking that the easiest approach here would be if we can cap cluster vbytes to the ancestor/descendant size limits of 101kvB, or just above the max standard transaction weight.  This would have the benefit of not making block construction any less efficient (due to the knapsack problem that occurs as we approach the end of a block).\r\n\r\n> The limits chosen here will have to be arbitrary, and wallets will simply have to make sure their utxos confirm to be able to use them for CPFP. This is already the case because of the descendant limits, so it shouldn't be fundamentally more harmful?\r\n\r\nYes, the comparison to descendant limits is appropriate I think -- my belief is that any use case that would be impacted by a limit on the number of transactions in the same cluster would also have been affected by the descendant count limit, which is outside a single user's control (ie if you're trying to spend the output of an unconfirmed transaction, unless the transaction's outputs are all under your control, you can't be sure that someone else hasn't chained a bunch of transactions to bump up against the descendant limit and prevent your spend from being relayed). So fundamentally I don't _think_ a limit on number of transactions in a cluster ought to be raising any issues that don't already exist...",
      "created_at" : "2023-05-17T20:02:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551974872",
      "id" : 1551974872,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cgUHY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551974872/reactions"
      },
      "updated_at" : "2023-05-17T20:02:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551974872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Having the number of allowed evictions be a function of the descendant limit makes replacements easier to reason about from a pinning perspective. e.g., limit of 25/100 means that you can batch CPFP 4 transactions safely, ignoring other pinning vectors(we'll get around to those!). Another smaller point is currently people opting into larger descendant limits for whatever reason can cause this to fall to possibly 0. i.e. a chain of 101 txns that can't have eldest tx evicted.\r\n\r\n> \"cluster-sibling eviction\" algorithm that is DoS-resistant and would help reduce the downsides of cluster size limits?\r\n\r\ngoing to call this \"cluster limit pinning\" to parallel package limit pinning, which is already a pinning problem today, which is what Ephemeral Anchors are intended to solve. Will think on this...",
      "created_at" : "2023-05-18T19:50:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1553565821",
      "id" : 1553565821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cmYh9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553565821/reactions"
      },
      "updated_at" : "2023-05-18T19:57:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553565821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Having the number of allowed evictions be a function of the descendant limit makes replacements easier to reason about from a pinning perspective. e.g., limit of 25/100 means that you can batch CPFP 4 transactions safely, ignoring other pinning vectors(we'll get around to those!). Another smaller point is currently people opting into larger descendant limits for whatever reason can cause this to fall to possibly 0. i.e. a chain of 101 txns that can't have eldest tx evicted.\r\n\r\nThanks for mentioning this.  If indeed the only concern with a lot of evictions is due to the number of clusters that would need to be re-sorted, then we could either have the limit be a maximum number of **direct** conflicts (since indirect conflicts are always in the same cluster as one of the direct conflicts), or we could just have the limit explicitly be in terms of the number of **clusters** that would be affected, rather than the number of transactions that are in conflict.  \r\n\r\nRight now I'm imagining that the descendant limits (on count and vbytes) would go away entirely.  I tend to think that we should continue to enforce that no transaction have more than 101kvb of size-with-ancestors (either explicitly, or as a consequence of a maximum cluster size if that gets set to the same value).  It's unclear to me whether we should retain the ancestor count limit, because I think it might have an impact on the runtime of the ancestor-feerate-based linearization algorithm that I suspect will be part of the initial implementation, so this will be something to revisit in the future.",
      "created_at" : "2023-05-18T21:26:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1553666857",
      "id" : 1553666857,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cmxMp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553666857/reactions"
      },
      "updated_at" : "2023-05-18T21:26:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553666857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Either conflict limit sounds good to me. N direct conflicts or N clusters has the same result: Someone trying to avoid \"rule#5\" type pinning will only try to CPFP up to N transactions, I believe.\r\n\r\nIt also means there's a fundamental tension here between CPFP/RBF strategies and how large we allow clusters to be. Smaller clusters means we can allow more clusters to be modified, likely?",
      "created_at" : "2023-05-19T14:51:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1554708843",
      "id" : 1554708843,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cqvlr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554708843/reactions"
      },
      "updated_at" : "2023-05-19T14:57:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554708843",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > My understanding was that doing an optimal sort for a given cluster, requires it to have a few dozen transactions.\r\n> \r\n> It's the opposite really. [...] Up to 15-20 transactions we may be able to find it using an exponential-time algorithm; above that [...]\r\n\r\nI meant to say \"no more than a few dozen transactions\".\r\n\r\nSo I guess we're ok with falling back to less than optimal sorting _within_ each cluster?",
      "created_at" : "2023-05-20T07:40:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1555806652",
      "id" : 1555806652,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585cu7m8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1555806652/reactions"
      },
      "updated_at" : "2023-05-20T07:40:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1555806652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From my understanding of the proposal, there is an intuition of aligning mining (i.e the maximum fees in a block template)\r\nand transactions evicted from our local mempools. The proposed changes goals would be to make the transactions that would be the last ones selected by our mining algorithm, the first ones to be removed from the mempool based e.g on an ancestor-feerate-based mining algorithm.\r\n\r\nWhile this symmetrization of block template construction and mempool eviction should work in light of today mining algorithms, I don't know if this will bind in considerations of other changes in the ecosystem. In the past, there have been [discussion](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019846.html) on the mailing list if our RBF algorithm was the most income-maximising in face of different transactions traffic. Namely, high-feerate evictated/replaced chunks of transactions could be kept in a buffer of transactions ordered by their last descendants outputs. When a new package comes in, in case of missing parents outputs, a lookup is realized in the buffer to see if the package attached to evicted/replaced chunks ancestor-feerate is above the cluster spending the same utxo or above the bottom mempool chunks.\r\n\r\nWhile this type of broadcast pattern can seem odd today, as new chunks should have been broadcast by the same transaction issuer, and therefore the fee bidding monotonically increasing, this assumption might not be true with more deployment of multi-party applications or contracting protocols, where counterparties are competing for the spend of utxos with packages offering different absolutes fees/feerates (e.g Lightning commitment transactions). Further, you might have\r\nnew flows where the first component of the package is shared (e.g a [dual-funding/splicing](https://bitcoinops.org/en/topics/splicing/) between N parties) though where each party attaches a different CPFP due to asymmetries in liquidity preferences.\r\n\r\nBased on cluster pattern analysis, future mining algorithms might attach a prediction weight to each chunk part of the\r\nevicted/replaced chunks and decide which to keep in the space-limited buffer in case of eviction needed there too. Note,\r\nwhile the issue can be alleviated by bumping the size of both your mempool and hypothetical future replacement buffers\r\n(i.e `-maxmempool`), there will still be a need to efficiently traverse them, as you need to provide one block template to your mining devices due to the probabilistic nature of mining.\r\n\r\nSo do we have a separation of concerns between the proposed total ordering and a future hypothetical replacement cache\r\noptimizing block template construction, or turning the question differently is the proposed total ordering approach going\r\nto work well for mining algorithms optimizations buffering replaced transactions ?\r\n\r\nThere is a second line of thinking about this proposal, namely the workload in term of CPU cycles and what is the worst-case\r\nworkload we're designing for in term of incoming transaction-relay traffic. I think the main risk we're aiming to hedge against\r\nis huge payload of transactions being injected on a miner mempool forcing computationally-expensive replacement or eviction traversals on the clusters and therefore delaying the construction of a block template, a latency sensitive operation in the mining arm race.\r\n\r\nI think we're certaintly bounded on the transaction-relay download limits here, i.e `MAX_PEER_TX_ANNOUNCEMENTS`,\r\n`MAX_PEER_TX_REQUEST_IN_FLIGHT` and the default number of transaction-relay peers (though we can probably reason by reduction to a single peer for the purpose of DoS analysis) and should we adopt them for the worst-case perfomance\r\nanalysis of all the mempool operations ? \r\n\r\nBeyond transaction-relay performance heavy events to consider, I think we have to encompass block-relay related events such as shallow reorgs.",
      "created_at" : "2023-06-01T19:21:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1572647968",
      "id" : 1572647968,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585dvLQg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572647968/reactions"
      },
      "updated_at" : "2023-06-01T19:23:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572647968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Namely, high-feerate evictated/replaced chunks of transactions could be kept in a buffer of transactions ordered by their last descendants outputs. When a new package comes in, in case of missing parents outputs, a lookup is realized in the buffer to see if the package attached to evicted/replaced chunks ancestor-feerate is above the cluster spending the same utxo or above the bottom mempool chunks.\r\n\r\n[snip additional comments related to this]\r\n\r\nIf I'm understanding your post correctly, you're asking whether the mempool design I'm proposing is consistent with having some sort of external-to-the-mempool cache of transactions?  That really sounds like a p2p optimization and not a mempool issue, and I think there are a lot of questions you'd have to answer in designing such a cache, including how to make it DoS resistant so that an adversary can't overrun it, but fundamentally I don't think anything I'm proposing would make designing such a thing any harder than our current mempool design does.  Really I think what you're describing is orthogonal to how the mempool operates.\r\n\r\nOverall the new mempool design should make it easier to reason about RBF, so that in situations where an RBF attempt is competing with a CPFP attempt we'll do the right thing more often.  Moreover I think a total mempool ordering will allow for future new policy rules that could make this even better in the future, as (unlike today) we might be able to consider rules in  that would involve where a transaction sorts in the global mempool as a condition for transaction acceptance -- something which is computationally impractical to use in today's mempool design.  (Such a rule has been proposed in the past as a way to potentially eliminate RBF-pinning while still permitting legitimate CPFP attempts.)\r\n\r\n> There is a second line of thinking about this proposal, namely the workload in term of CPU cycles and what is the worst-case workload we're designing for in term of incoming transaction-relay traffic. \r\n\r\nYes, I'm definitely concerned with CPU usage required to sort a single cluster, and coming up with policy limits that ensure this is a fast-enough operation.  I don't think the concern will be with transaction acceptance or block construction, which should be very fast in this design, but instead the concern will be around how expensive it is to update the mempool after a block is found (as that can cause thousands of clusters to be re-sorted, in the worst case).  However, as our primary goal when a block is found is to update the mempool in such a way that a new block template can be generated as quickly as possible, I think there are optimizations we can make that take advantage of this new design, even before we've finished fully updating the mempool and re-sorting all the affected clusters.  (One possible idea: we might pre-compute 2 or 3 blocks worth of transactions, instead of just 1, when getblocktemplate is called.  Then, when a block is found, we only need to remove conflicts and confirmed transactions from our precomputed blocks in order to be able to return a reasonably good block template while the mempool finishes re-sorting.)\r\n\r\nI think similar optimizations are possible after a re-org; in theory we could defer fully re-sorting clusters when transactions are added back from disconnected blocks and instead do a simple topological sort or merge-sort of newly created clusters in order to optimize for producing a valid block as quickly as possible.  Note also that the current mempool is already pretty slow to update during a reorg, due to the caching of ancestor and descendant state, which I believe we'll be able to completely remove in the new design (resulting in improvements to CPU usage, memory, and -- perhaps best of all -- code simplification!).",
      "created_at" : "2023-06-01T20:23:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1572728184",
      "id" : 1572728184,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585dve14",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572728184/reactions"
      },
      "updated_at" : "2023-06-01T20:23:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572728184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If I'm understanding your post correctly, you're asking whether the mempool design I'm proposing is consistent with having some sort of external-to-the-mempool cache of transactions? That really sounds like a p2p optimization and not a mempool issue, and I think there are a lot of questions you'd have to answer in designing such a cache, including how to make it DoS resistant so that an adversary can't overrun it, but fundamentally I don't think anything I'm proposing would make designing such a thing any harder than our current mempool design does. Really I think what you're describing is orthogonal to how the mempool operates.\r\n\r\nYes the idea is to have some external-to-the-mempool cache of transactions to a) connect high-fee child to an evicted/replaced parent and b) resurrect this chain of transaction in the mempool if it constitutes a better ancestor feerate package than the current chain of transaction spending a UTXO/TXO. In light of collaborative transactions constructions between LN nodes, where participants can either RBF or CPFP in an asynchronous  fashion, I think this propagation pattern will become more likely. An optimizing miner will seek to maintain such external-to-the-mempool caches to build the highest income-return block template.\r\n\r\nI agree that such cache design will have to be DoS resistant (in the same way than orphans buffer has to be) though I maintain it's a mempool issue as for each high-fee child discovered, you'll  have to traverse some mempool subgraphs to evaluate if it's a better candidate to \"resurrect\" in the mempool. This ressurection could trigger the generation of a new block template to downstream miners if the template feerate is more compelling. As long as the performance is roughly the same for all historic class of workload there shouldn't be detrimental impacts on miner operations, discussions in #27854 and related to Stratum V2 can be informative in that sense.\r\n\r\n> Overall the new mempool design should make it easier to reason about RBF, so that in situations where an RBF attempt is competing with a CPFP attempt we'll do the right thing more often. Moreover I think a total mempool ordering will allow for future new policy rules that could make this even better in the future, as (unlike today) we might be able to consider rules in that would involve where a transaction sorts in the global mempool as a condition for transaction acceptance -- something which is computationally impractical to use in today's mempool design. (Such a rule has been proposed in the past as a way to potentially eliminate RBF-pinning while still permitting legitimate CPFP attempts.)\r\n\r\nYes if such total mempool ordering enables to give the transaction sort in the global mempool feerate groups this information could be yield by the fee-estimator directly (and consumed by L2 nodes), even beyond any broadcast/ replacement attempt. If such feerate groups evolution can be tracked over time this would be very beneficial for Lightning liquidity management engine (where the question is not \"what is the feerate to include a transaction *now*\" rather \"what will be the feerate group for confirmation X blocks from *now* with indices of prediction accuracy\" therefore opening/closing channels efficiently). If this direction is followed, I think this is okay if the RBF rules become more a \"black box\" if we can have the \"chunk\" feerate yield by the mempool interface if we give it the non-finalized package we aim to broadcast ? This would simplify greatly Lightning transaction broadcast backends.\r\n\r\n> One possible idea: we might pre-compute 2 or 3 blocks worth of transactions, instead of just 1, when getblocktemplate is called. Then, when a block is found, we only need to remove conflicts and confirmed transactions from our preco> mputed blocks in order to be able to return a reasonably good block template while the mempool finishes re-sorting.)\r\n\r\nYes I think this optimization is in line with upgrades brought by Stratum V2, where speculated non-empty blocks can be send in advances to client (`NewMiningJob` with `min_ntime` unset). There is still the implications on how good pre-computation will be in face of \"super\" high fee transactions provoking a re-computation of the 2 or 3 cached blocks worth of transactions. The DoS nightmare would be some combination of transactions acceptance and re-orgs knocking out the topological re-sorting for a while that can be cheaply triggered by an adversary. Generally, I think in the future cluster computation will be not only a critical-path for block template construction though also for Lightning nodes liquidity allocation, where you might evaluate your ~1000 opened channels and pending broadcasts against pending mempool clusters, and decide if you force-close channels/merge broadcast packages.\r\n\r\n--------------\r\n\r\nLooking forward when there is a draft implementation ready to look on. This would make the design proposal review more concrete, especially to evaluate the potential impacts on Lightning/L2 transaction backends!",
      "created_at" : "2023-06-14T01:38:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1590309442",
      "id" : 1590309442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585eyjJC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1590309442/reactions"
      },
      "updated_at" : "2023-06-14T01:38:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1590309442",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Please help me figure out why this transaction is not confirmed?8f62acf0f0ddc3e38db2e8ec2755f4e54aa5bf616d685e2f3361155fc9d44125",
      "created_at" : "2024-01-30T20:15:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1917817576",
      "id" : 1917817576,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
      "node_id" : "IC_kwDOABII585yT5Lo",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1917817576/reactions"
      },
      "updated_at" : "2024-01-30T20:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1917817576",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/158217006?v=4",
         "events_url" : "https://api.github.com/users/Wwwwwwuuuuu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Wwwwwwuuuuu/followers",
         "following_url" : "https://api.github.com/users/Wwwwwwuuuuu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Wwwwwwuuuuu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Wwwwwwuuuuu",
         "id" : 158217006,
         "login" : "Wwwwwwuuuuu",
         "node_id" : "U_kgDOCW4zLg",
         "organizations_url" : "https://api.github.com/users/Wwwwwwuuuuu/orgs",
         "received_events_url" : "https://api.github.com/users/Wwwwwwuuuuu/received_events",
         "repos_url" : "https://api.github.com/users/Wwwwwwuuuuu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Wwwwwwuuuuu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Wwwwwwuuuuu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Wwwwwwuuuuu"
      }
   }
]
