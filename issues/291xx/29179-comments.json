[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29179).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [furszy](https://github.com/bitcoin/bitcoin/pull/29179#pullrequestreview-1818866732), [achow101](https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1894209088) |\n| Stale ACK | [Eunovo](https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1885834450), [stickies-v](https://github.com/bitcoin/bitcoin/pull/29179#pullrequestreview-1818404985) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2024-01-04T16:26:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1877390756",
      "id" : 1877390756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585v5rWk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877390756/reactions"
      },
      "updated_at" : "2024-01-16T17:38:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877390756",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Huh, looks like this behavior has been broken since it was introduced in #15652",
      "created_at" : "2024-01-04T23:02:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1877879833",
      "id" : 1877879833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585v7iwZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877879833/reactions"
      },
      "updated_at" : "2024-01-04T23:02:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877879833",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 1a52ca7619eeb1baafa5a32b364381126862b29d",
      "created_at" : "2024-01-04T23:16:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1877892122",
      "id" : 1877892122,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585v7lwa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877892122/reactions"
      },
      "updated_at" : "2024-01-04T23:16:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877892122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1442808773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1442808773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could be a bit more efficient by only calling and iterating over `listunspent` once (does not test for txid collisions, but I don't think we need that?)\r\n\r\n<details>\r\n<summary>git diff on 1a52ca7619</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_import_rescan.py b/test/functional/wallet_import_rescan.py\r\nindex 1abc9c0c79..928455c355 100755\r\n--- a/test/functional/wallet_import_rescan.py\r\n+++ b/test/functional/wallet_import_rescan.py\r\n@@ -286,13 +286,12 @@ class ImportRescanTest(BitcoinTestFramework):\r\n         # itself and the other half to unspendable/fees. This transaction is only recognizable as\r\n         # belonging to this wallet when the inputs are known. That means the rescan must process the\r\n         # parent before the child.\r\n+        unspent_txid_map = {txin[\"txid\"] : txin for txin in self.nodes[1].listunspent()}\r\n         for variant in mempool_variants:\r\n-            inputs_to_spend = [txin for txin in self.nodes[1].listunspent() if txin[\"txid\"] == variant.initial_txid]\r\n-            assert_equal(len(inputs_to_spend), 1)\r\n             # Send full amount, subtracting fee from outputs, to ensure no change is created.\r\n             child = self.nodes[1].send(\r\n                 add_to_wallet=False,\r\n-                inputs=inputs_to_spend,\r\n+                inputs=[unspent_txid_map[variant.initial_txid]],\r\n                 outputs=[{ADDRESS_BCRT1_UNSPENDABLE : variant.initial_amount}],\r\n                 subtract_fee_from_outputs=[0]\r\n             )\r\n\r\n```\r\n</details>\r\n",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T12:18:30Z",
      "diff_hunk" : "@@ -267,14 +271,45 @@ def run_test(self):\n                 address_type=variant.address_type.value,\n             ))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = get_rand_amount()\n+            variant.initial_amount = get_rand_amount() * 2\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n             variant.confirmation_height = 0\n             variant.timestamp = timestamp\n \n+        # Mine a block so these parents are confirmed\n+        assert_equal(len(self.nodes[0].getrawmempool()), len(mempool_variants))\n+        self.sync_mempools()\n+        block_to_disconnect = self.generate(self.nodes[0], 1)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+\n+        # For each variant, create an unconfirmed child transaction from initial_txid, sending half of the balance to\n+        # itself and the other half to unspendable/fees. This transaction is only recognizable as\n+        # belonging to this wallet when the inputs are known. That means the rescan must process the\n+        # parent before the child.\n+        for variant in mempool_variants:\n+            inputs_to_spend = [txin for txin in self.nodes[1].listunspent() if txin[\"txid\"] == variant.initial_txid]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1442808773",
      "id" : 1442808773,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585V_4PF",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 290,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : null,
      "pull_request_review_id" : 1805846181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1442808773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T17:25:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1442808773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1442918332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1442918332"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: makes more sense to unpack here imo\r\n```suggestion\r\n        block_to_disconnect = self.generate(self.nodes[0], 1)[0]\r\n```",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T13:55:03Z",
      "diff_hunk" : "@@ -267,14 +271,45 @@ def run_test(self):\n                 address_type=variant.address_type.value,\n             ))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = get_rand_amount()\n+            variant.initial_amount = get_rand_amount() * 2\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n             variant.confirmation_height = 0\n             variant.timestamp = timestamp\n \n+        # Mine a block so these parents are confirmed\n+        assert_equal(len(self.nodes[0].getrawmempool()), len(mempool_variants))\n+        self.sync_mempools()\n+        block_to_disconnect = self.generate(self.nodes[0], 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1442918332",
      "id" : 1442918332,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WAS-8",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 282,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : null,
      "pull_request_review_id" : 1805846181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1442918332/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T17:25:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1442918332",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443052612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443052612"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I don't think we're actually checking the confirmations values, so for future maintenance, would this be more straightforward?\r\n```suggestion\r\n                variant.node.gettransaction(variant.initial_txid)  # raises if tx wasn't rescanned\r\n                variant.node.gettransaction(variant.child_txid)    # raises if tx wasn't rescanned\r\n```",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T16:06:26Z",
      "diff_hunk" : "@@ -283,9 +318,11 @@ def run_test(self):\n             variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n             variant.do_import(variant.timestamp)\n             if expect_rescan:\n-                variant.expected_balance = variant.initial_amount\n+                # Ensure both transactions were rescanned\n+                assert_equal(variant.node.gettransaction(variant.initial_txid)['confirmations'], 0)\n+                assert_equal(variant.node.gettransaction(variant.child_txid)['confirmations'], 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443052612",
      "id" : 1443052612,
      "line" : 322,
      "node_id" : "PRRC_kwDOABII585WAzxE",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 322,
      "original_position" : 85,
      "original_start_line" : 322,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : 98,
      "pull_request_review_id" : 1805846181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443052612/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 321,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-05T17:25:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443052612",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443144137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443144137"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It doesn't seem like we're actually testing the expected balance at any point, rather the amount received, but I may be missing nuance. Would this diff make sense? I don't like adding an extra parameter to an already long function for something so specific, if we can avoid it.\r\n\r\n<details>\r\n<summary>git diff on 1a52ca7619</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_import_rescan.py b/test/functional/wallet_import_rescan.py\r\nindex 1abc9c0c79..fa9f43f66c 100755\r\n--- a/test/functional/wallet_import_rescan.py\r\n+++ b/test/functional/wallet_import_rescan.py\r\n@@ -82,7 +82,7 @@ class Variant(collections.namedtuple(\"Variant\", \"call data address_type rescan p\r\n             )\r\n             assert_equal(response, [{\"success\": True}])\r\n \r\n-    def check(self, txid=None, amount=None, confirmation_height=None, amount_is_balance=True):\r\n+    def check(self, txid=None, amount=None, confirmation_height=None):\r\n         \"\"\"Verify that listtransactions/listreceivedbyaddress return expected values.\"\"\"\r\n \r\n         txs = self.node.listtransactions(label=self.label, count=10000, include_watchonly=True)\r\n@@ -112,8 +112,7 @@ class Variant(collections.namedtuple(\"Variant\", \"call data address_type rescan p\r\n \r\n             address, = [ad for ad in addresses if txid in ad[\"txids\"]]\r\n             assert_equal(address[\"address\"], self.address[\"address\"])\r\n-            if amount_is_balance:\r\n-                assert_equal(address[\"amount\"], self.expected_balance)\r\n+            assert_equal(address[\"amount\"], self.amount_received)\r\n             assert_equal(address[\"confirmations\"], confirmations)\r\n             # Verify the transaction is correctly marked watchonly depending on\r\n             # whether the transaction pays to an imported public key or\r\n@@ -227,11 +226,11 @@ class ImportRescanTest(BitcoinTestFramework):\r\n             variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\r\n             variant.do_import(variant.timestamp)\r\n             if expect_rescan:\r\n-                variant.expected_balance = variant.initial_amount\r\n+                variant.amount_received = variant.initial_amount\r\n                 variant.expected_txs = 1\r\n                 variant.check(variant.initial_txid, variant.initial_amount, variant.confirmation_height)\r\n             else:\r\n-                variant.expected_balance = 0\r\n+                variant.amount_received = 0\r\n                 variant.expected_txs = 0\r\n                 variant.check()\r\n \r\n@@ -251,7 +250,7 @@ class ImportRescanTest(BitcoinTestFramework):\r\n         # Check the latest results from getbalance and listtransactions.\r\n         for variant in IMPORT_VARIANTS:\r\n             self.log.info('Run check for variant {}'.format(variant))\r\n-            variant.expected_balance += variant.sent_amount\r\n+            variant.amount_received += variant.sent_amount\r\n             variant.expected_txs += 1\r\n             variant.check(variant.sent_txid, variant.sent_amount, variant.confirmation_height)\r\n \r\n@@ -297,7 +296,6 @@ class ImportRescanTest(BitcoinTestFramework):\r\n                 subtract_fee_from_outputs=[0]\r\n             )\r\n             variant.child_txid = child[\"txid\"]\r\n-            variant.expected_balance = 0\r\n             self.nodes[0].sendrawtransaction(child[\"hex\"])\r\n \r\n         # Mempools should contain the child transactions for each variant.\r\n@@ -321,10 +319,11 @@ class ImportRescanTest(BitcoinTestFramework):\r\n                 # Ensure both transactions were rescanned\r\n                 assert_equal(variant.node.gettransaction(variant.initial_txid)['confirmations'], 0)\r\n                 assert_equal(variant.node.gettransaction(variant.child_txid)['confirmations'], 0)\r\n+                variant.amount_received = variant.initial_amount\r\n                 variant.expected_txs = 1\r\n-                variant.check(variant.initial_txid, variant.initial_amount, 0, False)\r\n+                variant.check(variant.initial_txid, variant.initial_amount, 0)\r\n             else:\r\n-                variant.expected_balance = 0\r\n+                variant.amount_received = 0\r\n                 variant.expected_txs = 0\r\n                 variant.check()\r\n \r\n\r\n```\r\n</details>\r\n",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T17:19:11Z",
      "diff_hunk" : "@@ -79,7 +82,7 @@ def do_import(self, timestamp):\n             )\n             assert_equal(response, [{\"success\": True}])\n \n-    def check(self, txid=None, amount=None, confirmation_height=None):\n+    def check(self, txid=None, amount=None, confirmation_height=None, amount_is_balance=True):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443144137",
      "id" : 1443144137,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WBKHJ",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 85,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : null,
      "pull_request_review_id" : 1805846181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443144137/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T17:25:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443144137",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443208149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, taken.",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T18:11:55Z",
      "diff_hunk" : "@@ -79,7 +82,7 @@ def do_import(self, timestamp):\n             )\n             assert_equal(response, [{\"success\": True}])\n \n-    def check(self, txid=None, amount=None, confirmation_height=None):\n+    def check(self, txid=None, amount=None, confirmation_height=None, amount_is_balance=True):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443208149",
      "id" : 1443208149,
      "in_reply_to_id" : 1443144137,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WBZvV",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 85,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : null,
      "pull_request_review_id" : 1806568472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208149/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T18:14:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443208232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree, taken",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T18:12:00Z",
      "diff_hunk" : "@@ -267,14 +271,45 @@ def run_test(self):\n                 address_type=variant.address_type.value,\n             ))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = get_rand_amount()\n+            variant.initial_amount = get_rand_amount() * 2\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n             variant.confirmation_height = 0\n             variant.timestamp = timestamp\n \n+        # Mine a block so these parents are confirmed\n+        assert_equal(len(self.nodes[0].getrawmempool()), len(mempool_variants))\n+        self.sync_mempools()\n+        block_to_disconnect = self.generate(self.nodes[0], 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443208232",
      "id" : 1443208232,
      "in_reply_to_id" : 1442918332,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WBZwo",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 282,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : null,
      "pull_request_review_id" : 1806568472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208232/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T18:14:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443208305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T18:12:05Z",
      "diff_hunk" : "@@ -267,14 +271,45 @@ def run_test(self):\n                 address_type=variant.address_type.value,\n             ))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = get_rand_amount()\n+            variant.initial_amount = get_rand_amount() * 2\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n             variant.confirmation_height = 0\n             variant.timestamp = timestamp\n \n+        # Mine a block so these parents are confirmed\n+        assert_equal(len(self.nodes[0].getrawmempool()), len(mempool_variants))\n+        self.sync_mempools()\n+        block_to_disconnect = self.generate(self.nodes[0], 1)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+\n+        # For each variant, create an unconfirmed child transaction from initial_txid, sending half of the balance to\n+        # itself and the other half to unspendable/fees. This transaction is only recognizable as\n+        # belonging to this wallet when the inputs are known. That means the rescan must process the\n+        # parent before the child.\n+        for variant in mempool_variants:\n+            inputs_to_spend = [txin for txin in self.nodes[1].listunspent() if txin[\"txid\"] == variant.initial_txid]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443208305",
      "id" : 1443208305,
      "in_reply_to_id" : 1442808773,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WBZxx",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 290,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : null,
      "pull_request_review_id" : 1806568472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T18:14:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443208305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443209504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443209504"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a similar comment.",
      "commit_id" : "aa7eda33c35a40760cd9ad26fed02c27f4127e1e",
      "created_at" : "2024-01-05T18:13:40Z",
      "diff_hunk" : "@@ -283,9 +318,11 @@ def run_test(self):\n             variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n             variant.do_import(variant.timestamp)\n             if expect_rescan:\n-                variant.expected_balance = variant.initial_amount\n+                # Ensure both transactions were rescanned\n+                assert_equal(variant.node.gettransaction(variant.initial_txid)['confirmations'], 0)\n+                assert_equal(variant.node.gettransaction(variant.child_txid)['confirmations'], 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1443209504",
      "id" : 1443209504,
      "in_reply_to_id" : 1443052612,
      "line" : 322,
      "node_id" : "PRRC_kwDOABII585WBaEg",
      "original_commit_id" : "1a52ca7619eeb1baafa5a32b364381126862b29d",
      "original_line" : 322,
      "original_position" : 85,
      "original_start_line" : 322,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : 98,
      "pull_request_review_id" : 1806568472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443209504/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 321,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-05T18:14:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443209504",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Pre-review note: have you considered that wallet_import_rescan.py is a legacy wallet only test?\r\n\r\nAh good point. ~I added a commit to run this test with descriptors as I couldn't find a reason why we don't do this. Lmk if this seems sufficient / ok to do?~ EDIT: oh descriptors can't use `dumpprivkey`, nvm",
      "created_at" : "2024-01-08T08:46:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1880584066",
      "id" : 1880584066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585wF2-C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880584066/reactions"
      },
      "updated_at" : "2024-01-08T09:18:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880584066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm working on adding a descriptors version of this test so we can have both.",
      "created_at" : "2024-01-09T09:04:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1882660532",
      "id" : 1882660532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585wNx60",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882660532/reactions"
      },
      "updated_at" : "2024-01-09T09:04:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882660532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've added another commit which has pretty much the same test but using descriptor wallets i.e. a rescan through `importdescriptors`. Just like the other test, you can reproduce the bug by cherry-picking from #29019. You should get `JSONRPCEXCEPTION: Invalid or non-wallet transaction id (-5)` for the child tx.",
      "created_at" : "2024-01-09T10:39:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1882825009",
      "id" : 1882825009,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585wOaEx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882825009/reactions"
      },
      "updated_at" : "2024-01-09T10:39:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882825009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1445998556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445998556"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "grammar nit\r\n```suggestion\r\n        # Node which we will use to send funds to the wallet and mine blocks\r\n```",
      "commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "created_at" : "2024-01-09T11:56:38Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1445998556",
      "id" : 1445998556,
      "line" : 31,
      "node_id" : "PRRC_kwDOABII585WMC_c",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 31,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : 31,
      "pull_request_review_id" : 1811002749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445998556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T12:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445998556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446005072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446005072"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is there a reason it's 110 and not `COINBASE_MATURITY`?",
      "commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "created_at" : "2024-01-09T12:00:26Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, 110)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446005072",
      "id" : 1446005072,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII585WMElQ",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : 41,
      "pull_request_review_id" : 1811002749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446005072/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T12:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446005072",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446011145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446011145"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I still think it's unnecessarily confusing for (current and future) reviewers to figure out why confirmations needs to equal 0 when afaiu this is completely unrelated to the test. I would either remove the value comparison or specifically state in the docs that we don't care about the `confirmations` value, just that the response is a JSON object with a field we recognize?",
      "commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "created_at" : "2024-01-09T12:06:37Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, 110)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # descriptors_to_import.append(item)\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})\n+        import_wallet_node.createwallet(wallet_name=\"w1\", disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = import_wallet_node.get_wallet_rpc(\"w1\")\n+        w1.importdescriptors(descriptors_to_import)\n+\n+        self.log.info(\"Check that the importing node has properly rescanned mempool transactions\")\n+        # Check that parent address is correctly determined as ismine\n+        test_address(w1, parent_address, solvable=True, ismine=True)\n+        # This would raise a JSONRPCError if the transactions were not identified as belonging to the wallet.\n+        assert_equal(w1.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 0)\n+        assert_equal(w1.gettransaction(tx_child_unconfirmed_sweep[\"txid\"])[\"confirmations\"], 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446011145",
      "id" : 1446011145,
      "line" : 94,
      "node_id" : "PRRC_kwDOABII585WMGEJ",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 94,
      "original_position" : 94,
      "original_start_line" : 93,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : 94,
      "pull_request_review_id" : 1811002749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446011145/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 93,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T12:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446011145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446161874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446161874"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We are testing that they are marked as in-mempool wallet transactions. If the reorg didn't happen, the value would be 1.",
      "commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "created_at" : "2024-01-09T14:30:20Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, 110)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # descriptors_to_import.append(item)\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})\n+        import_wallet_node.createwallet(wallet_name=\"w1\", disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = import_wallet_node.get_wallet_rpc(\"w1\")\n+        w1.importdescriptors(descriptors_to_import)\n+\n+        self.log.info(\"Check that the importing node has properly rescanned mempool transactions\")\n+        # Check that parent address is correctly determined as ismine\n+        test_address(w1, parent_address, solvable=True, ismine=True)\n+        # This would raise a JSONRPCError if the transactions were not identified as belonging to the wallet.\n+        assert_equal(w1.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 0)\n+        assert_equal(w1.gettransaction(tx_child_unconfirmed_sweep[\"txid\"])[\"confirmations\"], 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446161874",
      "id" : 1446161874,
      "in_reply_to_id" : 1446011145,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII585WMq3S",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 95,
      "original_position" : 94,
      "original_start_line" : 93,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : 95,
      "pull_request_review_id" : 1811273879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446161874/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 94,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T15:54:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446161874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is there a reason both legacy and descriptor wallet tests aren't in the new wallet_rescan_unconfirmed test, though? That seems like a more logical grouping with less duplication?\r\n\r\nThey use different RPCs. I think it's more readable for them to be separate (having most the test as `if is_sqlite_compiled() elif is_bdb_compiled()` is pretty annoying). I think it's much easier to delete legacy without touching the descriptor one if they're in different files.",
      "created_at" : "2024-01-09T14:30:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1883154232",
      "id" : 1883154232,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585wPqc4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883154232/reactions"
      },
      "updated_at" : "2024-01-09T14:31:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883154232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446269441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446269441"
         }
      },
      "author_association" : "MEMBER",
      "body" : "changed",
      "commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "created_at" : "2024-01-09T15:48:42Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, 110)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446269441",
      "id" : 1446269441,
      "in_reply_to_id" : 1446005072,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNFIB",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1811449910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446269441/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T15:48:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446269441",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446269555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446269555"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "created_at" : "2024-01-09T15:48:45Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1446269555",
      "id" : 1446269555,
      "in_reply_to_id" : 1445998556,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNFJz",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 31,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1811450059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446269555/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T15:48:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446269555",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Tested ACK [d9df438](https://github.com/bitcoin/bitcoin/pull/29179/commits/d9df438c6e581dae0c818a4c2f5fe95627ae26bc)\r\n\r\nRan the tests locally and got `test_framework.authproxy.JSONRPCException: Invalid or non-wallet transaction id (-5)` for both `wallet_import_rescan.py` and `wallet_rescan_unconfirmed.py` when insertion order is used in `CTxMemPool::entryAll()`.\r\n",
      "created_at" : "2024-01-10T22:20:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1885834450",
      "id" : 1885834450,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585wZ4zS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1885834450/reactions"
      },
      "updated_at" : "2024-01-10T22:38:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1885834450",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/37949128?v=4",
         "events_url" : "https://api.github.com/users/Eunovo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Eunovo/followers",
         "following_url" : "https://api.github.com/users/Eunovo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Eunovo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Eunovo",
         "id" : 37949128,
         "login" : "Eunovo",
         "node_id" : "MDQ6VXNlcjM3OTQ5MTI4",
         "organizations_url" : "https://api.github.com/users/Eunovo/orgs",
         "received_events_url" : "https://api.github.com/users/Eunovo/received_events",
         "repos_url" : "https://api.github.com/users/Eunovo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Eunovo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Eunovo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Eunovo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1449427996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449427996"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "probably should be removed?",
      "commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "created_at" : "2024-01-11T21:38:42Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # descriptors_to_import.append(item)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1449427996",
      "id" : 1449427996,
      "line" : 82,
      "node_id" : "PRRC_kwDOABII585WZIQc",
      "original_commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : 82,
      "pull_request_review_id" : 1816762773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449427996/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-11T21:52:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449427996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1449435185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449435185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What do you think about adding one line to these docs in each file to reference the other file? Might be useful to e.g. keep tests in sync if problems are found, or when people wonder why this is (at first sight) only tested for legacy or descriptor wallets.\r\n\r\n```suggestion\r\n        # inputs of the transaction to detect it, so the parent must be processed before the child.\r\n        # This behaviour is tested for descriptor wallets in wallet_rescan_unconfirmed.py.\r\n```",
      "commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "created_at" : "2024-01-11T21:47:32Z",
      "diff_hunk" : "@@ -267,14 +270,44 @@ def run_test(self):\n                 address_type=variant.address_type.value,\n             ))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = get_rand_amount()\n+            variant.initial_amount = get_rand_amount() * 2\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n             variant.confirmation_height = 0\n             variant.timestamp = timestamp\n \n+        # Mine a block so these parents are confirmed\n+        assert_equal(len(self.nodes[0].getrawmempool()), len(mempool_variants))\n+        self.sync_mempools()\n+        block_to_disconnect = self.generate(self.nodes[0], 1)[0]\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+\n+        # For each variant, create an unconfirmed child transaction from initial_txid, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1449435185",
      "id" : 1449435185,
      "line" : 287,
      "node_id" : "PRRC_kwDOABII585WZKAx",
      "original_commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "original_line" : 287,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : 63,
      "pull_request_review_id" : 1816762773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449435185/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-11T21:52:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449435185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1449439228"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449439228"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Makes sense, thank you! I failed to appreciate that we're calling the wallet `gettransaction` RPC, and not the not `getrawtransaction` RPC.",
      "commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "created_at" : "2024-01-11T21:51:30Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, 110)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # descriptors_to_import.append(item)\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})\n+        import_wallet_node.createwallet(wallet_name=\"w1\", disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = import_wallet_node.get_wallet_rpc(\"w1\")\n+        w1.importdescriptors(descriptors_to_import)\n+\n+        self.log.info(\"Check that the importing node has properly rescanned mempool transactions\")\n+        # Check that parent address is correctly determined as ismine\n+        test_address(w1, parent_address, solvable=True, ismine=True)\n+        # This would raise a JSONRPCError if the transactions were not identified as belonging to the wallet.\n+        assert_equal(w1.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 0)\n+        assert_equal(w1.gettransaction(tx_child_unconfirmed_sweep[\"txid\"])[\"confirmations\"], 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1449439228",
      "id" : 1449439228,
      "in_reply_to_id" : 1446011145,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII585WZK_8",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 95,
      "original_position" : 94,
      "original_start_line" : 93,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : 95,
      "pull_request_review_id" : 1816762773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449439228/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 94,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-11T21:52:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449439228",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450161338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450161338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops! Removed.",
      "commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "created_at" : "2024-01-12T09:55:47Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # descriptors_to_import.append(item)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450161338",
      "id" : 1450161338,
      "in_reply_to_id" : 1449427996,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Wb7S6",
      "original_commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1817818865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450161338/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T09:55:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450161338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450162485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450162485"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added this comment in the legacy test as I agree it'll be convenient to know what coverage we are/aren't losing when deleting a legacy test.",
      "commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "created_at" : "2024-01-12T09:56:36Z",
      "diff_hunk" : "@@ -267,14 +270,44 @@ def run_test(self):\n                 address_type=variant.address_type.value,\n             ))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = get_rand_amount()\n+            variant.initial_amount = get_rand_amount() * 2\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n             variant.confirmation_height = 0\n             variant.timestamp = timestamp\n \n+        # Mine a block so these parents are confirmed\n+        assert_equal(len(self.nodes[0].getrawmempool()), len(mempool_variants))\n+        self.sync_mempools()\n+        block_to_disconnect = self.generate(self.nodes[0], 1)[0]\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+\n+        # For each variant, create an unconfirmed child transaction from initial_txid, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450162485",
      "id" : 1450162485,
      "in_reply_to_id" : 1449435185,
      "line" : 287,
      "node_id" : "PRRC_kwDOABII585Wb7k1",
      "original_commit_id" : "d9df438c6e581dae0c818a4c2f5fe95627ae26bc",
      "original_line" : 287,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "test/functional/wallet_import_rescan.py",
      "position" : 63,
      "pull_request_review_id" : 1817820291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450162485/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T09:56:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450162485",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450164269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450164269"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yeah, it's a wallet-specific RPC. I've added a check that the \"confirmations\" value is 1 on wallet 0 a few lines up, prior to the reorg. Hopefully that also helps make it clear why we're testing this way.",
      "commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "created_at" : "2024-01-12T09:57:57Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node with which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, 110)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # descriptors_to_import.append(item)\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})\n+        import_wallet_node.createwallet(wallet_name=\"w1\", disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = import_wallet_node.get_wallet_rpc(\"w1\")\n+        w1.importdescriptors(descriptors_to_import)\n+\n+        self.log.info(\"Check that the importing node has properly rescanned mempool transactions\")\n+        # Check that parent address is correctly determined as ismine\n+        test_address(w1, parent_address, solvable=True, ismine=True)\n+        # This would raise a JSONRPCError if the transactions were not identified as belonging to the wallet.\n+        assert_equal(w1.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 0)\n+        assert_equal(w1.gettransaction(tx_child_unconfirmed_sweep[\"txid\"])[\"confirmations\"], 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450164269",
      "id" : 1450164269,
      "in_reply_to_id" : 1446011145,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII585Wb8At",
      "original_commit_id" : "fa2b8d0e30c45b4ff59db1ac6aaeab3dc10f3df3",
      "original_line" : 95,
      "original_position" : 94,
      "original_start_line" : 93,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : 95,
      "pull_request_review_id" : 1817822719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450164269/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 94,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T09:57:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450164269",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "CI failure is unrelated, #29234",
      "created_at" : "2024-01-12T10:35:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1888844067",
      "id" : 1888844067,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585wlXkj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888844067/reactions"
      },
      "updated_at" : "2024-01-12T10:35:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888844067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450347036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450347036"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in c39e82926a:\r\n\r\ntiny nit:\r\nlooks redundant to call `add_wallet_options(legacy=False)` and then call `skip_if_no_sqlite()`.\r\nIf the wallet is enabled and `sqlite` is not supported, then the only option is a legacy wallet, which is blocked by the `add_wallet_options` call.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T12:08:16Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450347036",
      "id" : 1450347036,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Wcooc",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 27,
      "original_position" : 29,
      "original_start_line" : 19,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818093579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450347036/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T13:15:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450347036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450354940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450354940"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in https://github.com/bitcoin/bitcoin/commit/c39e82926a3740642f8f1bb72c6b10b67a6dc724:\r\n\r\nnit: `disable_private_keys` is false by default. And, because this is a descriptors-only test (per `self.add_wallet_options`), the `descriptors` flag is also redundant.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T12:15:41Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450354940",
      "id" : 1450354940,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Wcqj8",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818093579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450354940/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T13:15:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450354940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450361941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450361941"
         }
      },
      "author_association" : "MEMBER",
      "body" : "tiny nit: this could be `sync_mempools` instead.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T12:21:33Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+        assert_equal(w0.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 1)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450361941",
      "id" : 1450361941,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WcsRV",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 71,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818093579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450361941/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T13:15:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450361941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450366154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450366154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In https://github.com/bitcoin/bitcoin/commit/c39e82926a3740642f8f1bb72c6b10b67a6dc724:\r\n\r\nsame as above, the `descriptors` flag isn't needed. Also, if you set `disable_private_keys=True`, there is no need to set `blank=True`.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T12:26:09Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+        assert_equal(w0.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 1)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})\n+        import_wallet_node.createwallet(wallet_name=\"w1\", disable_private_keys=True, blank=True, descriptors=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450366154",
      "id" : 1450366154,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WctTK",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 86,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818093579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450366154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T13:15:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450366154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450376850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450376850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In c39e82926a3:\r\n\r\nCan simplify this by only importing the used address descriptor.\r\n```suggestion\r\ndescriptors_to_import = [{\"desc\": w0.getaddressinfo(parent_address)['parent_desc'], \"timestamp\": 0, \"label\": \"w0 import\"}]\r\n```",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T12:34:59Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+        assert_equal(w0.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 1)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450376850",
      "id" : 1450376850,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Wcv6S",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : 81,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818093579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450376850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T13:15:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450376850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450417390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450417390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In https://github.com/bitcoin/bitcoin/commit/c39e82926a3740642f8f1bb72c6b10b67a6dc724:\r\n\r\nUnless you specify a clean chain (which this test does not), the test will have an existing matured one. Which means, you could modify this for \r\n\r\n```suggestion\r\n        tester_wallet = MiniWallet(tester_node)\r\n        self.generate(tester_wallet, 1)\r\n```",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T13:10:16Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450417390",
      "id" : 1450417390,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Wc5zu",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : 41,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818093579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450417390/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T13:16:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450417390",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450457328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450457328"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I initially left the same comment about `disable_private_keys` but think it is helpful to contrast the difference with further down the test where we set `disable_private_keys=True`. Likewise, I think keeping `descriptors=True` is helpful self-documentation given the contrast with the test in `wallet_import_rescan.py`. No strong opinion on either, though.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T13:30:01Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450457328",
      "id" : 1450457328,
      "in_reply_to_id" : 1450354940,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdDjw",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818270953,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450457328/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T13:30:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450457328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450509572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450509572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems pretty common to specify both. They are technically different; one says no legacy and the other says need descriptors. I know that's effectively the same thing and we don't have 3 types, but I think it's harmless to keep this.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:17:24Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450509572",
      "id" : 1450509572,
      "in_reply_to_id" : 1450347036,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdQUE",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 27,
      "original_position" : 29,
      "original_start_line" : 19,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818360048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450509572/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:23:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450509572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450510108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450510108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:17:53Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+        assert_equal(w0.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 1)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450510108",
      "id" : 1450510108,
      "in_reply_to_id" : 1450361941,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdQcc",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 71,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818360048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450510108/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:23:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450510108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450510684"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450510684"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nice, taken",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:18:25Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+        assert_equal(w0.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 1)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450510684",
      "id" : 1450510684,
      "in_reply_to_id" : 1450376850,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdQlc",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : 81,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818360048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450510684/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:23:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450510684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450511111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450511111"
         }
      },
      "author_association" : "MEMBER",
      "body" : "dropped the args",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:18:49Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n+        w0 = orig_wallet_node.get_wallet_rpc('w0')\n+\n+        self.log.info(\"Create a parent tx and mine it in a block that will later be disconnected\")\n+        parent_amount = 100000\n+        parent_address = w0.getnewaddress()\n+        tx_parent_to_reorg = tester_wallet.send_to(\n+            from_node=tester_node,\n+            scriptPubKey=address_to_scriptpubkey(parent_address),\n+            amount=parent_amount,\n+        )\n+        assert tx_parent_to_reorg[\"txid\"] in tester_node.getrawmempool()\n+        block_to_reorg = self.generate(tester_node, 1)[0]\n+        assert_equal(len(tester_node.getrawmempool()), 0)\n+        assert_equal(w0.gettransaction(tx_parent_to_reorg[\"txid\"])[\"confirmations\"], 1)\n+\n+        # Create an unconfirmed child transaction from the parent tx, sending all\n+        # the funds to an unspendable address. Importantly, no change output is created so the\n+        # transaction can't be recognized using its outputs. The wallet rescan needs to know the\n+        # inputs of the transaction to detect it, so the parent must be processed before the child.\n+        w0_utxos = w0.listunspent()\n+\n+        self.log.info(\"Create a child tx and wait for it to propagate to all mempools\")\n+        # The only UTXO available to spend is tx_parent_to_reorg.\n+        assert_equal(len(w0_utxos), 1)\n+        assert_equal(w0_utxos[0][\"txid\"], tx_parent_to_reorg[\"txid\"])\n+        tx_child_unconfirmed_sweep = w0.sendall([ADDRESS_BCRT1_UNSPENDABLE])\n+        self.sync_all()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in tester_node.getrawmempool()\n+        assert tx_child_unconfirmed_sweep[\"txid\"] in import_wallet_node.getrawmempool()\n+\n+        self.log.info(\"Mock a reorg, causing parent to re-enter mempools after its child\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_to_reorg)\n+            assert tx_parent_to_reorg[\"txid\"] in node.getrawmempool()\n+\n+        self.log.info(\"Import descriptor wallet on another node\")\n+        descriptors_to_import = []\n+        for item in w0.listdescriptors()[\"descriptors\"]:\n+            # use timestamp 0 to tell wallet to rescan entire chain\n+            if not item[\"internal\"]:\n+                descriptors_to_import.append({\"desc\": item[\"desc\"], \"timestamp\": 0, \"label\": \"w0 import\"})\n+        import_wallet_node.createwallet(wallet_name=\"w1\", disable_private_keys=True, blank=True, descriptors=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450511111",
      "id" : 1450511111,
      "in_reply_to_id" : 1450366154,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdQsH",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 86,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818360048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450511111/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:23:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450511111",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450512137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450512137"
         }
      },
      "author_association" : "MEMBER",
      "body" : "dropped the extra args (though I tend to prefer being a bit more verbose and self-documenting)",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:19:38Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)\n+\n+        orig_wallet_node.createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450512137",
      "id" : 1450512137,
      "in_reply_to_id" : 1450354940,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdQ8J",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818360048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450512137/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:29:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450512137",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450514108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450514108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Keeping as is because I prefer the peace of mind of knowing `tester_wallet` has a mature coinbase.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:21:09Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450514108",
      "id" : 1450514108,
      "in_reply_to_id" : 1450417390,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdRa8",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : 41,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818360048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450514108/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:23:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450514108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450532808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450532808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Keeping as is because I prefer the peace of mind of knowing `tester_wallet` has a mature coinbase.\r\n\r\n~~You shouldn't be concerned about that. See [code](https://github.com/bitcoin/bitcoin/blob/3ba8de1b704d590fa4e1975620bd21d830d11666/test/functional/test_framework/test_framework.py#L381). If the wallet wouldn't be having mature coins, the test would be always failing due a lack of funds.~~\r\n\r\nor well, np. Its fine.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:35:53Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450532808",
      "id" : 1450532808,
      "in_reply_to_id" : 1450417390,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdV_I",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : 41,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818398576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450532808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:37:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450532808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450547499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450547499"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Deleted this line altogether, there's no reason to generate 1 either.",
      "commit_id" : "df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-12T14:47:50Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that descriptor wallets rescan mempool transactions properly when importing.\"\"\"\n+\n+from test_framework.address import (\n+    address_to_scriptpubkey,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.wallet_util import test_address\n+\n+\n+class WalletRescanUnconfirmed(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        # Immediate tx relay\n+        self.extra_args = [['-whitelist=noban@127.0.0.1']] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        # Node which we will use to send funds to the wallet and mine blocks\n+        tester_node = self.nodes[0]\n+        # Node on which the wallet is originally created\n+        orig_wallet_node = self.nodes[1]\n+        # Node which will import the wallet and rescan blocks / mempool for transactions\n+        import_wallet_node = self.nodes[2]\n+\n+\n+        self.log.info(\"Create wallets and mine initial chain\")\n+        tester_wallet = MiniWallet(tester_node)\n+        self.generate(tester_wallet, COINBASE_MATURITY)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#discussion_r1450547499",
      "id" : 1450547499,
      "in_reply_to_id" : 1450417390,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WdZkr",
      "original_commit_id" : "c39e82926a3740642f8f1bb72c6b10b67a6dc724",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : 41,
      "path" : "test/functional/wallet_rescan_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1818430360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450547499/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-12T14:47:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450547499",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> See commit https://github.com/bitcoin/bitcoin/commit/f8273512a50d9ed03bc48803634fb8780b9023c7 (feel free to pull it).\r\n\r\nSorry I hadn't seen this. Thanks, taken with a couple of edits.",
      "created_at" : "2024-01-12T14:53:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1889422328",
      "id" : 1889422328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585wnkv4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889422328/reactions"
      },
      "updated_at" : "2024-01-12T14:53:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889422328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK df30247705940c50c5eaafd74e2abbeb8b0cec07",
      "created_at" : "2024-01-16T17:38:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1894209088",
      "id" : 1894209088,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585w51ZA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1894209088/reactions"
      },
      "updated_at" : "2024-01-16T17:38:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1894209088",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Reviewers might be interested in https://github.com/bitcoin/bitcoin/pull/29283, fixing a rare intermittency issue",
      "created_at" : "2024-01-19T14:26:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29179#issuecomment-1900516149",
      "id" : 1900516149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29179",
      "node_id" : "IC_kwDOABII585xR5M1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1900516149/reactions"
      },
      "updated_at" : "2024-01-19T14:26:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1900516149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   }
]
