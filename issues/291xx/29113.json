{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "I think the only place we currently test that spending a bare multisig utxo is okay is in `AreInputsStandard` in `script_p2sh_tests.cpp`, but this only checks that `AreInputsStandard()` passes, it doesn't check that there isn't some other rule preventing the spend from entering the mempool and eventually being mined.\r\n\r\nAdding\r\n\r\n```python\r\n        self.log.info('Spending a confirmed bare multisig is okay')\r\n        node = self.nodes[0]\r\n        address = self.wallet.get_address()\r\n        tx = tx_from_hex(raw_tx_reference)\r\n        privkey, pubkey = generate_keypair()\r\n        tx.vout[0].scriptPubKey = keys_to_multisig_script([pubkey] * 3, k=1)  # Some bare multisig script (1-of-3)\r\n        tx.rehash()\r\n        self.generateblock(node, address, [tx.serialize().hex()])\r\n        tx_spend = CTransaction()\r\n        tx_spend.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\r\n        tx_spend.vout.append(CTxOut(tx.vout[0].nValue - int(fee*COIN), script_to_p2wsh_script(CScript([OP_TRUE]))))\r\n        tx_spend.rehash()\r\n        sign_input_legacy(tx_spend, 0, tx.vout[0].scriptPubKey, privkey, sighash_type=SIGHASH_ALL)\r\n        tx_spend.vin[0].scriptSig = bytes(CScript([OP_0])) + tx_spend.vin[0].scriptSig\r\n        self.check_mempool_result(\r\n            result_expected=[{'txid': tx_spend.rehash(), 'allowed': True, 'vsize': tx_spend.get_vsize(), 'fees': { 'base': Decimal('0.00000700')}}],\r\n            rawtxs=[tx_spend.serialize().hex()],\r\n            maxfeerate=0,\r\n        )\r\n```\r\n\r\nat the end of `mempool_accept.py` might therefore be a reasonable addition?\r\n\r\nCan add a bug to trigger test failures via:\r\n\r\n```diff\r\n--- a/src/policy/policy.cpp\r\n+++ b/src/policy/policy.cpp\r\n@@ -185,6 +185,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\r\n \r\n         std::vector<std::vector<unsigned char> > vSolutions;\r\n         TxoutType whichType = Solver(prev.scriptPubKey, vSolutions);\r\n+        if (whichType == TxoutType::MULTISIG) return false;\r\n         if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::WITNESS_UNKNOWN) {\r\n             // WITNESS_UNKNOWN failures are typically also caught with a policy\r\n             // flag in the script interpreter, but it can be helpful to catch\r\n```\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/comments",
   "created_at" : "2023-12-19T01:27:34Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/29113",
   "id" : 2047756086,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII5856Dkc2",
   "number" : 29113,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/timeline",
   "title" : "Test case for spending bare multisig?",
   "updated_at" : "2023-12-19T01:27:58Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29113",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
      "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
      "followers_url" : "https://api.github.com/users/ajtowns/followers",
      "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/ajtowns",
      "id" : 127186,
      "login" : "ajtowns",
      "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
      "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
      "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
      "repos_url" : "https://api.github.com/users/ajtowns/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/ajtowns"
   }
}
