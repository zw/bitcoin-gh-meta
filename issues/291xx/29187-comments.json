[
   {
      "author_association" : "MEMBER",
      "body" : "> The datacarriersize policy option is meant to limit the size of extra data allowed in transactions for relaying and mining.\r\n\r\nHistory of this config option suggests `datacarriersize` is meant to limit the size of data in `OP_RETURN` outputs, so this statement is untrue.\r\n\r\n- comments on #3715: \r\n  - [comment](https://github.com/bitcoin/bitcoin/pull/3715#issuecomment-35701201) asked about including the usage of bare CHECKSIG and CHECKMULTISIG, arguing it should be in scope for that PR\r\n  - [comment](https://github.com/bitcoin/bitcoin/pull/3715#issuecomment-44412464) asked whether \"Data carrrier TX means in that context, that this are TXes, which contain data unrelated to the Bitcoin system...?\"\r\n  - [comment](https://github.com/bitcoin/bitcoin/pull/3715#issuecomment-44424455) said \"data carrier tx means a tx with an op_return output\"\r\n  - [comment](https://github.com/bitcoin/bitcoin/pull/3715#issuecomment-47009929) suggested people talking about bare multisig should go to #3939, indicating it was out of scope\r\n- #5077 adding `-datacarriersize` used `MAX_OP_RETURN_RELAY` as the default. That is still the case today.\r\n- 0.10.0, in which `-datacarrier` and `-datacarriersize` were first introduced, explicitly defined the term \"data carrier\" as pertaining to OP_RETURN transactions in the  [release notes](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.10.0.md#mining-and-relay-policy-enhancements) :\r\n```\r\n    -datacarrier=0/1 : Relay and mine \"data carrier\" (OP_RETURN) transactions if this is 1.\r\n    -datacarriersize=n : Maximum size, in bytes, we consider acceptable for \"data carrier\" outputs.\r\n```\r\n- PR #11058 added the doc \"A data carrying output is an unspendable output containing data. The script type is designated as TX_NULL_DATA.\"\r\n\r\nThe docs from #11058 have not changed except for moving files:\r\nhttps://github.com/bitcoin/bitcoin/blob/cb6d619931e8a29ad2bee034c94b9e7ff8ac0a65/src/kernel/mempool_options.h#L46-L53\r\n\r\n\r\nInstead of retroactively deciding that `-datacarriersize` applies to more than just `OP_RETURN`s, why not propose a new config option?",
      "created_at" : "2024-01-05T16:51:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1878972398",
      "id" : 1878972398,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585v_tfu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1878972398/reactions"
      },
      "updated_at" : "2024-01-05T16:51:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1878972398",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">History of this config option suggests datacarriersize is meant to limit the size of data in OP_RETURN outputs, so this statement is untrue.\r\n\r\nIt's meant to limit extra data in transactions. OP_RETURN was supposed to be the only tolerated way to do that. `datacarriersize` has no possible use if it's trivial to bypass. The \"Ordisrespector\" approach would take us back to that prior status quo.\r\n\r\n>why not propose a new config option?\r\n\r\nIt would be confusingly redundant. But if that is Concept ACK'd, I would be happy to do it. (Added to list of solutions in OP for now)",
      "created_at" : "2024-01-05T17:17:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1879009564",
      "id" : 1879009564,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585v_2kc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 6,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 6,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879009564/reactions"
      },
      "updated_at" : "2024-01-05T17:17:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879009564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It's meant to limit extra data in transactions. OP_RETURN was supposed to be the only tolerated way to do that. \r\n\r\nCan you add any references for this? because the GitHub and git history very clearly contradicts your statements (https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1878972398).",
      "created_at" : "2024-01-05T17:27:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1879021930",
      "id" : 1879021930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585v_5lq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879021930/reactions"
      },
      "updated_at" : "2024-01-05T17:27:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879021930",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "No, it doesn't contradict it. That overview conveniently leaves out the context of OP_RETURN being the _only_ way tolerated, and the `datacarriersize` limit makes no sense the way you want to spin it.",
      "created_at" : "2024-01-05T17:37:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1879034293",
      "id" : 1879034293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585v_8m1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 3,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 4,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879034293/reactions"
      },
      "updated_at" : "2024-01-05T17:37:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879034293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> * Identifying extra data yet removing the witness discount rather than filtering it out entirely. It's not clear this would be effective alone, but is supported by Knots v25.1.\r\n> * Adding a second `datacarriersize` with a broader scope like in [datacarriersize: Match more datacarryingÂ #28408](https://github.com/bitcoin/bitcoin/pull/28408) ([suggested by glozow](https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1878972398)).\r\n\r\nTL;DR - My suggestion is to implement the bug fix as above with a combination of these two bullet points. ^\r\n\r\nIt seems like an acceptable compromise solution would be the combination of these two, provided that the default for the new second `otherdatacarriersize` option (or whatever it ends up being called) is the same as the existing one for OP_RETURN (80 bytes of arbitrary data), and there is an option to disable the equalization of the fees, if desired (as there is in Knots).\r\n\r\nThis fully addresses the only somewhat valid objection I saw to the original (now closed) PR, in my opinion, which was that there was no mechanism for users to run nodes which use the current policy if they so desired without code changes.  While I'm personally at a loss to why anyone would want to run a node that permits active exploitation of an obvious bug, I'm all for giving people choices.  Adding the options above resolves that objection entirely, as anyone with that mindset can simply set them to whatever they want.\r\n\r\nThis effectively adds OP_IF/OP_FALSE as a new \"tolerated\" method of data carrying, with a limit on data carrying equal to that of the existing tolerated method of OP_RETURN.  But keep in mind that the OP_FALSE/OP_IF exploit method of data carrying is arguably worse for the network than OP_RETURN, though, since these types of store-data-in-the-witness transactions require two transactions, and they tend to just leave a dust output in the UTXO set forever once the data is \"revealed\".  The above would disincentivize that harm sufficiently, since equalizing the fee-per-byte with OP_RETURN should effectively drive data carrying back to OP_RETURN (never enters the UTXO set) from a cost basis. This is because the two-transaction method of performing the OP_IF/OP_FALSE exploit would end up being more costly overall than one transaction to an OP_RETURN.\r\n\r\nFurther, any implementation of these new flags should be 100% unambiguous in documentation and comments such that they apply to all known data carrying methods besides OP_RETURN, and thus avoiding the potential situation where folks in the future can attempt to ignore an active exploit by simply changing the documentation.\r\n\r\nFinally, let's be clear that this is a valid issue, that the use of OP_FALSE/OP_IF for storing arbitrary data IS in fact an exploit, one that is being actively harmful, and fixing (or even slowing down, in the case of the suggested implementation above) that exploitation is in the best interest of the network as a whole. There is no script that actually validates anything that can make use of such a mechanism. It explicitly and provably does NOT use the arbitrary data for any validation whatsoever.  Any such method of storing data is clearly _not_ an intended use case for the Bitcoin network any more than someone storing arbitrary data in other types of outputs (like P2PKH, multisig, etc) is an intended and valid use case, as this is harmful to the network.  The latter was effectively discouraged by tolerating a small amount of arbitrary data with OP_RETURN, which is at least not _as_ harmful to the network.  While the existence of OP_RETURN doesn't prevent anyone from using more harmful methods, it does make them prohibitively more expensive to do so and seems to have all but eliminated that practice.\r\n\r\nThe OP_FALSE/OP_IF exploit gets around the clear intentions of allowing OP_RETURN by both avoiding the data size limit, AND getting a huge discount on fee per byte for that data compared to regular transactions. A clear bug to be addressed.  If, for example, people figured out a way to exploit OP_RETURN to get around the 80 byte relay limit when it was implemented, I'm certain there would have been a quick fix for that.  Also, if you have people constantly dumping garbage in your driveway that you have to clean up any time you want to move your car, and you decide to put in a security system to prevent that as best possible (maybe by making your neighbor's yard more attractive to the dumpers)... making the argument that the ones doing the dumping are now somehow the victims because they can no longer take advantage of you is just not valid.  The same goes for people actively exploiting a clear bug in Bitcoin. What happens with people actively exploiting it as a result of a fix that levels the playing field is not of consequence to users of Bitcoin. Heck, this proposal doesn't even prevent the practice, just puts it on par with other data carrying.  In my opinion, the exploit should be closed completely, but the two bullet points above are an excellent compromise.\r\n\r\nLet's get this fix done, and let's not let perfect be the enemy of good.",
      "created_at" : "2024-01-05T21:18:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1879268385",
      "id" : 1879268385,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585wA1wh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 6,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 6,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879268385/reactions"
      },
      "updated_at" : "2024-01-05T21:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879268385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1316379?v=4",
         "events_url" : "https://api.github.com/users/wizkid057/events{/privacy}",
         "followers_url" : "https://api.github.com/users/wizkid057/followers",
         "following_url" : "https://api.github.com/users/wizkid057/following{/other_user}",
         "gists_url" : "https://api.github.com/users/wizkid057/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/wizkid057",
         "id" : 1316379,
         "login" : "wizkid057",
         "node_id" : "MDQ6VXNlcjEzMTYzNzk=",
         "organizations_url" : "https://api.github.com/users/wizkid057/orgs",
         "received_events_url" : "https://api.github.com/users/wizkid057/received_events",
         "repos_url" : "https://api.github.com/users/wizkid057/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/wizkid057/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/wizkid057/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/wizkid057"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Since CVE ID is used to validate this as a [vulnerability](https://github.com/bitcoin/bitcoin/pull/28408#issuecomment-1848850110), I wanted to share that [cve.org](https://cve.org) has added \"disputed\" tag for CVE-2023-50428. This tag is used when there are differences of opinion about whether its a vulnerability based on the CVE program's definition.\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/147166694/1fd423d2-9eb8-4eae-8ea4-369aaa3ee5af)\r\n\r\nA note has also been added to CVE by MITRE on 4 Jan 2024:\r\n\r\n> NOTE: although this is a vulnerability from the perspective of the Bitcoin Knots project, some others consider it \"not a bug.\"\r\n\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-50428#VulnChangeHistorySection\r\n",
      "created_at" : "2024-01-06T08:54:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1879598180",
      "id" : 1879598180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585wCGRk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879598180/reactions"
      },
      "updated_at" : "2024-01-06T08:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879598180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/147166694?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 147166694,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOCMWV5g",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Since CVE ID is used to validate this as a vulnerability\r\n\r\nIt's not, really. In fact, I didn't even mention \"CVE\" once in [my detailed comment above](https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1879268385).\r\n\r\nThis is clearly a bug, clearly a vulnerability in the software, clearly unintended behavior, and clearly being actively exploited in the wild.  That _more_ than qualifies this particular issue as a valid CVE, but absolutely no one credible is doing the reverse of using the CVE ID's existence to \"validate this as a vulnerability.\"  It's an unambiguous vulnerability regardless of if it has a CVE number assigned to it.\r\n\r\n> I wanted to share that [cve.org](https://cve.org) has added \"disputed\" tag for CVE-2023-50428\r\n\r\nThe people actively exploiting a bug, or otherwise supporting the exploit of a bug, now _also_ abusing the mechanisms related to CVE reporting... is frankly unsurprising, and really doesn't qualify as something to be used as a \"gotcha\" here.  In fact, I think it gives the need to patch the exploit even _more_ weight, given how desperate the active exploiters are being in attempts to prevent this bug from being patched.\r\n\r\nThe ability to inject arbitrary data into _any_ system in a way that isn't explicitly documented as permitted for an expected purpose of the system is _always_ a vulnerability and _always_ something that should be addressed. This is cybersecurity 101 stuff, and isn't even remotely specific to Bitcoin.  The data proceeding OP_FALSE/OP_IF is clearly and provably arbitrary and not in any way required nor intended for Bitcoin to function as designed.\r\n\r\nStoring virtually limitless amounts of arbitrary data (effectively up to the max block size) in the Bitcoin public ledger (and thus forcing everyone running a full node to not only download and deal with this data, but requiring it to be stored for all eternity in one form or another) by using a clearly unintended exploit that gets around not only previously imposed limitations on tolerated arbitrary data size, but _also_ gets a _discount_ for doing so vs standard transactions?  That's got to be probably the most obvious exploit on the Bitcoin network since the infinite money exploit.  Fixing it shouldn't even be remotely controversial.\r\n\r\nIf someone can show me code, code comments, documentation, community discussion about the pros/cons of such a mechanism, and confirmation of \"rough consensus\" on this, from _before_ this exploit was developed and abused, that clearly defines this specific OP_FALSE/OP_IF method of storing arbitrary data in the Bitcoin blockchain as a well defined intended behavior that was agreed upon to be permitted by the community and nodes, then, I'd likely have to concede that this is not a vulnerability that needs fixing since it would then be clearly defined and intended behavior.  In the absence of that (which is the reality of the situation, because none of the above exists), this is unintended behavior, and a clear vulnerability that needs addressing.\r\n\r\nIn fact, this is orders of magnitude worse than similar vulnerabilities in other systems that are clearly and unambiguously defined as a vulnerability and bug to be fixed.  The only reason this one is being disputed in any way, in my opinion, is because there's a massive conflict of interest and major financial incentive to the exploiters to retain their ability to abuse the Bitcoin network. So the full resources of those groups are being utilized to sow discord on what should be a cut and dry vulnerability patch.  Sadly, that's a _very_ noisy minority in this case.\r\n\r\n\"Bitcoin is a decentralized _digital currency_ that enables instant payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate with no central authority: transaction management and money issuance are carried out collectively by the network.\" By _finally_ addressing this issue (or heck, even acknowledging that it _is_ and issue), the developers would be upholding the primary purpose of the network, being a digital currency, thereby maintaining user trust in its reliability, long term viability, and overall security.  Fortunately some developers are capable of seeing through the noise here, and _hopefully_ other developers will regain their collective sanity and cut through the noise as well to properly address this bug. It's been quite the spectacle, and admittedly very disheartening, watching so many developers on this project whom I've held in pretty high regard over the years be so clearly and blatantly deceived and swayed by the obvious noise from attackers on this particular issue. That's been very sad to see.",
      "created_at" : "2024-01-06T16:41:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1879750836",
      "id" : 1879750836,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585wCri0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879750836/reactions"
      },
      "updated_at" : "2024-01-06T16:43:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879750836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1316379?v=4",
         "events_url" : "https://api.github.com/users/wizkid057/events{/privacy}",
         "followers_url" : "https://api.github.com/users/wizkid057/followers",
         "following_url" : "https://api.github.com/users/wizkid057/following{/other_user}",
         "gists_url" : "https://api.github.com/users/wizkid057/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/wizkid057",
         "id" : 1316379,
         "login" : "wizkid057",
         "node_id" : "MDQ6VXNlcjEzMTYzNzk=",
         "organizations_url" : "https://api.github.com/users/wizkid057/orgs",
         "received_events_url" : "https://api.github.com/users/wizkid057/received_events",
         "repos_url" : "https://api.github.com/users/wizkid057/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/wizkid057/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/wizkid057/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/wizkid057"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > It's meant to limit extra data in transactions. OP_RETURN was supposed to be the only tolerated way to do that.\r\n> \r\n> Can you add any references for this? because the GitHub and git history very clearly contradicts your statements ([#29187 (comment)](https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1878972398)).\r\n\r\n\"There was [sic] been some confusion and misunderstanding in the community, regarding the OP_RETURN feature in 0.9 and data in the blockchain. This change is not an endorsement of storing data in the blockchain. The OP_RETURN change creates a provably-prunable output, to avoid data storage schemes â some of which were already deployed â that were storing arbitrary data such as images as forever-unspendable TX outputs, bloating bitcoinâs UTXO database.\" (https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.9.0.md#op_return-and-data-in-the-block-chain)\r\n\r\nIf datacarriersize was meant to apply only to arbitrary data in op_return and not to all data, why wasn't it called op_returncarriersize?\r\n\r\nIts quite clear that op_return was meant to deprecate all other arbitrary data injection schemes, and it was then limited to 40 (later 80) bytes. The release notes history never show an intention to change the client to accommodate large amounts of arbitrary data either in relay policy or permanent storage in blockchain data.\r\n\r\nThis debate actually goes back quite a bit further, at least to v0.3. This size of op_return data was supposed to be limited to sha256 output (32 bytes), plus a few bytes for an identifier tag. This design choice was in compliance of Satoshi's suggestion \"I also support a third transaction type for timestamp hash sized arbitrary data.\" (https://bitcointalk.org/index.php?topic=2162.msg28549#msg28549), At the time Satoshi wrote the above post signaling his support for 32 bytes of arbitrary data, Satoshi and Gavin (maybe others too) had agreed to implement a script whitelisting policy, which was an intentional effort to stop people from finding clever uses of script to create transactions which didn't relate to the monetary purpose of the client software.\r\n\r\nThe PR 28408 Review note posted by @glozow starts recording history from 0.10. I'm not sure why the incredibly relevant context about Bitcoin's design principles from 0.9 (and earlier) is being ignored.",
      "created_at" : "2024-01-08T04:12:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1880361556",
      "id" : 1880361556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585wFApU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 10,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 4,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 15,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880361556/reactions"
      },
      "updated_at" : "2024-01-08T06:22:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880361556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/118490664?v=4",
         "events_url" : "https://api.github.com/users/totient/events{/privacy}",
         "followers_url" : "https://api.github.com/users/totient/followers",
         "following_url" : "https://api.github.com/users/totient/following{/other_user}",
         "gists_url" : "https://api.github.com/users/totient/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/totient",
         "id" : 118490664,
         "login" : "totient",
         "node_id" : "U_kgDOBxAGKA",
         "organizations_url" : "https://api.github.com/users/totient/orgs",
         "received_events_url" : "https://api.github.com/users/totient/received_events",
         "repos_url" : "https://api.github.com/users/totient/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/totient/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/totient/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/totient"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> A softfork making data storage impractical. [...] It would also be a slow process\r\n\r\nIt's going to be a slow process either way:\r\n\r\nEven if Bitcoin Core changed its default policy, the effect on propagation would be negligible for a long time.\r\nThe p2p network is densely connected, with reachable nodes having 8 tx-relaying outbound peers and typically many more tx-relaying inbounds. Some network simulations I did in the context of full-RBF a few years ago indicated that already a minority of 10% of nodes supporting a feature (that is non-standard for the rest) is sufficient for propagation with a >95% probability (assuming both sender and miner run well-connected reachable nodes).\r\n\r\nSince the txns in question are standard for almost all nodes today and the network tends to upgrade to newer versions slowly (https://bitnodes.io/dashboard/1y/#user-agents), it would take several years to get anywhere near that 10% threshold if upgrades would just happen naturally. After that, preferential peering would be a simple and effective countermeasure - there wouldn't even be a real need for out-of-band delivery.\r\nIn general, I think that using policy to prevent transactions from propagating when there is an active minority that wants them propagated is just not going to work in practice.\r\n\r\nAdding an option that's not enabled by default would be purely symbolic for the purpose of transaction relay. However, it could still make sense to have it because if miners want to run that and earn less fees, a config option would make that easy for them and they wouldn't have to resort to alternative clients.",
      "created_at" : "2024-01-10T23:10:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1885891577",
      "id" : 1885891577,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585waGv5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1885891577/reactions"
      },
      "updated_at" : "2024-01-10T23:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1885891577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Can we just remove the discount of the segwit data? It is fair for both generic users and the attackers.å¨ 2024å¹´1æ11æ¥ï¼07:11ï¼Martin Zumsande ***@***.***> åéï¼ï»¿\r\n\r\nA softfork making data storage impractical. [...] It would also be a slow process\r\n\r\nIt's going to be a slow process either way:\r\nEven if Bitcoin Core changed its default policy, the effect on propagation would be negligible for a long time.\r\nThe p2p network is densely connected, with reachable nodes having 8 tx-relaying outbound peers and typically many more tx-relaying inbounds. Some network simulations I did in the context of full-RBF a few years ago indicated that already a minority of 10% of nodes supporting a feature (that is non-standard for the rest) is sufficient for propagation with a >95% probability (assuming both sender and miner run well-connected reachable nodes).\r\nSince the txns in question are standard for almost all nodes today and the network tends to upgrade to newer versions slowly (https://bitnodes.io/dashboard/1y/#user-agents), it would take several years to get anywhere near that 10% threshold if upgrades would just happen naturally. After that, preferential peering would be a simple and effective countermeasure - there wouldn't even be a real need for out-of-band delivery.\r\nIn general, I think that using policy to prevent transactions from propagating when there is an active minority that wants them propagated is just not going to work in practice.\r\nAdding an option that's not enabled by default would be purely symbolic for the purpose of transaction relay. However, it could still make sense to have it because if miners want to run that and earn less fees, a config option would make that easy for them and they wouldn't have to resort to alternative clients.\r\n\r\nâReply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you are subscribed to this thread.Message ID: ***@***.***>",
      "created_at" : "2024-01-11T04:12:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29187#issuecomment-1886210780",
      "id" : 1886210780,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29187",
      "node_id" : "IC_kwDOABII585wbUrc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1886210780/reactions"
      },
      "updated_at" : "2024-01-11T04:12:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1886210780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1237249?v=4",
         "events_url" : "https://api.github.com/users/saltduck/events{/privacy}",
         "followers_url" : "https://api.github.com/users/saltduck/followers",
         "following_url" : "https://api.github.com/users/saltduck/following{/other_user}",
         "gists_url" : "https://api.github.com/users/saltduck/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/saltduck",
         "id" : 1237249,
         "login" : "saltduck",
         "node_id" : "MDQ6VXNlcjEyMzcyNDk=",
         "organizations_url" : "https://api.github.com/users/saltduck/orgs",
         "received_events_url" : "https://api.github.com/users/saltduck/received_events",
         "repos_url" : "https://api.github.com/users/saltduck/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/saltduck/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/saltduck/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/saltduck"
      }
   }
]
