[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29122).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-12-20T16:00:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#issuecomment-1864737433",
      "id" : 1864737433,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29122",
      "node_id" : "IC_kwDOABII585vJaKZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1864737433/reactions"
      },
      "updated_at" : "2023-12-20T16:00:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1864737433",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "While the tests seem to run fine, I noticed a warning that appears every now and then:\r\n\r\n```\r\nTestFramework.p2p (WARNING): Connection lost to 0:0 due to [Errno 54] Connection reset by peer\r\n```\r\n\r\nI'm not sure if something unintended is happening under the hood. Disconnections are expected, but it's our node who is supposed to trigger them, so maybe I'm missing something.",
      "created_at" : "2023-12-20T16:02:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#issuecomment-1864741013",
      "id" : 1864741013,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29122",
      "node_id" : "IC_kwDOABII585vJbCV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1864741013/reactions"
      },
      "updated_at" : "2023-12-20T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1864741013",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1434889375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434889375"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've spent a ridiculous amount of time understanding what's going on here, and I'm still far from being 100% sure. Perhaps if you touch this comment, you can expand it even further? E.g., connecting to each of the conditions in `else if`",
      "commit_id" : "9ba568c816794698507793a7c1d2a9935bb269b2",
      "created_at" : "2023-12-22T09:34:52Z",
      "diff_hunk" : "@@ -5098,9 +5098,10 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, Peer& peer, std::chrono::seco\n                 state.m_chain_sync.m_sent_getheaders = false;\n             }\n         } else if (state.m_chain_sync.m_timeout == 0s || (state.m_chain_sync.m_work_header != nullptr && state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= state.m_chain_sync.m_work_header->nChainWork)) {\n-            // Our best block known by this peer is behind our tip, and we're either noticing\n-            // that for the first time, OR this peer was able to catch up to some earlier point\n-            // where we checked against our tip.\n+            // Either:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1434889375",
      "id" : 1434889375,
      "line" : 5101,
      "node_id" : "PRRC_kwDOABII585Vhqyf",
      "original_commit_id" : "9ba568c816794698507793a7c1d2a9935bb269b2",
      "original_line" : 5101,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 7,
      "pull_request_review_id" : 1794219517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434889375/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-22T09:34:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434889375",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1435164703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435164703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like I'm not the only one who took a minute to get this ð \r\n\r\nI wouldn't mind expanding the comment if there is am overall agreement that it is incomplete",
      "commit_id" : "9ba568c816794698507793a7c1d2a9935bb269b2",
      "created_at" : "2023-12-22T15:32:47Z",
      "diff_hunk" : "@@ -5098,9 +5098,10 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, Peer& peer, std::chrono::seco\n                 state.m_chain_sync.m_sent_getheaders = false;\n             }\n         } else if (state.m_chain_sync.m_timeout == 0s || (state.m_chain_sync.m_work_header != nullptr && state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= state.m_chain_sync.m_work_header->nChainWork)) {\n-            // Our best block known by this peer is behind our tip, and we're either noticing\n-            // that for the first time, OR this peer was able to catch up to some earlier point\n-            // where we checked against our tip.\n+            // Either:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1435164703",
      "id" : 1435164703,
      "in_reply_to_id" : 1434889375,
      "line" : 5101,
      "node_id" : "PRRC_kwDOABII585ViuAf",
      "original_commit_id" : "9ba568c816794698507793a7c1d2a9935bb269b2",
      "original_line" : 5101,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 7,
      "pull_request_review_id" : 1794642629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435164703/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-22T15:32:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435164703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1440804107"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440804107"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rebased and updated the comment. I also extended the test slightly to cover all possible cases",
      "commit_id" : "1444a261a7fa4ed9ac54957468a2ab03c2b3a13d",
      "created_at" : "2024-01-03T18:48:12Z",
      "diff_hunk" : "@@ -5098,9 +5098,10 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, Peer& peer, std::chrono::seco\n                 state.m_chain_sync.m_sent_getheaders = false;\n             }\n         } else if (state.m_chain_sync.m_timeout == 0s || (state.m_chain_sync.m_work_header != nullptr && state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= state.m_chain_sync.m_work_header->nChainWork)) {\n-            // Our best block known by this peer is behind our tip, and we're either noticing\n-            // that for the first time, OR this peer was able to catch up to some earlier point\n-            // where we checked against our tip.\n+            // Either:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1440804107",
      "id" : 1440804107,
      "in_reply_to_id" : 1434889375,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585V4O0L",
      "original_commit_id" : "9ba568c816794698507793a7c1d2a9935bb269b2",
      "original_line" : 5101,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1802898789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440804107/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-03T18:48:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440804107",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased to fix CI",
      "created_at" : "2024-01-29T22:06:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#issuecomment-1915658857",
      "id" : 1915658857,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29122",
      "node_id" : "IC_kwDOABII585yLqJp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1915658857/reactions"
      },
      "updated_at" : "2024-01-29T22:06:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1915658857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased. This has failed CI once when waiting for the disconnection after:\r\n\r\n```\r\ncur_mock_time += (HEADERS_RESPONSE_TIME + 1)\r\n```\r\nI've tried to reproduce it but I cannot in my local setup, the only thing that comes to mind is that mock time may be too close to the timeout (only one second ahead), so I gave it a delta of 10 seconds instead.\r\n\r\nPS: For context, you can check the failure here: https://cirrus-ci.com/task/4624744360706048?logs=ci#L6520. See how the peer is given the final notice by sending a getheaders message, but the check is performed before the peer gets disconnected. \r\n",
      "created_at" : "2024-02-06T14:55:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#issuecomment-1929956244",
      "id" : 1929956244,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29122",
      "node_id" : "IC_kwDOABII585zCMuU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1929956244/reactions"
      },
      "updated_at" : "2024-02-06T14:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1929956244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485367696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485367696"
         }
      },
      "author_association" : "NONE",
      "body" : "I could be missing something, but a test case covering the reset of eviction timeout when an outbound peer sends us a valid block with more chainwork (i.e. the timeout set to 0 to prevent eviction, and m_work_header/m_sent_getheaders also reinitialized) was not observed.  Do you think it's worth adding?",
      "commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "created_at" : "2024-02-10T23:44:44Z",
      "diff_hunk" : "@@ -5132,16 +5132,19 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, Peer& peer, std::chrono::seco\n         // unless it's invalid, in which case we should find that out and\n         // disconnect from them elsewhere).\n         if (state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= m_chainman.ActiveChain().Tip()->nChainWork) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485367696",
      "id" : 1485367696,
      "line" : 5134,
      "node_id" : "PRRC_kwDOABII585YiOmQ",
      "original_commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "original_line" : 5134,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 3,
      "pull_request_review_id" : 1874277464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485367696/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-11T00:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485367696",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/106488469?v=4",
         "events_url" : "https://api.github.com/users/tdb3/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tdb3/followers",
         "following_url" : "https://api.github.com/users/tdb3/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tdb3/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tdb3",
         "id" : 106488469,
         "login" : "tdb3",
         "node_id" : "U_kgDOBljilQ",
         "organizations_url" : "https://api.github.com/users/tdb3/orgs",
         "received_events_url" : "https://api.github.com/users/tdb3/received_events",
         "repos_url" : "https://api.github.com/users/tdb3/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tdb3/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tdb3/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tdb3"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485370601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485370601"
         }
      },
      "author_association" : "NONE",
      "body" : "Added notes below to provide insight into what was reviewed:\r\n\r\nIf eviction does not occur when it should, then `wait_for_disconnect()` will raise (AssertionError, originally from `wait_until_helper_internal()`).  Confirmed by temporarily setting `cur_mock_time` to a value significantly lower than CHAIN_SYNC_TIMEOUT.\r\n\r\nSimilarly, if unexpected eviction occurs (e.g. in the \"keep catching up\" case), then `send_and_ping()` or `sync_with_ping()` will raise IOError (`from send_raw_message()`).  Confirmed by temporarily inserting a call to `disconnect_p2ps()`.\r\n",
      "commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "created_at" : "2024-02-10T23:51:51Z",
      "diff_hunk" : "@@ -122,6 +129,178 @@ def run_test(self):\n         self.log.debug(\"{} protected peers: {}\".format(len(protected_peers), protected_peers))\n         assert evicted_peers[0] not in protected_peers\n \n+        node.disconnect_p2ps()\n+\n+    def test_outbound_eviction_unprotected(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485370601",
      "id" : 1485370601,
      "line" : 134,
      "node_id" : "PRRC_kwDOABII585YiPTp",
      "original_commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "original_line" : 134,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "test/functional/p2p_eviction.py",
      "position" : 45,
      "pull_request_review_id" : 1874277464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485370601/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-11T00:06:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485370601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/106488469?v=4",
         "events_url" : "https://api.github.com/users/tdb3/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tdb3/followers",
         "following_url" : "https://api.github.com/users/tdb3/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tdb3/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tdb3",
         "id" : 106488469,
         "login" : "tdb3",
         "node_id" : "U_kgDOBljilQ",
         "organizations_url" : "https://api.github.com/users/tdb3/orgs",
         "received_events_url" : "https://api.github.com/users/tdb3/received_events",
         "repos_url" : "https://api.github.com/users/tdb3/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tdb3/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tdb3/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tdb3"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485374401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485374401"
         }
      },
      "author_association" : "NONE",
      "body" : "Added notes below to provide insight into what was reviewed:\r\n\r\nIn `test_outbound_eviction_protected()` if unexpected eviction occurs (i.e. the P2P connection is no longer present), then `sync_with_ping()` will raise (`IOError('Not connected')`, causing the test to fail.  Moved node.disconnect_p2ps() above the last test_node.sync_with_ping() call and, as expected, this occurred.\r\n\r\nnit: The heading comment in the `test_outbound_eviction_protected()` omits that a protected peer is also non-block-only, but this is implicit in the call to `add_outbound_p2p_connection()` using `outbound-full-relay` as the connection_type.\r\n\r\nnet_processing.cpp:\r\n```\r\nA peer is marked as protected if all of these are true:\r\n - its connection type is IsBlockOnlyConn() == false\r\n - it gave us a valid connecting header\r\n - we haven't reached MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT yet\r\n - its chain tip has at least as much work as ours\r\n```\r\n",
      "commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "created_at" : "2024-02-11T00:00:52Z",
      "diff_hunk" : "@@ -122,6 +129,178 @@ def run_test(self):\n         self.log.debug(\"{} protected peers: {}\".format(len(protected_peers), protected_peers))\n         assert evicted_peers[0] not in protected_peers\n \n+        node.disconnect_p2ps()\n+\n+    def test_outbound_eviction_unprotected(self):\n+        # This tests the eviction logic for **unprotected** outbound peers (that is, PeerManagerImpl::ConsiderEviction)\n+        node = self.nodes[0]\n+        cur_mock_time = node.mocktime if node.mocktime else int(time.time())\n+\n+        self.log.info(\"Create an outbound connection and don't send any headers\")\n+        # Test disconnect due to no block being announced in 22+ minutes (headers are not even exchanged)\n+        test_node = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        # Wait for over 20 min to trigger the first eviction timeout. This sets the last call past 2 min in the future.\n+        test_node.sync_with_ping()\n+        cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+        node.setmocktime(cur_mock_time)\n+        test_node.sync_with_ping()\n+        # Wait for over 2 more min to trigger the disconnection\n+        cur_mock_time += (HEADERS_RESPONSE_TIME + 10)\n+        node.setmocktime(cur_mock_time)\n+        self.log.info(\"Test that the peer gets evicted\")\n+        test_node.wait_for_disconnect()\n+\n+        self.log.info(\"Create an outbound connection and send header but never catch up\")\n+        # Mimic a node that just falls behind for long enough\n+        # This should also apply for a node doing IBD that does not catch up in time\n+        # Get our tip header and its parent\n+        tip_header = from_hex(CBlockHeader(), node.getblockheader(node.getbestblockhash(), False))\n+        prev_header = from_hex(CBlockHeader(), node.getblockheader(f\"{tip_header.hashPrevBlock:064x}\", False))\n+\n+        # Connect a peer and make it send us headers ending in our tip's parent\n+        test_node = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        headers_message = msg_headers()\n+        headers_message.headers = [prev_header]\n+        test_node.send_and_ping(headers_message)\n+\n+        # Trigger the timeouts\n+        cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+        node.setmocktime(cur_mock_time)\n+        test_node.sync_with_ping()\n+        cur_mock_time += (HEADERS_RESPONSE_TIME + 10)\n+        node.setmocktime(cur_mock_time)\n+        self.log.info(\"Test that the peer gets evicted\")\n+        test_node.wait_for_disconnect()\n+\n+        self.log.info(\"Create an outbound connection and keep lagging behind, but not too much\")\n+        # Test that if the peer never catches up with our current tip, but it does with the\n+        # expected work that we set when setting the timer (that is, our tip at the time)\n+        # we do not disconnect the peer\n+        test_node = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        self.log.info(\"Mine a block so our peer starts lagging\")\n+        best_block_hash = self.generateblock(self.nodes[0], output=\"raw(42)\", transactions=[])[\"hash\"]\n+        tip_header = from_hex(CBlockHeader(), node.getblockheader(best_block_hash, False))\n+        test_node.sync_with_ping()\n+        self.log.info(\"Keep catching up with the old tip and check that we are not evicted\")\n+        for _ in range(10):\n+            # Advance time but not enough to evict the peer\n+            best_block_hash = self.generateblock(self.nodes[0], output=\"raw(42)\", transactions=[])[\"hash\"]\n+            cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+            node.setmocktime(cur_mock_time)\n+\n+            # Send a header with the old tip\n+            headers_message = msg_headers()\n+            headers_message.headers = [tip_header]\n+            test_node.send_and_ping(headers_message)\n+            tip_header = from_hex(CBlockHeader(), node.getblockheader(best_block_hash, False))\n+\n+            # Check that we are not evicted\n+            cur_mock_time += (HEADERS_RESPONSE_TIME + 1)\n+            node.setmocktime(cur_mock_time)\n+            test_node.sync_with_ping()\n+\n+        self.log.info(\"Create an outbound connection and take some time to catch up, but do it in time\")\n+        # Check that if the peer manages to catch up within time, the timeouts are removed (and the peer is not disconnected)\n+        # We are reusing the peer from the previous case which already sent us a valid (but old) block and whose timer is ticking\n+\n+        # Send an updated headers message matching our tip\n+        headers_message = msg_headers()\n+        headers_message.headers = [from_hex(CBlockHeader(), node.getblockheader(node.getbestblockhash(), False))]\n+        test_node.send_and_ping(headers_message)\n+\n+        # Wait for long enough for the timeouts to have triggered and check that we are still connected\n+        cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+        node.setmocktime(cur_mock_time)\n+        test_node.sync_with_ping()\n+        cur_mock_time += (HEADERS_RESPONSE_TIME + 1)\n+        node.setmocktime(cur_mock_time)\n+        self.log.info(\"Test that the peer does not get evicted\")\n+        test_node.sync_with_ping()\n+\n+        node.disconnect_p2ps()\n+\n+    def test_outbound_eviction_protected(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485374401",
      "id" : 1485374401,
      "line" : 222,
      "node_id" : "PRRC_kwDOABII585YiQPB",
      "original_commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "original_line" : 222,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "test/functional/p2p_eviction.py",
      "position" : 133,
      "pull_request_review_id" : 1874277464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485374401/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-11T00:14:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485374401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/106488469?v=4",
         "events_url" : "https://api.github.com/users/tdb3/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tdb3/followers",
         "following_url" : "https://api.github.com/users/tdb3/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tdb3/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tdb3",
         "id" : 106488469,
         "login" : "tdb3",
         "node_id" : "U_kgDOBljilQ",
         "organizations_url" : "https://api.github.com/users/tdb3/orgs",
         "received_events_url" : "https://api.github.com/users/tdb3/received_events",
         "repos_url" : "https://api.github.com/users/tdb3/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tdb3/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tdb3/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tdb3"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485375517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485375517"
         }
      },
      "author_association" : "NONE",
      "body" : "nit:  I could be missing something, but a test case covering the limit of protected outbound peers (i.e. `MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT`) was not observed.  Do you think it's worth adding?  \r\n\r\nThinking out loud:\r\n`MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4`, so maybe adding another peer that would normally be considered protected and seeing that it is not protected could test this?\r\n",
      "commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "created_at" : "2024-02-11T00:03:41Z",
      "diff_hunk" : "@@ -122,6 +129,178 @@ def run_test(self):\n         self.log.debug(\"{} protected peers: {}\".format(len(protected_peers), protected_peers))\n         assert evicted_peers[0] not in protected_peers\n \n+        node.disconnect_p2ps()\n+\n+    def test_outbound_eviction_unprotected(self):\n+        # This tests the eviction logic for **unprotected** outbound peers (that is, PeerManagerImpl::ConsiderEviction)\n+        node = self.nodes[0]\n+        cur_mock_time = node.mocktime if node.mocktime else int(time.time())\n+\n+        self.log.info(\"Create an outbound connection and don't send any headers\")\n+        # Test disconnect due to no block being announced in 22+ minutes (headers are not even exchanged)\n+        test_node = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        # Wait for over 20 min to trigger the first eviction timeout. This sets the last call past 2 min in the future.\n+        test_node.sync_with_ping()\n+        cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+        node.setmocktime(cur_mock_time)\n+        test_node.sync_with_ping()\n+        # Wait for over 2 more min to trigger the disconnection\n+        cur_mock_time += (HEADERS_RESPONSE_TIME + 10)\n+        node.setmocktime(cur_mock_time)\n+        self.log.info(\"Test that the peer gets evicted\")\n+        test_node.wait_for_disconnect()\n+\n+        self.log.info(\"Create an outbound connection and send header but never catch up\")\n+        # Mimic a node that just falls behind for long enough\n+        # This should also apply for a node doing IBD that does not catch up in time\n+        # Get our tip header and its parent\n+        tip_header = from_hex(CBlockHeader(), node.getblockheader(node.getbestblockhash(), False))\n+        prev_header = from_hex(CBlockHeader(), node.getblockheader(f\"{tip_header.hashPrevBlock:064x}\", False))\n+\n+        # Connect a peer and make it send us headers ending in our tip's parent\n+        test_node = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        headers_message = msg_headers()\n+        headers_message.headers = [prev_header]\n+        test_node.send_and_ping(headers_message)\n+\n+        # Trigger the timeouts\n+        cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+        node.setmocktime(cur_mock_time)\n+        test_node.sync_with_ping()\n+        cur_mock_time += (HEADERS_RESPONSE_TIME + 10)\n+        node.setmocktime(cur_mock_time)\n+        self.log.info(\"Test that the peer gets evicted\")\n+        test_node.wait_for_disconnect()\n+\n+        self.log.info(\"Create an outbound connection and keep lagging behind, but not too much\")\n+        # Test that if the peer never catches up with our current tip, but it does with the\n+        # expected work that we set when setting the timer (that is, our tip at the time)\n+        # we do not disconnect the peer\n+        test_node = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        self.log.info(\"Mine a block so our peer starts lagging\")\n+        best_block_hash = self.generateblock(self.nodes[0], output=\"raw(42)\", transactions=[])[\"hash\"]\n+        tip_header = from_hex(CBlockHeader(), node.getblockheader(best_block_hash, False))\n+        test_node.sync_with_ping()\n+        self.log.info(\"Keep catching up with the old tip and check that we are not evicted\")\n+        for _ in range(10):\n+            # Advance time but not enough to evict the peer\n+            best_block_hash = self.generateblock(self.nodes[0], output=\"raw(42)\", transactions=[])[\"hash\"]\n+            cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+            node.setmocktime(cur_mock_time)\n+\n+            # Send a header with the old tip\n+            headers_message = msg_headers()\n+            headers_message.headers = [tip_header]\n+            test_node.send_and_ping(headers_message)\n+            tip_header = from_hex(CBlockHeader(), node.getblockheader(best_block_hash, False))\n+\n+            # Check that we are not evicted\n+            cur_mock_time += (HEADERS_RESPONSE_TIME + 1)\n+            node.setmocktime(cur_mock_time)\n+            test_node.sync_with_ping()\n+\n+        self.log.info(\"Create an outbound connection and take some time to catch up, but do it in time\")\n+        # Check that if the peer manages to catch up within time, the timeouts are removed (and the peer is not disconnected)\n+        # We are reusing the peer from the previous case which already sent us a valid (but old) block and whose timer is ticking\n+\n+        # Send an updated headers message matching our tip\n+        headers_message = msg_headers()\n+        headers_message.headers = [from_hex(CBlockHeader(), node.getblockheader(node.getbestblockhash(), False))]\n+        test_node.send_and_ping(headers_message)\n+\n+        # Wait for long enough for the timeouts to have triggered and check that we are still connected\n+        cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+        node.setmocktime(cur_mock_time)\n+        test_node.sync_with_ping()\n+        cur_mock_time += (HEADERS_RESPONSE_TIME + 1)\n+        node.setmocktime(cur_mock_time)\n+        self.log.info(\"Test that the peer does not get evicted\")\n+        test_node.sync_with_ping()\n+\n+        node.disconnect_p2ps()\n+\n+    def test_outbound_eviction_protected(self):\n+        # This tests the eviction logic for **protected** outbound peers (that is, PeerManagerImpl::ConsiderEviction)\n+        # Outbound connections are flagged as protected as long as they have sent us a connecting block with at least as\n+        # much work as our current tip and we have enough empty protected_peers slots.\n+        node = self.nodes[0]\n+        cur_mock_time = node.mocktime if node.mocktime else int(time.time())\n+        tip_header = from_hex(CBlockHeader(), node.getblockheader(node.getbestblockhash(), False))\n+\n+        self.log.info(\"Create an outbound connection to a peer that shares our tip so it gets granted protection\")\n+        test_node = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        headers_message = msg_headers()\n+        headers_message.headers = [tip_header]\n+        test_node.send_and_ping(headers_message)\n+\n+        self.log.info(\"Mine a new block and sync with our peer\")\n+        self.generateblock(self.nodes[0], output=\"raw(42)\", transactions=[])\n+        test_node.sync_with_ping()\n+\n+        self.log.info(\"Let enough time pass for the timeouts to go off\")\n+        # Trigger the timeouts and check how we are still connected\n+        cur_mock_time += (CHAIN_SYNC_TIMEOUT + 1)\n+        node.setmocktime(cur_mock_time)\n+        test_node.sync_with_ping()\n+        cur_mock_time += (HEADERS_RESPONSE_TIME + 1)\n+        node.setmocktime(cur_mock_time)\n+        self.log.info(\"Test that the node does not get evicted\")\n+        test_node.sync_with_ping()\n+\n+        node.disconnect_p2ps()\n+\n+    def test_outbound_eviction_protected_mixed(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29122#discussion_r1485375517",
      "id" : 1485375517,
      "line" : 252,
      "node_id" : "PRRC_kwDOABII585YiQgd",
      "original_commit_id" : "edc14bc9da332cae39f8803db559b532b3c74e16",
      "original_line" : 252,
      "original_position" : 163,
      "original_start_line" : null,
      "path" : "test/functional/p2p_eviction.py",
      "position" : 163,
      "pull_request_review_id" : 1874277464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29122",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485375517/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-11T00:18:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485375517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/106488469?v=4",
         "events_url" : "https://api.github.com/users/tdb3/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tdb3/followers",
         "following_url" : "https://api.github.com/users/tdb3/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tdb3/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tdb3",
         "id" : 106488469,
         "login" : "tdb3",
         "node_id" : "U_kgDOBljilQ",
         "organizations_url" : "https://api.github.com/users/tdb3/orgs",
         "received_events_url" : "https://api.github.com/users/tdb3/received_events",
         "repos_url" : "https://api.github.com/users/tdb3/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tdb3/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tdb3/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tdb3"
      }
   }
]
