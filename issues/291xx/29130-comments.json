[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29130).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1882763867), [Sjors](https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1946159253) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29136](https://github.com/bitcoin/bitcoin/pull/29136) (wallet: `addhdkey` RPC to add just keys to wallets via new `void(KEY)` descriptor by achow101)\n* [#28724](https://github.com/bitcoin/bitcoin/pull/28724) (wallet: Cleanup accidental encryption keys in watchonly wallets by achow101)\n* [#28574](https://github.com/bitcoin/bitcoin/pull/28574) (wallet: optimize migration process, batch db transactions by furszy)\n* [#28333](https://github.com/bitcoin/bitcoin/pull/28333) (wallet: Construct ScriptPubKeyMans with all data rather than loaded progressively by achow101)\n* [#28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#26008](https://github.com/bitcoin/bitcoin/pull/26008) (wallet: cache IsMine scriptPubKeys to improve performance of descriptor wallets by achow101)\n* [#25979](https://github.com/bitcoin/bitcoin/pull/25979) ([WIP] wallet: standardize change output detection process by furszy)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-12-22T00:05:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1867069599",
      "id" : 1867069599,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29130",
      "node_id" : "IC_kwDOABII585vSTif",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867069599/reactions"
      },
      "updated_at" : "2024-02-15T14:02:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867069599",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435355508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"desc spkm: Add functions to retrieve specific private keys\" (484711baa994d482110edaf510377181b8b2b465)\r\n\r\nIt looks like this function would be a little more flexible and efficient if took a CKeyID parameter instead of a CPubKey",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T21:34:00Z",
      "diff_hunk" : "@@ -2137,6 +2138,35 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CPubKey& pubkey) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435355508",
      "id" : 1435355508,
      "line" : 2141,
      "node_id" : "PRRC_kwDOABII585Vjcl0",
      "original_commit_id" : "484711baa994d482110edaf510377181b8b2b465",
      "original_line" : 2141,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 12,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nWould suggest making these name-only parameters to avoid different bool options being confused with each other, and to leave room to add new positional parameters in the future. You could do this with:\r\n\r\n```diff\r\n--- a/src/rpc/client.cpp\r\n+++ b/src/rpc/client.cpp\r\n@@ -274,8 +274,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\r\n     { \"logging\", 1, \"exclude\" },\r\n     { \"disconnectnode\", 1, \"nodeid\" },\r\n     { \"upgradewallet\", 0, \"version\" },\r\n+    { \"gethdkeys\", 0, \"options\" },\r\n     { \"gethdkeys\", 0, \"active_only\" },\r\n-    { \"gethdkeys\", 1, \"private\" },\r\n+    { \"gethdkeys\", 0, \"private\" },\r\n     { \"createwalletdescriptor\", 1, \"internal\" },\r\n     // Echo with conversion (For testing only)\r\n     { \"echojson\", 0, \"arg0\" },\r\n--- a/src/wallet/rpc/wallet.cpp\r\n+++ b/src/wallet/rpc/wallet.cpp\r\n@@ -819,8 +819,9 @@ RPCHelpMan gethdkeys()\r\n         \"gethdkeys\",\r\n         \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\r\n         {\r\n-            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\r\n-            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\r\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\r\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\r\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}}},\r\n         },\r\n         RPCResult{RPCResult::Type::ARR, \"\", \"\", {\r\n             {\r\n@@ -851,8 +852,9 @@ RPCHelpMan gethdkeys()\r\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\r\n             }\r\n \r\n-            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\r\n-            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\r\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\r\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\r\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\r\n             if (priv) {\r\n                 EnsureWalletIsUnlocked(*wallet);\r\n             }\r\n```",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:13:42Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492",
      "id" : 1435366492,
      "line" : 823,
      "node_id" : "PRRC_kwDOABII585VjfRc",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 823,
      "original_position" : 11,
      "original_start_line" : 822,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 11,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 822,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435368965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nNote: This is better than what I suggested. I was originally thinking this default should be true, to make it more convenient to get active hd key and ignore other keys. But defaulting to false is actually better, because it's still easy to get the active hd key with an option, and it's probably more confusing to see missing keys than extra keys. Also this default makes `gethdkeys` output more consistent with `listdescriptors` output.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:23:59Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435368965",
      "id" : 1435368965,
      "line" : 822,
      "node_id" : "PRRC_kwDOABII585Vjf4F",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 822,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 10,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435369940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nCould use `Assert(desc_spkm)` to avoid undefined behavior if it is null.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:27:14Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435369940",
      "id" : 1435369940,
      "line" : 873,
      "node_id" : "PRRC_kwDOABII585VjgHU",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 873,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 61,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435372329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nThis is just general style feedback, but I think where possible it's better to use `auto&` or `auto*` instead of bare `auto` because with bare `auto` in c++, you don't know if a potentially expensive object copy will happen without manually checking the type. With `auto&` or `auto*` you know there won't be an big copy without having to think about it. Up to you though if you prefer less verbosity instead",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:38:36Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435372329",
      "id" : 1435372329,
      "line" : 872,
      "node_id" : "PRRC_kwDOABII585Vjgsp",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 872,
      "original_position" : 60,
      "original_start_line" : 871,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 60,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 871,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435375318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nIt seems like theoretically there could be a race condition if the wallet became locked during this loop. Also the code ignores other potential errors. Would maybe suggest:\r\n\r\n```c++\r\nif (priv && desc_spkm->HasPrivKey(xpub.pubkey)) {\r\n  wallet_xprvs[xpub] = CExtKey(xpub, *CHECK_NONFATAL(desc_spkm->GetKey(xpub.pubkey)));\r\n}\r\n```",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:49:36Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435375318",
      "id" : 1435375318,
      "line" : 884,
      "node_id" : "PRRC_kwDOABII585VjhbW",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 884,
      "original_position" : 72,
      "original_start_line" : 882,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 72,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 882,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435376241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nNot important but I think I would suggest switching to `auto&` in the loops above and using `std::move(desc)` here to avoid copying strings when not necessary.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:52:24Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435376241",
      "id" : 1435376241,
      "line" : 894,
      "node_id" : "PRRC_kwDOABII585Vjhpx",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 894,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 82,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435377746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nCould use std::move here and on line 906 as well to avoid copying univalue objects. I will stop commenting about copies, though. I don't think they are important, I just figure it's very easy to avoid copying and we don't need 3 copies of each descriptor string so why not avoid it.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:56:22Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(d);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435377746",
      "id" : 1435377746,
      "line" : 898,
      "node_id" : "PRRC_kwDOABII585VjiBS",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 898,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 86,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435381067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Refactor function for single DescSPKM setup\" (280d26b19e9222afa902ad09cd7b42c2eb3e0044)\r\n\r\nSeems like the &batch argument option is replaced with nullptr here. This seems like a bug, but if it is intended behavior should definitely have a comment explaining the nullptr.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:05:00Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keypool_size));\n+    if (IsCrypted()) {\n+        if (IsLocked()) {\n+            throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+        }\n+        if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435381067",
      "id" : 1435381067,
      "line" : 3564,
      "node_id" : "PRRC_kwDOABII585Vji1L",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3564,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 30,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435383694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Refactor function for single DescSPKM setup\" (280d26b19e9222afa902ad09cd7b42c2eb3e0044)\r\n\r\nNot important, but I think it would be a little better to return DescriptorScriptPubKeyMan& to make the return type self-documenting. Also to avoid the need for callers to have to look up the keyman object after they just created it.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:11:32Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435383694",
      "id" : 1435383694,
      "line" : 3556,
      "node_id" : "PRRC_kwDOABII585VjjeO",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3556,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 22,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, descspkm: Refactor wallet descriptor generation to static func\" (fc3ccf068fbbf429eff9dce072bc33d78ad27509)\r\n\r\nNot important, but it doesn't seem like it makes sense for this function to be attached to the keyman class. If you want it to be a static method, it would probably make more sense being a static method of WalletDescriptor, since it is basically just a constructor for it. But I would probably make it a standalone function not attached to any class, just to reduce interdependencies in this code.\r\n\r\nAlso since the private key is not used here, I think it would be clearer for this to take a CExtPubKey parameter instead of a CPubKey.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:21:18Z",
      "diff_hunk" : "@@ -624,6 +624,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool IsHDEnabled() const override;\n \n+    static WalletDescriptor GenerateWalletDescriptor(const CExtKey& master_key, const OutputType& output_type, bool internal);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387051",
      "id" : 1435387051,
      "line" : 627,
      "node_id" : "PRRC_kwDOABII585VjkSr",
      "original_commit_id" : "fc3ccf068fbbf429eff9dce072bc33d78ad27509",
      "original_line" : 627,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 4,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetActiveHDPubKey to retrieve hd key from active descriptors\" (647118e36563ef421b6c4f6edeac33ce6aff5588)\r\n\r\nThis is probably in the wrong commit, I don't see this method being added here.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:24:06Z",
      "diff_hunk" : "@@ -1044,6 +1044,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Whether the (external) signer performs R-value signature grinding\n     bool CanGrindR() const;\n+\n+    //! Find the single xpub used by all active descriptors, or return nullopt\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> CWallet::GetKey(const CPubKey& pubkey) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387959",
      "id" : 1435387959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vjkg3",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 1052,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435391901"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetActiveHDPubKey to retrieve hd key from active descriptors\" (647118e36563ef421b6c4f6edeac33ce6aff5588)\r\n\r\nI'm confused. Is this actually true? I thought `importdescriptors` let you freely import descriptors with different keys and control which ones are active.\r\n\r\nIf this is always true, it would be helpful if comment mentioned what was enforcing it (since it's not obvious where to look). If it's not true, I think would be better if this function returned `std::set<CExtPubKey>` instead of `std::optional<CExtPubKey>` and callers decided what to do if the set size is more than 1.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:33:49Z",
      "diff_hunk" : "@@ -4365,4 +4365,37 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::optional<CExtPubKey> CWallet::GetActiveHDPubKey() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;\n+\n+    std::optional<CExtPubKey> active_xpub;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        if (desc_xpubs.size() != 1 || desc_pubkeys.size() != 0) {\n+            return std::nullopt;\n+        }\n+        const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+        // All active descriptors must have the same xpub",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435391901",
      "id" : 1435391901,
      "line" : 4391,
      "node_id" : "PRRC_kwDOABII585Vjled",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 4391,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 92,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435398854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (01b2aab1f8f61bc85345e106893e0ff2e590a56a)\r\n\r\nWould suggest making the internal and hdkey paramers name-only parameters using OBJ_NAMED_PARAMS (see earlier comment https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492) to avoid usage errors and make it easier to add new options and arguments later.\r\n\r\nWould suggest keeping address_type as a positional parameter, though, since it's required and the values are unambiguous. Also could consider renaming \"address_type\" to just \"type\" to make it easier to pass by name and because maybe we will want to support creating other types of descriptors that don't correspond exactly to address types.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:56:11Z",
      "diff_hunk" : "@@ -913,6 +913,108 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"address_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+            {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435398854",
      "id" : 1435398854,
      "line" : 926,
      "node_id" : "PRRC_kwDOABII585VjnLG",
      "original_commit_id" : "01b2aab1f8f61bc85345e106893e0ff2e590a56a",
      "original_line" : 926,
      "original_position" : 14,
      "original_start_line" : 924,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 114,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 924,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:05:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435423974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`cs_wallet` is being held earlier, and that will prevent the wallet from locked.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T01:22:47Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435423974",
      "id" : 1435423974,
      "in_reply_to_id" : 1435375318,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjtTm",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 889,
      "original_position" : 72,
      "original_start_line" : 882,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795367297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T01:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:10:45Z",
      "diff_hunk" : "@@ -2137,6 +2138,35 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CPubKey& pubkey) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436394",
      "id" : 1435436394,
      "in_reply_to_id" : 1435355508,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwVq",
      "original_commit_id" : "484711baa994d482110edaf510377181b8b2b465",
      "original_line" : 2141,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:10:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as suggested",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:10:52Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436422",
      "id" : 1435436422,
      "in_reply_to_id" : 1435366492,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwWG",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 823,
      "original_position" : 11,
      "original_start_line" : 822,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a `CHECK_NONFATAL` (one of the linters doesn't like `Assert`)",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:03Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436471",
      "id" : 1435436471,
      "in_reply_to_id" : 1435369940,
      "line" : 878,
      "node_id" : "PRRC_kwDOABII585VjwW3",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 878,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 66,
      "pull_request_review_id" : 1795372530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:31Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436629",
      "id" : 1435436629,
      "in_reply_to_id" : 1435372329,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwZV",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 872,
      "original_position" : 60,
      "original_start_line" : 871,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:39Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436652",
      "id" : 1435436652,
      "in_reply_to_id" : 1435376241,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwZs",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 894,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372573,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:43Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(d);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436670",
      "id" : 1435436670,
      "in_reply_to_id" : 1435377746,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwZ-",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 898,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, fixed.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:52Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keypool_size));\n+    if (IsCrypted()) {\n+        if (IsLocked()) {\n+            throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+        }\n+        if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436690",
      "id" : 1435436690,
      "in_reply_to_id" : 1435381067,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwaS",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3564,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:12:05Z",
      "diff_hunk" : "@@ -624,6 +624,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool IsHDEnabled() const override;\n \n+    static WalletDescriptor GenerateWalletDescriptor(const CExtKey& master_key, const OutputType& output_type, bool internal);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436779",
      "id" : 1435436779,
      "in_reply_to_id" : 1435387051,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vjwbr",
      "original_commit_id" : "fc3ccf068fbbf429eff9dce072bc33d78ad27509",
      "original_line" : 627,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 1795372651,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:12:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moved to the right commit.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:12:14Z",
      "diff_hunk" : "@@ -1044,6 +1044,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Whether the (external) signer performs R-value signature grinding\n     bool CanGrindR() const;\n+\n+    //! Find the single xpub used by all active descriptors, or return nullopt\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> CWallet::GetKey(const CPubKey& pubkey) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436813",
      "id" : 1435436813,
      "in_reply_to_id" : 1435387959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwcN",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 1052,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1795372662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:12:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This function was intended to only return a `CExtPubKey` if all active descriptors shared the same xpub, so if they differed, it would return `std::nullopt`. The comment was stating what it was attempting to do, not what it was expecting.\r\n\r\nIn any case, having the caller determine what to do if there is more than one xpub in the active descriptors is probably better, so I've changed it to do that and this comment is no longer relevant.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:14:11Z",
      "diff_hunk" : "@@ -4365,4 +4365,37 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::optional<CExtPubKey> CWallet::GetActiveHDPubKey() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;\n+\n+    std::optional<CExtPubKey> active_xpub;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        if (desc_xpubs.size() != 1 || desc_pubkeys.size() != 0) {\n+            return std::nullopt;\n+        }\n+        const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+        // All active descriptors must have the same xpub",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437218",
      "id" : 1435437218,
      "in_reply_to_id" : 1435391901,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vjwii",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 4391,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372884,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:14:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as suggested.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:14:18Z",
      "diff_hunk" : "@@ -913,6 +913,108 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"address_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+            {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437249",
      "id" : 1435437249,
      "in_reply_to_id" : 1435398854,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwjB",
      "original_commit_id" : "01b2aab1f8f61bc85345e106893e0ff2e590a56a",
      "original_line" : 926,
      "original_position" : 14,
      "original_start_line" : 924,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435439477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:22:37Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435439477",
      "id" : 1435439477,
      "in_reply_to_id" : 1435383694,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjxF1",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3556,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795373568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:22:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435607572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since this PR is adding the `createwalletdescriptor` method, maybe this is a good place to list some ways it could be extended in the future:\r\n\r\n- Probably it would be good not to require wallet to be unlocked when dealing with public keys. Currently the specified `hdkey` is unencrypted and reencrypted, but this shouldn't be necessary because the key is already in the wallet. (The only reason this seems to happen now is to copy the key, because internally we store keys in a slightly denormalized format, once per descriptor.)\r\n\r\n- It would be nice if `hdkey` parameter accepted not just public hd keys, but also private hd keys, and a \"generate\" value in a blank wallet so users don't need to chain together multiple commands to accomplish simple tasks, and so we only need two RPC methods which add descriptors and keys to the wallet: `importdescriptors` and `createwalletdescriptor`, without a third `addhdkey` method. Examples:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key and use it in a new descriptor\r\n  createwalletdescriptor bech32 generate\r\n\r\n   # In a blank wallet, import an hd key and use it in a new descriptor\r\n  createwalletdescriptor bech32 xprv...\r\n  ```\r\n\r\n- It sounds like we want to discourage having multiple hd keys per wallet, and encourage having separate wallets instead. But if we did want to allow these, we could add a `force` option to allow creating descriptors with new hd keys even when existing hd keys are present. We could also allow a `rotate` option to allow this and additionally set descriptors using old keys to be inactive.\r\n\r\n- The `hdkey` parameter could accept hd master keys in different formats, for example as seed keys like the current `sethdseed` method, or seed hex strings like [#29054](https://github.com/bitcoin/bitcoin/pull/29054/commits/840516148cdb6ed6ce956d2d2c96a1cacc12bc85), or seed shares like [#27351](https://github.com/bitcoin/bitcoin/pull/27351/commits/e29e656cbdd7e230cd5d04910e93c1cc562d593b).\r\n\r\n- It would be nice if `type` parameter accepted a \"defaults\" value to set up descriptors for all default output types. Examples:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key and generate default set of descriptors\r\n  createwalletdescriptor defaults generate\r\n\r\n  # Add missing descriptors to an existing wallet. For example, upgrade\r\n  # an older wallet not supporting bech32m to support it.\r\n  createwalletdescriptor defaults\r\n  ```\r\n\r\n- To support multisig, `type` parameter could accept an \"hdkey\" value to generate an [unused](https://github.com/bitcoin/bitcoin/pull/29136#issuecomment-1868202696) hd key in a blank wallet:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key in an unused descriptor and output unused(xpub...)\r\n  createwalletdescriptor hdkey generate\r\n\r\n  # Alternately, import an unused key\r\n  createwalletdescriptor hdkey xprv...\r\n\r\n  # Import multisig descriptor with wallet public keys\r\n  importdescriptors [...]\r\n  ```\r\n\r\n- Maybe in the future to make multisig setup easier, `type` parameter could accept a \"multisig\" value and additional options to make it easier to create the descriptor using the right keys without doing extra work or using an outside tool.\r\n\r\n- Not recommending it, but I could imagine `type` and `hdkey` parameters being extended to accept other values in the future. For example maybe with [#27351](https://github.com/bitcoin/bitcoin/pull/27351), a \"codex32\" type could be useful. And if a wallet didn't have the same hdkey for every output type, it might be useful to be able specify \"default' for the hdkey parameter to use the hd key from the default output type, like `getnewaddress`.\r\n\r\n- It could make sense for `createwalletdescriptor` and `importdescriptors` to have other options in common. For example, it might make sense for `createwalletdescriptor` to accept a `timestamp` option when adding a descriptor with an existing hdkey, to rescan for transactions with the new descriptor.  In general `createwalletdescriptor` could be a higher level alternative to `importdescriptors` that is less flexible but easier to use for common tasks.\r\n\r\n- It could make sense to add an \"external\" type and `hd_account` option (see [#29129 (comment)](https://github.com/bitcoin/bitcoin/pull/29129#issuecomment-1869859432)) for external signer wallets :\r\n  ```shell\r\n  # Add descriptors from the external signer with the specified BIP44 account\r\n  createwalletdescriptor type=external hd_account=123\r\n  ```",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2023-12-23T13:45:20Z",
      "diff_hunk" : "@@ -813,6 +813,216 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey.GetID())) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", std::move(desc));\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(std::move(d));\n+                }\n+                UniValue xpub_info(UniValue::VOBJ);\n+                xpub_info.pushKV(\"xpub\", EncodeExtPubKey(xpub));\n+                xpub_info.pushKV(\"has_private\", has_xprv);\n+                if (priv) {\n+                    xpub_info.pushKV(\"xprv\", EncodeExtKey(wallet_xprvs.at(xpub)));\n+                }\n+                xpub_info.pushKV(\"descriptors\", std::move(descriptors));\n+\n+                response.push_back(std::move(xpub_info));\n+            }\n+\n+            return response;\n+        },\n+    };\n+}\n+\n+static RPCHelpMan createwalletdescriptor()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435607572",
      "id" : 1435607572,
      "line" : 921,
      "node_id" : "PRRC_kwDOABII585VkaIU",
      "original_commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "original_line" : 921,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 109,
      "pull_request_review_id" : 1795440020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T23:56:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445260009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445260009"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"desc spkm: Add functions to retrieve specific private keys\" (ebd02d73241c0922f486cdf14719281c079b45c7)\r\n\r\nMaybe add a comment saying it returns nullopt if the key doesn't exist, or can't be decrypted because the wallet is locked, or because there's decryption error. Otherwise it's not clear what the function is assuming or when it returns nullopt.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-08T19:55:07Z",
      "diff_hunk" : "@@ -628,6 +628,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal);\n \n     bool HavePrivateKeys() const override;\n+    bool HasPrivKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445260009",
      "id" : 1445260009,
      "line" : 633,
      "node_id" : "PRRC_kwDOABII585WJOrp",
      "original_commit_id" : "ebd02d73241c0922f486cdf14719281c079b45c7",
      "original_line" : 633,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 6,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445260009/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445260009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445262239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445262239"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (cbe990b1a95e6331106c3ce6d1f2abd860f88ea8)\r\n\r\nI  think this example is not right anymore since the parameter needs to be named. There seems to be a HelpExampleCliNamed function for this.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-08T19:57:16Z",
      "diff_hunk" : "@@ -813,6 +813,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445262239",
      "id" : 1445262239,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WJPOf",
      "original_commit_id" : "cbe990b1a95e6331106c3ce6d1f2abd860f88ea8",
      "original_line" : 845,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445262239/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445262239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445380623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445380623"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetActiveHDPubKeys to retrieve xpubs from active descriptors\" (2621ca0e6418b406161b21b6afac159b0be775b7)\r\n\r\nShould delete this comment if it just applies to calling code (it doesn't seem to be enforced here).",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-08T21:49:01Z",
      "diff_hunk" : "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445380623",
      "id" : 1445380623,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WJsIP",
      "original_commit_id" : "2621ca0e6418b406161b21b6afac159b0be775b7",
      "original_line" : 4383,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445380623/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445380623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446440048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446440048"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add IsActiveScriptPubKeyMan\" (2c98b2f395eafa125054e2f6e7c570e18795e318)\r\n\r\nWould be a little better to take a reference than a pointer, since it's not useful to be able to pass null.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:10:37Z",
      "diff_hunk" : "@@ -936,6 +936,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+    bool IsActiveScriptPubKeyMan(const ScriptPubKeyMan* spkm) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446440048",
      "id" : 1446440048,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNuxw",
      "original_commit_id" : "2c98b2f395eafa125054e2f6e7c570e18795e318",
      "original_line" : 939,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446440048/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446440048",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446457022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446457022"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Refactor function for single DescSPKM setup\" (8d107d5f48c2fae0d09bf9be79f9cf47daad6241)\r\n\r\nWould be good for this to return a reference instead of a pointer. It seems to never return null, always return non-null or throw an exception.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:28:34Z",
      "diff_hunk" : "@@ -1011,6 +1011,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     void DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n+    //! Create new DescriptorScriptPubKeyMan and add it to the wallet\n+    DescriptorScriptPubKeyMan* SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446457022",
      "id" : 1446457022,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNy6-",
      "original_commit_id" : "8d107d5f48c2fae0d09bf9be79f9cf47daad6241",
      "original_line" : 1015,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446457022/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446457022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446462443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446462443"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetActiveHDPubKeys to retrieve xpubs from active descriptors\" (2621ca0e6418b406161b21b6afac159b0be775b7)\r\n\r\nWould probably be good to change this to an assert. Otherwise it could be called in legacy code and seem to succeed but never return data.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:34:32Z",
      "diff_hunk" : "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446462443",
      "id" : 1446462443,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN0Pr",
      "original_commit_id" : "2621ca0e6418b406161b21b6afac159b0be775b7",
      "original_line" : 4374,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446462443/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446462443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446464920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446464920"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetActiveHDPubKeys to retrieve xpubs from active descriptors\" (2621ca0e6418b406161b21b6afac159b0be775b7)\r\n\r\nstd::move would be appropriate here",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:37:16Z",
      "diff_hunk" : "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        active_xpubs.merge(desc_xpubs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446464920",
      "id" : 1446464920,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN02Y",
      "original_commit_id" : "2621ca0e6418b406161b21b6afac159b0be775b7",
      "original_line" : 4387,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446464920/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446464920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446468708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446468708"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Be able to retrieve single key from descriptors\" (8bcb89d3730d30a3202fcee172fd709a9f588a4e)\r\n\r\nAgain I think this would be a little better as an assert so if this is called in legacy wallet code it doesn't appear to succeed but never return anything.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:39:48Z",
      "diff_hunk" : "@@ -4388,4 +4388,19 @@ std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n     }\n     return active_xpubs;\n }\n+\n+std::optional<CKey> CWallet::GetKey(const CKeyID& keyid) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446468708",
      "id" : 1446468708,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN1xk",
      "original_commit_id" : "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "original_line" : 4394,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446468708/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446468708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446469811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446469811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Be able to retrieve single key from descriptors\" (8bcb89d3730d30a3202fcee172fd709a9f588a4e)\r\n\r\nAgain would be good to say this returns null when the key is missing or the wallet is locked.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:41:04Z",
      "diff_hunk" : "@@ -1047,6 +1047,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Retrieve the xpubs in use by the active descriptors\n     std::set<CExtPubKey> GetActiveHDPubKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446469811",
      "id" : 1446469811,
      "line" : 1053,
      "node_id" : "PRRC_kwDOABII585WN2Cz",
      "original_commit_id" : "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "original_line" : 1053,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : 27,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446469811/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446469811",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446473752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446473752"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nMaybe consider calling the local variable something like like `opt_internal` or `internal_only` since there is another variable below called `internal` which shadows this.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:45:28Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446473752",
      "id" : 1446473752,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN3AY",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 963,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446473752/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446473752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446475089"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446475089"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nIt would be nice to drop the requirement that the wallet is unlocked. If this is just copying the key from one descriptor to another, there should not be a need to decrypt it, I would think.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:46:55Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446475089",
      "id" : 1446475089,
      "line" : 975,
      "node_id" : "PRRC_kwDOABII585WN3VR",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 975,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 163,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446475089/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446475089",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446477656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446477656"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nCould std::move",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:49:50Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\n+                }\n+                spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\n+            }\n+\n+            // Generate spks, fill caches, etc.\n+            pwallet->TopUpKeyPool();\n+\n+            // Fetch each descspkm from the wallet in order to get the descriptor strings\n+            UniValue descs{UniValue::VARR};\n+            for (const auto* spkm : spkms) {\n+                std::string desc_str;\n+                bool ok = spkm->GetDescriptorString(desc_str, false);\n+                CHECK_NONFATAL(ok);\n+                descs.push_back(desc_str);\n+            }\n+            UniValue out{UniValue::VOBJ};\n+            out.pushKV(\"descs\", descs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446477656",
      "id" : 1446477656,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN39Y",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 1020,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446477656/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446477656",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446480817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446480817"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: Add test for createwalletdescriptor\" (c10150b6150083440af4f0aa1110c8aa99ba2dc8)\r\n\r\nSeems no test is not checking the createwalletdescriptor return value. Might be useful to add.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T18:53:19Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        curr_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        assert_equal(len(curr_descs), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        old_descs = curr_descs\n+        wallet.createwalletdescriptor(\"bech32\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446480817",
      "id" : 1446480817,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN4ux",
      "original_commit_id" : "c10150b6150083440af4f0aa1110c8aa99ba2dc8",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "test/functional/wallet_createwalletdescriptor.py",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446480817/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446480817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446492828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446492828"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nIt doesn't seem great to throw in the middle of this loop, since it could result in a situation where one descriptor is partially created, but the RPC returns an error because the second descriptor already exists.\r\n\r\nProbably the nicer to thing would be to only throw if no descriptor was created:\r\n\r\n```c++\r\nfor (bool internal : internals) {\r\n    WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\r\n    uint256 w_id = DescriptorID(*w_desc.descriptor);\r\n    // Don't create descriptors that already exist.\r\n    if (!pwallet->GetScriptPubKeyMan(w_id)) {\r\n        spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\r\n    }\r\n}\r\nif (spkms.empty()) throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\r\n```",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-09T19:06:18Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446492828",
      "id" : 1446492828,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WN7qc",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 1003,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1809920961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446492828/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T19:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446492828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759709"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:27:09Z",
      "diff_hunk" : "@@ -628,6 +628,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal);\n \n     bool HavePrivateKeys() const override;\n+    bool HasPrivKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759709",
      "id" : 1446759709,
      "in_reply_to_id" : 1445260009,
      "line" : 633,
      "node_id" : "PRRC_kwDOABII585WO80d",
      "original_commit_id" : "ebd02d73241c0922f486cdf14719281c079b45c7",
      "original_line" : 633,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 6,
      "pull_request_review_id" : 1812232543,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759709/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759709",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759761"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759761"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:27:15Z",
      "diff_hunk" : "@@ -813,6 +813,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759761",
      "id" : 1446759761,
      "in_reply_to_id" : 1445262239,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO81R",
      "original_commit_id" : "cbe990b1a95e6331106c3ce6d1f2abd860f88ea8",
      "original_line" : 845,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812232683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759761/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:27:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759761",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:27:21Z",
      "diff_hunk" : "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759842",
      "id" : 1446759842,
      "in_reply_to_id" : 1445380623,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO82i",
      "original_commit_id" : "2621ca0e6418b406161b21b6afac159b0be775b7",
      "original_line" : 4383,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812232823,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:27:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:27:39Z",
      "diff_hunk" : "@@ -936,6 +936,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+    bool IsActiveScriptPubKeyMan(const ScriptPubKeyMan* spkm) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760427",
      "id" : 1446760427,
      "in_reply_to_id" : 1446440048,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO8_r",
      "original_commit_id" : "2c98b2f395eafa125054e2f6e7c570e18795e318",
      "original_line" : 939,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1812233556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760427/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760540"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:27:52Z",
      "diff_hunk" : "@@ -1011,6 +1011,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     void DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n+    //! Create new DescriptorScriptPubKeyMan and add it to the wallet\n+    DescriptorScriptPubKeyMan* SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760540",
      "id" : 1446760540,
      "in_reply_to_id" : 1446457022,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9Bc",
      "original_commit_id" : "8d107d5f48c2fae0d09bf9be79f9cf47daad6241",
      "original_line" : 1015,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1812233704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760540/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:27:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760584"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:27:57Z",
      "diff_hunk" : "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760584",
      "id" : 1446760584,
      "in_reply_to_id" : 1446462443,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9CI",
      "original_commit_id" : "2621ca0e6418b406161b21b6afac159b0be775b7",
      "original_line" : 4374,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812233758,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760584/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760618"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:28:01Z",
      "diff_hunk" : "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        active_xpubs.merge(desc_xpubs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760618",
      "id" : 1446760618,
      "in_reply_to_id" : 1446464920,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9Cq",
      "original_commit_id" : "2621ca0e6418b406161b21b6afac159b0be775b7",
      "original_line" : 4387,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812233807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760618/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:28:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760656"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:28:08Z",
      "diff_hunk" : "@@ -4388,4 +4388,19 @@ std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n     }\n     return active_xpubs;\n }\n+\n+std::optional<CKey> CWallet::GetKey(const CKeyID& keyid) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760656",
      "id" : 1446760656,
      "in_reply_to_id" : 1446468708,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9DQ",
      "original_commit_id" : "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "original_line" : 4394,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812233867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760656/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:28:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760656",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:28:13Z",
      "diff_hunk" : "@@ -1047,6 +1047,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Retrieve the xpubs in use by the active descriptors\n     std::set<CExtPubKey> GetActiveHDPubKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760708",
      "id" : 1446760708,
      "in_reply_to_id" : 1446469811,
      "line" : 1053,
      "node_id" : "PRRC_kwDOABII585WO9EE",
      "original_commit_id" : "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "original_line" : 1053,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : 27,
      "pull_request_review_id" : 1812233950,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760708/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:28:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760770"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:28:18Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760770",
      "id" : 1446760770,
      "in_reply_to_id" : 1446473752,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9FC",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 963,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812234007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760770/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:28:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760770",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760887"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:28:30Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\n+                }\n+                spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\n+            }\n+\n+            // Generate spks, fill caches, etc.\n+            pwallet->TopUpKeyPool();\n+\n+            // Fetch each descspkm from the wallet in order to get the descriptor strings\n+            UniValue descs{UniValue::VARR};\n+            for (const auto* spkm : spkms) {\n+                std::string desc_str;\n+                bool ok = spkm->GetDescriptorString(desc_str, false);\n+                CHECK_NONFATAL(ok);\n+                descs.push_back(desc_str);\n+            }\n+            UniValue out{UniValue::VOBJ};\n+            out.pushKV(\"descs\", descs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760887",
      "id" : 1446760887,
      "in_reply_to_id" : 1446477656,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9G3",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 1020,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812234152,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760887/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:28:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760887",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761034"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761034"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated the test to check this.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:28:48Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        curr_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        assert_equal(len(curr_descs), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        old_descs = curr_descs\n+        wallet.createwalletdescriptor(\"bech32\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761034",
      "id" : 1446761034,
      "in_reply_to_id" : 1446480817,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9JK",
      "original_commit_id" : "c10150b6150083440af4f0aa1110c8aa99ba2dc8",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "test/functional/wallet_createwalletdescriptor.py",
      "position" : null,
      "pull_request_review_id" : 1812234347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761034/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:28:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761034",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:28:53Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761065",
      "id" : 1446761065,
      "in_reply_to_id" : 1446492828,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WO9Jp",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 1003,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1812234398,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761065/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761386"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that would require a much more invasive refactor as it requires accessing much lower level data. Perhaps for a followup.",
      "commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "created_at" : "2024-01-10T00:29:38Z",
      "diff_hunk" : "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761386",
      "id" : 1446761386,
      "in_reply_to_id" : 1446475089,
      "line" : 975,
      "node_id" : "PRRC_kwDOABII585WO9Oq",
      "original_commit_id" : "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "original_line" : 975,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 163,
      "pull_request_review_id" : 1812234939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761386/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-10T00:29:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\nwallet/scriptpubkeyman.cpp:2161:42: error: no member named 'GetEncryptionKey' in 'wallet::WalletStorage'\r\n        if (!Assume(DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, it->second.first, key))) {\r\n                               ~~~~~~~~~ ^",
      "created_at" : "2024-02-12T12:21:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1938577167",
      "id" : 1938577167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29130",
      "node_id" : "IC_kwDOABII585zjFcP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1938577167/reactions"
      },
      "updated_at" : "2024-02-12T12:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1938577167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487519941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487519941"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b09e9ae6a61a96d3e04619f7514a57470e220abe: nit drop `print`",
      "commit_id" : "0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "created_at" : "2024-02-13T09:59:04Z",
      "diff_hunk" : "@@ -355,6 +355,26 @@ def run_test(self):\n             down_wallet_name = f\"re_down_{node.version}\"\n             down_backup_path = os.path.join(self.options.tmpdir, f\"{down_wallet_name}.dat\")\n             wallet.backupwallet(down_backup_path)\n+\n+            # Check that taproot descriptors can be added to 0.21 wallets\n+            # This must be done after the backup is created so that 0.21 can still load\n+            # the backup\n+            if self.options.descriptors and self.major_version_equals(node, 21):\n+                assert_raises_rpc_error(-12, \"No bech32m addresses available\", wallet.getnewaddress, address_type=\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 6)\n+                wallet.createwalletdescriptor(\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 8)\n+                tr_descs = [desc[\"desc\"] for desc in xpubs[0][\"descriptors\"] if desc[\"desc\"].startswith(\"tr(\")]\n+                print(tr_descs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487519941",
      "id" : 1487519941,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YqcDF",
      "original_commit_id" : "b09e9ae6a61a96d3e04619f7514a57470e220abe",
      "original_line" : 372,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "test/functional/wallet_backwards_compatibility.py",
      "position" : null,
      "pull_request_review_id" : 1877425600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487519941/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-13T12:21:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487519941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487554071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487554071"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2: nit: `[\"descs\"]` is not used",
      "commit_id" : "0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "created_at" : "2024-02-13T10:19:02Z",
      "diff_hunk" : "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        expected_descs = []\n+        for desc in def_wallet.listdescriptors()[\"descriptors\"]:\n+            if desc[\"desc\"].startswith(\"wpkh(\"):\n+                expected_descs.append(desc[\"desc\"])\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        assert_equal(len(wallet.listdescriptors()[\"descriptors\"]), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        new_descs = wallet.createwalletdescriptor(\"bech32\")[\"descs\"]\n+        assert_equal(len(new_descs), 2)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+        assert_equal(new_descs, expected_descs)\n+\n+        self.log.info(\"Test descriptor creation options\")\n+        old_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        wallet.createwalletdescriptor(type=\"bech32m\", internal=False)[\"descs\"]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487554071",
      "id" : 1487554071,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YqkYX",
      "original_commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "test/functional/wallet_createwalletdescriptor.py",
      "position" : null,
      "pull_request_review_id" : 1877425600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487554071/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-13T12:21:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487554071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487737712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487737712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "8221484b95c9e376ea6cb437eb972457485b65a7: \"HD keys of non-ranged descriptors\" ?",
      "commit_id" : "0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "created_at" : "2024-02-13T12:08:30Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"Non-ranged HD keys should appear in gethdkeys\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487737712",
      "id" : 1487737712,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585YrRNw",
      "original_commit_id" : "8221484b95c9e376ea6cb437eb972457485b65a7",
      "original_line" : 119,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "test/functional/wallet_gethdkeys.py",
      "position" : null,
      "pull_request_review_id" : 1877425600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487737712/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-13T12:21:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487737712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424495"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "created_at" : "2024-02-13T18:53:56Z",
      "diff_hunk" : "@@ -355,6 +355,26 @@ def run_test(self):\n             down_wallet_name = f\"re_down_{node.version}\"\n             down_backup_path = os.path.join(self.options.tmpdir, f\"{down_wallet_name}.dat\")\n             wallet.backupwallet(down_backup_path)\n+\n+            # Check that taproot descriptors can be added to 0.21 wallets\n+            # This must be done after the backup is created so that 0.21 can still load\n+            # the backup\n+            if self.options.descriptors and self.major_version_equals(node, 21):\n+                assert_raises_rpc_error(-12, \"No bech32m addresses available\", wallet.getnewaddress, address_type=\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 6)\n+                wallet.createwalletdescriptor(\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 8)\n+                tr_descs = [desc[\"desc\"] for desc in xpubs[0][\"descriptors\"] if desc[\"desc\"].startswith(\"tr(\")]\n+                print(tr_descs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424495",
      "id" : 1488424495,
      "in_reply_to_id" : 1487519941,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Yt44v",
      "original_commit_id" : "b09e9ae6a61a96d3e04619f7514a57470e220abe",
      "original_line" : 372,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "test/functional/wallet_backwards_compatibility.py",
      "position" : null,
      "pull_request_review_id" : 1878709061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424495/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-13T18:53:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424589"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "created_at" : "2024-02-13T18:54:00Z",
      "diff_hunk" : "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        expected_descs = []\n+        for desc in def_wallet.listdescriptors()[\"descriptors\"]:\n+            if desc[\"desc\"].startswith(\"wpkh(\"):\n+                expected_descs.append(desc[\"desc\"])\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        assert_equal(len(wallet.listdescriptors()[\"descriptors\"]), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        new_descs = wallet.createwalletdescriptor(\"bech32\")[\"descs\"]\n+        assert_equal(len(new_descs), 2)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+        assert_equal(new_descs, expected_descs)\n+\n+        self.log.info(\"Test descriptor creation options\")\n+        old_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        wallet.createwalletdescriptor(type=\"bech32m\", internal=False)[\"descs\"]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424589",
      "id" : 1488424589,
      "in_reply_to_id" : 1487554071,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Yt46N",
      "original_commit_id" : "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "test/functional/wallet_createwalletdescriptor.py",
      "position" : null,
      "pull_request_review_id" : 1878709138,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424589/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-13T18:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "created_at" : "2024-02-13T18:54:04Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"Non-ranged HD keys should appear in gethdkeys\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424666",
      "id" : 1488424666,
      "in_reply_to_id" : 1487737712,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Yt47a",
      "original_commit_id" : "8221484b95c9e376ea6cb437eb972457485b65a7",
      "original_line" : 119,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "test/functional/wallet_gethdkeys.py",
      "position" : null,
      "pull_request_review_id" : 1878709230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424666/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-13T18:54:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased for silent merge conflict.",
      "created_at" : "2024-02-13T18:54:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1942188367",
      "id" : 1942188367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29130",
      "node_id" : "IC_kwDOABII585zw3FP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1942188367/reactions"
      },
      "updated_at" : "2024-02-13T18:54:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1942188367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Light utACK 0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "created_at" : "2024-02-15T14:02:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1946159253",
      "id" : 1946159253,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29130",
      "node_id" : "IC_kwDOABII5850AAiV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1946159253/reactions"
      },
      "updated_at" : "2024-02-15T14:02:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1946159253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2024-02-20T11:45:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1954044180",
      "id" : 1954044180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29130",
      "node_id" : "IC_kwDOABII5850eFkU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1954044180/reactions"
      },
      "updated_at" : "2024-02-20T11:45:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1954044180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
