[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29130).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-12-22T00:05:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1867069599",
      "id" : 1867069599,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29130",
      "node_id" : "IC_kwDOABII585vSTif",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867069599/reactions"
      },
      "updated_at" : "2023-12-22T00:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867069599",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435355508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"desc spkm: Add functions to retrieve specific private keys\" (484711baa994d482110edaf510377181b8b2b465)\r\n\r\nIt looks like this function would be a little more flexible and efficient if took a CKeyID parameter instead of a CPubKey",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T21:34:00Z",
      "diff_hunk" : "@@ -2137,6 +2138,35 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CPubKey& pubkey) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435355508",
      "id" : 1435355508,
      "line" : 2141,
      "node_id" : "PRRC_kwDOABII585Vjcl0",
      "original_commit_id" : "484711baa994d482110edaf510377181b8b2b465",
      "original_line" : 2141,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 12,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nWould suggest making these name-only parameters to avoid different bool options being confused with each other, and to leave room to add new positional parameters in the future. You could do this with:\r\n\r\n```diff\r\n--- a/src/rpc/client.cpp\r\n+++ b/src/rpc/client.cpp\r\n@@ -274,8 +274,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\r\n     { \"logging\", 1, \"exclude\" },\r\n     { \"disconnectnode\", 1, \"nodeid\" },\r\n     { \"upgradewallet\", 0, \"version\" },\r\n+    { \"gethdkeys\", 0, \"options\" },\r\n     { \"gethdkeys\", 0, \"active_only\" },\r\n-    { \"gethdkeys\", 1, \"private\" },\r\n+    { \"gethdkeys\", 0, \"private\" },\r\n     { \"createwalletdescriptor\", 1, \"internal\" },\r\n     // Echo with conversion (For testing only)\r\n     { \"echojson\", 0, \"arg0\" },\r\n--- a/src/wallet/rpc/wallet.cpp\r\n+++ b/src/wallet/rpc/wallet.cpp\r\n@@ -819,8 +819,9 @@ RPCHelpMan gethdkeys()\r\n         \"gethdkeys\",\r\n         \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\r\n         {\r\n-            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\r\n-            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\r\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\r\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\r\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}}},\r\n         },\r\n         RPCResult{RPCResult::Type::ARR, \"\", \"\", {\r\n             {\r\n@@ -851,8 +852,9 @@ RPCHelpMan gethdkeys()\r\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\r\n             }\r\n \r\n-            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\r\n-            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\r\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\r\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\r\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\r\n             if (priv) {\r\n                 EnsureWalletIsUnlocked(*wallet);\r\n             }\r\n```",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:13:42Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492",
      "id" : 1435366492,
      "line" : 823,
      "node_id" : "PRRC_kwDOABII585VjfRc",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 823,
      "original_position" : 11,
      "original_start_line" : 822,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 11,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 822,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435368965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nNote: This is better than what I suggested. I was originally thinking this default should be true, to make it more convenient to get active hd key and ignore other keys. But defaulting to false is actually better, because it's still easy to get the active hd key with an option, and it's probably more confusing to see missing keys than extra keys. Also this default makes `gethdkeys` output more consistent with `listdescriptors` output.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:23:59Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435368965",
      "id" : 1435368965,
      "line" : 822,
      "node_id" : "PRRC_kwDOABII585Vjf4F",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 822,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 10,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435369940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nCould use `Assert(desc_spkm)` to avoid undefined behavior if it is null.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:27:14Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435369940",
      "id" : 1435369940,
      "line" : 873,
      "node_id" : "PRRC_kwDOABII585VjgHU",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 873,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 61,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435372329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nThis is just general style feedback, but I think where possible it's better to use `auto&` or `auto*` instead of bare `auto` because with bare `auto` in c++, you don't know if a potentially expensive object copy will happen without manually checking the type. With `auto&` or `auto*` you know there won't be an big copy without having to think about it. Up to you though if you prefer less verbosity instead",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:38:36Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435372329",
      "id" : 1435372329,
      "line" : 872,
      "node_id" : "PRRC_kwDOABII585Vjgsp",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 872,
      "original_position" : 60,
      "original_start_line" : 871,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 60,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 871,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435375318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nIt seems like theoretically there could be a race condition if the wallet became locked during this loop. Also the code ignores other potential errors. Would maybe suggest:\r\n\r\n```c++\r\nif (priv && desc_spkm->HasPrivKey(xpub.pubkey)) {\r\n  wallet_xprvs[xpub] = CExtKey(xpub, *CHECK_NONFATAL(desc_spkm->GetKey(xpub.pubkey)));\r\n}\r\n```",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:49:36Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435375318",
      "id" : 1435375318,
      "line" : 884,
      "node_id" : "PRRC_kwDOABII585VjhbW",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 884,
      "original_position" : 72,
      "original_start_line" : 882,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 72,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 882,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435376241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nNot important but I think I would suggest switching to `auto&` in the loops above and using `std::move(desc)` here to avoid copying strings when not necessary.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:52:24Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435376241",
      "id" : 1435376241,
      "line" : 894,
      "node_id" : "PRRC_kwDOABII585Vjhpx",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 894,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 82,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435377746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nCould use std::move here and on line 906 as well to avoid copying univalue objects. I will stop commenting about copies, though. I don't think they are important, I just figure it's very easy to avoid copying and we don't need 3 copies of each descriptor string so why not avoid it.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T22:56:22Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(d);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435377746",
      "id" : 1435377746,
      "line" : 898,
      "node_id" : "PRRC_kwDOABII585VjiBS",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 898,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 86,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435381067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Refactor function for single DescSPKM setup\" (280d26b19e9222afa902ad09cd7b42c2eb3e0044)\r\n\r\nSeems like the &batch argument option is replaced with nullptr here. This seems like a bug, but if it is intended behavior should definitely have a comment explaining the nullptr.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:05:00Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keypool_size));\n+    if (IsCrypted()) {\n+        if (IsLocked()) {\n+            throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+        }\n+        if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435381067",
      "id" : 1435381067,
      "line" : 3564,
      "node_id" : "PRRC_kwDOABII585Vji1L",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3564,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 30,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435383694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Refactor function for single DescSPKM setup\" (280d26b19e9222afa902ad09cd7b42c2eb3e0044)\r\n\r\nNot important, but I think it would be a little better to return DescriptorScriptPubKeyMan& to make the return type self-documenting. Also to avoid the need for callers to have to look up the keyman object after they just created it.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:11:32Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435383694",
      "id" : 1435383694,
      "line" : 3556,
      "node_id" : "PRRC_kwDOABII585VjjeO",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3556,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 22,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, descspkm: Refactor wallet descriptor generation to static func\" (fc3ccf068fbbf429eff9dce072bc33d78ad27509)\r\n\r\nNot important, but it doesn't seem like it makes sense for this function to be attached to the keyman class. If you want it to be a static method, it would probably make more sense being a static method of WalletDescriptor, since it is basically just a constructor for it. But I would probably make it a standalone function not attached to any class, just to reduce interdependencies in this code.\r\n\r\nAlso since the private key is not used here, I think it would be clearer for this to take a CExtPubKey parameter instead of a CPubKey.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:21:18Z",
      "diff_hunk" : "@@ -624,6 +624,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool IsHDEnabled() const override;\n \n+    static WalletDescriptor GenerateWalletDescriptor(const CExtKey& master_key, const OutputType& output_type, bool internal);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387051",
      "id" : 1435387051,
      "line" : 627,
      "node_id" : "PRRC_kwDOABII585VjkSr",
      "original_commit_id" : "fc3ccf068fbbf429eff9dce072bc33d78ad27509",
      "original_line" : 627,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 4,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetActiveHDPubKey to retrieve hd key from active descriptors\" (647118e36563ef421b6c4f6edeac33ce6aff5588)\r\n\r\nThis is probably in the wrong commit, I don't see this method being added here.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:24:06Z",
      "diff_hunk" : "@@ -1044,6 +1044,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Whether the (external) signer performs R-value signature grinding\n     bool CanGrindR() const;\n+\n+    //! Find the single xpub used by all active descriptors, or return nullopt\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> CWallet::GetKey(const CPubKey& pubkey) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387959",
      "id" : 1435387959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vjkg3",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 1052,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435391901"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetActiveHDPubKey to retrieve hd key from active descriptors\" (647118e36563ef421b6c4f6edeac33ce6aff5588)\r\n\r\nI'm confused. Is this actually true? I thought `importdescriptors` let you freely import descriptors with different keys and control which ones are active.\r\n\r\nIf this is always true, it would be helpful if comment mentioned what was enforcing it (since it's not obvious where to look). If it's not true, I think would be better if this function returned `std::set<CExtPubKey>` instead of `std::optional<CExtPubKey>` and callers decided what to do if the set size is more than 1.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:33:49Z",
      "diff_hunk" : "@@ -4365,4 +4365,37 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::optional<CExtPubKey> CWallet::GetActiveHDPubKey() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;\n+\n+    std::optional<CExtPubKey> active_xpub;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        if (desc_xpubs.size() != 1 || desc_pubkeys.size() != 0) {\n+            return std::nullopt;\n+        }\n+        const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+        // All active descriptors must have the same xpub",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435391901",
      "id" : 1435391901,
      "line" : 4391,
      "node_id" : "PRRC_kwDOABII585Vjled",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 4391,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 92,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435398854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (01b2aab1f8f61bc85345e106893e0ff2e590a56a)\r\n\r\nWould suggest making the internal and hdkey paramers name-only parameters using OBJ_NAMED_PARAMS (see earlier comment https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492) to avoid usage errors and make it easier to add new options and arguments later.\r\n\r\nWould suggest keeping address_type as a positional parameter, though, since it's required and the values are unambiguous. Also could consider renaming \"address_type\" to just \"type\" to make it easier to pass by name and because maybe we will want to support creating other types of descriptors that don't correspond exactly to address types.",
      "commit_id" : "a3b5f1309b2797f592f15c3eb98c3070d7d1b96a",
      "created_at" : "2023-12-22T23:56:11Z",
      "diff_hunk" : "@@ -913,6 +913,108 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"address_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+            {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435398854",
      "id" : 1435398854,
      "line" : 926,
      "node_id" : "PRRC_kwDOABII585VjnLG",
      "original_commit_id" : "01b2aab1f8f61bc85345e106893e0ff2e590a56a",
      "original_line" : 926,
      "original_position" : 14,
      "original_start_line" : 924,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 114,
      "pull_request_review_id" : 1795206875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 924,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T00:05:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435423974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`cs_wallet` is being held earlier, and that will prevent the wallet from locked.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T01:22:47Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435423974",
      "id" : 1435423974,
      "in_reply_to_id" : 1435375318,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjtTm",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 889,
      "original_position" : 72,
      "original_start_line" : 882,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795367297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T01:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:10:45Z",
      "diff_hunk" : "@@ -2137,6 +2138,35 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CPubKey& pubkey) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436394",
      "id" : 1435436394,
      "in_reply_to_id" : 1435355508,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwVq",
      "original_commit_id" : "484711baa994d482110edaf510377181b8b2b465",
      "original_line" : 2141,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:10:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as suggested",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:10:52Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436422",
      "id" : 1435436422,
      "in_reply_to_id" : 1435366492,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwWG",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 823,
      "original_position" : 11,
      "original_start_line" : 822,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a `CHECK_NONFATAL` (one of the linters doesn't like `Assert`)",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:03Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436471",
      "id" : 1435436471,
      "in_reply_to_id" : 1435369940,
      "line" : 878,
      "node_id" : "PRRC_kwDOABII585VjwW3",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 878,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 66,
      "pull_request_review_id" : 1795372530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:31Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436629",
      "id" : 1435436629,
      "in_reply_to_id" : 1435372329,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwZV",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 872,
      "original_position" : 60,
      "original_start_line" : 871,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:39Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436652",
      "id" : 1435436652,
      "in_reply_to_id" : 1435376241,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwZs",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 894,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372573,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:43Z",
      "diff_hunk" : "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(d);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436670",
      "id" : 1435436670,
      "in_reply_to_id" : 1435377746,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwZ-",
      "original_commit_id" : "5deafad2f61f626b50b6c173558ac7236cceff13",
      "original_line" : 898,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, fixed.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:11:52Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keypool_size));\n+    if (IsCrypted()) {\n+        if (IsLocked()) {\n+            throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+        }\n+        if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436690",
      "id" : 1435436690,
      "in_reply_to_id" : 1435381067,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwaS",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3564,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:11:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:12:05Z",
      "diff_hunk" : "@@ -624,6 +624,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool IsHDEnabled() const override;\n \n+    static WalletDescriptor GenerateWalletDescriptor(const CExtKey& master_key, const OutputType& output_type, bool internal);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436779",
      "id" : 1435436779,
      "in_reply_to_id" : 1435387051,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vjwbr",
      "original_commit_id" : "fc3ccf068fbbf429eff9dce072bc33d78ad27509",
      "original_line" : 627,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 1795372651,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:12:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moved to the right commit.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:12:14Z",
      "diff_hunk" : "@@ -1044,6 +1044,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Whether the (external) signer performs R-value signature grinding\n     bool CanGrindR() const;\n+\n+    //! Find the single xpub used by all active descriptors, or return nullopt\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> CWallet::GetKey(const CPubKey& pubkey) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436813",
      "id" : 1435436813,
      "in_reply_to_id" : 1435387959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwcN",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 1052,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 1795372662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:12:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This function was intended to only return a `CExtPubKey` if all active descriptors shared the same xpub, so if they differed, it would return `std::nullopt`. The comment was stating what it was attempting to do, not what it was expecting.\r\n\r\nIn any case, having the caller determine what to do if there is more than one xpub in the active descriptors is probably better, so I've changed it to do that and this comment is no longer relevant.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:14:11Z",
      "diff_hunk" : "@@ -4365,4 +4365,37 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::optional<CExtPubKey> CWallet::GetActiveHDPubKey() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;\n+\n+    std::optional<CExtPubKey> active_xpub;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        if (desc_xpubs.size() != 1 || desc_pubkeys.size() != 0) {\n+            return std::nullopt;\n+        }\n+        const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+        // All active descriptors must have the same xpub",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437218",
      "id" : 1435437218,
      "in_reply_to_id" : 1435391901,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Vjwii",
      "original_commit_id" : "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "original_line" : 4391,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372884,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:14:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as suggested.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:14:18Z",
      "diff_hunk" : "@@ -913,6 +913,108 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"address_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+            {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437249",
      "id" : 1435437249,
      "in_reply_to_id" : 1435398854,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjwjB",
      "original_commit_id" : "01b2aab1f8f61bc85345e106893e0ff2e590a56a",
      "original_line" : 926,
      "original_position" : 14,
      "original_start_line" : 924,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795372892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435439477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T02:22:37Z",
      "diff_hunk" : "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435439477",
      "id" : 1435439477,
      "in_reply_to_id" : 1435383694,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585VjxF1",
      "original_commit_id" : "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "original_line" : 3556,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1795373568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T02:22:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435607572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since this PR is adding the `createwalletdescriptor` method, maybe this is a good place to list some ways it could be extended in the future:\r\n\r\n- Probably it would be good not to require wallet to be unlocked when dealing with public keys. Currently the specified `hdkey` is unencrypted and reencrypted, but this shouldn't be necessary because the key is already in the wallet. (The only reason this seems to happen now is to copy the key, because internally we store keys in a slightly denormalized format, once per descriptor.)\r\n\r\n- It would be nice if `hdkey` parameter accepted not just public hd keys, but also private hd keys, and a \"generate\" value in a blank wallet so users don't need to chain together multiple commands to accomplish simple tasks, and so we only need two RPC methods which add descriptors and keys to the wallet: `importdescriptors` and `createwalletdescriptor`, without a third `addhdkey` method. Examples:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key and use it in a new descriptor\r\n  createwalletdescriptor bech32 generate\r\n\r\n   # In a blank wallet, import an hd key and use it in a new descriptor\r\n  createwalletdescriptor bech32 xprv...\r\n  ```\r\n\r\n- It sounds like we want to discourage having multiple hd keys per wallet, and encourage having separate wallets instead. But if we did want to allow these, we could add a `force` option to allow creating descriptors with new hd keys even when existing hd keys are present. We could also allow a `rotate` option to allow this and additionally set descriptors using old keys to be inactive.\r\n\r\n- It would be nice if `type` parameter accepted a \"defaults\" value to set up descriptors for all default output types. Examples:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key and generate default set of descriptors\r\n  createwalletdescriptor defaults generate\r\n\r\n  # Add missing descriptors to an existing wallet. For example, upgrade\r\n  # an older wallet not supporting bech32m to support it.\r\n  createwalletdescriptor defaults\r\n  ```\r\n\r\n- To support multisig, type parameter could accept an \"hdkey\" value to generate an [unused](https://github.com/bitcoin/bitcoin/pull/29136#issuecomment-1868202696) hd key in a blank wallet:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key in an unused descriptor and output unused(xpub...)\r\n  createwalletdescriptor hdkey generate\r\n\r\n  # Alternately, import an unused key\r\n  createwalletdescriptor hdkey xprv...\r\n\r\n  # Import multisig descriptor with wallet public keys\r\n  importdescriptors [...]\r\n  ```\r\n\r\n- Maybe in the future to make multisig setup easier, `type` parameter could accept a \"multisig\" value and additional options to make it easier to create the descriptor using the right keys without doing extra work or using an outside tool.\r\n\r\n- Not recommending it, but I could imagine `type` and `hdkey` parameters being extended to accept other values in the future. For example maybe with [#27351](https://github.com/bitcoin/bitcoin/pull/27351), a \"codex32\" type could be useful. And if a wallet didn't have the same hdkey for every output type, it might be useful to be able specify \"default' for the hdkey parameter to use the hd key from the default output type, like `getnewaddress`.",
      "commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "created_at" : "2023-12-23T13:45:20Z",
      "diff_hunk" : "@@ -813,6 +813,216 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey.GetID())) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", std::move(desc));\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(std::move(d));\n+                }\n+                UniValue xpub_info(UniValue::VOBJ);\n+                xpub_info.pushKV(\"xpub\", EncodeExtPubKey(xpub));\n+                xpub_info.pushKV(\"has_private\", has_xprv);\n+                if (priv) {\n+                    xpub_info.pushKV(\"xprv\", EncodeExtKey(wallet_xprvs.at(xpub)));\n+                }\n+                xpub_info.pushKV(\"descriptors\", std::move(descriptors));\n+\n+                response.push_back(std::move(xpub_info));\n+            }\n+\n+            return response;\n+        },\n+    };\n+}\n+\n+static RPCHelpMan createwalletdescriptor()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435607572",
      "id" : 1435607572,
      "line" : 921,
      "node_id" : "PRRC_kwDOABII585VkaIU",
      "original_commit_id" : "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "original_line" : 921,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/wallet.cpp",
      "position" : 109,
      "pull_request_review_id" : 1795440020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-23T14:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
