[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29412).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935947181), [epiccurious](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936033190), [instagibbs](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936047945), [sr-gi](https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1873071547), [glozow](https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1873261879), [fjahr](https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1891184515), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1958901201) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2024-02-08T17:18:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1934588826",
      "id" : 1934588826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zT3ua",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1934588826/reactions"
      },
      "updated_at" : "2024-02-22T08:05:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1934588826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/21374346056</sub>",
      "created_at" : "2024-02-08T18:22:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1934698387",
      "id" : 1934698387,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zUSeT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1934698387/reactions"
      },
      "updated_at" : "2024-02-08T18:22:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1934698387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "How do you define a mutated block? What are the known forms of mutated blocks?",
      "created_at" : "2024-02-09T03:38:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935287441",
      "id" : 1935287441,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zWiSR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935287441/reactions"
      },
      "updated_at" : "2024-02-09T03:38:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935287441",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/109078515?v=4",
         "events_url" : "https://api.github.com/users/epiccurious/events{/privacy}",
         "followers_url" : "https://api.github.com/users/epiccurious/followers",
         "following_url" : "https://api.github.com/users/epiccurious/following{/other_user}",
         "gists_url" : "https://api.github.com/users/epiccurious/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/epiccurious",
         "id" : 109078515,
         "login" : "epiccurious",
         "node_id" : "U_kgDOBoBn8w",
         "organizations_url" : "https://api.github.com/users/epiccurious/orgs",
         "received_events_url" : "https://api.github.com/users/epiccurious/received_events",
         "repos_url" : "https://api.github.com/users/epiccurious/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/epiccurious/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/epiccurious/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/epiccurious"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> How do you define a mutated block? What are the known forms of mutated blocks?\r\n\r\nLooking at `IsBlockMutated` in this PR should provide the answers for these questions, but to recap:\r\n\r\n* When we receive a block it contains a header and a list of transactions. The header contains a merkle root hash (`CBlock::hashMerkleRoot`) which should commit to the list of transactions but [if it doesn't the block is considered mutated](https://github.com/bitcoin/bitcoin/blob/b2b2b1e9e415c3b5f74d517eaebfc2073cef5175/src/validation.cpp#L3660-L3671).\r\n* The coinbase transaction (post segwit) contains a commitment (very similar to the merkle root in the header) to the witness data in a block. [If that commitment does not actually commit to the witnesses that were received, the block is considered mutated](https://github.com/bitcoin/bitcoin/blob/b2b2b1e9e415c3b5f74d517eaebfc2073cef5175/src/validation.cpp#L3861-L3896).\r\n* Our merkle root algorithm has several flaws which allow for further malleation, see [here](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf) for a great overview.",
      "created_at" : "2024-02-09T10:05:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935643125",
      "id" : 1935643125,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zX5H1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935643125/reactions"
      },
      "updated_at" : "2024-02-09T10:05:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935643125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2024-02-09T13:36:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935947181",
      "id" : 1935947181,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zZDWt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935947181/reactions"
      },
      "updated_at" : "2024-02-09T13:36:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935947181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK.",
      "created_at" : "2024-02-09T14:28:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936033190",
      "id" : 1936033190,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zZYWm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936033190/reactions"
      },
      "updated_at" : "2024-02-09T14:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936033190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/109078515?v=4",
         "events_url" : "https://api.github.com/users/epiccurious/events{/privacy}",
         "followers_url" : "https://api.github.com/users/epiccurious/followers",
         "following_url" : "https://api.github.com/users/epiccurious/following{/other_user}",
         "gists_url" : "https://api.github.com/users/epiccurious/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/epiccurious",
         "id" : 109078515,
         "login" : "epiccurious",
         "node_id" : "U_kgDOBoBn8w",
         "organizations_url" : "https://api.github.com/users/epiccurious/orgs",
         "received_events_url" : "https://api.github.com/users/epiccurious/received_events",
         "repos_url" : "https://api.github.com/users/epiccurious/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/epiccurious/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/epiccurious/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/epiccurious"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "concept ACK\r\n\r\nmight be good to recap why it was only added in BLOCK processing but not other `ProcessBlocks`: In every other case we already don't punish the sender of compact blocks for failing these higher level checks, while full blocks allow for punishment.",
      "created_at" : "2024-02-09T14:37:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936047945",
      "id" : 1936047945,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zZb9J",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936047945/reactions"
      },
      "updated_at" : "2024-02-09T14:37:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936047945",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> might be good to recap why it was only added in BLOCK processing but not other ProcessBlocks: In every other case we already don't punish the sender of compact blocks for failing these higher level checks, while full blocks allow for punishment.\r\n\r\nWe call `ProcessBlock` when we receive a `block` message (handled in this PR) or as the result of a compact block reconstruction. Compact blocks are relayed before full validation occurs, therefore we don't punish peers for sending us invalid blocks through compact block relay. Block mutation might also occur randomly during compact bock relay due to short-id collisions, which is another reason not to punish.",
      "created_at" : "2024-02-09T16:12:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936203492",
      "id" : 1936203492,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII585zaB7k",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936203492/reactions"
      },
      "updated_at" : "2024-02-09T16:12:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936203492",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484551682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484551682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "should we be checking PoW first before doing potentially a lot of hashing?",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-09T16:31:56Z",
      "diff_hunk" : "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484551682",
      "id" : 1484551682,
      "line" : 4724,
      "node_id" : "PRRC_kwDOABII585YfHYC",
      "original_commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "original_line" : 4724,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 6,
      "pull_request_review_id" : 1872786752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484551682/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T16:31:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484551682",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484725603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484725603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same as for `ContextualCheckBlock`, this can be simplified to:\r\n\r\n```cpp\r\nif (valid_opt.value_or(true)) {\r\n```",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-09T19:31:43Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).\n+        return std::any_of(block.vtx.begin(), block.vtx.end(),\n+                           [](auto& tx) { return GetSerializeSize(TX_NO_WITNESS(tx)) == 64; });\n+    } else {\n+        // Theoretically it is still possible for a block with a 64 byte\n+        // coinbase transaction to be mutated but we neglect that possibility\n+        // here as it requires at least 224 bits of work.\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484725603",
      "id" : 1484725603,
      "line" : 3838,
      "node_id" : "PRRC_kwDOABII585Yfx1j",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3832,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 117,
      "pull_request_review_id" : 1873071547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484725603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T20:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484725603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484728486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484728486"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We should be able to simplify this as:\r\n\r\n```cpp\r\nif (!valid_opt.value_or(true)) return false;\r\n```",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-09T19:35:22Z",
      "diff_hunk" : "@@ -3868,22 +3918,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484728486",
      "id" : 1484728486,
      "line" : 3959,
      "node_id" : "PRRC_kwDOABII585Yfyim",
      "original_commit_id" : "a74c3972bf8d0fa51e8f9672422bc34945b66ca7",
      "original_line" : 3923,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 151,
      "pull_request_review_id" : 1873071547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484728486/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T20:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484728486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484744076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484744076"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Basically performing `CheckBlockHeader` here too?\r\n\r\nThat sounds reasonable to me, and the outcome is the same IIRC: `Misbehaving(*peer, 100, ...`\r\n\r\nAlso, this is cheap enough that it may not matter if we do it again later (?), so we may not even need to cache it (correct me if I'm wrong)",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-09T19:52:49Z",
      "diff_hunk" : "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484744076",
      "id" : 1484744076,
      "in_reply_to_id" : 1484551682,
      "line" : 4724,
      "node_id" : "PRRC_kwDOABII585Yf2WM",
      "original_commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "original_line" : 4724,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 6,
      "pull_request_review_id" : 1873071547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484744076/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T20:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484744076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484773525"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484773525"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It may be good to assert the debug log for the specific disconnection reason:\r\n\r\n```suggestion\r\nwith self.nodes[0].assert_debug_log(expected_msgs=[\"bad-txnmrklroot, hashMerkleRoot mismatch\"]):\r\n    attacker.send_message(msg_block(mutated_block))\r\n```",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-09T20:27:16Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)\n+\n+        # Block at height 101 should be the only one in flight from peer 0\n+        peer_info_prior_to_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_prior_to_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_prior_to_attack[0][\"inflight\"])\n+\n+        # Attempt to clear the honest relayer's download request by sending the\n+        # mutated block (as the attacker).\n+        attacker.send_message(msg_block(mutated_block))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484773525",
      "id" : 1484773525,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585Yf9iV",
      "original_commit_id" : "5f27c9be7acf82f1630802645d3b910baf39fa90",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "test/functional/p2p_mutated_blocks.py",
      "position" : 78,
      "pull_request_review_id" : 1873071547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484773525/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T20:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484773525",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484789046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484789046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok this doesn't seem to matter: we do this hashing even for already-known blocks we get sent unilaterally, and `MAX_PROTOCOL_MESSAGE_LENGTH` bounds the size of hashing to something reasonable, and we ban the peer anyways.",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-09T20:47:39Z",
      "diff_hunk" : "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484789046",
      "id" : 1484789046,
      "in_reply_to_id" : 1484551682,
      "line" : 4724,
      "node_id" : "PRRC_kwDOABII585YgBU2",
      "original_commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "original_line" : 4724,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 6,
      "pull_request_review_id" : 1873173422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484789046/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-09T20:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484789046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1486013425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486013425"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure if that is simpler though. Yes it's less code but harder to read/understand imo (e.g. you forgot the `!` in your suggestion).\r\n\r\nI'm actually not a fan of my `std::optional<bool>` choice, so I might try to change that.",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-12T10:49:35Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).\n+        return std::any_of(block.vtx.begin(), block.vtx.end(),\n+                           [](auto& tx) { return GetSerializeSize(TX_NO_WITNESS(tx)) == 64; });\n+    } else {\n+        // Theoretically it is still possible for a block with a 64 byte\n+        // coinbase transaction to be mutated but we neglect that possibility\n+        // here as it requires at least 224 bits of work.\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1486013425",
      "id" : 1486013425,
      "in_reply_to_id" : 1484725603,
      "line" : 3838,
      "node_id" : "PRRC_kwDOABII585YksPx",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3832,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 117,
      "pull_request_review_id" : 1874970504,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486013425/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-12T10:49:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486013425",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1486199775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486199775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I may be used to the pattern due to rustlang, but I have no strong opinions about it",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-12T13:44:43Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).\n+        return std::any_of(block.vtx.begin(), block.vtx.end(),\n+                           [](auto& tx) { return GetSerializeSize(TX_NO_WITNESS(tx)) == 64; });\n+    } else {\n+        // Theoretically it is still possible for a block with a 64 byte\n+        // coinbase transaction to be mutated but we neglect that possibility\n+        // here as it requires at least 224 bits of work.\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1486199775",
      "id" : 1486199775,
      "in_reply_to_id" : 1484725603,
      "line" : 3838,
      "node_id" : "PRRC_kwDOABII585YlZvf",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3832,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 117,
      "pull_request_review_id" : 1875269841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486199775/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-12T13:44:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486199775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I would like to see this in v27, can we add it to the milestone?",
      "created_at" : "2024-02-20T11:32:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1954024203",
      "id" : 1954024203,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII5850eAsL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1954024203/reactions"
      },
      "updated_at" : "2024-02-20T11:32:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1954024203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1495884531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495884531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since this \"in case of non-coinbase first transaction, treat existence of 64-byte transaction as malleation\" is new behavior, would it make sense to move it to a separate commit at the end of the PR? (A clearer comment would also be helpful, because I briefly thought this was a consensus change before it was pointed out to be it only triggers in case the block would already be invalid).",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-20T14:08:57Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1495884531",
      "id" : 1495884531,
      "line" : 3825,
      "node_id" : "PRRC_kwDOABII585ZKWLz",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3819,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 104,
      "pull_request_review_id" : 1890525477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495884531/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T14:08:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495884531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1495954173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495954173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I also had the same misconception the first time I reviewed.",
      "commit_id" : "d028bb12abb041870413a3437865547cff2df653",
      "created_at" : "2024-02-20T14:50:09Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1495954173",
      "id" : 1495954173,
      "in_reply_to_id" : 1495884531,
      "line" : 3825,
      "node_id" : "PRRC_kwDOABII585ZKnL9",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3819,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 104,
      "pull_request_review_id" : 1890636850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495954173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T14:50:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495954173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496051696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496051696"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a74c3972bf8d0fa51e8f9672422bc34945b66ca7: It would be easier to review if style changes were separate from move-only changes? Otherwise, options such as `--color-moved=dimmed-zebra  --color-moved-ws=ignore-all-space` can not be used.\r\n\r\nAlso, renaming tokens in a block of code will break the parity check used to find the introduction of the code block (https://git-scm.com/docs/git-log#Documentation/git-log.txt--Sltstringgt). So it may be easier to track the history, if the renames were done in a separate commit, at least for me. ",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-20T15:41:34Z",
      "diff_hunk" : "@@ -3639,6 +3639,65 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496051696",
      "id" : 1496051696,
      "line" : 3662,
      "node_id" : "PRRC_kwDOABII585ZK-_w",
      "original_commit_id" : "a74c3972bf8d0fa51e8f9672422bc34945b66ca7",
      "original_line" : 3662,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 24,
      "pull_request_review_id" : 1890785562,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496051696/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T15:41:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496051696",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496312078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496312078"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Given the recent changes around the mailing list could also name what's behind this link? So in case it disappears people know what to search for. I know they promised to keep the links but who knows...",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-20T18:27:49Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496312078",
      "id" : 1496312078,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZL-kO",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3821,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1891184515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496312078/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T22:26:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496312078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496365733"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496365733"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would also be a little bit easier to reason about if when `block.vtx.empty()` is true then we just `return false;` because in that case `std::any_of` will always return false.",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-20T19:16:50Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496365733",
      "id" : 1496365733,
      "in_reply_to_id" : 1495884531,
      "line" : 3825,
      "node_id" : "PRRC_kwDOABII585ZMLql",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3825,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 104,
      "pull_request_review_id" : 1891184515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496365733/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-20T22:26:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496365733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Looking forward to addressing already pending comments, then i review.",
      "created_at" : "2024-02-22T08:05:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1958901201",
      "id" : 1958901201,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII5850wnXR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1958901201/reactions"
      },
      "updated_at" : "2024-02-22T08:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1958901201",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Split into separate commit and expanded on the comment.",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T11:55:14Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130243",
      "id" : 1499130243,
      "in_reply_to_id" : 1495884531,
      "line" : 3825,
      "node_id" : "PRRC_kwDOABII585ZWumD",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3825,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 104,
      "pull_request_review_id" : 1895668014,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130243/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T11:55:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Split the refactoring into a separate commit.",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T11:55:30Z",
      "diff_hunk" : "@@ -3639,6 +3639,65 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130527",
      "id" : 1499130527,
      "in_reply_to_id" : 1496051696,
      "line" : 3662,
      "node_id" : "PRRC_kwDOABII585ZWuqf",
      "original_commit_id" : "a74c3972bf8d0fa51e8f9672422bc34945b66ca7",
      "original_line" : 3662,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 24,
      "pull_request_review_id" : 1895668485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T11:55:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130753"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T11:55:42Z",
      "diff_hunk" : "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130753",
      "id" : 1499130753,
      "in_reply_to_id" : 1496312078,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZWuuB",
      "original_commit_id" : "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "original_line" : 3821,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1895668845,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130753/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T11:55:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499351311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499351311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Asserting the stripped serialized size right after is nice for self-documentation/correctness of test, and maybe another case of a witness tx which witness size is not 64?",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T14:38:17Z",
      "diff_hunk" : "@@ -145,4 +147,31 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // tx1: ff204bd0000000000000\n+    // tx2: 8ae53c92000000000000\n+    // 64 byte tx of the form h(tx1)||h(tx2), tx3:\n+    // cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\n+\n+    CMutableTransaction tx1;\n+    BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx2;\n+    BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx3;\n+    BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499351311",
      "id" : 1499351311,
      "line" : 162,
      "node_id" : "PRRC_kwDOABII585ZXkkP",
      "original_commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "original_line" : 162,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 25,
      "pull_request_review_id" : 1896027563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499351311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T14:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499351311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499355541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499355541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "have you thought about having this function return an optional error string so unit tests can check expected failure reason?",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T14:40:52Z",
      "diff_hunk" : "@@ -3758,6 +3814,40 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499355541",
      "id" : 1499355541,
      "line" : 3817,
      "node_id" : "PRRC_kwDOABII585ZXlmV",
      "original_commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "original_line" : 3817,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 96,
      "pull_request_review_id" : 1896027563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499355541/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T14:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499355541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499592647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499592647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit c84db8d60e87eabc1e4f88ef05bf06fbf4db6f02\r\n\r\n```suggestion\r\n    const bool has_witness_commitment{commitpos != NO_WITNESS_COMMITMENT};\r\n```",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T17:12:05Z",
      "diff_hunk" : "@@ -3642,34 +3642,54 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n {\n     bool mutated;\n-    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-    if (block.hashMerkleRoot != hashMerkleRoot2)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n \n     // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n     // of transactions in a block without affecting the merkle root of a block,\n     // while still invalidating it.\n-    if (mutated)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n \n     return true;\n }\n \n static std::optional<bool> CheckWitnessCommitment(const CBlock& block, BlockValidationState& state)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n-    if (commitpos != NO_WITNESS_COMMITMENT) {\n-        bool malleated = false;\n-        uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+\n+    bool has_witness_commitment{commitpos != NO_WITNESS_COMMITMENT};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499592647",
      "id" : 1499592647,
      "line" : 3675,
      "node_id" : "PRRC_kwDOABII585ZYffH",
      "original_commit_id" : "c84db8d60e87eabc1e4f88ef05bf06fbf4db6f02",
      "original_line" : 3670,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 37,
      "pull_request_review_id" : 1896406510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499592647/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T17:30:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499592647",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499595618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499595618"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit c62eea853e5c5f390d58c5ad9c0ac9a688465abc\r\n```suggestion\r\n        const auto valid_opt{CheckWitnessCommitment(block, state)};\r\n```\r\n",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T17:14:27Z",
      "diff_hunk" : "@@ -3808,6 +3808,29 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499595618",
      "id" : 1499595618,
      "line" : 3841,
      "node_id" : "PRRC_kwDOABII585ZYgNi",
      "original_commit_id" : "c62eea853e5c5f390d58c5ad9c0ac9a688465abc",
      "original_line" : 3824,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 120,
      "pull_request_review_id" : 1896406510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499595618/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T17:30:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499595618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499598937"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499598937"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cb2437307e6861e0957899345b6e9b93716c383a\r\nMaybe add comment explaining what the tristate return result means? e.g. \"bool indicating the witness commitment is correct (state is populated if any error occurs), or std::nullopt if there is no witness commitment to be checked\"",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T17:17:04Z",
      "diff_hunk" : "@@ -3639,6 +3639,45 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static std::optional<bool> CheckWitnessCommitment(const CBlock& block, BlockValidationState& state)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499598937",
      "id" : 1499598937,
      "line" : 3669,
      "node_id" : "PRRC_kwDOABII585ZYhBZ",
      "original_commit_id" : "cb2437307e6861e0957899345b6e9b93716c383a",
      "original_line" : 3658,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 31,
      "pull_request_review_id" : 1896406510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499598937/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T17:30:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499598937",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499599724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499599724"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@dergoegge have you considered this?",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T17:17:41Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)\n+\n+        # Block at height 101 should be the only one in flight from peer 0\n+        peer_info_prior_to_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_prior_to_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_prior_to_attack[0][\"inflight\"])\n+\n+        # Attempt to clear the honest relayer's download request by sending the\n+        # mutated block (as the attacker).\n+        attacker.send_message(msg_block(mutated_block))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499599724",
      "id" : 1499599724,
      "in_reply_to_id" : 1484773525,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585ZYhNs",
      "original_commit_id" : "5f27c9be7acf82f1630802645d3b910baf39fa90",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "test/functional/p2p_mutated_blocks.py",
      "position" : 78,
      "pull_request_review_id" : 1896417728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499599724/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T17:17:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499599724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499609287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499609287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e2d1eb2e2001c31b43154df47ab5be215a26774f\r\n\r\nthis is the same thing as\r\n```suggestion\r\n        tx = self.wallet.create_self_transfer()[\"tx\"]\r\n```",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T17:25:09Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499609287",
      "id" : 1499609287,
      "line" : 46,
      "node_id" : "PRRC_kwDOABII585ZYjjH",
      "original_commit_id" : "e2d1eb2e2001c31b43154df47ab5be215a26774f",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "test/functional/p2p_mutated_blocks.py",
      "position" : 46,
      "pull_request_review_id" : 1896406510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499609287/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T17:30:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499609287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499613815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499613815"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in e2d1eb2e2001c31b43154df47ab5be215a26774f\r\ndoes this need a `with p2p_lock`?",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-22T17:28:55Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499613815",
      "id" : 1499613815,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII585ZYkp3",
      "original_commit_id" : "e2d1eb2e2001c31b43154df47ab5be215a26774f",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "test/functional/p2p_mutated_blocks.py",
      "position" : 69,
      "pull_request_review_id" : 1896406510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499613815/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-22T17:30:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499613815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm running this PR on my mainnet monitoring infrastructure as I was looking at the currently broadcast mutated blocks (`bad-witness-nonce-size`) in detail anyway. Can report back in a few days (currently, I receive only 1 or 2 per week). ",
      "created_at" : "2024-02-23T09:58:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1961033803",
      "id" : 1961033803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII58504wBL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961033803/reactions"
      },
      "updated_at" : "2024-02-23T09:58:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961033803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500628300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628300"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: (Same below) c62eea853e5c5f390d58c5ad9c0ac9a688465abc:\r\n\r\nInstead of logging `IsBlockMutated` twice when function logging is enabled, it would be better to just use your own words to write something meaningful. For example, `\"Block mutated: %s\\n\", state.ToString());`.  ",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-23T12:59:22Z",
      "diff_hunk" : "@@ -3808,6 +3808,29 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500628300",
      "id" : 1500628300,
      "line" : 3821,
      "node_id" : "PRRC_kwDOABII585ZccVM",
      "original_commit_id" : "c62eea853e5c5f390d58c5ad9c0ac9a688465abc",
      "original_line" : 3815,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 100,
      "pull_request_review_id" : 1898055488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628300/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T13:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500628488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-23T12:59:31Z",
      "diff_hunk" : "@@ -3808,6 +3808,29 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {\n+            LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500628488",
      "id" : 1500628488,
      "line" : 3843,
      "node_id" : "PRRC_kwDOABII585ZccYI",
      "original_commit_id" : "c62eea853e5c5f390d58c5ad9c0ac9a688465abc",
      "original_line" : 3826,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 122,
      "pull_request_review_id" : 1898055488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628488/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T13:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628488",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Received two `bad-witness-nonce-size` blocks from a mining pools custom client shortly after my last comment. In both cases I my node had reconstructed a cmpctblock two seconds before the mutated block arrived. In this case, the block is \"mutated\" because the coinbase witness is empty. That's probably a bug on the mining pool side. I have the IPs of the pool clients as noban-peers, so I didn't actually see them getting disconnected. \r\n\r\n```\r\n2024-02-23T10:33:55Z [msghand] [blockencodings.cpp:217] [FillBlock] [cmpctblock] Successfully reconstructed block 000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb with 1 txn prefilled, 2936 txn from mempool (incl at least 5 from extra pool) and 45 txn requested\r\n2024-02-23T10:33:55Z [msghand] [validationinterface.cpp:273] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb\r\n2024-02-23T10:33:55Z [msghand] [validationinterface.cpp:267] [BlockChecked] [validation] BlockChecked: block hash=000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb state=Valid\r\n2024-02-23T10:33:55Z [msghand] [validationinterface.cpp:243] [MempoolTransactionsRemovedForBlock] [validation] Enqueuing MempoolTransactionsRemovedForBlock: block height=831673 txs removed=2931\r\n2024-02-23T10:33:55Z [msghand] [validation.cpp:2738] [UpdateTipLog] UpdateTip: new best=000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb height=831673 version=0x2bc70000 log2_work=94.750438 tx=968653267 date='2024-02-23T10:33:34Z' progress=1.000000 cache=87.0MiB(713889txo)\r\n\r\n...\r\n\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:3396] [ProcessMessage] [net] received: block (1519889 bytes) peer=153\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:4728] [ProcessMessage] [net] received block 000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb peer=153\r\n2024-02-23T10:33:57Z [msghand] [validation.cpp:3862] [IsBlockMutated] [validation] IsBlockMutated: bad-witness-nonce-size, CheckWitnessCommitment : invalid witness reserved value size\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:4734] [ProcessMessage] [net] Received mutated block from peer=153\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:1791] [Misbehaving] [net] Misbehaving: peer=153 (0 -> 100) DISCOURAGE THRESHOLD EXCEEDED: mutated block\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:5037] [MaybeDiscourageAndDisconnect] Warning: not punishing noban peer 153!\r\n```\r\n\r\n\r\n```\r\n2024-02-23T11:17:32Z [msghand] [blockencodings.cpp:217] [FillBlock] [cmpctblock] Successfully reconstructed block 0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 with 1 txn prefilled, 1024 txn from mempool (incl at least 0 from extra pool) and 5 txn requested\r\n2024-02-23T11:17:32Z [msghand] [validationinterface.cpp:273] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659\r\n2024-02-23T11:17:32Z [msghand] [validationinterface.cpp:267] [BlockChecked] [validation] BlockChecked: block hash=0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 state=Valid\r\n2024-02-23T11:17:32Z [msghand] [net.cpp:3784] [PushMessage] [net] sending sendcmpct (9 bytes) peer=117\r\n2024-02-23T11:17:32Z [msghand] [validationinterface.cpp:243] [MempoolTransactionsRemovedForBlock] [validation] Enqueuing MempoolTransactionsRemovedForBlock: block height=831677 txs removed=1024\r\n2024-02-23T11:17:32Z [msghand] [validation.cpp:2738] [UpdateTipLog] UpdateTip: new best=0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 height=831677 version=0x2fffe000 log2_work=94.750499 tx=968663963 date='2024-02-23T11:17:27Z' progress=1.000000 cache=78.7MiB(689008txo)\r\n\r\n...\r\n\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:3396] [ProcessMessage] [net] received: block (1509042 bytes) peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:4728] [ProcessMessage] [net] received block 0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 peer=20\r\n2024-02-23T11:17:34Z [msghand] [validation.cpp:3862] [IsBlockMutated] [validation] IsBlockMutated: bad-witness-nonce-size, CheckWitnessCommitment : invalid witness reserved value size\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:4734] [ProcessMessage] [net] Received mutated block from peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:1791] [Misbehaving] [net] Misbehaving: peer=20 (0 -> 100) DISCOURAGE THRESHOLD EXCEEDED: mutated block\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:5037] [MaybeDiscourageAndDisconnect] Warning: not punishing noban peer 20!\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:3396] [ProcessMessage] [net] received: getdata (37 bytes) peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:3998] [ProcessMessage] [net] received getdata (1 invsz) peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:4001] [ProcessMessage] [net] received getdata for: witness-block 0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 peer=20\r\n2024-02-23T11:17:34Z [msghand] [net.cpp:3784] [PushMessage] [net] sending block (1509078 bytes) peer=20\r\n```\r\n\r\n\r\n\r\n\r\n",
      "created_at" : "2024-02-23T13:15:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1961310819",
      "id" : 1961310819,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII58505zpj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961310819/reactions"
      },
      "updated_at" : "2024-02-23T13:15:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961310819",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500664679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500664679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(reply to https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499355541)\r\n\r\nnote: unit tests may use the `ASSERT_DEBUG_LOG`, as an alternative.",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-23T13:25:37Z",
      "diff_hunk" : "@@ -3758,6 +3814,40 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500664679",
      "id" : 1500664679,
      "in_reply_to_id" : 1499355541,
      "line" : 3817,
      "node_id" : "PRRC_kwDOABII585ZclNn",
      "original_commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "original_line" : 3817,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 96,
      "pull_request_review_id" : 1898055488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 1,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500664679/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T13:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500664679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500674548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500674548"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does it? None of the other `wait_for_*` helpers require it.",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-23T13:33:57Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500674548",
      "id" : 1500674548,
      "in_reply_to_id" : 1499613815,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII585Zcnn0",
      "original_commit_id" : "e2d1eb2e2001c31b43154df47ab5be215a26774f",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "test/functional/p2p_mutated_blocks.py",
      "position" : 69,
      "pull_request_review_id" : 1898128960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500674548/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T13:33:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500674548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500675560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500675560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in cb2437307e6861e0957899345b6e9b93716c383a: Why not move this check into `CheckWitnessCommitment` as well? This would also fix the \"tristate\" `std::optional<bool>` complexity. It seems on point to consider added witness to a block that has no witness commitment as a violation of the commitment and thus a mutation?",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-23T13:34:45Z",
      "diff_hunk" : "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500675560",
      "id" : 1500675560,
      "line" : 3966,
      "node_id" : "PRRC_kwDOABII585Zcn3o",
      "original_commit_id" : "cb2437307e6861e0957899345b6e9b93716c383a",
      "original_line" : 3906,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 158,
      "pull_request_review_id" : 1898055488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500675560/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T13:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500675560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500925855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500925855"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Great catch! The \"no witnesses allowed for blocks that don't commit to witnesses\" rule needs to at the very least also be in `IsBlockMutated`.\r\n\r\nI'm not sure if moving it to `CheckWitnessCommitment` is the right place because it needs to be checked even if segwit has not yet activated.",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-23T16:46:46Z",
      "diff_hunk" : "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500925855",
      "id" : 1500925855,
      "in_reply_to_id" : 1500675560,
      "line" : 3966,
      "node_id" : "PRRC_kwDOABII585Zdk-f",
      "original_commit_id" : "cb2437307e6861e0957899345b6e9b93716c383a",
      "original_line" : 3906,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 158,
      "pull_request_review_id" : 1898536166,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500925855/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T16:46:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500925855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500929903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500929903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I'm not sure if moving it to `CheckWitnessCommitment` is the right place because it needs to be checked even if segwit has not yet activated.\r\n\r\nI was thinking that `CheckWitnessCommitment` would wrap all of it, and you'd pass the segwit bool to it for the code block that would be run conditionally?",
      "commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at" : "2024-02-23T16:50:24Z",
      "diff_hunk" : "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500929903",
      "id" : 1500929903,
      "in_reply_to_id" : 1500675560,
      "line" : 3966,
      "node_id" : "PRRC_kwDOABII585Zdl9v",
      "original_commit_id" : "cb2437307e6861e0957899345b6e9b93716c383a",
      "original_line" : 3906,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 158,
      "pull_request_review_id" : 1898542476,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500929903/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T16:50:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500929903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501038143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "created_at" : "2024-02-23T18:36:23Z",
      "diff_hunk" : "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501038143",
      "id" : 1501038143,
      "in_reply_to_id" : 1500675560,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZeAY_",
      "original_commit_id" : "cb2437307e6861e0957899345b6e9b93716c383a",
      "original_line" : 3906,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1898716555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038143/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T18:36:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501038885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The tristate no longer exists, see https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500675560",
      "commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "created_at" : "2024-02-23T18:37:18Z",
      "diff_hunk" : "@@ -3639,6 +3639,45 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static std::optional<bool> CheckWitnessCommitment(const CBlock& block, BlockValidationState& state)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501038885",
      "id" : 1501038885,
      "in_reply_to_id" : 1499598937,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZeAkl",
      "original_commit_id" : "cb2437307e6861e0957899345b6e9b93716c383a",
      "original_line" : 3658,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1898718070,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038885/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T18:37:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501041492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> have you thought about having this function return an optional error string so unit tests can check expected failure reason?\r\n\r\nI'm considering returning the mutation type but I will not be asserting logs...",
      "commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "created_at" : "2024-02-23T18:38:55Z",
      "diff_hunk" : "@@ -3758,6 +3814,40 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501041492",
      "id" : 1501041492,
      "in_reply_to_id" : 1499355541,
      "line" : 3829,
      "node_id" : "PRRC_kwDOABII585ZeBNU",
      "original_commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "original_line" : 3829,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 108,
      "pull_request_review_id" : 1898720516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041492/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T18:38:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041492",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501041586"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041586"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "created_at" : "2024-02-23T18:39:02Z",
      "diff_hunk" : "@@ -145,4 +147,31 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // tx1: ff204bd0000000000000\n+    // tx2: 8ae53c92000000000000\n+    // 64 byte tx of the form h(tx1)||h(tx2), tx3:\n+    // cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\n+\n+    CMutableTransaction tx1;\n+    BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx2;\n+    BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx3;\n+    BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501041586",
      "id" : 1501041586,
      "in_reply_to_id" : 1499351311,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZeBOy",
      "original_commit_id" : "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "original_line" : 162,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1898720663,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041586/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T18:39:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041586",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501042394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501042394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added the assertion, even though I really don't like asserting logs",
      "commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "created_at" : "2024-02-23T18:39:56Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)\n+\n+        # Block at height 101 should be the only one in flight from peer 0\n+        peer_info_prior_to_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_prior_to_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_prior_to_attack[0][\"inflight\"])\n+\n+        # Attempt to clear the honest relayer's download request by sending the\n+        # mutated block (as the attacker).\n+        attacker.send_message(msg_block(mutated_block))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501042394",
      "id" : 1501042394,
      "in_reply_to_id" : 1484773525,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZeBba",
      "original_commit_id" : "5f27c9be7acf82f1630802645d3b910baf39fa90",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "test/functional/p2p_mutated_blocks.py",
      "position" : null,
      "pull_request_review_id" : 1898721912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501042394/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T18:39:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501042394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501052508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501052508"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        block.vtx.push_back(MakeTransactionRef(tx3));\r\n        BOOST_CHECK(!block.vtx.back()->IsCoinBase());\r\n```",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-23T18:51:14Z",
      "diff_hunk" : "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transactions.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3\n+            HashWriter hasher;\n+            hasher.write({tx1.GetHash().data(), 32});\n+            hasher.write({tx2.GetHash().data(), 32});\n+            assert(hasher.GetHash() == tx3.GetHash());\n+            // Verify that tx3 is 64 bytes in size (with out witness).\n+            assert(GetSerializeSize(TX_NO_WITNESS(tx3)) == 64);\n+        }\n+\n+        CBlock block;\n+        block.vtx.push_back(MakeTransactionRef(tx1));\n+        block.vtx.push_back(MakeTransactionRef(tx2));\n+        uint256 merkle_root = block.hashMerkleRoot = BlockMerkleRoot(block);\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Mutate the block by replacing the two transactions with one 64-byte\n+        // transaction that serializes into the concatenation of the txids of\n+        // the transactions in the unmutated block.\n+        block.vtx.clear();\n+        block.vtx.push_back(MakeTransactionRef(tx3));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501052508",
      "id" : 1501052508,
      "line" : 293,
      "node_id" : "PRRC_kwDOABII585ZeD5c",
      "original_commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "original_line" : 293,
      "original_position" : 147,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 162,
      "pull_request_review_id" : 1898738155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501052508/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T19:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501052508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501057392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501057392"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        // match the double sha256 of the concatenation of the two transaction hashes.\r\n```",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-23T18:57:09Z",
      "diff_hunk" : "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transactions.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501057392",
      "id" : 1501057392,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ZeFFw",
      "original_commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "original_line" : 223,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1898738155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501057392/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T19:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501057392",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501069738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501069738"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be good to check we don't flag valid 64-byte coinbases as mutated in the function",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-23T19:09:25Z",
      "diff_hunk" : "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501069738",
      "id" : 1501069738,
      "line" : 220,
      "node_id" : "PRRC_kwDOABII585ZeIGq",
      "original_commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "original_line" : 220,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 89,
      "pull_request_review_id" : 1898738155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501069738/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T19:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501069738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501074722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501074722"
         }
      },
      "author_association" : "MEMBER",
      "body" : "future work nit: the mutated arg is never non-`nullptr` and has no test coverage it seems.\r\n",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-23T19:14:59Z",
      "diff_hunk" : "@@ -3639,6 +3639,83 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    if (block.m_checked_merkle_root) return true;\n+\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n+\n+    block.m_checked_merkle_root = true;\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool has_witness_commitment{false};\n+\n+    if (expect_witness_commitment) {\n+        if (block.m_checked_witness_commitment) return true;\n+\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());\n+            const auto& witness_stack{block.vtx[0]->vin[0].scriptWitness.stack};\n+\n+            if (witness_stack.size() != 1 || witness_stack[0].size() != 32) {\n+                return state.Invalid(\n+                    /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+                    /*reject_reason=*/\"bad-witness-nonce-size\",\n+                    /*debug_message=*/strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501074722",
      "id" : 1501074722,
      "line" : 3691,
      "node_id" : "PRRC_kwDOABII585ZeJUi",
      "original_commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "original_line" : 3691,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 53,
      "pull_request_review_id" : 1898738155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501074722/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T19:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501074722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501113502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501113502"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-23T19:59:39Z",
      "diff_hunk" : "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501113502",
      "id" : 1501113502,
      "in_reply_to_id" : 1501069738,
      "line" : 220,
      "node_id" : "PRRC_kwDOABII585ZeSye",
      "original_commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "original_line" : 220,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 89,
      "pull_request_review_id" : 1898841976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501113502/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T19:59:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501113502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502309643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502309643"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> future work nit: the mutated arg is never non-nullptr and has no test coverage it seems.\r\n\r\n\r\nI presume the reason is that it can't be mutated and all callers are expected to pass `nullptr`? Seems fine to remove the arg, but should be fine either way.",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T09:45:14Z",
      "diff_hunk" : "@@ -3639,6 +3639,83 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    if (block.m_checked_merkle_root) return true;\n+\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n+\n+    block.m_checked_merkle_root = true;\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool has_witness_commitment{false};\n+\n+    if (expect_witness_commitment) {\n+        if (block.m_checked_witness_commitment) return true;\n+\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());\n+            const auto& witness_stack{block.vtx[0]->vin[0].scriptWitness.stack};\n+\n+            if (witness_stack.size() != 1 || witness_stack[0].size() != 32) {\n+                return state.Invalid(\n+                    /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+                    /*reject_reason=*/\"bad-witness-nonce-size\",\n+                    /*debug_message=*/strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502309643",
      "id" : 1502309643,
      "in_reply_to_id" : 1501074722,
      "line" : 3691,
      "node_id" : "PRRC_kwDOABII585Zi20L",
      "original_commit_id" : "8c18b708b9362ced44095571e35695be399d7272",
      "original_line" : 3691,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 53,
      "pull_request_review_id" : 1900394221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502309643/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T09:45:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502309643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502393217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502393217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: 6cae77ae78bcd9d651b6eaf174982ffdcbc165cb. Not sure about the early-return in case the bool is set to true, and below the check of the bool. May be better to remove either the early return, or remove the bool (and keep the if check as `if (commitpos != NO_WITNESS_COMMITMENT) {`?",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T10:40:46Z",
      "diff_hunk" : "@@ -3639,6 +3639,59 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool fHaveWitness{false};\n+\n+    if (expect_witness_commitment) {\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n+        if (fHaveWitness) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n+            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n+            }\n+\n+            return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502393217",
      "id" : 1502393217,
      "line" : 3703,
      "node_id" : "PRRC_kwDOABII585ZjLOB",
      "original_commit_id" : "6cae77ae78bcd9d651b6eaf174982ffdcbc165cb",
      "original_line" : 3679,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 65,
      "pull_request_review_id" : 1900524442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502393217/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T11:21:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502393217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502418947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502418947"
         }
      },
      "author_association" : "MEMBER",
      "body" : "aa08aa523d02ee89f2223381de78b35cf31fa6b6: Maybe document the precondition? Otherwise, this could result in a remote triggered crash, if a caller forgets to check the vin size?",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T10:57:27Z",
      "diff_hunk" : "@@ -3642,46 +3642,64 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n {\n     bool mutated;\n-    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-    if (block.hashMerkleRoot != hashMerkleRoot2)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n \n     // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n     // of transactions in a block without affecting the merkle root of a block,\n     // while still invalidating it.\n-    if (mutated)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n \n     return true;\n }\n \n static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n {\n-    bool fHaveWitness{false};\n+    bool has_witness_commitment{false};\n \n     if (expect_witness_commitment) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n-        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n-        if (fHaveWitness) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502418947",
      "id" : 1502418947,
      "line" : 3679,
      "node_id" : "PRRC_kwDOABII585ZjRgD",
      "original_commit_id" : "aa08aa523d02ee89f2223381de78b35cf31fa6b6",
      "original_line" : 3674,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 41,
      "pull_request_review_id" : 1900524442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502418947/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T11:21:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502418947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I believe I addressed all comments, this is ready for further review",
      "created_at" : "2024-02-26T11:00:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1963861575",
      "id" : 1963861575,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
      "node_id" : "IC_kwDOABII5851DiZH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1963861575/reactions"
      },
      "updated_at" : "2024-02-26T11:00:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1963861575",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502821184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502821184"
         }
      },
      "author_association" : "MEMBER",
      "body" : "follow-up, or separate 1-line commit:\r\n\r\n```diff\r\ndiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\r\nindex fd2ef47b92..dbe2815991 100644\r\n--- a/src/test/validation_tests.cpp\r\n+++ b/src/test/validation_tests.cpp\r\n@@ -223,8 +223,8 @@ BOOST_AUTO_TEST_CASE(block_malleation)\r\n         block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\r\n         BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\r\n         HashWriter hasher;\r\n-        hasher.write({block.vtx[0]->GetHash().data(), 32});\r\n-        hasher.write({block.vtx[1]->GetHash().data(), 32});\r\n+        hasher.write(block.vtx[0]->GetHash());\r\n+        hasher.write(block.vtx[1]->GetHash());\r\n         block.hashMerkleRoot = hasher.GetHash();\r\n         BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\r\n \r\ndiff --git a/src/util/transaction_identifier.h b/src/util/transaction_identifier.h\r\nindex 89e10dee01..d4a0ede25a 100644\r\n--- a/src/util/transaction_identifier.h\r\n+++ b/src/util/transaction_identifier.h\r\n@@ -44,6 +44,7 @@ public:\r\n     constexpr void SetNull() { m_wrapped.SetNull(); }\r\n     std::string GetHex() const { return m_wrapped.GetHex(); }\r\n     std::string ToString() const { return m_wrapped.ToString(); }\r\n+    static constexpr auto size() { return decltype(m_wrapped)::size(); }\r\n     constexpr const std::byte* data() const { return reinterpret_cast<const std::byte*>(m_wrapped.data()); }\r\n     constexpr const std::byte* begin() const { return reinterpret_cast<const std::byte*>(m_wrapped.begin()); }\r\n     constexpr const std::byte* end() const { return reinterpret_cast<const std::byte*>(m_wrapped.end()); }\r\n",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T15:37:27Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502821184",
      "id" : 1502821184,
      "line" : 229,
      "node_id" : "PRRC_kwDOABII585ZkztA",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 229,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 80,
      "pull_request_review_id" : 1901215671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502821184/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T16:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502821184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502829764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502829764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T15:42:59Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Blocks with 64-byte coinbase transactions are not considered mutated\n+        block.vtx.clear();\n+        {\n+            CMutableTransaction mtx;\n+            mtx.vin.resize(1);\n+            mtx.vout.resize(1);\n+            mtx.vout[0].scriptPubKey.resize(4);\n+            block.vtx.push_back(MakeTransactionRef(mtx));\n+            block.hashMerkleRoot = block.vtx.back()->GetHash();\n+            assert(block.vtx.back()->IsCoinBase());\n+            assert(GetSerializeSize(TX_NO_WITNESS(block.vtx.back())) == 64);\n+        }\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3\n+            HashWriter hasher;\n+            hasher.write({tx1.GetHash().data(), 32});\n+            hasher.write({tx2.GetHash().data(), 32});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502829764",
      "id" : 1502829764,
      "line" : 277,
      "node_id" : "PRRC_kwDOABII585Zk1zE",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 277,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 128,
      "pull_request_review_id" : 1901215671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502829764/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T16:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502829764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502830830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502830830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `s/with out/without/g`",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T15:43:42Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Blocks with 64-byte coinbase transactions are not considered mutated\n+        block.vtx.clear();\n+        {\n+            CMutableTransaction mtx;\n+            mtx.vin.resize(1);\n+            mtx.vout.resize(1);\n+            mtx.vout[0].scriptPubKey.resize(4);\n+            block.vtx.push_back(MakeTransactionRef(mtx));\n+            block.hashMerkleRoot = block.vtx.back()->GetHash();\n+            assert(block.vtx.back()->IsCoinBase());\n+            assert(GetSerializeSize(TX_NO_WITNESS(block.vtx.back())) == 64);\n+        }\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3\n+            HashWriter hasher;\n+            hasher.write({tx1.GetHash().data(), 32});\n+            hasher.write({tx2.GetHash().data(), 32});\n+            assert(hasher.GetHash() == tx3.GetHash());\n+            // Verify that tx3 is 64 bytes in size (with out witness).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502830830",
      "id" : 1502830830,
      "line" : 279,
      "node_id" : "PRRC_kwDOABII585Zk2Du",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 279,
      "original_position" : 130,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 130,
      "pull_request_review_id" : 1901215671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502830830/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T16:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502830830",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502948694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502948694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is the test covering is_mutated for duplicate tree nodes? I think not. Suggestion:\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\r\nindex dbe2815991..8ad32eb195 100644\r\n--- a/src/test/validation_tests.cpp\r\n+++ b/src/test/validation_tests.cpp\r\n@@ -228,6 +228,17 @@ BOOST_AUTO_TEST_CASE(block_malleation)\r\n         block.hashMerkleRoot = hasher.GetHash();\r\n         BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\r\n \r\n+        // Block with two transactions is mutated if any node is duplicate.\r\n+        {\r\n+            block.vtx[1] = block.vtx[0];\r\n+            BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\r\n+            HashWriter hasher;\r\n+            hasher.write(block.vtx[0]->GetHash());\r\n+            hasher.write(block.vtx[1]->GetHash());\r\n+            block.hashMerkleRoot = hasher.GetHash();\r\n+            BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\r\n+        }\r\n+\r\n         // Blocks with 64-byte coinbase transactions are not considered mutated\r\n         block.vtx.clear();\r\n         {\r\n",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T16:28:19Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502948694",
      "id" : 1502948694,
      "line" : 232,
      "node_id" : "PRRC_kwDOABII585ZlS1W",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 232,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 83,
      "pull_request_review_id" : 1901215671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502948694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T16:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502948694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503305240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503305240"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "doubla",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T21:12:07Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Blocks with 64-byte coinbase transactions are not considered mutated\n+        block.vtx.clear();\n+        {\n+            CMutableTransaction mtx;\n+            mtx.vin.resize(1);\n+            mtx.vout.resize(1);\n+            mtx.vout[0].scriptPubKey.resize(4);\n+            block.vtx.push_back(MakeTransactionRef(mtx));\n+            block.hashMerkleRoot = block.vtx.back()->GetHash();\n+            assert(block.vtx.back()->IsCoinBase());\n+            assert(GetSerializeSize(TX_NO_WITNESS(block.vtx.back())) == 64);\n+        }\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503305240",
      "id" : 1503305240,
      "line" : 274,
      "node_id" : "PRRC_kwDOABII585Zmp4Y",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 274,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 125,
      "pull_request_review_id" : 1902021477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503305240/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T22:07:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503305240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503310220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503310220"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Emtpy",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T21:16:23Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503310220",
      "id" : 1503310220,
      "line" : 207,
      "node_id" : "PRRC_kwDOABII585ZmrGM",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 207,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 58,
      "pull_request_review_id" : 1902021477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503310220/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T22:07:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503310220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503345647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503345647"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "There is another `return true;` case at the bottom of the function where you would need to set this as well.",
      "commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at" : "2024-02-26T21:49:31Z",
      "diff_hunk" : "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503345647",
      "id" : 1503345647,
      "line" : 3702,
      "node_id" : "PRRC_kwDOABII585Zmzvv",
      "original_commit_id" : "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "original_line" : 3702,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 64,
      "pull_request_review_id" : 1902021477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503345647/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-26T22:07:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503345647",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503769394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503769394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> There is another return true; case at the bottom of the function where you would need to set this as well.\r\n\r\nNo. This would allow a race where an block, not attached to the chain, is submitted, thus leading to the segwit deployment being assumed disabled, due to the previous block being nullptr. However, cs_main isn't taken for the whole time, so the previous block could be supplied in the meantime, leading the code to incorrectly think this check was already done, when it was not.",
      "commit_id" : "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at" : "2024-02-27T07:42:06Z",
      "diff_hunk" : "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503769394",
      "id" : 1503769394,
      "in_reply_to_id" : 1503345647,
      "line" : 3705,
      "node_id" : "PRRC_kwDOABII585ZobMy",
      "original_commit_id" : "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "original_line" : 3705,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 67,
      "pull_request_review_id" : 1902737282,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503769394/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-27T07:42:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503769394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504223283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504223283"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This case should be documented then.",
      "commit_id" : "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at" : "2024-02-27T13:20:09Z",
      "diff_hunk" : "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504223283",
      "id" : 1504223283,
      "in_reply_to_id" : 1503345647,
      "line" : 3705,
      "node_id" : "PRRC_kwDOABII585ZqKAz",
      "original_commit_id" : "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "original_line" : 3705,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 67,
      "pull_request_review_id" : 1903490465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504223283/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-27T13:20:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504223283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504324995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504324995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added an extra commit and patched the tests",
      "commit_id" : "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at" : "2024-02-27T14:25:27Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504324995",
      "id" : 1504324995,
      "in_reply_to_id" : 1502821184,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Zqi2D",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 229,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1903663601,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504324995/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-27T14:25:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504324995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504325373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504325373"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at" : "2024-02-27T14:25:43Z",
      "diff_hunk" : "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504325373",
      "id" : 1504325373,
      "in_reply_to_id" : 1502948694,
      "line" : 232,
      "node_id" : "PRRC_kwDOABII585Zqi79",
      "original_commit_id" : "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "original_line" : 232,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 101,
      "pull_request_review_id" : 1903664247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504325373/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-27T14:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504325373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504330700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504330700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I wasn't even thinking of any race but what marco says seems plausible. The cache is only supposed to cache the potentially expensive witness commitment check, which is why I limited its scope to the `expect_witness_commitment` branch.\r\n\r\nI think the name is documentation enough but feel free to suggest a comment I can paste in.",
      "commit_id" : "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at" : "2024-02-27T14:29:04Z",
      "diff_hunk" : "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504330700",
      "id" : 1504330700,
      "in_reply_to_id" : 1503345647,
      "line" : 3705,
      "node_id" : "PRRC_kwDOABII585ZqkPM",
      "original_commit_id" : "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "original_line" : 3705,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 67,
      "pull_request_review_id" : 1903673032,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504330700/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-27T14:29:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504330700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504331037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331037"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the bool",
      "commit_id" : "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at" : "2024-02-27T14:29:17Z",
      "diff_hunk" : "@@ -3639,6 +3639,59 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool fHaveWitness{false};\n+\n+    if (expect_witness_commitment) {\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n+        if (fHaveWitness) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n+            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n+            }\n+\n+            return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504331037",
      "id" : 1504331037,
      "in_reply_to_id" : 1502393217,
      "line" : 3706,
      "node_id" : "PRRC_kwDOABII585ZqkUd",
      "original_commit_id" : "6cae77ae78bcd9d651b6eaf174982ffdcbc165cb",
      "original_line" : 3706,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 68,
      "pull_request_review_id" : 1903673626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331037/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-27T14:29:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504331273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331273"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment",
      "commit_id" : "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at" : "2024-02-27T14:29:27Z",
      "diff_hunk" : "@@ -3642,46 +3642,64 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n {\n     bool mutated;\n-    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-    if (block.hashMerkleRoot != hashMerkleRoot2)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n \n     // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n     // of transactions in a block without affecting the merkle root of a block,\n     // while still invalidating it.\n-    if (mutated)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n \n     return true;\n }\n \n static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n {\n-    bool fHaveWitness{false};\n+    bool has_witness_commitment{false};\n \n     if (expect_witness_commitment) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n-        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n-        if (fHaveWitness) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504331273",
      "id" : 1504331273,
      "in_reply_to_id" : 1502418947,
      "line" : 3682,
      "node_id" : "PRRC_kwDOABII585ZqkYJ",
      "original_commit_id" : "aa08aa523d02ee89f2223381de78b35cf31fa6b6",
      "original_line" : 3682,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1903674024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-27T14:29:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   }
]
