{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "This PR is designed for the use case of a Lightning node that provides liquidity of predefined amounts via [liquidity ads](https://github.com/lightning/bolts/pull/878).\r\n\r\nCoin selection is currently optimized to reduce the size of the utxo set and create change optimized for privacy. A liquidity provider instead needs to service multiple liquidity requests by spending confirmed utxos of known sizes.\r\n\r\nIdeally most liquidity transactions would be funded by a single input or a small set of inputs optimized to reduce fees. To minimize the number of unconfirmed transactions, inputs should also be sized in a range where most transactions do not produce change. When change is created, it should be divided into outputs of the sizes needed so that the wallet's utxo set converges towards an ideal utxo set specified by the user.\r\n\r\nI am opening this PR as a draft to get feedback and suggestions on the concept and my implementation to address this use case.\r\n\r\nThe algorithm described below can be implemented externally via RPC calls or directly in the wallet. \r\n\r\n1. Externally: use a new option to set the change target used for coin selection. (see [b03ee39](https://github.com/bitcoin/bitcoin/commit/b03ee39c65de4b7fedcd698c2174903bcc1af45d))\r\n2. Wallet (opportunistic): a new configuration file defines the desired utxo set which the wallet uses to compute the change target used for coin selection and to split change outputs (if any). (see [f47a513](https://github.com/bitcoin/bitcoin/commit/f47a513602f17143fcdc54bb2385f90a0936f0f5))\r\n4. Wallet (reactive/proactive):  pre-select a large input to force coin selection to produce change when fees are below some specified threshold or the desired set of utxos falls below some threshold. (see [a214548](https://github.com/bitcoin/bitcoin/commit/a2145480918673ad23345d5f28992b67108d11f9))\r\n\r\n## utxo targets file example:\r\n\r\n```json\r\n{\r\n    \"buckets\": [\r\n        {\r\n            \"start_satoshis\": 10000,\r\n            \"end_satoshis\": 25000,\r\n            \"target_utxo_count\": 150\r\n        },\r\n        {\r\n            \"start_satoshis\": 50000,\r\n            \"end_satoshis\": 75000,\r\n            \"target_utxo_count\": 50\r\n        },\r\n        {\r\n            \"start_satoshis\": 200000,\r\n            \"end_satoshis\": 250000,\r\n            \"target_utxo_count\": 20\r\n        },\r\n        {\r\n            \"start_satoshis\": 1000000,\r\n            \"end_satoshis\": 1400000,\r\n            \"target_utxo_count\": 5\r\n        }\r\n    ],\r\n    \"bucket_refill_feerate\": 30000\r\n}\r\n```\r\n - The `target_utxo_count` for a bucket should be larger than the anticipated number of liquidity requests of `bucket_start_satoshis` within the expected confirmation time of a liquidity transaction.\r\n - The range from `bucket_start_satoshis` to `bucket_end_satoshis` should encompass expected fee variance.\r\n - The `bucket_refill_feerate` should be set to the expected median fee rate (?).\r\n - This file will be reloaded for every spend request to allow for on-the-fly updates\r\n\r\n## Algorithm steps\r\n\r\nFor each payment do the following:\r\n\r\n1) Calculate the current capacity of each target bucket from the wallet's utxo set.\r\n    - Include outputs from both confirmed and unconfirmed transactions in the wallet to calculate capacity.\r\n2) Add our largest confirmed utxo as an input IF the capacity of the least full target bucket is below some threshold (eg. < 30% full) or less than some higher threshold (eg. < 70%) and fee rates are below the `bucket_refill_feerate`.\r\n    - When the largest confirmed utxo is from one of our target buckets, then we should refill our wallet with a utxo from cold storage.\r\n3) Set the minimum change target [`m_min_change_target`](https://github.com/bitcoin/bitcoin/blob/3054416f62644120a4a6bc76e927054c7fbbd487/src/wallet/coinselection.h#L147) to a value from the target bucket with the lowest current capacity.\r\n    - Generate a random change target of the amount: current `change_fee` (the fee for creating an output) + a random value in the range: `bucket_start_satoshis` to `bucket_end_satoshi` - `change_fee`.\r\n    - Currently the change target is set by [`GenerateChangeTarget()`](https://github.com/bitcoin/bitcoin/blob/6ff0aa089c01ff3e610ecb47814ed739d685a14c/src/wallet/coinselection.cpp#L824) in a hard coded range.\r\n    - This parameter is only used by the 'knapsack' and 'coingrinder' algorithms.\r\n4) Call ['SelectCoins()'](https://github.com/bitcoin/bitcoin/blob/3054416f62644120a4a6bc76e927054c7fbbd487/src/wallet/spend.cpp#L1132) with the input from step 2 (if any) added to the `preset_inputs` parameter and with the minimum change target from step 3.\r\n    - The `consolidatefeerate=0` configuration option should always be set so that utxos are not preemptively cosolidated. Coin selection sets the parameter [`m_long_term_feerate`](https://github.com/bitcoin/bitcoin/blob/37fdf5a492786c1772b5b40773a1031237447070/src/wallet/coinselection.h#L160) to the wallets `consolidatefeerate`.\r\n    - Ideally, only the 'bnb' and 'cg' coin selection algorithms should be used and the others disabled to optimize for low fees.\r\n5) If the coin selection result includes a change output, then split the single change output amount into multiple outputs.\r\n    - Add the mimimum change target as an output first.\r\n    - If there is remaining value after paying the fee for a new output, then add a target from the next most empty target bucket.\r\n    - If there is not enough value to add a new output and fees, add remaining value to the last output added instead.\r\n\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442/comments",
   "created_at" : "2024-02-16T16:45:09Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442",
   "id" : 2138981919,
   "labels" : [
      {
         "color" : "08a781",
         "default" : false,
         "description" : null,
         "id" : 149424,
         "name" : "Wallet",
         "node_id" : "MDU6TGFiZWwxNDk0MjQ=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet"
      },
      {
         "color" : "cccccc",
         "default" : false,
         "description" : "",
         "id" : 5334691551,
         "name" : "CI failed",
         "node_id" : "LA_kwDOABII588AAAABPfju3w",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585nG3c9",
   "number" : 29442,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/29442.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/29442.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442/timeline",
   "title" : "wallet: Target a pre-defined utxo set composition by adjusting change outputs",
   "updated_at" : "2024-02-16T16:58:03Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/8568892?v=4",
      "events_url" : "https://api.github.com/users/remyers/events{/privacy}",
      "followers_url" : "https://api.github.com/users/remyers/followers",
      "following_url" : "https://api.github.com/users/remyers/following{/other_user}",
      "gists_url" : "https://api.github.com/users/remyers/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/remyers",
      "id" : 8568892,
      "login" : "remyers",
      "node_id" : "MDQ6VXNlcjg1Njg4OTI=",
      "organizations_url" : "https://api.github.com/users/remyers/orgs",
      "received_events_url" : "https://api.github.com/users/remyers/received_events",
      "repos_url" : "https://api.github.com/users/remyers/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/remyers/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/remyers/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/remyers"
   }
}
