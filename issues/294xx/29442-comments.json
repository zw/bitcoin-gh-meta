[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29442).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29015](https://github.com/bitcoin/bitcoin/pull/29015) (kernel: Streamline util library by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2024-02-16T16:45:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#issuecomment-1948862298",
      "id" : 1948862298,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442",
      "node_id" : "IC_kwDOABII5850KUda",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948862298/reactions"
      },
      "updated_at" : "2024-02-20T12:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948862298",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/21662752091</sub>",
      "created_at" : "2024-02-16T16:53:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#issuecomment-1948874005",
      "id" : 1948874005,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442",
      "node_id" : "IC_kwDOABII5850KXUV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948874005/reactions"
      },
      "updated_at" : "2024-02-16T16:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948874005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@murchandamus we'd love to get your feedback on this! I'll try to summarize at a higher level what we'd like to achieve.\r\n\r\nThe `bitcoind` wallet currently tries to keep a somewhat \"minimal\" utxo set and actively consolidates user utxos, because it assumes that we receive transactions as much (or more) than we send transactions and wants outgoing transactions to be as cheap as possible. But that's not true of liquidity service providers, who usually only receive funds when refilling the wallet from cold storage, and want to make sure they always have enough confirmed utxos to satisfy user demand efficiently. In such cases, the wallet operator has a good idea of what they'd like their utxo pool to look like (because they're selling a limited sets of specific amounts), and would like `bitcoind` to try to maintain that utxo pool as much as possible, while optimizing mostly for transaction weight, especially when feerate is high (above a user-defined threshold, similar to `consolidatefeerate` but with the exact opposite semantics - when below that threshold, we want to actively _create_ more utxos, not _consolidate_ them).\r\n\r\nWe can think of this type of wallet as a slowly draining wallet: its total amount is linearly decreasing over time, and is occasionally topped-up from cold storage.\r\n\r\nWe're not sure how to best achieve that. Our goal is to do it inside `bitcoind` (which is the source of truth for the wallet state), but with minimal changes to the coin selection code itself. We'd like this to be as much as possible done by simply pre-processing inputs to the coin selection algorithms and post-processing their outputs, which would make this:\r\n\r\n- easy to rebase on top of bitcoind releases if this work doesn't make sense to be accepted into `bitcoind`\r\n- or as a user-configurable option if that PR can be merged to `bitcoind`",
      "created_at" : "2024-02-19T10:30:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#issuecomment-1952151548",
      "id" : 1952151548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442",
      "node_id" : "IC_kwDOABII5850W3f8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1952151548/reactions"
      },
      "updated_at" : "2024-02-19T10:30:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1952151548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1497769911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497769911"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Loading this file every time we fund a transaction doesn't seem reasonable. I think we should start with a static file that needs a restart whenever the node operator wants to change values, and we can later decide how to make this more dynamic (if it's even necessary).",
      "commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "created_at" : "2024-02-21T15:17:52Z",
      "diff_hunk" : "@@ -1128,6 +1225,36 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n         available_coins = AvailableCoins(wallet, &coin_control, coin_selection_params.m_effective_feerate);\n     }\n \n+    // Load a json file that describes a target utxo set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1497769911",
      "id" : 1497769911,
      "line" : 1228,
      "node_id" : "PRRC_kwDOABII585ZRie3",
      "original_commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "original_line" : 1228,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 138,
      "pull_request_review_id" : 1893495240,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497769911/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T15:55:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497769911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1497820248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497820248"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure this is really what we want. I think this function should try to refill multiple buckets at once (when amounts allow it), not just the most depleted one:\r\n\r\n- Check which utxo buckets should be refilled:\r\n  - Initialize a `to_refill` list of `(bucket, target_quantity)`\r\n  - For each utxo bucket:\r\n    - If the feerate is low (below a to-be-defined threshold) and the bucket is less than 70% full (or a to-be-defined threshold that could be configurable):\r\n      - Add this bucket to `to_refill` with a `target_quantity` of `target_utxo_count - current_utxo_count` (when feerate is low, we'd like to refill as much as possible)\r\n    - If the feerate is higher than our threshold and the bucket is less than 30% full (or a to-be-defined threshold that could be configurable), we refill less aggressively:\r\n      - Add this bucket to `to_refill` with a `target_quantity` that we scale (somehow) based on feerate and how many utxos we're missing\r\n  - Order `to_refill` by `target_quantity`, descending (we'll want to refill the buckets that are missing the most utxos first)\r\n- Check the utxos that we have outside of our buckets: we ideally want to spend those utxos to refill our buckets. We have no guarantee that those are the ones that will be used by the coin selection, but we can use their total amount as the maximum amount of funds we allocate to refill our buckets. This part is a bit fuzzy for me right now, I'm not sure this is the best approach, it definitely deserves more thoughts.\r\n  - Iterate over those utxos and add their amount to obtain `utxos_outside_buckets_total_amount`\r\n- Compute the change target based on `to_refill` and `utxos_outside_buckets_total_amount`:\r\n  - Initialize `change_target` to `0`\r\n  - Iterate over `to_refill`, and for each bucket that needs to be refilled:\r\n    - Decide how much of the `target_quantity` we want to refill based on `utxos_outside_buckets_total_amount` and the current `change_target`\r\n    - Add the corresponding amount to `change_target`\r\n    - That step probably has a lot of issues as well and deserves more thought. If we have a lot of utxos outside of our buckets, we may end up targeting a very large change amount and thus create a huge transaction, which is generally undesirable, but maybe desirable when our buckets are close to being empty. Maybe it makes sense to bound the `change_target` to a (small) multiplier of the funding amount? Or have a very different behavior when the feerate is very low, because when that happens we may want to fully refill our buckets?\r\n\r\nAs you can see, this is still very early discussion on what the algorithm should look like. It feels like we're still trying to understand the pitfalls we want to avoid we should try to write the algorithm in pseudo-code first in order to converge on an initial version (maybe to be detailed and discussed in a delving bitcoin post).\r\n\r\nAlso, when we don't want to actively refill buckets, we should target a changeless transaction, I'm not sure that is done right now?",
      "commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "created_at" : "2024-02-21T15:47:29Z",
      "diff_hunk" : "@@ -799,6 +815,83 @@ util::Result<SelectionResult> SelectCoins(const CWallet& wallet, CoinsResult& av\n     return op_selection_result;\n }\n \n+/** Returns UTXO targets and compute their current count from available coins */\n+std::vector<UtxoTarget> UtxoTargetsFromJson(const UniValue& utxo_targets_json, const CoinsResult& available_coins)\n+{\n+    std::vector<UtxoTarget> utxo_targets;\n+    for (const auto& bucket : utxo_targets_json.getValues()) {\n+        UtxoTarget target = {\n+            bucket[\"start_satoshis\"].getInt<CAmount>(),\n+            bucket[\"end_satoshis\"].getInt<CAmount>(),\n+            bucket[\"target_utxo_count\"].getInt<uint32_t>()};\n+        utxo_targets.push_back(target);\n+    }\n+    for (const auto& [type, outputs] : available_coins.coins) {\n+        for (const wallet::COutput& output : outputs) {\n+            for (UtxoTarget& target : utxo_targets) {\n+                if (output.txout.nValue >= target.start_satoshis && output.txout.nValue <= target.end_satoshis) {\n+                    target.current_utxo_count++;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    return utxo_targets;\n+}\n+\n+/** Returns a random change amount in the range of the most depleted Utxo bucket and sets `capacity`\n+ * to the capacity of that change target, if any.\n+ */\n+std::optional<CAmount> GenerateChangeTargetFromUtxoTargets(const std::vector<UtxoTarget>& utxo_targets, const CAmount change_fee, double& capacity, FastRandomContext& rng)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1497820248",
      "id" : 1497820248,
      "line" : 846,
      "node_id" : "PRRC_kwDOABII585ZRuxY",
      "original_commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "original_line" : 846,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 69,
      "pull_request_review_id" : 1893495240,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497820248/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T15:55:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497820248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1497828903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497828903"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm wondering whether we should use a fully deterministic algorithm to split the change into buckets, I'm afraid this is exactly the kind of algorithm that may end up in a loop where one funding attempt does something, and the next one undoes it. It feels like adding randomization may be the simple way to avoid this? But maybe it's too early in the algorithm design phase to decide.",
      "commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "created_at" : "2024-02-21T15:52:42Z",
      "diff_hunk" : "@@ -799,6 +815,83 @@ util::Result<SelectionResult> SelectCoins(const CWallet& wallet, CoinsResult& av\n     return op_selection_result;\n }\n \n+/** Returns UTXO targets and compute their current count from available coins */\n+std::vector<UtxoTarget> UtxoTargetsFromJson(const UniValue& utxo_targets_json, const CoinsResult& available_coins)\n+{\n+    std::vector<UtxoTarget> utxo_targets;\n+    for (const auto& bucket : utxo_targets_json.getValues()) {\n+        UtxoTarget target = {\n+            bucket[\"start_satoshis\"].getInt<CAmount>(),\n+            bucket[\"end_satoshis\"].getInt<CAmount>(),\n+            bucket[\"target_utxo_count\"].getInt<uint32_t>()};\n+        utxo_targets.push_back(target);\n+    }\n+    for (const auto& [type, outputs] : available_coins.coins) {\n+        for (const wallet::COutput& output : outputs) {\n+            for (UtxoTarget& target : utxo_targets) {\n+                if (output.txout.nValue >= target.start_satoshis && output.txout.nValue <= target.end_satoshis) {\n+                    target.current_utxo_count++;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    return utxo_targets;\n+}\n+\n+/** Returns a random change amount in the range of the most depleted Utxo bucket and sets `capacity`\n+ * to the capacity of that change target, if any.\n+ */\n+std::optional<CAmount> GenerateChangeTargetFromUtxoTargets(const std::vector<UtxoTarget>& utxo_targets, const CAmount change_fee, double& capacity, FastRandomContext& rng)\n+{\n+    // Refill the most depleted utxo targets first.\n+    auto target_iter = std::min_element(utxo_targets.begin(), utxo_targets.end(), [](const UtxoTarget& a, const UtxoTarget& b) {\n+        return (double(a.current_utxo_count) / a.target_utxo_count) < (double(b.current_utxo_count) / b.target_utxo_count);\n+    });\n+    std::optional<CAmount> change_target;\n+    if (target_iter != utxo_targets.end()) {\n+        // Adjust the range of the target bucket based on the current fee rate.\n+        change_target = rng.randrange(target_iter->end_satoshis - target_iter->start_satoshis - change_fee) + target_iter->start_satoshis + change_fee;\n+        capacity = double(target_iter->current_utxo_count) / target_iter->target_utxo_count;\n+    }\n+    return change_target;\n+}\n+\n+std::list<CTxOut> SplitChangeFromUtxoTargets(CAmount change_amount, std::vector<UtxoTarget> utxo_targets, CAmount change_target, const CAmount change_fee, FastRandomContext& rng, CScript script_change)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1497828903",
      "id" : 1497828903,
      "line" : 861,
      "node_id" : "PRRC_kwDOABII585ZRw4n",
      "original_commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "original_line" : 861,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 84,
      "pull_request_review_id" : 1893495240,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497828903/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-21T15:55:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1497828903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Should we also tweak which coin selection algorithms are run depending on whether we're trying to refill buckets (and how aggressive we'd like to be) or not? Some of them may not be well suited for that?\r\n\r\nYes, I think we should only run BnB and Coingrinder. Currently SRD and Knapsack are fallbacks that could win when BnB and CoinGrinder have higher waste metrics. When `consolidatefeerate=0` then `longTermFeeRate=0` and the waste metric used to compare the results of the different algorithms should be based on how much we overshoot the target value + how much it costs to add more inputs.\r\n```c\r\nwaste = selectionTotal - target + inputs Ã (currentFeeRate - longTermFeeRate)\r\n```\r\nIf one of the algorithms can find a solution with less overshoot than the cost of adding more (small value) inputs, then it seems like they would win. Coingrinder should always find a solution with the least input weight. \r\n\r\nWhen fees are high, I think we should not care if we overshoot our target. We should always prefer a changeless BnB solution over one with change. When we have to produce change, we would prefer the Coingrinder solution with minimal input weight. We will allocate change to outputs sized to favor BnB in the future.\r\n\r\nWhen fees are low, I think we will want to create more change to refill our target buckets, but still not favor more exact matches that use more inputs.",
      "created_at" : "2024-02-23T11:01:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#issuecomment-1961125346",
      "id" : 1961125346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29442",
      "node_id" : "IC_kwDOABII58505GXi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961125346/reactions"
      },
      "updated_at" : "2024-02-23T11:01:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961125346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8568892?v=4",
         "events_url" : "https://api.github.com/users/remyers/events{/privacy}",
         "followers_url" : "https://api.github.com/users/remyers/followers",
         "following_url" : "https://api.github.com/users/remyers/following{/other_user}",
         "gists_url" : "https://api.github.com/users/remyers/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/remyers",
         "id" : 8568892,
         "login" : "remyers",
         "node_id" : "MDQ6VXNlcjg1Njg4OTI=",
         "organizations_url" : "https://api.github.com/users/remyers/orgs",
         "received_events_url" : "https://api.github.com/users/remyers/received_events",
         "repos_url" : "https://api.github.com/users/remyers/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/remyers/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/remyers/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/remyers"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1500540279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500540279"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That makes sense. I also think a static file could describe the buckets in a way that better adapts to a changing fee environment.\r\n\r\nFor example, rather than `start_satoshis` and `end_satoshi` we could define a bucket as:\r\n\r\n```json\r\n        \"confirmation_target\": 6,\r\n        \"fee_rate_std\": 10000, \r\n        \"buckets\": [\r\n        {\r\n            \"target_satoshis\": 10000,\r\n            \"target_utxo_count\": 150\r\n        },\r\n```\r\n\r\nThe range of values you want to spend should be \"target_satoshis\" + the fee to spend that input at a fee rate that will confirm in \"confirmation_target\" blocks. Because free rates vary, we randomize the current fee rate within a range +/- \"fee_rate_std\".\r\n\r\nTo refill a bucket, compute the `target_output` as:\r\n```\r\ntarget_feerate = current_feerate(\"confirmation_target\") + random(-1 * \"fee_rate_std\", \"fee_rate_std\")\r\ntarget_output = \"target_satoshis\" + size_of_input * target_feerate \r\n``` \r\nIdeally we would only need to restart when we add/remove buckets, change their counts or when fee variance changes dramatically.\r\n",
      "commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "created_at" : "2024-02-23T11:33:13Z",
      "diff_hunk" : "@@ -1128,6 +1225,36 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n         available_coins = AvailableCoins(wallet, &coin_control, coin_selection_params.m_effective_feerate);\n     }\n \n+    // Load a json file that describes a target utxo set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29442#discussion_r1500540279",
      "id" : 1500540279,
      "in_reply_to_id" : 1497769911,
      "line" : 1228,
      "node_id" : "PRRC_kwDOABII585ZcG13",
      "original_commit_id" : "85a049ddceb854106efea8316462e356d9b88b21",
      "original_line" : 1228,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 138,
      "pull_request_review_id" : 1897914077,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29442",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500540279/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-02-23T11:33:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500540279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8568892?v=4",
         "events_url" : "https://api.github.com/users/remyers/events{/privacy}",
         "followers_url" : "https://api.github.com/users/remyers/followers",
         "following_url" : "https://api.github.com/users/remyers/following{/other_user}",
         "gists_url" : "https://api.github.com/users/remyers/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/remyers",
         "id" : 8568892,
         "login" : "remyers",
         "node_id" : "MDQ6VXNlcjg1Njg4OTI=",
         "organizations_url" : "https://api.github.com/users/remyers/orgs",
         "received_events_url" : "https://api.github.com/users/remyers/received_events",
         "repos_url" : "https://api.github.com/users/remyers/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/remyers/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/remyers/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/remyers"
      }
   }
]
