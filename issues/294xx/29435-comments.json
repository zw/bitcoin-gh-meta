[
   {
      "author_association" : "NONE",
      "body" : "@achow101 What about situations where the parent goes from conflicted to unconfirmed? ",
      "created_at" : "2024-03-02T22:33:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29435#issuecomment-1974926762",
      "id" : 1974926762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29435",
      "node_id" : "IC_kwDOABII5851tv2q",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1974926762/reactions"
      },
      "updated_at" : "2024-03-04T07:02:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1974926762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/37949128?v=4",
         "events_url" : "https://api.github.com/users/Eunovo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Eunovo/followers",
         "following_url" : "https://api.github.com/users/Eunovo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Eunovo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Eunovo",
         "id" : 37949128,
         "login" : "Eunovo",
         "node_id" : "MDQ6VXNlcjM3OTQ5MTI4",
         "organizations_url" : "https://api.github.com/users/Eunovo/orgs",
         "received_events_url" : "https://api.github.com/users/Eunovo/received_events",
         "repos_url" : "https://api.github.com/users/Eunovo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Eunovo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Eunovo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Eunovo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> We should try to detect if a such a child transaction becomes conflicted due to a parent becoming conflicted and mark it as such.\r\n\r\nHow could we do this? Would the idea be to add non-wallet transactions to mapTxSpends? This doesn't seem like a straightforward problem to solve.",
      "created_at" : "2024-03-12T17:35:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29435#issuecomment-1992200557",
      "id" : 1992200557,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29435",
      "node_id" : "IC_kwDOABII5852vpFt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992200557/reactions"
      },
      "updated_at" : "2024-03-12T17:35:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992200557",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> How could we do this? Would the idea be to add non-wallet transactions to mapTxSpends? This doesn't seem like a straightforward problem to solve.\r\n\r\nMy initial thought was that we could just look at every tx that we get a `TransactionRemovedFromMempool` signal for and see if there are any descendants that are in the wallet.\r\n\r\nBut I agree that this is nontrivial to solve.",
      "created_at" : "2024-03-12T18:19:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29435#issuecomment-1992283472",
      "id" : 1992283472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29435",
      "node_id" : "IC_kwDOABII5852v9VQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992283472/reactions"
      },
      "updated_at" : "2024-03-12T18:19:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992283472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> My initial thought was that we could just look at every tx that we get a `TransactionRemovedFromMempool` signal for and see if there are any descendants that are in the wallet.\r\n\r\nI think that makes sense if it's enough to detect conflicts where the parent transaction conflicts with a new block and is already in the mempool. The issue description doesn't seem to say whether or not the parent transaction is in the mempool, but maybe that's implied.\r\n\r\nMaybe one complication with using the TransactionRemovedFromMempool notification to detect block conflicts is that the notification doesn't include the hash of the conflicting block. But maybe this information could be added, or we could add back the vtxConflicted array argument to BlockConnected that was removed in #17477. I think recording the hash of the conflicting block is just mostly just important for reverting the conflicted state if there is a reorg.",
      "created_at" : "2024-03-12T18:54:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29435#issuecomment-1992335705",
      "id" : 1992335705,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29435",
      "node_id" : "IC_kwDOABII5852wKFZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992335705/reactions"
      },
      "updated_at" : "2024-03-12T18:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992335705",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Maybe one complication with using the TransactionRemovedFromMempool notification to detect block conflicts is that the notification doesn't include the hash of the conflicting block. But maybe this information could be added, or we could add back the vtxConflicted array argument to BlockConnected that was removed in https://github.com/bitcoin/bitcoin/pull/17477. I think recording the hash of the conflicting block is just mostly just important for reverting the conflicted state if there is a reorg.\r\n\r\n@ryanofsky  I'm currently testing a rough PoC, https://github.com/Eunovo/bitcoin/commit/517e39cf1e88af18d82dfbb49292ddd89cad2761, that I think follows a similar idea but without using `vtxConflicted` array. I created a new map to keep track of non-wallet transactions, then I modified the `REPLACED` signal for `TransactionRemovedFromMempool` to include the `txid` of the double-spending transaction. By tracking this double-spend transactions, the wallet can detect conflicts in the `BlockConnected` signal and mark the wallet tx as conflicted.\r\n",
      "created_at" : "2024-03-12T19:46:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29435#issuecomment-1992419603",
      "id" : 1992419603,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29435",
      "node_id" : "IC_kwDOABII5852wekT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992419603/reactions"
      },
      "updated_at" : "2024-03-12T19:50:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992419603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/37949128?v=4",
         "events_url" : "https://api.github.com/users/Eunovo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Eunovo/followers",
         "following_url" : "https://api.github.com/users/Eunovo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Eunovo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Eunovo",
         "id" : 37949128,
         "login" : "Eunovo",
         "node_id" : "MDQ6VXNlcjM3OTQ5MTI4",
         "organizations_url" : "https://api.github.com/users/Eunovo/orgs",
         "received_events_url" : "https://api.github.com/users/Eunovo/received_events",
         "repos_url" : "https://api.github.com/users/Eunovo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Eunovo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Eunovo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Eunovo"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> My initial thought was that we could just look at every tx that we get a `TransactionRemovedFromMempool` signal for and see if there are any descendants that are in the wallet.\r\n> \r\n\r\n@achow101 Not sure how we can access a mempool transaction's ancestry in the wallet.  The mempool doesn't seem to be directly connected to the wallet.",
      "created_at" : "2024-03-12T19:49:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29435#issuecomment-1992431829",
      "id" : 1992431829,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29435",
      "node_id" : "IC_kwDOABII5852whjV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992431829/reactions"
      },
      "updated_at" : "2024-03-12T19:49:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992431829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/37949128?v=4",
         "events_url" : "https://api.github.com/users/Eunovo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Eunovo/followers",
         "following_url" : "https://api.github.com/users/Eunovo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Eunovo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Eunovo",
         "id" : 37949128,
         "login" : "Eunovo",
         "node_id" : "MDQ6VXNlcjM3OTQ5MTI4",
         "organizations_url" : "https://api.github.com/users/Eunovo/orgs",
         "received_events_url" : "https://api.github.com/users/Eunovo/received_events",
         "repos_url" : "https://api.github.com/users/Eunovo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Eunovo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Eunovo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Eunovo"
      }
   }
]
