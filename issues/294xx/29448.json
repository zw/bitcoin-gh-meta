{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "All the values selected by the transaction issuers are implemented to respect current hard policy limits as of 27.0\r\nBitcoin Core version (e.g `MAX_PACKAGE_COUNT` or `MAX_STANDARD_TX_WEIGHT`). As such introducing a new distinction in the Bitcoin ecosystem among tx-relay policy checks enforced by full-nodes hosts of a said full-node implementation/version and the the policy-check opt-ed by any transaction or second-layers use-cases. That way any significant on-chain economic  traffic can be still processed by low-performance full-nodes hosts, without altering the DoS profile risks.\r\n\r\nE.g in the context of the Lightning Network, lightning nodes can adjust their pinning risk exposures affecting their channel funds safety differently in function of each lightning topological peers (- assuming the BOLT protocol upgrades its negotiation flow `open_channel` / `accept_channel`). As such lightning peers can enforce a trade-off between their off chain HTLC throughputs and their tx-relay jamming exposure (e.g pinning or RC attacks).\r\n\r\nE.g in the context of collaborative custody management, distrusted stakeholders owning a set of pre-signed set of transactions can all commits to the same set of max tx size / max package limits, as such introducing more reliability on the worst amount of fee-bumping reserves that should be provisioned instead of hard limits like the current approach with v3.\r\n\r\n_Wait ! Iâm lost reading this OP ?! Already  too much information, what should I do ? Go to read Bitcoin Optech 10 articles seriesâs [âWaiting for confirmation: a series about mempool and relay policyâ](https://bitcoinops.org/en/blog/waiting-for-confirmation/) as a starter and then come back to read or comment._\r\n\r\nThe opt-in mechanism uses a one bit flag in the nSequence field which is already a standard and consenus Bitcoin transaction field since the genesis block. The mechansim (`ParsePackageTopologicalLimits()`) check that bip68 is disabled to avoid conflicts of semantics, as the remaining nSequence field bits are interpreted as dynamic issuers-selected policy checks (currently implemented ancestor / descendant / max package limits size). The intrusive aspect of the mechanism is minimal and the interpreted field could be uplifted in other parts of standard transaction fields while conserving the same policy check enforcement semantics.\r\n\r\nHere the code excerpt that deserves a `doc/policy/` , a BIP or a banana.\r\n```\r\n (sequence_field & SEQUENCE_ISSUER_SELECTED_LIMITS_DISABLE_FLAG) {\r\n        return std::nullopt;\r\n    }\r\n\r\n    const uint32_t ancestor_limit = sequence_field & SEQUENCE_ISSUER_SELECTED_ANCESTOR_MASK;\r\n    const uint32_t descendant_limit = sequence_field & SEQUENCE_ISSUER_SELECTED_DESCENDANT_MASK;\r\n    const uint32_t weight_limit = (uint32_t)(sequence_field & SEQUENCE_ISSUER_SELECTED_WEIGHT_MASK)\r\n     << SEQUENCE_ISSUER_SELECTED_WEIGHT_GRANULARITY;\r\n\r\n    // This parsing logic can be adapted for forward-compatibility in matters of issuer-selected\r\n    // policy limits:\r\n    //      - encodes accumulated package SigOpCost\r\n    //      - commit to package-level dynamic DUST_RELAY_TX_FEE or DEFAULT_INCREMENTAL_RELAY_FEE\r\n    //      - opt-in if limits are strict (at the pckg-level) or composable (at the tx-level)\r\n    //        to allow non-interactive composability among N chain of transaction issuers.\r\n\r\n    IssuerSelectedLimits tx_issuer_selected_limits(ancestor_limit, descendant_limit, weight_limit);\r\n```\r\n\r\nIssuer-selected fields getting economic popularity and not jeopardizing bitcoin security model and long-term decentralization equlibrium of the ecosystem of peer-to-peer full-nodes and solo mining operations could get a consensus enforcement, going through the traditional consensus design & development process (narrator note: no ones really knows or is sure there is  something as traditional consensus development process...). The nSequence consensus field due to its 32 bits limitation is space limited, even if a lot can be achieved with bit-wise operations.\r\n\r\nFrom a technical philosophy perspective, I think this introduction of issuer-selected transaction / package policy limits checks should should reduce the amount of \"bargaing-on-policy\" we have seen recently with `mempoolfullrbf` (LN-vs-zero-conf-acceptance business) or do-digital-art-on-chain-and-the-posterity-will-say-if-it-is-bansky-or-crap-waste colored coins and tokens experimentations.\r\n\r\nThis patchset built on the v3 patchset and its followups (commit `37fdf5a4`), is already integrated in the package mempool\r\nacceptance code flow. There is 1 logical conflict for now as the 1000 vbytes limit is enforced by default for v3 (which still\r\nexposes a lot of loss of funds risk exposure for some time-sensitive flows like lightning considering \"loophole\" and NTA pinning scenario  - see #28948). In the future, this limit can just become a \"tx issuer-selected policy check\" limit.\r\n\r\nIn the future, such transaction / package âissuer-selectedâ can be used as a signaling mechanism, e.g for [replace-by-feerate](https://petertodd.org/2024/one-shot-replace-by-fee-rate) dynamic window enforced at the mempool-level, for the use-cases who wishing to ensure their chain of transactions are minimal by not using CPFP.\r\n\r\nFor more discussions on mempool policy technical philosophy design and trade-offs on downstream use-cases, see the old email  thread [\"On mempool consistency\"](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021116.html).\r\n\r\nThis patchset can be applied on top of any fork of bitcoin core 27.0 with the minimal of engineering effort by anyone wishing\r\nto experiment with mempool policy for its use-case (I'll see if I have time to carry this patchset forward as I'm officially in\r\nsabbatical from bitcoin core development taking the sun on the beach just yelling at them when the stuff is broken, weâre all btc investors).",
   "closed_at" : "2024-02-19T16:47:52Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
      "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
      "followers_url" : "https://api.github.com/users/ariard/followers",
      "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/ariard",
      "id" : 23310655,
      "login" : "ariard",
      "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
      "organizations_url" : "https://api.github.com/users/ariard/orgs",
      "received_events_url" : "https://api.github.com/users/ariard/received_events",
      "repos_url" : "https://api.github.com/users/ariard/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/ariard"
   },
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/comments",
   "created_at" : "2024-02-19T03:26:23Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/29448",
   "id" : 2141417736,
   "labels" : [
      {
         "color" : "cccccc",
         "default" : false,
         "description" : "",
         "id" : 5334691551,
         "name" : "CI failed",
         "node_id" : "LA_kwDOABII588AAAABPfju3w",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585nPL9t",
   "number" : 29448,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/29448.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29448",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/29448.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29448"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29448/timeline",
   "title" : "Add issuer-selected opt-in txn / pckg policy checks",
   "updated_at" : "2024-02-19T16:47:53Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29448",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
      "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
      "followers_url" : "https://api.github.com/users/ariard/followers",
      "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/ariard",
      "id" : 23310655,
      "login" : "ariard",
      "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
      "organizations_url" : "https://api.github.com/users/ariard/orgs",
      "received_events_url" : "https://api.github.com/users/ariard/received_events",
      "repos_url" : "https://api.github.com/users/ariard/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/ariard"
   }
}
