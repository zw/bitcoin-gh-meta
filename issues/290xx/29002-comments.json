[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems that the problem is the following construct for detection of a new incoming connection:\r\n```\r\n    num_peers = len(self.nodes[0].getpeerinfo())\r\n    s.connect((\"127.0.0.1\", p2p_port(0))\r\n    self.wait_until(lambda: len(self.nodes[0].getpeerinfo()) == num_peers + 1)\r\n```\r\nLooking at the logs, I think in this test run the the disconnect of the previous connection finished _after_ the first `getpeerinfo` RPC call, i.e. the peer count drops to `num_peers-1`, increases to `num_peers` after the connection is made and remains at this value, so the lambda expression can never be fulfilled.\r\n\r\nI wonder what would be a more robust alternative. Maybe checking that the last peer's id has increased, i.e. something like:\r\n```\r\n    highest_peer_id = self.nodes[0].getpeerinfo()[-1][\"id\"]\r\n    s.connect((\"127.0.0.1\", p2p_port(0))\r\n    self.wait_until(lambda: self.nodes[0].getpeerinfo()[-1][\"id\"] > highest_peer_id)\r\n```\r\nThis ensures that _at least one_ new connection has been made in-between, which should be good enough. And it needs special-casing for when `.getpeerinfo()` returns an empty list (as accessing [-1] would yield an \"index out of range\" exception), which is a bit annoying...",
      "created_at" : "2023-12-05T21:54:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29002#issuecomment-1841678647",
      "id" : 1841678647,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29002",
      "node_id" : "IC_kwDOABII585txck3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841678647/reactions"
      },
      "updated_at" : "2023-12-05T21:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841678647",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems easier to add another `self.wait_until`.\r\n\r\nGenerally, I am not a fan of using `assert_debug_log` to sync the test execution implicitly, because this may cause races such as this.\r\n\r\nAdding an explicit wait on what should happen (disconnect) seems better than extracting a \"magic\" string from the debug log in a loop.",
      "created_at" : "2023-12-05T22:10:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29002#issuecomment-1841702298",
      "id" : 1841702298,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29002",
      "node_id" : "IC_kwDOABII585txiWa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 1,
         "laugh" : 1,
         "rocket" : 1,
         "total_count" : 5,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841702298/reactions"
      },
      "updated_at" : "2023-12-05T22:11:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841702298",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree, but using `assert_debug_log` was not planned to be used for a potential solution anyway (note that parsing the log is not mentioned anywhere in my previous post). I would still use the `getpeerinfo()` RPC, but not look at the length, but wait for an increase of the highest peer id instead. At least that's the current plan, happy to take suggestions.\r\n\r\nRegarding the interface, I think a context-manager method would make sense here, e.g.:\r\n```\r\nwith self.nodes[0].wait_for_new_peer():\r\n    s.connect((\"127.0.0.1\", p2p_port(0)))\r\n```",
      "created_at" : "2023-12-05T22:45:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29002#issuecomment-1841751140",
      "id" : 1841751140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29002",
      "node_id" : "IC_kwDOABII585txuRk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841751140/reactions"
      },
      "updated_at" : "2023-12-05T22:45:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841751140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   }
]
