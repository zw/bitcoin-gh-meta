{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "## Proposed Update\r\n\r\nAdd a new RPC endpoint, `listmempooltransactions`. Takes as args a `start_sequence` and `verbose`.\r\n\r\nReturns: \r\n- if verbose false, list of txids + their `entry_sequence` where each entry's `entry_sequence` >= the provided `start_sequence.\r\n- if verbose true, raw tx output info including each entry's `entry_sequence`.\r\n\r\n\r\nBuilds on work done in #19572.\r\n\r\n## Rationale\r\nThe current mempool RPCs are lacking an ability to scan for updates in a more efficient manner. You can subscribe for updates via the ZMQ pipeline, but even this is inefficient to recover from if your consumer app falls offline.\r\n\r\nZMQ also is a push protocol, and doesn't provide a rate-limiting mechanism.\r\n\r\nIn the case of core-lightning, we don't assume access to bitcoin-core/ZMQ, so we're unable to do efficient mempool querying. There have been some recent CVEs come to light where having optional access to mempool updates may prove useful.\r\n\r\nPaging, filtering by last seen, and the addition of full tx data in the call makes mempool data more readily available to any client app. This is good for self-sovereignty as it reduces the need for additional dependencies and app data sources to efficiently query and parse mempool data. \r\n\r\n\r\n## Other Things I Considered\r\nMy initial attempt at this modified `getrawmempool` to \r\n- take a `start_sequence` to allow for filtering, and\r\n- adding the txdata (inputs outpoints + outputs (amount + scriptPubKeys)). \r\n\r\nThat was pretty ugly however, given that the current data model for `getrawmempool` is around a concept of \"mempool entry\" data. This returns transaction data (and does not report on information about other mempool dependencies etc; for that you should still call `getrawmempool` or `getmempoolentry`). \r\n\r\nYou could add a `start_sequence` to the existing `getrawmempool` to help with entry data paging/querying but that's secondary to my goals for fetching relevant txdata from the mempool.\r\n\r\n## Additions/Changes\r\n\r\nThis PR could be further improved by\r\n- Add a `page_size` argument which allows a calling application to limit the number of results returned.\r\n\r\n\r\n## Future Work\r\nThe current RPC only supports finding *added* mempool transactions. It'd be interesting to experiment with keeping track of evicted/not mined transactions and adding them to the results.\r\n\r\nThis would require:\r\n- An additional memory buffer (perhaps a configurable memory limited ring buffer?) for evicted tx data and the mempool sequence of the eviction.\r\n- Adding a `sequence_action` field for results, which indicates whether the sequence is for the tx's `addition` or `eviction`.\r\n\r\nYou could also keep track of tx movements into blocks, but this seems less useful/urgent in general.\r\n\r\n## Usage\r\nYou can see an example of this implemented and used in CLN for finding paid onchain invoices in this branch: https://github.com/ElementsProject/lightning/compare/master...niftynei:lightning:nifty/mempool-scan\r\n\r\nNote that the CLN implementation doesn't currently keep the mempool_sequence in disk, so it'll reload/rescan the mempool at start. This *may* be desirable?\r\n\r\nHere's how a caller would use this\r\n\r\n```\r\n1) start node\r\n2) listmempooltransactions 0 to get backlog\r\n3) call listmempooltransactions again with `start_sequence` set to `mempool_sequence` result from last call\r\n```\r\n\r\nNote that this works well with ZMQ as the `mempool_sequence` number is identical.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29016/comments",
   "created_at" : "2023-12-06T22:32:25Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29016/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/29016",
   "id" : 2029503846,
   "labels" : [
      {
         "color" : "0052cc",
         "default" : false,
         "description" : null,
         "id" : 98279177,
         "name" : "RPC/REST/ZMQ",
         "node_id" : "MDU6TGFiZWw5ODI3OTE3Nw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29016/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585hWxlj",
   "number" : 29016,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/29016.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29016",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/29016.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29016"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29016/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29016/timeline",
   "title" : "RPC: add new `listmempooltransactions`",
   "updated_at" : "2023-12-06T22:32:30Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29016",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/1097769?v=4",
      "events_url" : "https://api.github.com/users/niftynei/events{/privacy}",
      "followers_url" : "https://api.github.com/users/niftynei/followers",
      "following_url" : "https://api.github.com/users/niftynei/following{/other_user}",
      "gists_url" : "https://api.github.com/users/niftynei/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/niftynei",
      "id" : 1097769,
      "login" : "niftynei",
      "node_id" : "MDQ6VXNlcjEwOTc3Njk=",
      "organizations_url" : "https://api.github.com/users/niftynei/orgs",
      "received_events_url" : "https://api.github.com/users/niftynei/received_events",
      "repos_url" : "https://api.github.com/users/niftynei/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/niftynei/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/niftynei/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/niftynei"
   }
}
