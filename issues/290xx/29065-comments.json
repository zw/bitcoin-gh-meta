[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29065).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [achow101](https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1852720898), [kevkevinpal](https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1853172985), [BrandonOdiwuor](https://github.com/bitcoin/bitcoin/pull/29065#pullrequestreview-1779977403) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n",
      "created_at" : "2023-12-12T18:23:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1852579304",
      "id" : 1852579304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585ubB3o",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852579304/reactions"
      },
      "updated_at" : "2023-12-13T15:58:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852579304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 37c75c58202f89b752500f76c872d7f8caf6bdb3",
      "created_at" : "2023-12-12T20:02:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1852720898",
      "id" : 1852720898,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585ubkcC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852720898/reactions"
      },
      "updated_at" : "2023-12-12T20:02:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852720898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This pull does fix the crash but I am still getting valgrind errors when executing the benchmark, which did not happen on master before. I haven't verified that these errors were introduced by #25273 but I would suppose so.\r\n\r\n```\r\nvalgrind ./src/bench/bench_bitcoin -filter=WalletCreateTxUsePresetInputsAndCoinSelection\r\n==243376== Memcheck, a memory error detector\r\n==243376== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==243376== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\r\n==243376== Command: ./src/bench/bench_bitcoin -filter=WalletCreateTxUsePresetInputsAndCoinSelection\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x606AF0: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1240)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x7FABE9: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x7FAACD: is_direct (prevector.h:170)\r\n==243376==    by 0x7FAACD: size (prevector.h:292)\r\n==243376==    by 0x7FAACD: IsUnspendable (script.h:554)\r\n==243376==    by 0x7FAACD: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:42)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x7FAB88: IsUnspendable (script.h:554)\r\n==243376==    by 0x7FAB88: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:42)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x8F8364: is_direct (prevector.h:170)\r\n==243376==    by 0x8F8364: size (prevector.h:292)\r\n==243376==    by 0x8F8364: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:228)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x8F83AB: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:231)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x8F83BF: item_ptr (prevector.h:167)\r\n==243376==    by 0x8F83BF: operator[] (prevector.h:322)\r\n==243376==    by 0x8F83BF: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:234)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x8F840B: is_direct (prevector.h:170)\r\n==243376==    by 0x8F840B: size (prevector.h:292)\r\n==243376==    by 0x8F840B: end (prevector.h:302)\r\n==243376==    by 0x8F840B: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:236)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Conditional jump or move depends on uninitialised value(s)\r\n==243376==    at 0x8F844B: _S_check_init_len (stl_vector.h:1769)\r\n==243376==    by 0x8F844B: _M_range_initialize<prevector<28, unsigned char>::const_iterator> (stl_vector.h:1582)\r\n==243376==    by 0x8F844B: vector<prevector<28, unsigned char>::const_iterator> (stl_vector.h:657)\r\n==243376==    by 0x8F844B: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:236)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x8F8470: __copy_m<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:385)\r\n==243376==    by 0x8F8470: __copy_move_a2<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:495)\r\n==243376==    by 0x8F8470: __copy_move_a1<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:522)\r\n==243376==    by 0x8F8470: __copy_move_a<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:529)\r\n==243376==    by 0x8F8470: copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:620)\r\n==243376==    by 0x8F8470: __uninit_copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_uninitialized.h:110)\r\n==243376==    by 0x8F8470: uninitialized_copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_uninitialized.h:151)\r\n==243376==    by 0x8F8470: __uninitialized_copy_a<prevector<28, unsigned char>::const_iterator, unsigned char*, unsigned char> (stl_uninitialized.h:333)\r\n==243376==    by 0x8F8470: _M_range_initialize<prevector<28, unsigned char>::const_iterator> (stl_vector.h:1585)\r\n==243376==    by 0x8F8470: vector<prevector<28, unsigned char>::const_iterator> (stl_vector.h:657)\r\n==243376==    by 0x8F8470: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:236)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Use of uninitialised value of size 8\r\n==243376==    at 0x8F8482: __copy_m<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:383)\r\n==243376==    by 0x8F8482: __copy_move_a2<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:495)\r\n==243376==    by 0x8F8482: __copy_move_a1<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:522)\r\n==243376==    by 0x8F8482: __copy_move_a<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:529)\r\n==243376==    by 0x8F8482: copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:620)\r\n==243376==    by 0x8F8482: __uninit_copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_uninitialized.h:110)\r\n==243376==    by 0x8F8482: uninitialized_copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_uninitialized.h:151)\r\n==243376==    by 0x8F8482: __uninitialized_copy_a<prevector<28, unsigned char>::const_iterator, unsigned char*, unsigned char> (stl_uninitialized.h:333)\r\n==243376==    by 0x8F8482: _M_range_initialize<prevector<28, unsigned char>::const_iterator> (stl_vector.h:1585)\r\n==243376==    by 0x8F8482: vector<prevector<28, unsigned char>::const_iterator> (stl_vector.h:657)\r\n==243376==    by 0x8F8482: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:236)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n==243376== Conditional jump or move depends on uninitialised value(s)\r\n==243376==    at 0x8F8482: __copy_m<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:383)\r\n==243376==    by 0x8F8482: __copy_move_a2<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:495)\r\n==243376==    by 0x8F8482: __copy_move_a1<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:522)\r\n==243376==    by 0x8F8482: __copy_move_a<false, prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:529)\r\n==243376==    by 0x8F8482: copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_algobase.h:620)\r\n==243376==    by 0x8F8482: __uninit_copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_uninitialized.h:110)\r\n==243376==    by 0x8F8482: uninitialized_copy<prevector<28, unsigned char>::const_iterator, unsigned char*> (stl_uninitialized.h:151)\r\n==243376==    by 0x8F8482: __uninitialized_copy_a<prevector<28, unsigned char>::const_iterator, unsigned char*, unsigned char> (stl_uninitialized.h:333)\r\n==243376==    by 0x8F8482: _M_range_initialize<prevector<28, unsigned char>::const_iterator> (stl_vector.h:1585)\r\n==243376==    by 0x8F8482: vector<prevector<28, unsigned char>::const_iterator> (stl_vector.h:657)\r\n==243376==    by 0x8F8482: CScript::IsWitnessProgram(int&, std::vector<unsigned char, std::allocator<unsigned char> >&) const (script.cpp:236)\r\n==243376==    by 0x7FAB1F: GetDustThreshold(CTxOut const&, CFeeRate const&) (policy.cpp:54)\r\n==243376==    by 0x7FAC00: IsDust(CTxOut const&, CFeeRate const&) (policy.cpp:67)\r\n==243376==    by 0x606B2B: wallet::CreateTransactionInternal(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1249)\r\n==243376==    by 0x6086A6: wallet::CreateTransaction(wallet::CWallet&, std::vector<wallet::CRecipient, std::allocator<wallet::CRecipient> > const&, std::optional<unsigned int>, wallet::CCoinControl const&, bool) (spend.cpp:1333)\r\n==243376==    by 0x29843E: operator() (wallet_create_tx.cpp:132)\r\n==243376==    by 0x29843E: ankerl::nanobench::Bench& ankerl::nanobench::Bench::run<WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}>(WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>)::{lambda()#3}&&) [clone .isra.0] (nanobench.h:1221)\r\n==243376==    by 0x29A381: WalletCreateTx(ankerl::nanobench::Bench&, OutputType, bool, std::optional<PreSelectInputs>) [clone .constprop.0] [clone .isra.0] (wallet_create_tx.cpp:130)\r\n==243376==    by 0x21BA5A: operator() (std_function.h:590)\r\n==243376==    by 0x21BA5A: benchmark::BenchRunner::RunAll(benchmark::Args const&) (bench.cpp:119)\r\n==243376==    by 0x1F84B6: main (bench_bitcoin.cpp:132)\r\n==243376==\r\n\r\n\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|    1,013,313,787.80 |                0.99 |    0.8% |12,459,882,645.20 |5,208,416,083.40 |  2.392 |1,982,028,973.60 |    1.1% |     55.84 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n==243376==\r\n==243376== HEAP SUMMARY:\r\n==243376==     in use at exit: 1,241 bytes in 7 blocks\r\n==243376==   total heap usage: 23,470,975 allocs, 23,470,968 frees, 6,267,436,104 bytes allocated\r\n==243376==\r\n==243376== LEAK SUMMARY:\r\n==243376==    definitely lost: 0 bytes in 0 blocks\r\n==243376==    indirectly lost: 0 bytes in 0 blocks\r\n==243376==      possibly lost: 0 bytes in 0 blocks\r\n==243376==    still reachable: 1,241 bytes in 7 blocks\r\n==243376==         suppressed: 0 bytes in 0 blocks\r\n==243376== Rerun with --leak-check=full to see details of leaked memory\r\n==243376==\r\n==243376== Use --track-origins=yes to see where uninitialised values come from\r\n==243376== For lists of detected and suppressed errors, rerun with: -s\r\n==243376== ERROR SUMMARY: 480 errors from 12 contexts (suppressed: 0 from 0)\r\n```",
      "created_at" : "2023-12-12T20:31:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1852759253",
      "id" : 1852759253,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585ubtzV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852759253/reactions"
      },
      "updated_at" : "2023-12-12T20:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852759253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK [37c75c5](https://github.com/bitcoin/bitcoin/pull/29065/commits/37c75c58202f89b752500f76c872d7f8caf6bdb3)\r\n\r\ncloses https://github.com/bitcoin/bitcoin/issues/29069\r\n\r\nWas able to reproduce issue and building with this change fixed it for me",
      "created_at" : "2023-12-13T02:34:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1853172985",
      "id" : 1853172985,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585udSz5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853172985/reactions"
      },
      "updated_at" : "2023-12-13T02:34:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853172985",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15950706?v=4",
         "events_url" : "https://api.github.com/users/kevkevinpal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kevkevinpal/followers",
         "following_url" : "https://api.github.com/users/kevkevinpal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kevkevinpal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kevkevinpal",
         "id" : 15950706,
         "login" : "kevkevinpal",
         "node_id" : "MDQ6VXNlcjE1OTUwNzA2",
         "organizations_url" : "https://api.github.com/users/kevkevinpal/orgs",
         "received_events_url" : "https://api.github.com/users/kevkevinpal/received_events",
         "repos_url" : "https://api.github.com/users/kevkevinpal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kevkevinpal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kevkevinpal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kevkevinpal"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This pull does fix the crash but I am still getting valgrind errors when executing the benchmark\r\n\r\nUnable to replicate this, so probably a separate issue.",
      "created_at" : "2023-12-13T17:38:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1854429077",
      "id" : 1854429077,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585uiFeV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854429077/reactions"
      },
      "updated_at" : "2023-12-13T17:38:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854429077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Unable to replicate this, so probably a separate issue.\r\n\r\nI can consistently replicate the valgrind errors on a fresh new ubuntu docker container:\r\n\r\n```\r\nUbuntu 22.04.3 LTS\r\ng++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\r\nvalgrind-3.18.1\r\n\r\nUsing : \r\n./configure --enable-bench --disable-tests --disable-gui --disable-zmq --disable-fuzz --enable-fuzz-binary=no\r\nvalgrind ./src/bench/bench_bitcoin -filter=WalletCreateTxUsePresetInputsAndCoinSelection\r\n```\r\n\r\nThese errors do not appear in the commit 2d39db7aa128a948b6ad11242591ef26a342f5b1 which is the previous commit of 758501b71391136c33b525b1a0109b990d4f463e, the one that introduced the crash.\r\nThis seems important to fix to me.\r\n\r\n\r\n",
      "created_at" : "2023-12-13T18:02:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1854461848",
      "id" : 1854461848,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585uiNeY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854461848/reactions"
      },
      "updated_at" : "2023-12-13T18:02:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854461848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  This seems important to fix to me.\r\n\r\nI tried on current master with `clang-13` and `valgrind` on Jammy, but it seems to pass.\r\n\r\nMaybe it is a bug in your g++?\r\n\r\n```\r\n# git log -1 && valgrind ./src/bench/bench_bitcoin -filter=WalletCreateTxUsePresetInputsAndCoinSelection \r\ncommit 9f0f83d6509a214b827f5110c0f857b494ae854c (HEAD, origin/master, origin/HEAD)\r\nMerge: 019ec8a 37c75c5\r\nAuthor: Ava Chow <github@achow101.com>\r\nDate:   Wed Dec 13 12:38:11 2023 -0500\r\n\r\n    Merge bitcoin/bitcoin#29065: bench: wallet, fix change position out of range error\r\n    \r\n    37c75c58202f89b752500f76c872d7f8caf6bdb3 test: wallet, fix change position out of range error (furszy)\r\n    \r\n    Pull request description:\r\n    \r\n      Fixes #29061. Only the benchmark is affected.\r\n    \r\n      Since #25273, the behavior of 'inserting change at a random position'\r\n      is instructed by passing <C2><B4>std::nullopt<C2><B4> instead of -1.\r\n    \r\n      Also, added missing documentation about the meaning of\r\n      'change_pos=std::nullopt' inside 'CWallet::CreateTransaction()'\r\n    \r\n    ACKs for top commit:\r\n      achow101:\r\n        ACK 37c75c58202f89b752500f76c872d7f8caf6bdb3\r\n      kevkevinpal:\r\n        ACK [37c75c5](https://github.com/bitcoin/bitcoin/pull/29065/commits/37c75c58202f89b752500f76c872d7f8caf6bdb3)\r\n      BrandonOdiwuor:\r\n        ACK 37c75c58202f89b752500f76c872d7f8caf6bdb3\r\n    \r\n    Tree-SHA512: d9a8d8533540455716a5090fcf407573cad9f0d0018a05f903f89e51620302f9b256318db6f7338b85c047f7fab372d724e916b1721d7ed302dbf3d845b08734\r\n==45269== Memcheck, a memory error detector\r\n==45269== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==45269== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\r\n==45269== Command: ./src/bench/bench_bitcoin -filter=WalletCreateTxUsePresetInputsAndCoinSelection\r\n==45269== \r\nWarning, results might be unstable:\r\n* CPU frequency scaling enabled: CPU 0 between 800.0 and 2,800.0 MHz\r\n* CPU governor is 'powersave' but should be 'performance'\r\n\r\nRecommendations\r\n* Use 'pyperf system tune' before benchmarking. See https://github.com/psf/pyperf\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|    2,889,646,053.20 |                0.35 |    0.6% |    159.99 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n==45269== \r\n==45269== HEAP SUMMARY:\r\n==45269==     in use at exit: 1,241 bytes in 7 blocks\r\n==45269==   total heap usage: 23,469,947 allocs, 23,469,940 frees, 6,267,372,825 bytes allocated\r\n==45269== \r\n==45269== LEAK SUMMARY:\r\n==45269==    definitely lost: 0 bytes in 0 blocks\r\n==45269==    indirectly lost: 0 bytes in 0 blocks\r\n==45269==      possibly lost: 0 bytes in 0 blocks\r\n==45269==    still reachable: 1,241 bytes in 7 blocks\r\n==45269==         suppressed: 0 bytes in 0 blocks\r\n==45269== Rerun with --leak-check=full to see details of leaked memory\r\n==45269== \r\n==45269== For lists of detected and suppressed errors, rerun with: -s\r\n==45269== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n",
      "created_at" : "2023-12-13T19:52:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1854610666",
      "id" : 1854610666,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585uixzq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854610666/reactions"
      },
      "updated_at" : "2023-12-13T19:52:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854610666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Maybe it is a bug in your g++?\r\n\r\nRight maybe, I just tested with `g++ 13.2.0` and it runs fine now. No worries then.\r\n\r\nPost-merge ACK 37c75c58202f89b752500f76c872d7f8caf6bdb3",
      "created_at" : "2023-12-13T21:07:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29065#issuecomment-1854701221",
      "id" : 1854701221,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29065",
      "node_id" : "IC_kwDOABII585ujH6l",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854701221/reactions"
      },
      "updated_at" : "2023-12-13T21:07:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854701221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   }
]
