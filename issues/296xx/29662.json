{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "### Please describe the feature you'd like to see added.\r\n\r\nI'd like some way to control the levelDB compaction processes a bit more. Specifically, if I could control when they are scheduled (hourly in the background, for example), and possibly limit resources they consume (I/O, in particular), I think it would help.\r\n\r\n### Is your feature related to a problem, if so please describe it.\r\n\r\nThe problem I'm having is that when I reboot my bitcoin-core node (which runs with `txindex=1`), the RPC listener comes up pretty promptly, so my healthchecks (currently just TCP) pass. However, the service is not in its usual baseline state; it is doing a lot of read I/O, and logging about levelDB compaction. This condition lasts for about an hour. \r\n\r\nHere is an illustration of the I/O level relative to baseline:\r\n\r\n<img width=\"634\" alt=\"image\" src=\"https://github.com/bitcoin/bitcoin/assets/35895831/f0902e3d-a41f-4a45-bbd4-b22c18537fa6\">\r\n\r\nHere's a summary of the logs at this time:\r\n\r\n<img width=\"500\" alt=\"image\" src=\"https://github.com/bitcoin/bitcoin/assets/35895831/4d42e318-5430-45a7-b761-5c16394d76ab\">\r\n\r\nThe \"Compacting\" log line is extremely elevated during this period (though it does occur at a much lower level after):\r\n\r\n<img width=\"765\" alt=\"image\" src=\"https://github.com/bitcoin/bitcoin/assets/35895831/815b361b-b242-4a89-a32a-a7c5c7e66155\">\r\n\r\nHere's a graph of RPC trace P50 duration before, during, and after this phase:\r\n\r\n<img width=\"1200\" alt=\"image\" src=\"https://github.com/bitcoin/bitcoin/assets/35895831/f6c6ca27-6db2-4ef2-937f-d390da18e66d\">\r\n\r\nThe real problem is the last graph, the elevated RPC latency. The tail and head latencies are also much worse than normal, so it's not just a tail latency issue I could solve with timeouts / hedging. The server goes from microsecond/millisecond latency to 10s of seconds, especially for `sendrawtransaction` (10-30s max), with `listunspent` a distant second (3-4s max).\r\n\r\nThis latency abates as soon as the high I/O and compaction logging stops.\r\n\r\n### Describe the solution you'd like\r\n\r\nI'd like the experts to recommend a solution. Intuitively, it seems like levelDB could amortize this compaction work during normal operation as a background task ([the README seems to imply it already should?](https://github.com/google/leveldb?tab=readme-ov-file#read-performance)). Or maybe some way to limit resources used for compaction? \r\n\r\n### Describe any alternatives you've considered\r\n\r\nCurrently, I'm looking at alternative ways to do the RPC I enabled `txindex` for, which is `getrawtransaction` without the blockhash. But, that will only sidestep this issue with compaction and RPC latency.\r\n\r\n### Please leave any additional context\r\n\r\nI am using a slower filesystem than most. It is a regionally-replicated NFS store, which we chose for resiliency reasons. Intuitively, I'd expect this problem to be less severe (or shorter duration) with lower-latency storage, but still present.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29662/comments",
   "created_at" : "2024-03-15T16:53:22Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29662/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/29662",
   "id" : 2189085209,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29662/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII586CesoZ",
   "number" : 29662,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29662/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29662/timeline",
   "title" : "More control of maintenance processes at startup/restart",
   "updated_at" : "2024-03-15T16:58:41Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29662",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/35895831?v=4",
      "events_url" : "https://api.github.com/users/domZippilli/events{/privacy}",
      "followers_url" : "https://api.github.com/users/domZippilli/followers",
      "following_url" : "https://api.github.com/users/domZippilli/following{/other_user}",
      "gists_url" : "https://api.github.com/users/domZippilli/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/domZippilli",
      "id" : 35895831,
      "login" : "domZippilli",
      "node_id" : "MDQ6VXNlcjM1ODk1ODMx",
      "organizations_url" : "https://api.github.com/users/domZippilli/orgs",
      "received_events_url" : "https://api.github.com/users/domZippilli/received_events",
      "repos_url" : "https://api.github.com/users/domZippilli/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/domZippilli/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/domZippilli/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/domZippilli"
   }
}
