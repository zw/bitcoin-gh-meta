{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "Based on #25665.\r\n\r\nCurrently functions issuing fatal errors call the `fatalError` notification method to issue a shutdown procedure. This makes it hard for higher level functions to figure out if an error deeper in the call stack occurred. For users of the kernel it might also be difficult to assert which function call issued a fatal error if they are being run concurrently. If the kernel would eventually be used by external users, getting fatal error information through a callback instead of function return values would also be cumbersome and limiting. Unit, bench, and fuzz tests currently don't have a way to effectively test against fatal errors.\r\n\r\nThis patch set is an attempt to make fatal error handling in the kernel code more transparent. Fatal errors are now passed up the call stack through `util::Result<T, FatalError>` failure values. A previous attempt at this by theuni always immediately returned failure values if a function call returned a failure. However, this is not always desirable (see discussion [here](https://github.com/bitcoin/bitcoin/pull/27866#discussion_r1256378064)). Sometimes, further operations can still be completed even if a fatal error was issued. The solution to this is that these \"ignored\" errors are still moved through `util::Result`'s error string values with its `.MoveMessages` method, even while a failure value in the result is not present.\r\n\r\nNext to some smaller behavior changes, the most significant change is that the issuing of a shutdown procedure is delayed until a potential fatal error is handled as opposed to immediately when it is first encountered. Another effect is that potential fatal errors are now asserted in the bench, fuzz and unit tests. Some of the currently not immediately returned fatal errors need some further scrutiny. These are marked with a `TODO (fatal error)` comment and could be tackled in a later PR.\r\n\r\nTo validate this approach a new clang-tidy check is introduced. It implements the following checks:\r\n\r\n1. If a function calls another function with a `util::Result<T, FatalCondition>` return type, its return type has to be `util::Result<T, FatalCondition>` too, or it has to handle the value returned by the function with one of `CheckFatal`, `HandleFatalError`,\r\n`UnwrapFatalError`, or `CheckFatalFailure`.\r\n2. In functions returning a `util::Result<T, FatalCondition>` a call to a function returning a `util::Result<T, FatalCondition>` needs to propagate the value by either:\r\n   - Returning it immediately\r\n   - Assigning it immediately to an existing result with `.MoveMessages()` or `.Set()`\r\n   - Eventually passing it as an argument to a `.MoveMessages()`\r\n\r\n---\r\n\r\nThis PR is part of the [libbitcoinkernel project](https://github.com/bitcoin/bitcoin/issues/27587) and is a step towards stage 2, creating a more refined kernel API.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29642/comments",
   "created_at" : "2024-03-12T21:34:45Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29642/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/29642",
   "id" : 2182725746,
   "labels" : [
      {
         "color" : "6060aa",
         "default" : false,
         "description" : null,
         "id" : 118379652,
         "name" : "Validation",
         "node_id" : "MDU6TGFiZWwxMTgzNzk2NTI=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29642/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585pcBG3",
   "number" : 29642,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/29642.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29642",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/29642.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29642"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 1,
      "total_count" : 1,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29642/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29642/timeline",
   "title" : "kernel: Handle fatal errors through return values",
   "updated_at" : "2024-03-12T22:19:00Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29642",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
      "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
      "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
      "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
      "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/TheCharlatan",
      "id" : 8421793,
      "login" : "TheCharlatan",
      "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
      "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
      "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
      "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/TheCharlatan"
   }
}
