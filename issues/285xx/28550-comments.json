[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28550).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28728](https://github.com/bitcoin/bitcoin/pull/28728) (wallet: [bugfix] Mark CNoDestination and PubKeyDestination constructor explicit by maflcko)\n* [#28727](https://github.com/bitcoin/bitcoin/pull/28727) (test: replace random_bytes with random.randbytes by ns-xvrn)\n* [#28725](https://github.com/bitcoin/bitcoin/pull/28725) (test: refactor: use built-in collection types for type hints (Python 3.9 / PEP 585) by theStack)\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n* [#28400](https://github.com/bitcoin/bitcoin/pull/28400) (Make provably unsignable standard P2PK and P2MS outpoints unspendable. by russeree)\n* [#28334](https://github.com/bitcoin/bitcoin/pull/28334) (policy: Allow non-standard scripts with -acceptnonstdtxn=1 by ajtowns)\n* [#28311](https://github.com/bitcoin/bitcoin/pull/28311) ([WIP] BIP300 (Drivechains) consensus-level logic by luke-jr)\n* [#27433](https://github.com/bitcoin/bitcoin/pull/27433) (getblocktemplate improvements for segwit and sigops by Sjors)\n* [#26840](https://github.com/bitcoin/bitcoin/pull/26840) (refactor: importpubkey, importprivkey, importaddress, importmulti, and importdescriptors rpc by KolbyML)\n* [#26762](https://github.com/bitcoin/bitcoin/pull/26762) (bugfix: Make `CCheckQueue` RAII-styled (attempt 2) by hebasto)\n* [#26711](https://github.com/bitcoin/bitcoin/pull/26711) (validate package transactions with their in-package ancestor sets by glozow)\n* [#26201](https://github.com/bitcoin/bitcoin/pull/26201) (Remove Taproot activation height by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-09-28T18:42:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1739834384",
      "id" : 1739834384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585ns8QQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1739834384/reactions"
      },
      "updated_at" : "2023-10-26T02:20:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1739834384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> [vaults](https://bitcoinops.org/en/topics/vaults/) (reactive custodial security),\r\n> [LN-Symmetry](https://bitcoinops.org/en/topics/eltoo/),\r\n> efficient implementations of [DLCs](https://bitcoinops.org/en/topics/discreet-log-contracts/),\r\n> [non-interactive channel openings](https://utxos.org/uses/non-interactive-channels/),\r\n> [congestion control](https://utxos.org/uses/scaling/),\r\n> decentralized mining pools (via [CTV compression in coinbase payouts](https://utxos.org/uses/miningpools/)),\r\n> various [Lightning efficiency improvements](https://twitter.com/roasbeef/status/1692589689939579259),\r\n> using [covenant based timeout-trees](https://bitcoinops.org/en/newsletters/2023/09/27/) to scale Lightning, and more generally enabling [channel factories](https://bitcoinops.org/en/topics/channel-factories/).\r\n\r\nIf we can have an end-to-end proof-of-concept implementation of each use-case brought as a justification to the proposed soft-forked opcodes. Otherwise itâs quite impossible to provide a sound technical review of the primitives robustness and trade-offs and state what they enable exactly. And it sounds weâre good to repeat the loop of the last 3 or 4 years of covenants discussions.\r\n\r\nAs a reminder, just to take the last example of channel factories, most of the folks who have done *real* research on the subject still disagree on the security model and fundamental trade-off of the proposed design of channel factories.\r\n\r\nAs one of my technical peer challenged on the [mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html) few months ago:\r\n\r\n\"So I think that means that part of the \"evaluation phase\" should involve\r\nimplementing real systems on top of the proposed change, so that you\r\ncan demonstrate real value from the change. It's easy to say that\r\n\"CTV can enable vaults\" or \"CTV can make opening a lightning channel\r\nnon-interactive\" -- but it's harder to go from saying something\r\nis possible to actually making it happen, so, at least to me, it\r\nseems reasonable to be skeptical of people claiming benefits without\r\ndemonstrating they're achievable in practice.â\r\n\r\nIâm fully sharing this opinion.",
      "created_at" : "2023-09-29T00:18:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1740149971",
      "id" : 1740149971,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nuJTT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 2,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740149971/reactions"
      },
      "updated_at" : "2023-09-29T00:18:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740149971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> If we can have an end-to-end proof-of-concept implementation of each use-case brought as a justification to the proposed soft-forked opcodes. Otherwise itâs quite impossible to provide a sound technical review of the primitives robustness and trade-offs and state what they enable exactly.\r\n\r\nHaving some code that works in proof-of-concept mode is not proof that it works in the real world at all. A theoretical description of a use case that contemplates all scenarios is worth a million times more.\r\n\r\nAlso it's a weird inverted criteria to say that a proposal that enables 20+ use cases is considered _worse_ because it only has ~5 actually implemented (because that's only 25%) while some a proposal that has (say) 1 use case is considered better just because it has that single use case implemented (100%). It should be the opposite. By that rationale every new use case someone comes up with for a proposal now counts negatively against that proposal?",
      "created_at" : "2023-09-29T12:44:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1740840515",
      "id" : 1740840515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nwx5D",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 4,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 2,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 6,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740840515/reactions"
      },
      "updated_at" : "2023-09-29T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740840515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1653275?v=4",
         "events_url" : "https://api.github.com/users/fiatjaf/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fiatjaf/followers",
         "following_url" : "https://api.github.com/users/fiatjaf/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fiatjaf/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fiatjaf",
         "id" : 1653275,
         "login" : "fiatjaf",
         "node_id" : "MDQ6VXNlcjE2NTMyNzU=",
         "organizations_url" : "https://api.github.com/users/fiatjaf/orgs",
         "received_events_url" : "https://api.github.com/users/fiatjaf/received_events",
         "repos_url" : "https://api.github.com/users/fiatjaf/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fiatjaf/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fiatjaf/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fiatjaf"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it would be worth moving most conceptual discussion to the [Delving Bitcoin thread](https://delvingbitcoin.org/t/covenant-tools-softfork/98) to avoid blasting the already-burdened Github notifications of contributors here.",
      "created_at" : "2023-09-29T13:26:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1740896155",
      "id" : 1740896155,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nw_eb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740896155/reactions"
      },
      "updated_at" : "2023-09-29T13:26:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740896155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Having some code that works in proof-of-concept mode is not proof that it works in the real world at all. A theoretical description of a use case that contemplates all scenarios is worth a million times more.\r\n\r\nNo, politely I think your statement is a non-sense. There is no common criteria which is accepted among the bitcoin developers, neither the community on what constitute a valid âtheoretical descriptionâ. For some a sufficient description will be a mathematical formalization of the game-theory of the use-case (e.g the [chapter 11 âcalculations of the original bitcoin paper on miner incentives](https://bitcoin.org/bitcoin.pdf)). For others a proof-of-concept of code is the âtheoreticalâ description in itself (e.g bitcoin core libbitcoinkernel is _a_ definition of consensus rules). For few more people a theoretical description wonât be complete without a security proof as understood under some assumption (e.g the DL assumption) or models. E.g Taproot has a security proof: https://github.com/apoelstra/taproot\r\n\r\nIn fact I think theyâre all âvalidâ description and completing each other, i.e describing more accurately a use-case. Proof-of-concepts, experiments and formalized or logical description have hundreds of years of successful tracks records in the field of civil, mechanical and software engineering.\r\n\r\nAs a reminder, Bitcoin is a $500B ecosystem relied on as a critical infrastructure in the daily life of people in emerging countries or war zones. As a technical community, if we have a sincere wish to see this system survives on decades-long perspectives, and being kept relied on, we should bind to the highest engineering standards, or at the least do not downgrade on development standards which have been setup in the past, e.g with the taproot design, review & implementation process.\r\n\r\nIâm still stunned when I see some parts of the community and even experienced developers falling back to shamanism, twitter pow-wow and seed-startup-pitch-deck as a design process in matters of advances in consensus changes.\r\n\r\n> Also it's a weird inverted criteria to say that a proposal that enables 20+ use cases is considered worse because it only has > ~5 actually implemented (because that's only 25%) while some a proposal that has (say) 1 use case is considered better\r\n> just because it has that single use case implemented (100%). It should be the opposite. By that rationale every new use\r\n> case someone comes up with for a proposal now counts negatively against that proposal?\r\n\r\nMy thanks if you can propose a demonstration that proposal XYZ _is_ enabling the said-so 20+ use cases, without scalability bottleneck or cheap to exploit security issue. As a reminder, the original designer or team of designers of Bitcoin introduces the infamous [OP_VER](https://bitcoin.stackexchange.com/questions/97258/given-op-ver-was-never-used-is-disabled-and-not-considered-useful-can-its-meani) opcode in the early versions of the client, without understanding it could provoke consensus partitioning between network agents. I believe we should stay very humble that we understand Bitcoin or Lightning _that_ good.\r\n\r\nAny use-case can introduce a coupling between layers and this is quite documented by the IETF (see [RFC 3439](https://www.rfc-editor.org/rfc/rfc3439#section-2.2.2)). As a matter of personal experience, one of the reason to disregard the original stakes certificates (cf. [2020 lightning mail list](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-November/002884.html) was the concern of introducing unpredictable and spurious network mempools congestion spikes, as a solution to channel jamming. There is no free lunch.\r\n\r\nPersonally, Iâm fine if we donât have covenants soft-forks during the next 10 year, despite the personal interest in numerous use-cases brought or enhanced by covenant primitives. Itâs not like weâre lacking of heavy changes to harden Bitcoin, lower the computational costs for full-nodes or make it more usable to the end-user.\r\n\r\nAll Bitcoin needs to do to succeed on the long term is _just_ to survive and itâs already ambitious. No more. Consensus fundamentals are okay.",
      "created_at" : "2023-09-29T22:16:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1741542233",
      "id" : 1741542233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nzdNZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741542233/reactions"
      },
      "updated_at" : "2023-09-29T22:16:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741542233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think it would be worth moving most conceptual discussion to the [Delving Bitcoin thread](https://delvingbitcoin.org/t/covenant-tools-softfork/98) to avoid blasting the already-burdened Github notifications of contributors here.\r\n\r\nAnswering here as Iâll figure out later how to do the connect.\r\n\r\n> Vaults\r\n> opvault-demo: [GitHub - jamesob/opvault-demo: An example wallet using OP_VAULT](https://github.com/jamesob/opvault-> demo/)\r\n> simple-ctv-vault: [GitHub - jamesob/simple-ctv-vault: A simple vault structure using OP_CTV]\r\n> (https://github.com/jamesob/simple-ctv-vault)\r\n\r\nVaults can be done today with pre-signed transactions, even if the trade-offs are different itâs a practical construction. I still have the huge concern than âprocess fatigueâ and operational complexity of vaults are too high, even to be swallowed by professional self-custody teams with $1B+ under management.\r\n\r\nIf the wish is to improve self-custody of the Bitcoin end-users in the near-term, highest yielding fruit sounds things like n-of-m frost and taproot timelocked backup branches. The later already introducing difficulty of fee-bumping management for wallets.\r\n\r\n> LN-symmetry\r\n\r\nI think the state of the discussion about lightning eltoo was this one https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-December/003788.html. I donât know if a clear comparative analysis of all the eltoo designs (ln-symmetry, daric, original eltoo) has been done, especially on the question of watchtower.\r\n\r\n> DLC efficiency improvements ([spec](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019808.html)), are so straightforward that a demo implementation doesnât seem prerequisite to seeing the value of CTV as a primitive.\r\n\r\nFalse, this is space-time trade-off as you have know to bear extended witness space cost as a routing node (taproot logarithm perf), if the DLC goes on-chain, and as such the level of fee-bumping you have to maintain.\r\n\r\nIf we care about as a community about covenants and advanced contracting protocols, I really think we should put on the table the great consensus cleanup: https://github.com/bitcoin/bitcoin/pull/15482 and clean current consensus tech debt. You donât wanna miners launch timewarp attacks to pwn your $$$ vaults in a post-subsidy world. I wonât champion it in the near future, though more willing spend review time on a great consensus cleanup softfork.",
      "created_at" : "2023-09-29T22:38:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1741554330",
      "id" : 1741554330,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nzgKa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741554330/reactions"
      },
      "updated_at" : "2023-09-29T22:47:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741554330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I still maintain than softforks reducing the amount of \"systemic risk\"-level technical debt of the Bitcoin ecosystem should be given priority over covenant-enabling softforks, especially when there is plausible or proven interdenpendency between the said technical debt issue and Bitcoin second-layers.\r\n\r\n[Timewarp](https://bitcoin.stackexchange.com/questions/75831/what-is-time-warp-attack-and-how-does-it-work-in-general) attacks have been known affecting cryptocurrencies ecosystem since at least 2011. By manipulating the timestamps of the first and last block of a 2016 difficulty period, miners can manipulate the difficulty adjustment of blocks and increase the block issuance frequency. This frequency increase could be use to shorten the \"effective duration\" of the height-based timelocks of vaults and collaborative custody wallets from the \"expected duration\" foreseen by users or their watchtowers to react on-time. While timewarp attacks requires miners coordination and are publicly observable, there is a known proposal in the ecosystem (\"forward blocksâ) to actually use this bug to increase miners income. In a post-subsidy world, miners could have incentives to exploit vulnerable vaults and wallets.\r\n\r\nThere is another publicly known systemic risk that requires a softfork to be fixed in a world with limited blockspace, the \"thundering herd\" or \"forced expiration spam\". Originally pointed out in the Lightning white paper ([section 9.2](https://lightning.network/lightning-network-paper.pdf)), mass expiration spams happens when many off-chain time-sensitive transactions are broadcast to confirm soon, and there is no enough block size capacity throughput available before a subset of the timelocks expire. In today Lightning Network, this would happen if the total sum in weight of pending HTLC-timeout (assuming same nLocktime value N) for all channels is superior to the blockspace available until height N is reached. This \"thundering herdâ issue has been discussed more recently in the context of [channel factories](https://bitcoinops.org/en/newsletters/2023/09/27/).\r\n\r\nMiners attacks of Bitcoin second-layers and their incentives to do so has been an area of research for years for Gleb and myself (see [\"On massive channel closing and fee bumping\"](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-February/002569.html) and [\"Costless bribes against time-sensitive protocols\"](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021395.html)).\r\nRecent partial deployment of `mempoolfullrbf` and observations conducted on miners reacting to this change in network\r\ndynamics sounds to qualify as an empirical demonstration than miners incentives game-theory matters.\r\n\r\nWhile an answer has been sketch out on [the unsuitability of using pre-signed transactions for vault](https://delvingbitcoin.org/t/the-unsuitability-of-presigned-transactions-for-vaults/113/3), it's hard to assert if proposed design vaults in themselves will be practical enough from a \"process fatigueâ viewpoint (when you add the complexity of witness backup management, hosts and watchtower configuration, fee-bumping reserves provisioning or key initialization ceremony). \"Process fatigue\" is a clear design standards in the field of secure system design. Fairly enough it's _hard_ to evaluate \"process fatigue\" on a whiteboard. All, I can do to demonstrate this point, if James has a robust enough proof-of-concept implementation is to find time during the next 18 months to do a full execution of his vault design under real-world conditions and come with a public write-up at the image of what Peter has historically done for [the Zcash setup ceremony](https://petertodd.org/2016/cypherpunk-desert-bus-zcash-trusted-setup-ceremony). No paid for full independence, open to do it in a pure hacker ethos as I'll learn a lot. I'll let James speaks if he's done for the demonstration ? Already reviewed his [vault paper](https://jameso.be/vaults.pdf) and from LN infrastructure experience, I've a good idea of the operational constraints.\r\n\r\nZooming out, I still deeply believe we're stuck on the covenant discussions somehow because we have not taken time to build and nurture the communication channels, tooling and space where to discusss and build consensus in matters of consensus change. There has been attempts with the contracting primitives WG on IRC or the bitcoin-inquisition fork though at that stage it's more finding reliable people willing to do the maintenance. From experience this is hard to permanently switch between the hats of maintainer and deep technical reviewer and ensure substantial neutrality is observed. I'm certain if we can find reliable people who are ready to commit themselves on animating those community-wide effort (irc meetings, bitcoin inquisition review or writing historical content for archiving purpose), Opensats or another will be open to assign some long-term support grants (opensats funded CoreDev of last month thanks to them). Another alternative, I'm down to hold one of the key of a n-of-m bitcoin wallet to fund future consensus changes effort, if other reliable and trustworthy folks can be found.\r\n\r\nTaproot and Schnorr set a great engineering standard in matters of consensus development process due to a number of different initiatives, e.g the [taproot open review](https://github.com/ajtowns/taproot-review) during few weeks end of 2019. I think the [meatspace optech workshops](https://bitcoinops.org/workshops/) played a good role too to assert industry and community appetence for the changes. Somehow there has been a break in this organic \"tradition\" with the pandemie, and I believe we're still paying the price of it as a community today.\r\n\r\nIf anyone has more concrete and constructive suggestions on rolling the ball forward on covenants consensus changes and second-layers and actually _building_ consensus with proof-of-work in a responsible fashion, my thanks to express a respectful and polite opinion.\r\n\r\nPS: I can say more though it's Saturday evening in my timezone and then I'll be late to go to enjoy live music,\r\nso I'll be offline until tomorrow.\r\n\r\nPPS: Pardon my rough english if any confusion, Iâm not native.",
      "created_at" : "2023-09-30T21:03:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1741858892",
      "id" : 1741858892,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585n0qhM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741858892/reactions"
      },
      "updated_at" : "2023-09-30T21:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741858892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-02T21:49:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1743818875",
      "id" : 1743818875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585n8JB7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743818875/reactions"
      },
      "updated_at" : "2023-10-02T21:49:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1743818875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28550#discussion_r1345769688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28550"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345769688"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is unreachable? Since OP_VAULT is only defined for v1 and we don't know what v2 could even look like this might as well not introduce the `m_curr_witversion` variable and explicitly check for witness version 1 above?\r\n\r\n(was just checking the code corresponding to https://github.com/bitcoin/bips/pull/1421#discussion_r1345761010)",
      "commit_id" : "86454de4caeff4712513dd9864b51fdd94d01f93",
      "created_at" : "2023-10-04T13:08:02Z",
      "diff_hunk" : "@@ -1781,6 +2062,222 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(const Span<const unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        assert(txTo != nullptr);\n+        uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+            GetDefaultCheckTemplateVerifyHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+            GetDefaultCheckTemplateVerifyHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                    txdata->m_scriptSigs_single_hash, nIn);\n+        return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+    } else {\n+        return HandleMissingData(m_mdb);\n+    }\n+}\n+//! Return true if the given output is a 0-value anchor output.\n+//!\n+//! Note, this is stolen from https://github.com/bitcoin/bitcoin/pull/26403, and so\n+//! should be updated to use whatever lands there.\n+static bool IsOutputEphemeralAnchor(const CTxOut& out)\n+{\n+    if (out.nValue != 0) {\n+        return false;\n+    }\n+    const CScript& spk = out.scriptPubKey;\n+    if (!(spk.size() == 1 && spk[0] == OP_2)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+template <class T>\n+std::optional<ScriptError> GenericTransactionSignatureChecker<T>::CheckVaultRecover(\n+    const size_t recovery_vout_idx,\n+    ScriptExecutionData& execdata,\n+    const uint256& expected_recovery_spk_hash,\n+    const CScript& executing_script,\n+    unsigned int flags) const\n+{\n+    const auto& vout = this->txTo->vout;\n+    const auto num_vout = vout.size();\n+\n+    assert(recovery_vout_idx >= 0);\n+    if (num_vout <= recovery_vout_idx) {\n+        return SCRIPT_ERR_VAULT_BAD_VOUT_IDX;\n+    }\n+    const CTxOut& recovery_out{vout[recovery_vout_idx]};\n+    const uint256 output_spk_hash = VaultScriptHash(\n+        HASHER_VAULT_RECOVERY_SPK, recovery_out.scriptPubKey);\n+\n+    if (output_spk_hash != expected_recovery_spk_hash) {\n+        return SCRIPT_ERR_VAULT_BAD_RECOVERY_OUTPUTS;\n+\n+    }\n+\n+    if (recovery_out.nValue < this->amount) {\n+        // Recovery out value doesn't cover _at least_ the amount of this input.\n+        //\n+        // Note that because there may be multiple vaulted inputs paying to the same\n+        // recovery output, we must use a deferred check to ensure the sum value of\n+        // all compatible vaults is paid out.\n+        return SCRIPT_ERR_VAULT_LOW_RECOVERY_AMOUNT;\n+    }\n+\n+    const CTxIn& this_in{this->txTo->vin[this->nIn]};\n+\n+    // Ensure that the recovery transaction is replaceable (by policy).\n+    if (flags & SCRIPT_VERIFY_VAULT_REPLACEABLE_RECOVERY &&\n+            this_in.nSequence > MAX_BIP125_RBF_SEQUENCE) {\n+        // TODO: when transaction nVersion=3 policy is merged, this should be updated\n+        // since the goal here is to ensure that recovery transactions are replaceable.\n+        return SCRIPT_ERR_VAULT_RECOVERY_NOT_REPLACEABLE;\n+    }\n+\n+    // If there are additional bytes beyond \"<recovery-path-sPK-hash> OP_VAULT_RECOVER\",\n+    // then this is considered an authorized recovery.\n+    //\n+    // FIXME document the comparison more.\n+    const bool is_authed_recovery{executing_script.size() > (uint256::WIDTH + 2)};\n+\n+    // If this is an unauthenticated recovery, ensure that the only other\n+    // output is an ephemeral anchor (by policy).\n+    if (flags & SCRIPT_VERIFY_VAULT_UNAUTH_RECOVERY_STRUCTURE && !is_authed_recovery) {\n+        const size_t optional_ea_idx{recovery_vout_idx == 0 ? 1U : 0U};\n+        if (num_vout != 2 || !IsOutputEphemeralAnchor(vout[optional_ea_idx])) {\n+            return SCRIPT_ERR_VAULT_BAD_RECOVERY_OUTPUTS;\n+        }\n+    }\n+\n+    execdata.AddDeferredVaultRecoveryCheck(recovery_vout_idx, this->amount);\n+\n+    return std::nullopt;\n+}\n+\n+template <class T>\n+std::optional<ScriptError> GenericTransactionSignatureChecker<T>::CheckVaultTrigger(\n+    ScriptExecutionData& execdata,\n+    const size_t trigger_out_idx,\n+    const int maybe_revault_out_idx,\n+    const CAmount revault_amount,\n+    CScript flu_script,\n+    unsigned int flags,\n+    ScriptError* serror) const\n+{\n+    assert(execdata.m_curr_witversion);\n+\n+    // Implement the sigops/witnesssize ratio test.\n+    // Passing with an upgradable public key version is also counted.\n+    assert(execdata.m_validation_weight_left_init);\n+    execdata.m_validation_weight_left -= VALIDATION_WEIGHT_PER_TAPTWEAKCHECK;\n+    if (execdata.m_validation_weight_left < 0) {\n+        return SCRIPT_ERR_TAPSCRIPT_VALIDATION_WEIGHT;\n+    }\n+\n+    if (!this->txdata) {\n+        HandleMissingData(m_mdb);\n+        return SCRIPT_ERR_UNKNOWN_ERROR;\n+    }\n+    const auto& txd{*this->txdata};\n+    const auto& vout{this->txTo->vout};\n+\n+    assert(txd.m_spent_outputs_ready);\n+    const CScript& vault_spk = txd.m_spent_outputs[this->nIn].scriptPubKey;\n+\n+    if (trigger_out_idx >= vout.size()) {\n+        return SCRIPT_ERR_UNVAULT_MISMATCH;\n+    }\n+\n+    // Ensure that the output creating the unvault trigger matches the\n+    // expected scriptPubKey.\n+    const auto& value_out = vout[trigger_out_idx];\n+\n+    int trigger_witversion;\n+    valtype trigger_witprogram;\n+    const bool is_unvault_output_wit =\n+        value_out.scriptPubKey.IsWitnessProgram(trigger_witversion, trigger_witprogram);\n+\n+    if (!is_unvault_output_wit || trigger_witversion < 1 ||\n+            trigger_witversion != *execdata.m_curr_witversion) {\n+        return SCRIPT_ERR_UNVAULT_INCOMPAT_OUTPUT_TYPE;\n+    }\n+    else if (trigger_witversion == 1) {\n+        assert(execdata.m_internal_key);\n+        assert(execdata.m_taproot_control.size() > 0);\n+\n+        const valtype& control = execdata.m_taproot_control;\n+        const valtype val_sPK{\n+            value_out.scriptPubKey.begin(), value_out.scriptPubKey.end()};\n+\n+        if (val_sPK.size() != 34) {\n+            return SCRIPT_ERR_UNVAULT_MISMATCH;\n+        }\n+        const XOnlyPubKey val_pk{Span{val_sPK}.subspan(2)};\n+\n+        const auto tapleaf_hash = ComputeTapleafHash(\n+            control[0] & TAPROOT_LEAF_MASK, flu_script);\n+        const uint256 merkle_root = ComputeTaprootMerkleRoot(control, tapleaf_hash);\n+        const auto expected_pk = (*execdata.m_internal_key).CreateTapTweak(&merkle_root);\n+\n+        // Ensure the currently executing OP_VAULT tapleaf is substituted for the\n+        // expected replacement.\n+        if (!(expected_pk && val_pk == expected_pk->first)) {\n+            return SCRIPT_ERR_UNVAULT_MISMATCH;\n+        }\n+    }\n+    // Append the handling of future witness versions with `else if`s here.\n+    else {\n+        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+            return SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM;\n+        }\n+        set_success(serror);\n+        return std::nullopt;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#discussion_r1345769688",
      "id" : 1345769688,
      "line" : 2238,
      "node_id" : "PRRC_kwDOABII585QNtDY",
      "original_commit_id" : "86454de4caeff4712513dd9864b51fdd94d01f93",
      "original_line" : 2238,
      "original_position" : 668,
      "original_start_line" : 2231,
      "path" : "src/script/interpreter.cpp",
      "position" : 668,
      "pull_request_review_id" : 1657492785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28550",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345769688/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2231,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-10-04T13:08:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1345769688",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28550#discussion_r1350641060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28550"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1350641060"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "4a481a1f4d79d2d1b6ba126c0f1419ca55fa5d9d",
      "created_at" : "2023-10-09T18:10:16Z",
      "diff_hunk" : "@@ -1781,6 +2062,222 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(const Span<const unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        assert(txTo != nullptr);\n+        uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+            GetDefaultCheckTemplateVerifyHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+            GetDefaultCheckTemplateVerifyHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                    txdata->m_scriptSigs_single_hash, nIn);\n+        return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+    } else {\n+        return HandleMissingData(m_mdb);\n+    }\n+}\n+//! Return true if the given output is a 0-value anchor output.\n+//!\n+//! Note, this is stolen from https://github.com/bitcoin/bitcoin/pull/26403, and so\n+//! should be updated to use whatever lands there.\n+static bool IsOutputEphemeralAnchor(const CTxOut& out)\n+{\n+    if (out.nValue != 0) {\n+        return false;\n+    }\n+    const CScript& spk = out.scriptPubKey;\n+    if (!(spk.size() == 1 && spk[0] == OP_2)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+template <class T>\n+std::optional<ScriptError> GenericTransactionSignatureChecker<T>::CheckVaultRecover(\n+    const size_t recovery_vout_idx,\n+    ScriptExecutionData& execdata,\n+    const uint256& expected_recovery_spk_hash,\n+    const CScript& executing_script,\n+    unsigned int flags) const\n+{\n+    const auto& vout = this->txTo->vout;\n+    const auto num_vout = vout.size();\n+\n+    assert(recovery_vout_idx >= 0);\n+    if (num_vout <= recovery_vout_idx) {\n+        return SCRIPT_ERR_VAULT_BAD_VOUT_IDX;\n+    }\n+    const CTxOut& recovery_out{vout[recovery_vout_idx]};\n+    const uint256 output_spk_hash = VaultScriptHash(\n+        HASHER_VAULT_RECOVERY_SPK, recovery_out.scriptPubKey);\n+\n+    if (output_spk_hash != expected_recovery_spk_hash) {\n+        return SCRIPT_ERR_VAULT_BAD_RECOVERY_OUTPUTS;\n+\n+    }\n+\n+    if (recovery_out.nValue < this->amount) {\n+        // Recovery out value doesn't cover _at least_ the amount of this input.\n+        //\n+        // Note that because there may be multiple vaulted inputs paying to the same\n+        // recovery output, we must use a deferred check to ensure the sum value of\n+        // all compatible vaults is paid out.\n+        return SCRIPT_ERR_VAULT_LOW_RECOVERY_AMOUNT;\n+    }\n+\n+    const CTxIn& this_in{this->txTo->vin[this->nIn]};\n+\n+    // Ensure that the recovery transaction is replaceable (by policy).\n+    if (flags & SCRIPT_VERIFY_VAULT_REPLACEABLE_RECOVERY &&\n+            this_in.nSequence > MAX_BIP125_RBF_SEQUENCE) {\n+        // TODO: when transaction nVersion=3 policy is merged, this should be updated\n+        // since the goal here is to ensure that recovery transactions are replaceable.\n+        return SCRIPT_ERR_VAULT_RECOVERY_NOT_REPLACEABLE;\n+    }\n+\n+    // If there are additional bytes beyond \"<recovery-path-sPK-hash> OP_VAULT_RECOVER\",\n+    // then this is considered an authorized recovery.\n+    //\n+    // FIXME document the comparison more.\n+    const bool is_authed_recovery{executing_script.size() > (uint256::WIDTH + 2)};\n+\n+    // If this is an unauthenticated recovery, ensure that the only other\n+    // output is an ephemeral anchor (by policy).\n+    if (flags & SCRIPT_VERIFY_VAULT_UNAUTH_RECOVERY_STRUCTURE && !is_authed_recovery) {\n+        const size_t optional_ea_idx{recovery_vout_idx == 0 ? 1U : 0U};\n+        if (num_vout != 2 || !IsOutputEphemeralAnchor(vout[optional_ea_idx])) {\n+            return SCRIPT_ERR_VAULT_BAD_RECOVERY_OUTPUTS;\n+        }\n+    }\n+\n+    execdata.AddDeferredVaultRecoveryCheck(recovery_vout_idx, this->amount);\n+\n+    return std::nullopt;\n+}\n+\n+template <class T>\n+std::optional<ScriptError> GenericTransactionSignatureChecker<T>::CheckVaultTrigger(\n+    ScriptExecutionData& execdata,\n+    const size_t trigger_out_idx,\n+    const int maybe_revault_out_idx,\n+    const CAmount revault_amount,\n+    CScript flu_script,\n+    unsigned int flags,\n+    ScriptError* serror) const\n+{\n+    assert(execdata.m_curr_witversion);\n+\n+    // Implement the sigops/witnesssize ratio test.\n+    // Passing with an upgradable public key version is also counted.\n+    assert(execdata.m_validation_weight_left_init);\n+    execdata.m_validation_weight_left -= VALIDATION_WEIGHT_PER_TAPTWEAKCHECK;\n+    if (execdata.m_validation_weight_left < 0) {\n+        return SCRIPT_ERR_TAPSCRIPT_VALIDATION_WEIGHT;\n+    }\n+\n+    if (!this->txdata) {\n+        HandleMissingData(m_mdb);\n+        return SCRIPT_ERR_UNKNOWN_ERROR;\n+    }\n+    const auto& txd{*this->txdata};\n+    const auto& vout{this->txTo->vout};\n+\n+    assert(txd.m_spent_outputs_ready);\n+    const CScript& vault_spk = txd.m_spent_outputs[this->nIn].scriptPubKey;\n+\n+    if (trigger_out_idx >= vout.size()) {\n+        return SCRIPT_ERR_UNVAULT_MISMATCH;\n+    }\n+\n+    // Ensure that the output creating the unvault trigger matches the\n+    // expected scriptPubKey.\n+    const auto& value_out = vout[trigger_out_idx];\n+\n+    int trigger_witversion;\n+    valtype trigger_witprogram;\n+    const bool is_unvault_output_wit =\n+        value_out.scriptPubKey.IsWitnessProgram(trigger_witversion, trigger_witprogram);\n+\n+    if (!is_unvault_output_wit || trigger_witversion < 1 ||\n+            trigger_witversion != *execdata.m_curr_witversion) {\n+        return SCRIPT_ERR_UNVAULT_INCOMPAT_OUTPUT_TYPE;\n+    }\n+    else if (trigger_witversion == 1) {\n+        assert(execdata.m_internal_key);\n+        assert(execdata.m_taproot_control.size() > 0);\n+\n+        const valtype& control = execdata.m_taproot_control;\n+        const valtype val_sPK{\n+            value_out.scriptPubKey.begin(), value_out.scriptPubKey.end()};\n+\n+        if (val_sPK.size() != 34) {\n+            return SCRIPT_ERR_UNVAULT_MISMATCH;\n+        }\n+        const XOnlyPubKey val_pk{Span{val_sPK}.subspan(2)};\n+\n+        const auto tapleaf_hash = ComputeTapleafHash(\n+            control[0] & TAPROOT_LEAF_MASK, flu_script);\n+        const uint256 merkle_root = ComputeTaprootMerkleRoot(control, tapleaf_hash);\n+        const auto expected_pk = (*execdata.m_internal_key).CreateTapTweak(&merkle_root);\n+\n+        // Ensure the currently executing OP_VAULT tapleaf is substituted for the\n+        // expected replacement.\n+        if (!(expected_pk && val_pk == expected_pk->first)) {\n+            return SCRIPT_ERR_UNVAULT_MISMATCH;\n+        }\n+    }\n+    // Append the handling of future witness versions with `else if`s here.\n+    else {\n+        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+            return SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM;\n+        }\n+        set_success(serror);\n+        return std::nullopt;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#discussion_r1350641060",
      "id" : 1350641060,
      "in_reply_to_id" : 1345769688,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585QgSWk",
      "original_commit_id" : "86454de4caeff4712513dd9864b51fdd94d01f93",
      "original_line" : 2223,
      "original_position" : 668,
      "original_start_line" : 2231,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 1665037501,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28550",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1350641060/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-10-09T18:10:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1350641060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Looks like you missed adding covtools to `getdeploymentinfo`\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/5d227a68627614efa8618d360efee22a47afa88b/src/rpc/blockchain.cpp#L1318",
      "created_at" : "2023-10-14T23:02:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1763202506",
      "id" : 1763202506,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585pGFXK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1763202506/reactions"
      },
      "updated_at" : "2023-10-14T23:02:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1763202506",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-10-26T16:42:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1781477585",
      "id" : 1781477585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585qLzDR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1781477585/reactions"
      },
      "updated_at" : "2023-10-26T16:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1781477585",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "To the best of my comprehension, most of the use-cases brought as a justification for the consensus changes introduced in this PR are relying on UTXO-sharing / time-locks as part of their design. I think most of them are affected by the following security & risks issues:\r\n- [thundering herds](https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-September/004095.html)\r\n- replacement cycling and pinning attacks\r\n- [timewarp-based miners harvesting risks](https://delvingbitcoin.org/t/timewarp-miners-harvesting-and-vaults/218)\r\n\r\nI think all those risks would need consensus changes to be fixed and make those use-cases robust on the long-term, more any consensus changes we might come with will probably alter their design, at the very least for replacement cycling and pinning attacks, if we need to remove all package malleability concerns. For those reasons, I believe itâs more valuable for the Bitcoin ecosystem to consider âL2 technical debt cleanupâ type of consensus changes, some of them which have been already fleshed out like â[The Great Consensus](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016714.html)â cleanup as preliminary steps before to add more covenants tools.",
      "created_at" : "2023-12-15T01:04:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1857107415",
      "id" : 1857107415,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585usTXX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1857107415/reactions"
      },
      "updated_at" : "2023-12-15T01:04:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1857107415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
