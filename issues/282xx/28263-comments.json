[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28263).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "created_at" : "2023-08-13T07:00:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#issuecomment-1676256370",
      "id" : 1676256370,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28263",
      "node_id" : "IC_kwDOABII585j6aRy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1676256370/reactions"
      },
      "updated_at" : "2023-10-20T09:23:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1676256370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292867394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292867394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This will always construct an AAD of 512 bytes, if that much data is available in the fuzzer input. I think it's better to make the AAD size dynamic, and a function of the fuzzer input data too.",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-08-13T22:36:41Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <span.h>\n+#include <crypto/chacha20poly1305.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    auto aad = provider.ConsumeBytes<std::byte>(512);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292867394",
      "id" : 1292867394,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ND5dC",
      "original_commit_id" : "a4ce5fd363f53c182b2d77f750f9616fd8c0fecf",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1575907129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292867394/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-13T23:03:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292867394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292869677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292869677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This will never trigger, as the AEAD advances between between the preceding Encrypt call and the Decrypt call here, so encryption and decryption will never use the same key. With distinct keys, it should be cryptographically impossible for *anyone* (let alone a fuzzer) to get a match (and if, with extremely low probability, ok=true is returned, it'll be accidental, and plaintext and decrypted result won't match).\r\n\r\nThere are two possible styles of fuzz tests we could write here, and this feels like a mix between the two:\r\n* A \"exercise-the-API\" fuzz test, which is only intended to make sure no crashes happen under arbitrary sequences of method calls. I personally think such tests are of rather low value, though of course better than nothing, and we do have some in the codebase (including `crypto_chacha20` and `crypto_fschacha20`). If that's the goal here, you can probably just ignore the return value of `Decrypt`.\r\n* A \"test encryption and decryption match\" fuzz test (possibly combined with a \"if errors are introduced between encryption and decryption, the latter fails\"). Such tests are a lot more interesting and they test some notion of correctness of behavior in addition to just not crashing. If you want that here, you'll need some approach that involves two `AEADChaCha20Poly1305` objects (one for encrypting, one for decrypting), initialized with matching (or deliberately mismatching) keys, and then running through some scenario that's applied to both to keep them in sync. The `bip324_cipher_roundtrip` fuzz test is of this style (but at a higher level).",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-08-13T22:56:35Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <span.h>\n+#include <crypto/chacha20poly1305.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    auto aad = provider.ConsumeBytes<std::byte>(512);\n+    AEADChaCha20Poly1305::Nonce96 nonce = {provider.ConsumeIntegral<uint32_t>(), provider.ConsumeIntegral<uint64_t>()};\n+    size_t length = provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+    std::vector<std::byte> plain(length, std::byte(0));\n+    std::vector<std::byte> contents(length);\n+    std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+\n+    AEADChaCha20Poly1305 aead(key);\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        CallOneOf(\n+            provider,\n+            [&] {\n+                auto key = provider.ConsumeBytes<std::byte>(32);\n+                key.resize(32);\n+                aead.SetKey(key);\n+            },\n+            [&] {\n+                length = provider.ConsumeIntegralInRange<size_t>(64, 4096);\n+                plain.resize(length, std::byte(0));\n+                contents.resize(length);\n+                cipher.resize(length + AEADChaCha20Poly1305::EXPANSION);\n+            },\n+            [&] {\n+                aead.Keystream(nonce, contents);\n+            },\n+            [&] {\n+                aead.Encrypt(plain, aad, nonce, cipher);\n+            },\n+            [&] {\n+                if (length) {\n+                    size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+                    aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, nonce,\n+                                 cipher);\n+                }\n+            },\n+            [&] {\n+                bool ok = aead.Decrypt(cipher, aad, nonce, contents); // with splits too\n+                if (ok) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292869677",
      "id" : 1292869677,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ND6At",
      "original_commit_id" : "a4ce5fd363f53c182b2d77f750f9616fd8c0fecf",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1575907129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292869677/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-13T23:03:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292869677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292869936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292869936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The same comment as I've given on the other test about mixing \"exercise API\" and \"test correctness\" fuzzing applies here: `ok` will never be true (except with negligible probability), and if it does, `plain` and `contents` won't match.",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-08-13T22:59:38Z",
      "diff_hunk" : "@@ -75,3 +75,55 @@ FUZZ_TARGET(crypto_aeadchacha20poly1305)\n             });\n     }\n }\n+\n+FUZZ_TARGET(crypto_fschacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    auto aad = provider.ConsumeBytes<std::byte>(512);\n+    size_t length = provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+    std::vector<std::byte> plain(length, std::byte(0));\n+    std::vector<std::byte> contents(length);\n+    std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+    uint32_t rekey_interval = provider.ConsumeIntegralInRange<size_t>(32, 512);\n+\n+    FSChaCha20Poly1305 aead(key, rekey_interval);\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        CallOneOf(\n+            provider,\n+            [&] {\n+                length = provider.ConsumeIntegralInRange<size_t>(64, 4096);\n+                plain.resize(length, std::byte(0));\n+                contents.resize(length);\n+                cipher.resize(length + AEADChaCha20Poly1305::EXPANSION);\n+            },\n+            [&] {\n+                aead.Encrypt(plain, aad, cipher);\n+            },\n+            [&] {\n+                if (length) {\n+                    size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+                    aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, cipher);\n+                }\n+            },\n+            [&] {\n+                bool ok = aead.Decrypt(cipher, aad, contents);\n+                if (ok) {\n+                    assert(plain == contents);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292869936",
      "id" : 1292869936,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ND6Ew",
      "original_commit_id" : "9ac40226aedf8f519ff03bf0fe60db2ef41b62b8",
      "original_line" : 116,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1575907129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292869936/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-13T23:03:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292869936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292870252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292870252"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `.` at the end of the sentence so it's clear the lines are about different arguments.\r\n\r\nAlso perhaps say \"if we are the initiator\" or so; every v2 P2P connection involves initiating somehow; the question is whether it's us or the remote side doing that.",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-08-13T23:02:02Z",
      "diff_hunk" : "@@ -54,6 +54,7 @@ class BIP324Cipher\n \n     /** Initialize when the other side's public key is received. Can only be called once.\n      *\n+     * initiator is set to true if the BIP324 cipher involves initiating the v2 P2P connection",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292870252",
      "id" : 1292870252,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ND6Js",
      "original_commit_id" : "d2ee2f39fecf0a669e1bab52a56378507f1fc07d",
      "original_line" : 57,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/bip324.h",
      "position" : null,
      "pull_request_review_id" : 1575907129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292870252/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-13T23:04:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1292870252",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@stratospher Want to also address https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1277460913 and https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1283327643 here? ",
      "created_at" : "2023-08-13T23:12:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#issuecomment-1676490059",
      "id" : 1676490059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28263",
      "node_id" : "IC_kwDOABII585j7TVL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1676490059/reactions"
      },
      "updated_at" : "2023-08-13T23:12:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1676490059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "so split off the last commit into #28267 since they aren't related to the fuzz test. (included https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1277460913 and https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1283327643 there)\r\n\r\nthinking about https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292869677. will address it soon.",
      "created_at" : "2023-08-14T03:55:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#issuecomment-1676634167",
      "id" : 1676634167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28263",
      "node_id" : "IC_kwDOABII585j72g3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1676634167/reactions"
      },
      "updated_at" : "2023-08-14T03:55:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1676634167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are you still working on this?",
      "created_at" : "2023-10-20T09:23:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#issuecomment-1772384602",
      "id" : 1772384602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28263",
      "node_id" : "IC_kwDOABII585ppHFa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1772384602/reactions"
      },
      "updated_at" : "2023-10-20T09:23:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1772384602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521176"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521176"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "true! it's done like in `bip324_cipher_roundtrip` fuzz test now.",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-10-24T16:45:16Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <span.h>\n+#include <crypto/chacha20poly1305.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    auto aad = provider.ConsumeBytes<std::byte>(512);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521176",
      "id" : 1370521176,
      "in_reply_to_id" : 1292867394,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RsH5Y",
      "original_commit_id" : "a4ce5fd363f53c182b2d77f750f9616fd8c0fecf",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1695411425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521176/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T16:45:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521176",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521325"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for the interesting explanation! updated it to a \"test encryption and decryption match\" kind of fuzz test.",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-10-24T16:45:25Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <span.h>\n+#include <crypto/chacha20poly1305.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    auto aad = provider.ConsumeBytes<std::byte>(512);\n+    AEADChaCha20Poly1305::Nonce96 nonce = {provider.ConsumeIntegral<uint32_t>(), provider.ConsumeIntegral<uint64_t>()};\n+    size_t length = provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+    std::vector<std::byte> plain(length, std::byte(0));\n+    std::vector<std::byte> contents(length);\n+    std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+\n+    AEADChaCha20Poly1305 aead(key);\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        CallOneOf(\n+            provider,\n+            [&] {\n+                auto key = provider.ConsumeBytes<std::byte>(32);\n+                key.resize(32);\n+                aead.SetKey(key);\n+            },\n+            [&] {\n+                length = provider.ConsumeIntegralInRange<size_t>(64, 4096);\n+                plain.resize(length, std::byte(0));\n+                contents.resize(length);\n+                cipher.resize(length + AEADChaCha20Poly1305::EXPANSION);\n+            },\n+            [&] {\n+                aead.Keystream(nonce, contents);\n+            },\n+            [&] {\n+                aead.Encrypt(plain, aad, nonce, cipher);\n+            },\n+            [&] {\n+                if (length) {\n+                    size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+                    aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, nonce,\n+                                 cipher);\n+                }\n+            },\n+            [&] {\n+                bool ok = aead.Decrypt(cipher, aad, nonce, contents); // with splits too\n+                if (ok) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521325",
      "id" : 1370521325,
      "in_reply_to_id" : 1292869677,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RsH7t",
      "original_commit_id" : "a4ce5fd363f53c182b2d77f750f9616fd8c0fecf",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1695411664,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521325/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T16:45:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521325",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "makes sense. updated it to a \"test encryption and decryption match\" kind of fuzz test.",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-10-24T16:45:30Z",
      "diff_hunk" : "@@ -75,3 +75,55 @@ FUZZ_TARGET(crypto_aeadchacha20poly1305)\n             });\n     }\n }\n+\n+FUZZ_TARGET(crypto_fschacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    auto aad = provider.ConsumeBytes<std::byte>(512);\n+    size_t length = provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+    std::vector<std::byte> plain(length, std::byte(0));\n+    std::vector<std::byte> contents(length);\n+    std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+    uint32_t rekey_interval = provider.ConsumeIntegralInRange<size_t>(32, 512);\n+\n+    FSChaCha20Poly1305 aead(key, rekey_interval);\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        CallOneOf(\n+            provider,\n+            [&] {\n+                length = provider.ConsumeIntegralInRange<size_t>(64, 4096);\n+                plain.resize(length, std::byte(0));\n+                contents.resize(length);\n+                cipher.resize(length + AEADChaCha20Poly1305::EXPANSION);\n+            },\n+            [&] {\n+                aead.Encrypt(plain, aad, cipher);\n+            },\n+            [&] {\n+                if (length) {\n+                    size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+                    aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, cipher);\n+                }\n+            },\n+            [&] {\n+                bool ok = aead.Decrypt(cipher, aad, contents);\n+                if (ok) {\n+                    assert(plain == contents);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521430",
      "id" : 1370521430,
      "in_reply_to_id" : 1292869936,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RsH9W",
      "original_commit_id" : "9ac40226aedf8f519ff03bf0fe60db2ef41b62b8",
      "original_line" : 116,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1695411824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T16:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done in https://github.com/bitcoin/bitcoin/pull/28267",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-10-24T16:45:33Z",
      "diff_hunk" : "@@ -54,6 +54,7 @@ class BIP324Cipher\n \n     /** Initialize when the other side's public key is received. Can only be called once.\n      *\n+     * initiator is set to true if the BIP324 cipher involves initiating the v2 P2P connection",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1370521487",
      "id" : 1370521487,
      "in_reply_to_id" : 1292870252,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585RsH-P",
      "original_commit_id" : "d2ee2f39fecf0a669e1bab52a56378507f1fc07d",
      "original_line" : 57,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/bip324.h",
      "position" : null,
      "pull_request_review_id" : 1695411909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521487/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-24T16:45:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1370521487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Are you still working on this?\r\n\r\nyes! updated the PR to address https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1292869677.",
      "created_at" : "2023-10-24T16:45:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#issuecomment-1777629744",
      "id" : 1777629744,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28263",
      "node_id" : "IC_kwDOABII585p9How",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1777629744/reactions"
      },
      "updated_at" : "2023-10-24T16:45:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1777629744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1406951204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406951204"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `aead_for_ks` is unused (can be just removed AFAICT, as it seems fine to reuse the existing `aead` object).",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-11-28T00:58:29Z",
      "diff_hunk" : "@@ -0,0 +1,106 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    AEADChaCha20Poly1305 aead(key);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        // Mode:\n+        // - Bit 0: whether to use single-plain Encrypt/Decrypt; otherwise use a split at prefix.\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool use_splits = mode & 1;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> plain(length);\n+        for (auto& val : plain) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+        // Generate nonce\n+        AEADChaCha20Poly1305::Nonce96 nonce = {(uint32_t)rng(), rng()};\n+\n+        if (use_splits && length > 0) {\n+            size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+            aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        }\n+\n+        // Test Keystream output\n+        std::vector<std::byte> keystream(length);\n+        AEADChaCha20Poly1305 aead_for_ks(key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1406951204",
      "id" : 1406951204,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII585T3F8k",
      "original_commit_id" : "48818c75e54e9db924ef30d76f6000c2bea22e6b",
      "original_line" : 62,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : 74,
      "pull_request_review_id" : 1751696681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406951204/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T01:43:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406951204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1406974138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406974138"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(here and for the other fuzz test:)\r\n ```suggestion\r\n             std::byte damage_val{(uint8_t)(1U << (damage_bit & 7))};\r\n```\r\nAs otherwise only the lower nibble within the byte is damaged (see also #28951).",
      "commit_id" : "9494695a3d4448a400449b01d13a0763a83abbc9",
      "created_at" : "2023-11-28T01:41:50Z",
      "diff_hunk" : "@@ -0,0 +1,106 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    AEADChaCha20Poly1305 aead(key);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        // Mode:\n+        // - Bit 0: whether to use single-plain Encrypt/Decrypt; otherwise use a split at prefix.\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool use_splits = mode & 1;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> plain(length);\n+        for (auto& val : plain) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+        // Generate nonce\n+        AEADChaCha20Poly1305::Nonce96 nonce = {(uint32_t)rng(), rng()};\n+\n+        if (use_splits && length > 0) {\n+            size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+            aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        }\n+\n+        // Test Keystream output\n+        std::vector<std::byte> keystream(length);\n+        AEADChaCha20Poly1305 aead_for_ks(key);\n+        aead.Keystream(nonce, keystream);\n+        for (size_t i = 0; i < length; ++i) {\n+            assert((plain[i] ^ keystream[i]) == cipher[i]);\n+        }\n+\n+        std::vector<std::byte> decrypted_contents(length);\n+        bool ok{false};\n+\n+        // damage the key\n+        unsigned key_position = provider.ConsumeIntegralInRange<unsigned>(0, 31);\n+        std::byte damage_val{(uint8_t)(1U << (key_position & 3))};\n+        std::vector<std::byte> bad_key = key;\n+        bad_key[key_position] ^= damage_val;\n+\n+        AEADChaCha20Poly1305 bad_aead(bad_key);\n+        ok = bad_aead.Decrypt(cipher, aad, nonce, decrypted_contents);\n+        assert(!ok);\n+\n+        // Optionally damage 1 bit in either the cipher (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0, (cipher.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1406974138",
      "id" : 1406974138,
      "line" : 98,
      "node_id" : "PRRC_kwDOABII585T3Li6",
      "original_commit_id" : "48818c75e54e9db924ef30d76f6000c2bea22e6b",
      "original_line" : 86,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : 98,
      "pull_request_review_id" : 1751696681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406974138/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T01:43:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406974138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1407365065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1407365065"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks! done.",
      "commit_id" : "20f769a88bfc60dfec6e744554d05a7ec06e959c",
      "created_at" : "2023-11-28T08:05:35Z",
      "diff_hunk" : "@@ -0,0 +1,106 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    AEADChaCha20Poly1305 aead(key);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        // Mode:\n+        // - Bit 0: whether to use single-plain Encrypt/Decrypt; otherwise use a split at prefix.\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool use_splits = mode & 1;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> plain(length);\n+        for (auto& val : plain) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+        // Generate nonce\n+        AEADChaCha20Poly1305::Nonce96 nonce = {(uint32_t)rng(), rng()};\n+\n+        if (use_splits && length > 0) {\n+            size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+            aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        }\n+\n+        // Test Keystream output\n+        std::vector<std::byte> keystream(length);\n+        AEADChaCha20Poly1305 aead_for_ks(key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1407365065",
      "id" : 1407365065,
      "in_reply_to_id" : 1406951204,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585T4q_J",
      "original_commit_id" : "48818c75e54e9db924ef30d76f6000c2bea22e6b",
      "original_line" : 62,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1752272257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1407365065/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T08:05:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1407365065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1407365104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1407365104"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "true! done.",
      "commit_id" : "20f769a88bfc60dfec6e744554d05a7ec06e959c",
      "created_at" : "2023-11-28T08:05:38Z",
      "diff_hunk" : "@@ -0,0 +1,106 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n+\n+FUZZ_TARGET(crypto_aeadchacha20poly1305)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+\n+    auto key = provider.ConsumeBytes<std::byte>(32);\n+    key.resize(32);\n+    AEADChaCha20Poly1305 aead(key);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    LIMITED_WHILE(provider.ConsumeBool(), 10000)\n+    {\n+        // Mode:\n+        // - Bit 0: whether to use single-plain Encrypt/Decrypt; otherwise use a split at prefix.\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool use_splits = mode & 1;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> plain(length);\n+        for (auto& val : plain) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> cipher(length + AEADChaCha20Poly1305::EXPANSION);\n+        // Generate nonce\n+        AEADChaCha20Poly1305::Nonce96 nonce = {(uint32_t)rng(), rng()};\n+\n+        if (use_splits && length > 0) {\n+            size_t split_index = provider.ConsumeIntegralInRange<size_t>(1, length);\n+            aead.Encrypt(Span{plain}.first(split_index), Span{plain}.subspan(split_index), aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        }\n+\n+        // Test Keystream output\n+        std::vector<std::byte> keystream(length);\n+        AEADChaCha20Poly1305 aead_for_ks(key);\n+        aead.Keystream(nonce, keystream);\n+        for (size_t i = 0; i < length; ++i) {\n+            assert((plain[i] ^ keystream[i]) == cipher[i]);\n+        }\n+\n+        std::vector<std::byte> decrypted_contents(length);\n+        bool ok{false};\n+\n+        // damage the key\n+        unsigned key_position = provider.ConsumeIntegralInRange<unsigned>(0, 31);\n+        std::byte damage_val{(uint8_t)(1U << (key_position & 3))};\n+        std::vector<std::byte> bad_key = key;\n+        bad_key[key_position] ^= damage_val;\n+\n+        AEADChaCha20Poly1305 bad_aead(bad_key);\n+        ok = bad_aead.Decrypt(cipher, aad, nonce, decrypted_contents);\n+        assert(!ok);\n+\n+        // Optionally damage 1 bit in either the cipher (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0, (cipher.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28263#discussion_r1407365104",
      "id" : 1407365104,
      "in_reply_to_id" : 1406974138,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585T4q_w",
      "original_commit_id" : "48818c75e54e9db924ef30d76f6000c2bea22e6b",
      "original_line" : 86,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1752272328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28263",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1407365104/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-28T08:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1407365104",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   }
]
