[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28209).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/28209#pullrequestreview-1560871534), [dergoegge](https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663851387), [brunoerg](https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1664327227) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n",
      "created_at" : "2023-08-03T10:50:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663764798",
      "id" : 1663764798,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585jKwk-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663764798/reactions"
      },
      "updated_at" : "2023-12-31T15:19:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663764798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283055992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283055992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "not sure about adding test-only code to \"real\" code. What about moving this to the only fuzz test that needs it?",
      "commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "created_at" : "2023-08-03T11:21:03Z",
      "diff_hunk" : "@@ -92,6 +92,16 @@ class CBlockFileInfo\n         if (nTimeIn > nTimeLast)\n             nTimeLast = nTimeIn;\n     }\n+\n+    bool operator==(const CBlockFileInfo& b) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283055992",
      "id" : 1283055992,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MeeF4",
      "original_commit_id" : "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "original_line" : 96,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/chain.h",
      "position" : null,
      "pull_request_review_id" : 1560871534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283055992/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-03T11:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283055992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283056551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283056551"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: remove newline?",
      "commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "created_at" : "2023-08-03T11:21:38Z",
      "diff_hunk" : "@@ -0,0 +1,116 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <pow.h>\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283056551",
      "id" : 1283056551,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MeeOn",
      "original_commit_id" : "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "original_line" : 6,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1560871534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283056551/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-03T11:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283056551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283080177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080177"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sure",
      "commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "created_at" : "2023-08-03T11:44:44Z",
      "diff_hunk" : "@@ -92,6 +92,16 @@ class CBlockFileInfo\n         if (nTimeIn > nTimeLast)\n             nTimeLast = nTimeIn;\n     }\n+\n+    bool operator==(const CBlockFileInfo& b) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283080177",
      "id" : 1283080177,
      "in_reply_to_id" : 1283055992,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mej_x",
      "original_commit_id" : "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "original_line" : 96,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/chain.h",
      "position" : null,
      "pull_request_review_id" : 1560908036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080177/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-03T11:44:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283080569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, i forgot to push my last change, this include shouldn't be here (that's why i had separated it).",
      "commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "created_at" : "2023-08-03T11:45:10Z",
      "diff_hunk" : "@@ -0,0 +1,116 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <pow.h>\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283080569",
      "id" : 1283080569,
      "in_reply_to_id" : 1283056551,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MekF5",
      "original_commit_id" : "8f26ab29a944feedcb05deda7ab08fecdf5cdd91",
      "original_line" : 6,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1560908634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080569/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-03T11:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283080569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks, addressed your comments.",
      "created_at" : "2023-08-03T11:49:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663841536",
      "id" : 1663841536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585jLDUA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663841536/reactions"
      },
      "updated_at" : "2023-08-03T11:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663841536",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2023-08-03T11:57:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1663851387",
      "id" : 1663851387,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585jLFt7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663851387/reactions"
      },
      "updated_at" : "2023-08-03T11:57:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663851387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-08-03T16:58:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1664327227",
      "id" : 1664327227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585jM547",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664327227/reactions"
      },
      "updated_at" : "2023-08-03T16:58:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664327227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283499741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283499741"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 8a0cb8b2147e852ac80d2030057272bdb59a83f2: Instead of using `ConsumeDeserializable`, couldn't we have a function to create a `CBlockFileInfo`? E.g.:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/block_index.cpp b/src/test/fuzz/block_index.cpp\r\nindex b5b25fcbc7..528c2fae9f 100644\r\n--- a/src/test/fuzz/block_index.cpp\r\n+++ b/src/test/fuzz/block_index.cpp\r\n@@ -37,6 +37,19 @@ void init_block_index()\r\n     SelectParams(ChainType::MAIN);\r\n }\r\n \r\n+CBlockFileInfo CreateCBlockFileInfo(FuzzedDataProvider& fuzzed_data_provider)\r\n+{\r\n+    CBlockFileInfo block_file_info;\r\n+    block_file_info.nBlocks = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nSize = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nUndoSize = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nHeightFirst = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nHeightLast = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\r\n+    block_file_info.nTimeFirst = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\r\n+    block_file_info.nTimeLast = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\r\n+    return block_file_info;\r\n+}\r\n+\r\n FUZZ_TARGET(block_index, .init = init_block_index)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n@@ -53,12 +66,9 @@ FUZZ_TARGET(block_index, .init = init_block_index)\r\n     std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\r\n     files_info.reserve(files_count);\r\n     for (int i = 0; i < files_count; i++) {\r\n-        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\r\n-            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\r\n-            files_info.push_back({i, files.back().get()});\r\n-        } else {\r\n-            return;\r\n-        }\r\n+        auto file_info{CreateCBlockFileInfo(fuzzed_data_provider)};\r\n+        files.push_back(std::make_unique<CBlockFileInfo>(std::move(file_info)));\r\n+        files_info.push_back({i, files.back().get()});\r\n     }\r\n \r\n     // Generate a number of block headers to be stored in the index.\r\n```",
      "commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "created_at" : "2023-08-03T17:18:01Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1283499741",
      "id" : 1283499741,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII585MgKbd",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 56,
      "pull_request_review_id" : 1561543849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283499741/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-03T17:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1283499741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284198100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284198100"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good call, i've adopted this approach for both the `CBlockFile`s and the `CBlockHeader`s.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T09:25:22Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284198100",
      "id" : 1284198100,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mi07U",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562512011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284198100/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T09:25:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284198100",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284353466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284353466"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the benefit? Looks like this is more code, easier to break (when for example a type width changes, or when a new field is added), as well as more wasteful (the early return is now removed and the fuzz engine will do a full run even if the fuzz input buffer is the empty string)?",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T12:18:15Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284353466",
      "id" : 1284353466,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mja26",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562761528,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284353466/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T12:18:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284353466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284361515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284361515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "My thinking was that it would actually be more efficient to not rely on `ConsumeDeserializable` which needs to first guess the length of the byte vector to be consumed:\r\nhttps://github.com/bitcoin/bitcoin/blob/a4ca4975880c4f870c6047065c70610af2529e74/src/test/fuzz/util.h#L95-L107",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T12:27:23Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284361515",
      "id" : 1284361515,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mjc0r",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562774300,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284361515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T12:27:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284361515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284364488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284364488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, that could be. Maybe a benchmark can be done to see if it helps or hurts?\r\n\r\nIn any case, if you keep it, my preference would be to use `decltype()` to derive the type of the fields and not hardcode them.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T12:30:46Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284364488",
      "id" : 1284364488,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MjdjI",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562779233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284364488/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T12:30:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284364488",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284376542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284376542"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "+1 \r\n\r\n> My thinking was that it would actually be more efficient to not rely on ConsumeDeserializable which needs to first guess the length of the byte vector to be consumed\r\n\r\nMy initial thought was it facilitates especially for cases that `files_count`/`files_count` is closer to their max possible value.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T12:44:25Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284376542",
      "id" : 1284376542,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mjgfe",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562799161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284376542/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T12:44:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284376542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284450094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284450094"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Alright, in order to benchmark which approach was most efficient i ran both versions with `-runs=100000`Â on an empty folder 3 times and compared the average coverage and runtime.\r\n\r\n- `ConsumeIntegral`-based: runtime of 75 seconds for a coverage of `1565` for all 3 runs.\r\n- `ConsumeDeserializable`-based: average runtime of 12 seconds for a coverage of `1560`.\r\n\r\nGiven the burst in coverage at the start of the run, the clear difference in runtime and the small difference in coverage i figured i'd need better measurement. I ran both on an empty folders with `-runs=1000000`:\r\n- `ConsumeIntegral`-based: coverage of `2230` after 1M runs (runtime: 2872 seconds).\r\n- `ConsumeDeserializable`-based: coverage of `2167` after 1M runs (runtime: 1614 seconds).\r\n\r\nMy interpretation of these results is that the `ConsumeDeserializable`-based target runs faster because of the invalid deserializations, that both targets quickly get to some basic coverage, but that the `ConsumeIntegral`-based one eventually gets to produce more interesting coverage. In my opinion i should therefore keep the `ConsumeIntegral`-based version even though its coverage/second is lower.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T13:49:27Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284450094",
      "id" : 1284450094,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mjycu",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562914740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284450094/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T13:49:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284450094",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284458654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284458654"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yea, `ConsumeDeserializable` is faster because it will 'return' every time it gets an invalid deserialization. The coverage is similar but I believe that it's expected because the difference between both approaches will only reflect on the size of blocks and files.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T13:57:12Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284458654",
      "id" : 1284458654,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mj0ie",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562929155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284458654/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T13:57:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284458654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284461013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284461013"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You could also test both approaches by putting an assert right after the loop, something like: `assert(files.size() > 50)`. I believe that the `ConsumeDeserializable`-based will take much more time to reach it.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T13:59:16Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284461013",
      "id" : 1284461013,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mj1HV",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562933535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284461013/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T13:59:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284461013",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284468527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284468527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> My interpretation of these results is\r\n\r\nI don't think you can use coverage as a metric when comparing two different code bases. The version that has higher coverage is also the version that has more code in the fuzz target, which is also counted toward \"coverage\".",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T14:04:47Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284468527",
      "id" : 1284468527,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mj28v",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562945396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284468527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T14:04:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284468527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284480443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284480443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Trying to maximum the coverage in 100_000 runs for each target i managed to:\r\n- achieve `2099` of coverage with the `ConsumeDeserializable`-based target using `-max_len=10000 -len_control=1 -mutate_depth=3` (in 305 seconds).\r\n- achieve `2088` of coverage with the `ConsumeIntegral`-based target using -max_len=8000 -len_control=0 -use_value_profile=1 -mutate_depth=1` (in 252 seconds).\r\n\r\n------\r\n\r\n> I don't think you can use coverage as a metric\r\n\r\nOh, right.. I had overlooked this. However the difference should be minimal, there is only 8 more lines for the `ConsumeIntegral` version. So i think it's still interesting to compare.\r\n\r\nI'm quite surprised by how well the  `ConsumeDeserializable`-based compares though.. I'm starting to lean toward reverting to this version.\r\n\r\nDo you have a suggestion of a better metric? I feel like introducing a crash wouldn't be interesting given the low coverage of the target.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T14:15:26Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284480443",
      "id" : 1284480443,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mj527",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1562964970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284480443/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T14:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284480443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284506824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284506824"
         }
      },
      "author_association" : "MEMBER",
      "body" : ">  I'm starting to lean toward reverting to this version.\r\n\r\nThere's also the possibility to add back the early return to the `ConsumeIntegral` one. (I haven't looked at the fuzz target to see if early return makes more or less sense)\r\n\r\n> I feel like introducing a crash wouldn't be interesting given the low coverage of the target.\r\n\r\nyeah, I guess it is hard to find a meaningful crash. I'd pick a line of code that is usually reached the \"last\" by coverage or is deeply nested.",
      "commit_id" : "c3f6289948d3b71fd1398a5c0b3e291966707af6",
      "created_at" : "2023-08-04T14:35:21Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1284506824",
      "id" : 1284506824,
      "in_reply_to_id" : 1283499741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MkATI",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1563009595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284506824/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T14:35:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284506824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1294444800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294444800"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've reverted back to using `ConsumeDeserializable`. I had the same intuition as @brunoerg but from my testing it's not clear that the custom way is more efficient (in terms of coverage per unit of time). Absent this, it makes sense to not introduce more code and simply use the existing utilities.",
      "commit_id" : "7f6ff2f2dc2cc8e0aca69a10bdbc2607bcc2d261",
      "created_at" : "2023-08-15T10:49:05Z",
      "diff_hunk" : "@@ -0,0 +1,127 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+util::SignalInterrupt g_interrupt;\n+\n+//! Compare two block files.\n+bool BlockFileEq(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = CBlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1294444800",
      "id" : 1294444800,
      "in_reply_to_id" : 1283499741,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585NJ6kA",
      "original_commit_id" : "8a0cb8b2147e852ac80d2030057272bdb59a83f2",
      "original_line" : 67,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 67,
      "pull_request_review_id" : 1578335372,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294444800/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-15T10:49:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294444800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased on master to fix the macOS CI.",
      "created_at" : "2023-08-17T09:11:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1681920298",
      "id" : 1681920298,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585kQBEq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1681920298/reactions"
      },
      "updated_at" : "2023-08-17T09:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1681920298",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Needs rebase if still relevant",
      "created_at" : "2023-09-06T05:58:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1707716605",
      "id" : 1707716605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585lya_9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707716605/reactions"
      },
      "updated_at" : "2023-09-06T05:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707716605",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok @DrahtBot. Done.",
      "created_at" : "2023-09-07T10:46:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1709930259",
      "id" : 1709930259,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585l63cT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1709930259/reactions"
      },
      "updated_at" : "2023-09-07T10:46:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1709930259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, please hold up merge here. The `memory_only` option of the `DbWrapper` appears to leak memory. Another target i'm working on locally (for the whole blockman) made this more apparent but you can notice it here as well: the rss keeps increasing until OOM. I've reduced this to a single target only creating an in-memory `BlockTreeDb` and nothing else; rss steadily increases across runs.",
      "created_at" : "2023-09-27T15:06:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1737589204",
      "id" : 1737589204,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585nkYHU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1737589204/reactions"
      },
      "updated_at" : "2023-09-27T15:06:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1737589204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added a `MakeNoLogFileContext` at init to avoid the ever-increasing memory usage due to log messages.",
      "created_at" : "2023-12-31T15:34:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#issuecomment-1872976767",
      "id" : 1872976767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28209",
      "node_id" : "IC_kwDOABII585vo1t_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872976767/reactions"
      },
      "updated_at" : "2023-12-31T15:34:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872976767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1440838577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440838577"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Couldn't we fuzz `ReadFlag` with a name we didn't previously write?",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-03T19:17:49Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1440838577",
      "id" : 1440838577,
      "line" : 121,
      "node_id" : "PRRC_kwDOABII585V4XOx",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 121,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 121,
      "pull_request_review_id" : 1802937872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440838577/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-03T19:18:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1440838577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441757749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441757749"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit (feel free to ignore):\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/block_index.cpp b/src/test/fuzz/block_index.cpp\r\nindex 7885eda747..3f2a55f310 100644\r\n--- a/src/test/fuzz/block_index.cpp\r\n+++ b/src/test/fuzz/block_index.cpp\r\n@@ -54,11 +54,6 @@ void init_block_index()\r\n FUZZ_TARGET(block_index, .init = init_block_index)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n-    auto block_index = kernel::BlockTreeDB(DBParams{\r\n-        .path = \"\", // Memory only.\r\n-        .cache_bytes = 1 << 20, // 1MB.\r\n-        .memory_only = true,\r\n-    });\r\n \r\n     // Generate a number of block files to be stored in the index.\r\n     int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\r\n@@ -75,6 +70,12 @@ FUZZ_TARGET(block_index, .init = init_block_index)\r\n         }\r\n     }\r\n \r\n+    auto block_index = kernel::BlockTreeDB(DBParams{\r\n+        .path = \"\", // Memory only.\r\n+        .cache_bytes = 1 << 20, // 1MB.\r\n+        .memory_only = true,\r\n+    });\r\n+\r\n     // Generate a number of block headers to be stored in the index.\r\n     int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\r\n     std::vector<std::unique_ptr<CBlockIndex>> blocks;\r\n```\r\n\r\nwe could initialize the DB after having the files.",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-04T13:38:00Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441757749",
      "id" : 1441757749,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585V73o1",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 57,
      "pull_request_review_id" : 1804173544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441757749/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-04T13:38:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441757749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441762014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441762014"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit (feel free to ignore):\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/block_index.cpp b/src/test/fuzz/block_index.cpp\r\nindex 7885eda747..bc073e4930 100644\r\n--- a/src/test/fuzz/block_index.cpp\r\n+++ b/src/test/fuzz/block_index.cpp\r\n@@ -93,8 +93,8 @@ FUZZ_TARGET(block_index, .init = init_block_index)\r\n \r\n     // We should be able to read every block file info we stored. Its value should correspond to\r\n     // what we stored above.\r\n-    CBlockFileInfo info;\r\n     for (const auto& [n, file_info]: files_info) {\r\n+        CBlockFileInfo info;\r\n         assert(block_index.ReadBlockFileInfo(n, info));\r\n         assert(info == *file_info);\r\n     }\r\n```",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-04T13:42:21Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441762014",
      "id" : 1441762014,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII585V74re",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 96,
      "pull_request_review_id" : 1804180509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441762014/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-04T13:42:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441762014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441791286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441791286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why? (EDIT: giving a longer answer: why instantiating a new `CBlockFileInfo` for each iteration instead of just reusing the same variable?)",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-04T14:10:26Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441791286",
      "id" : 1441791286,
      "in_reply_to_id" : 1441762014,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII585V7_02",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 96,
      "pull_request_review_id" : 1804228745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441791286/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-04T14:11:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441791286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441828968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441828968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Heh, no that's a good point. There is a bunch happening in CDBWrapper's constructor so i'm sure this would reduce the time we spend on uninteresting inputs.",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-04T14:31:35Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441828968",
      "id" : 1441828968,
      "in_reply_to_id" : 1441757749,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585V8JBo",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 57,
      "pull_request_review_id" : 1804285116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441828968/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-04T14:31:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441828968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441845813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441845813"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nevermind, my bad. It's better to reuse the same variable.",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-04T14:46:25Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441845813",
      "id" : 1441845813,
      "in_reply_to_id" : 1441762014,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII585V8NI1",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 96,
      "pull_request_review_id" : 1804312852,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441845813/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-04T14:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441845813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441867954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441867954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, looks like i'm wrong. It doesn't make any difference in runtime when running my target over my local corpus. I'll hold off making this change then.",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-04T15:05:32Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1441867954",
      "id" : 1441867954,
      "in_reply_to_id" : 1441757749,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585V8Siy",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 57,
      "pull_request_review_id" : 1804349130,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441867954/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-04T15:05:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1441867954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1443317367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443317367"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good suggestion, but could be done in a follow-up I guess.",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-05T19:55:07Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1443317367",
      "id" : 1443317367,
      "in_reply_to_id" : 1440838577,
      "line" : 121,
      "node_id" : "PRRC_kwDOABII585WB0Z3",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 121,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 121,
      "pull_request_review_id" : 1806749752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443317367/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T19:58:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443317367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446090797"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446090797"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I think constants are not supposed to be prefixed with `g_`\r\n\r\n```suggestion\r\nconst uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\r\nconst uint32_t g_bits{0x1d00ffff};\r\n```\r\n\r\nI think you could also just use the genesis block (`Params().GenesisBlock()`) for these two values.",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-09T13:29:23Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446090797",
      "id" : 1446090797,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII585WMZgt",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : 20,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 21,
      "pull_request_review_id" : 1811154144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446090797/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 20,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T13:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446090797",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446096447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446096447"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    const std::string flag_name = fuzzed_data_provider.ConsumeRandomLengthString(100);\r\n```\r\n\r\n`ConsumeRandomLengthString`: \"Designed to be more stable with respect to a fuzzer inserting characters than just picking a random length and then consuming that many bytes with |ConsumeBytes|.\"",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-09T13:35:19Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446096447",
      "id" : 1446096447,
      "line" : 118,
      "node_id" : "PRRC_kwDOABII585WMa4_",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 118,
      "original_position" : 118,
      "original_start_line" : 117,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 118,
      "pull_request_review_id" : 1811154144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446096447/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 117,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T13:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446096447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446101167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446101167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can we get rid of `g_setup` if we initialize a new `SignalInterrupt` here each interation?",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-09T13:40:09Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(flag_value);\n+    block_index.WriteFlag(flag_name, false);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(!flag_value);\n+\n+    // We should be able to load everything we've previously stored. Note to assert on the\n+    // return value we need to make sure all blocks pass the pow check.\n+    const auto params{Params().GetConsensus()};\n+    const auto inserter = [&](const uint256&) {\n+        return blocks.back().get();\n+    };\n+    WITH_LOCK(::cs_main, assert(block_index.LoadBlockIndexGuts(params, inserter, g_setup->m_interrupt)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446101167",
      "id" : 1446101167,
      "line" : 133,
      "node_id" : "PRRC_kwDOABII585WMcCv",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 133,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 133,
      "pull_request_review_id" : 1811154144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446101167/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T13:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446101167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446286078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446286078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You need it for the logs iirc.",
      "commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "created_at" : "2024-01-09T16:01:19Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);\n+    bool flag_value;\n+    block_index.WriteFlag(flag_name, true);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(flag_value);\n+    block_index.WriteFlag(flag_name, false);\n+    block_index.ReadFlag(flag_name, flag_value);\n+    assert(!flag_value);\n+\n+    // We should be able to load everything we've previously stored. Note to assert on the\n+    // return value we need to make sure all blocks pass the pow check.\n+    const auto params{Params().GetConsensus()};\n+    const auto inserter = [&](const uint256&) {\n+        return blocks.back().get();\n+    };\n+    WITH_LOCK(::cs_main, assert(block_index.LoadBlockIndexGuts(params, inserter, g_setup->m_interrupt)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1446286078",
      "id" : 1446286078,
      "in_reply_to_id" : 1446101167,
      "line" : 133,
      "node_id" : "PRRC_kwDOABII585WNJL-",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 133,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : 133,
      "pull_request_review_id" : 1811476916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446286078/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T16:01:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446286078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1451496426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> nit: I think constants are not supposed to be prefixed with g_\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3ba8de1b704d590fa4e1975620bd21d830d11666/doc/developer-notes.md?plain=1#L87-L93\r\n\r\n> I think you could also just use the genesis block (Params().GenesisBlock()) for these two values.\r\n\r\nDone.",
      "commit_id" : "ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "created_at" : "2024-01-13T12:48:42Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1451496426",
      "id" : 1451496426,
      "in_reply_to_id" : 1446090797,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WhBPq",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : 20,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1819998806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-13T12:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1451496443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "ffee43efe845cbbfbf16d5e61a1d541cb316ef56",
      "created_at" : "2024-01-13T12:48:46Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+namespace {\n+\n+const BasicTestingSetup* g_setup;\n+\n+// Hardcoded block hash and nBits to make sure the blocks we store pass the pow check.\n+const uint256 g_block_hash{uint256S(\"000000002c05cc2e78923c34df87fd108b22221ac6076c18f3ade378a4d915e9\")};\n+uint32_t g_bits{0x1d00ffff};\n+\n+bool operator==(const CBlockFileInfo& a, const CBlockFileInfo& b)\n+{\n+    return a.nBlocks == b.nBlocks &&\n+        a.nSize == b.nSize &&\n+        a.nUndoSize == b.nUndoSize &&\n+        a.nHeightFirst == b.nHeightFirst &&\n+        a.nHeightLast == b.nHeightLast &&\n+        a.nTimeFirst == b.nTimeFirst &&\n+        a.nTimeLast == b.nTimeLast;\n+}\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = g_block_hash;\n+    header.hashMerkleRoot = g_block_hash;\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = g_bits;\n+    header.nNonce = provider.ConsumeIntegral<decltype(header.nNonce)>();\n+    return header;\n+}\n+\n+} // namespace\n+\n+void init_block_index()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>(ChainType::MAIN);\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index, .init = init_block_index)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    auto block_index = kernel::BlockTreeDB(DBParams{\n+        .path = \"\", // Memory only.\n+        .cache_bytes = 1 << 20, // 1MB.\n+        .memory_only = true,\n+    });\n+\n+    // Generate a number of block files to be stored in the index.\n+    int files_count = fuzzed_data_provider.ConsumeIntegralInRange(1, 100);\n+    std::vector<std::unique_ptr<CBlockFileInfo>> files;\n+    files.reserve(files_count);\n+    std::vector<std::pair<int, const CBlockFileInfo*>> files_info;\n+    files_info.reserve(files_count);\n+    for (int i = 0; i < files_count; i++) {\n+        if (auto file_info = ConsumeDeserializable<CBlockFileInfo>(fuzzed_data_provider)) {\n+            files.push_back(std::make_unique<CBlockFileInfo>(std::move(*file_info)));\n+            files_info.emplace_back(i, files.back().get());\n+        } else {\n+            return;\n+        }\n+    }\n+\n+    // Generate a number of block headers to be stored in the index.\n+    int blocks_count = fuzzed_data_provider.ConsumeIntegralInRange(files_count * 10, files_count * 100);\n+    std::vector<std::unique_ptr<CBlockIndex>> blocks;\n+    blocks.reserve(blocks_count);\n+    std::vector<const CBlockIndex*> blocks_info;\n+    blocks_info.reserve(blocks_count);\n+    for (int i = 0; i < blocks_count; i++) {\n+        CBlockHeader header{ConsumeBlockHeader(fuzzed_data_provider)};\n+        blocks.push_back(std::make_unique<CBlockIndex>(std::move(header)));\n+        blocks.back()->phashBlock = &g_block_hash;\n+        blocks_info.push_back(blocks.back().get());\n+    }\n+\n+    // Store these files and blocks in the block index. It should not fail.\n+    assert(block_index.WriteBatchSync(files_info, files_count - 1, blocks_info));\n+\n+    // We should be able to read every block file info we stored. Its value should correspond to\n+    // what we stored above.\n+    CBlockFileInfo info;\n+    for (const auto& [n, file_info]: files_info) {\n+        assert(block_index.ReadBlockFileInfo(n, info));\n+        assert(info == *file_info);\n+    }\n+\n+    // We should be able to read the last block file number. Its value should be consistent.\n+    int last_block_file;\n+    assert(block_index.ReadLastBlockFile(last_block_file));\n+    assert(last_block_file == files_count - 1);\n+\n+    // We should be able to flip and read the reindexing flag.\n+    bool reindexing;\n+    block_index.WriteReindexing(true);\n+    block_index.ReadReindexing(reindexing);\n+    assert(reindexing);\n+    block_index.WriteReindexing(false);\n+    block_index.ReadReindexing(reindexing);\n+    assert(!reindexing);\n+\n+    // We should be able to set and read the value of any random flag.\n+    int flag_size = fuzzed_data_provider.ConsumeIntegralInRange(0, 100);\n+    const std::string flag_name = fuzzed_data_provider.ConsumeBytesAsString(flag_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28209#discussion_r1451496443",
      "id" : 1451496443,
      "in_reply_to_id" : 1446096447,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WhBP7",
      "original_commit_id" : "8083aa21a699cb240a11741be8ba5cfeeb58ee8b",
      "original_line" : 118,
      "original_position" : 118,
      "original_start_line" : 117,
      "path" : "src/test/fuzz/block_index.cpp",
      "position" : null,
      "pull_request_review_id" : 1819998808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28209",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496443/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-13T12:48:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1451496443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   }
]
