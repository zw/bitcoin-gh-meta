[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28236).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n* [#26606](https://github.com/bitcoin/bitcoin/pull/26606) (wallet: Implement independent BDB parser by achow101)\n* [#26596](https://github.com/bitcoin/bitcoin/pull/26596) (wallet: Migrate legacy wallets to descriptor wallets without requiring BDB by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-08-07T21:25:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1668596559",
      "id" : 1668596559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
      "node_id" : "IC_kwDOABII585jdMNP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1668596559/reactions"
      },
      "updated_at" : "2023-11-02T18:52:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1668596559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286425941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286425941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that `CreateSyncedWallet` will call `SetupDescriptorScriptPubKeyMans()` which internally will make a seed.\r\n```cpp\r\nvoid CWallet::SetupDescriptorScriptPubKeyMans()\r\n{\r\n    AssertLockHeld(cs_wallet);\r\n\r\n    if (!IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\r\n        // Make a seed\r\n        CKey seed_key;\r\n        seed_key.MakeNewKey(true);\r\n        CPubKey seed = seed_key.GetPubKey();\r\n        assert(seed_key.VerifyPubKey(seed));\r\n\r\n        // Get the extended key\r\n        CExtKey master_key;\r\n        master_key.SetSeed(seed_key);\r\n\r\n        SetupDescriptorScriptPubKeyMans(master_key);\r\n    }\r\n```\r\n\r\nNot sure, but wouldn't it be non-deterministic? A solution would be to have a fuzz version of `CreateSyncedWallet` which calls `SetupDescriptorScriptPubKeyMans` passing a key that we created using buf.",
      "commit_id" : "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "created_at" : "2023-08-07T22:17:29Z",
      "diff_hunk" : "@@ -0,0 +1,254 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet { \r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet`Â each time and deletes \r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton {\r\n+public:\r\n+    static WalletSingleton& GetInstance() {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton() {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton() {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet() {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286425941",
      "id" : 1286425941,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585MrU1V",
      "original_commit_id" : "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "original_line" : 65,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/spend.cpp",
      "position" : 65,
      "pull_request_review_id" : 1566215643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286425941/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-07T22:17:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286425941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286426350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286426350"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "s/chose/choose",
      "commit_id" : "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "created_at" : "2023-08-07T22:18:17Z",
      "diff_hunk" : "@@ -0,0 +1,254 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet { \r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet`Â each time and deletes \r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton {\r\n+public:\r\n+    static WalletSingleton& GetInstance() {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton() {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton() {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet() {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins) \r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+    \r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if(fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for(int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient. \r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*scriptPubKey=*/ConsumeScript(fuzzed_data_provider),\r\n+                                        /*nAmount=*/ConsumeMoney(fuzzed_data_provider), \r\n+                                        /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to chose one of the three values.\r",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286426350",
      "id" : 1286426350,
      "line" : 156,
      "node_id" : "PRRC_kwDOABII585MrU7u",
      "original_commit_id" : "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "original_line" : 156,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/spend.cpp",
      "position" : 156,
      "pull_request_review_id" : 1566216191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286426350/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-07T22:18:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286426350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286427767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286427767"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think you could keep same pattern as you had previously:\r\n```cpp\r\nstd::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\nint change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n```\r\n\r\ninstead of \r\n```cpp\r\nint random_positions[3] = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, mtx.vout.size()), fuzzed_data_provider.ConsumeIntegral<int>()};\r\nint change_pos = fuzzed_data_provider.PickValueInArray(random_positions);\r\n```",
      "commit_id" : "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "created_at" : "2023-08-07T22:20:56Z",
      "diff_hunk" : "@@ -0,0 +1,254 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet { \r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet`Â each time and deletes \r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton {\r\n+public:\r\n+    static WalletSingleton& GetInstance() {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton() {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton() {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet() {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins) \r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+    \r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if(fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for(int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient. \r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*scriptPubKey=*/ConsumeScript(fuzzed_data_provider),\r\n+                                        /*nAmount=*/ConsumeMoney(fuzzed_data_provider), \r\n+                                        /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to chose one of the three values.\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+\r\n+                auto res = CreateTransaction(wallet, recipients, change_pos, coin_control, /*sign=*/fuzzed_data_provider.ConsumeBool());\r\n+                if (!res) return;\r\n+                mtx = CMutableTransaction(*(res->tx));\r\n+            },\r\n+            [&] {\r\n+                // Occasionally, creating a random Transaction for Fuzzing.\r\n+                auto new_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\r\n+                if (!new_mtx) return;\r\n+                mtx = *new_mtx;\r\n+            },\r\n+            [&] {\r\n+                LOCK(wallet.cs_wallet);\r\n+                if (fuzzed_data_provider.ConsumeBool()) {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet);\r\n+                } else {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet, &coin_control);\r\n+                }\r\n+            },\r\n+            [&] {\r\n+                const CTxOut tx_out{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)}; \r\n+                CalculateMaximumSignedInputSize(tx_out, &wallet, &coin_control);\r\n+            },\r\n+            [&] {\r\n+                CAmount fee;\r\n+                int random_positions[3] = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, mtx.vout.size()), fuzzed_data_provider.ConsumeIntegral<int>()};\r",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286427767",
      "id" : 1286427767,
      "line" : 184,
      "node_id" : "PRRC_kwDOABII585MrVR3",
      "original_commit_id" : "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "original_line" : 184,
      "original_position" : 184,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/spend.cpp",
      "position" : 184,
      "pull_request_review_id" : 1566218244,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286427767/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-07T22:20:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286427767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "From lint:\r\n```diff\r\n+ test/lint/all-lint.py\r\nThis diff appears to have added new lines with trailing whitespace.\r\nThe following changes were suspected:\r\n\r\ndiff --git a/src/wallet/test/fuzz/spend.cpp b/src/wallet/test/fuzz/spend.cpp\r\n@@ -0,0 +1,254 @@\r\n+namespace wallet { \r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * of creating a new `Descriptor Wallet` each time and deletes \r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins) \r\n+    \r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient. \r\n+                                        /*nAmount=*/ConsumeMoney(fuzzed_data_provider), \r\n+                const CTxOut tx_out{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)}; \r\n+    \r\n+                // Taking a random sub-sequence from available coins \r\n+}   \r\nSuccess: no issues found in 269 source files\r\n^---- failure generated from lint-whitespace.py\r\n```",
      "created_at" : "2023-08-08T00:48:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1668752812",
      "id" : 1668752812,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
      "node_id" : "IC_kwDOABII585jdyWs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1668752812/reactions"
      },
      "updated_at" : "2023-08-08T00:48:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1668752812",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, @brunoerg for your reviews! In the recent push, I've addressed most of your reviews.\r\n\r\n- `clang-format` to fix the lint's issue.\r\n- Changed `PickValueFromArray` to the `PickValue` approach.\r\n- Fixed one grammar mistake.\r\n\r\nThis [comment](https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286425941) is really interesting, but I'm not sure whether the `non-determinism` in this case might pose a significant issue or not.\r\nSo, I'll wait for more people to give their thoughts on this and we can write a new `CreateSyncedWallet` specific for Fuzzing purposes if felt necessary.\r\n",
      "created_at" : "2023-08-10T20:15:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1673851694",
      "id" : 1673851694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
      "node_id" : "IC_kwDOABII585jxPMu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673851694/reactions"
      },
      "updated_at" : "2023-08-10T23:30:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673851694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/76209654?v=4",
         "events_url" : "https://api.github.com/users/Ayush170-Future/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Ayush170-Future/followers",
         "following_url" : "https://api.github.com/users/Ayush170-Future/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Ayush170-Future/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Ayush170-Future",
         "id" : 76209654,
         "login" : "Ayush170-Future",
         "node_id" : "MDQ6VXNlcjc2MjA5NjU0",
         "organizations_url" : "https://api.github.com/users/Ayush170-Future/orgs",
         "received_events_url" : "https://api.github.com/users/Ayush170-Future/received_events",
         "repos_url" : "https://api.github.com/users/Ayush170-Future/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Ayush170-Future/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Ayush170-Future/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Ayush170-Future"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The `fuzzer` logs are unclear, I'm not sure why it failed suddenly. Maybe some issue with the Fuzzer again?",
      "created_at" : "2023-11-02T18:52:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1791356580",
      "id" : 1791356580,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
      "node_id" : "IC_kwDOABII585qxe6k",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1791356580/reactions"
      },
      "updated_at" : "2023-11-02T18:52:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1791356580",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/76209654?v=4",
         "events_url" : "https://api.github.com/users/Ayush170-Future/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Ayush170-Future/followers",
         "following_url" : "https://api.github.com/users/Ayush170-Future/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Ayush170-Future/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Ayush170-Future",
         "id" : 76209654,
         "login" : "Ayush170-Future",
         "node_id" : "MDQ6VXNlcjc2MjA5NjU0",
         "organizations_url" : "https://api.github.com/users/Ayush170-Future/orgs",
         "received_events_url" : "https://api.github.com/users/Ayush170-Future/received_events",
         "repos_url" : "https://api.github.com/users/Ayush170-Future/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Ayush170-Future/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Ayush170-Future/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Ayush170-Future"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "You'll need to rebase on current master in any case",
      "created_at" : "2023-11-02T19:02:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1791381061",
      "id" : 1791381061,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
      "node_id" : "IC_kwDOABII585qxk5F",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1791381061/reactions"
      },
      "updated_at" : "2023-11-02T19:02:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1791381061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "- Force-pushed rebasing on the current master branch.\r\n\r\nPS - There is one change in `CRecipient` that I didn't know about. Will update this PR against that change soon!",
      "created_at" : "2023-11-04T17:13:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1793499068",
      "id" : 1793499068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
      "node_id" : "IC_kwDOABII585q5p-8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793499068/reactions"
      },
      "updated_at" : "2023-11-04T17:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793499068",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/76209654?v=4",
         "events_url" : "https://api.github.com/users/Ayush170-Future/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Ayush170-Future/followers",
         "following_url" : "https://api.github.com/users/Ayush170-Future/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Ayush170-Future/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Ayush170-Future",
         "id" : 76209654,
         "login" : "Ayush170-Future",
         "node_id" : "MDQ6VXNlcjc2MjA5NjU0",
         "organizations_url" : "https://api.github.com/users/Ayush170-Future/orgs",
         "received_events_url" : "https://api.github.com/users/Ayush170-Future/received_events",
         "repos_url" : "https://api.github.com/users/Ayush170-Future/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Ayush170-Future/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Ayush170-Future/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Ayush170-Future"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "- Force-pushed updating the `CRecipient` wrt [28246](https://github.com/bitcoin/bitcoin/pull/28246).\r\n\r\nAll CI checks passed now ðª",
      "created_at" : "2023-11-04T19:03:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1793526872",
      "id" : 1793526872,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
      "node_id" : "IC_kwDOABII585q5wxY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793526872/reactions"
      },
      "updated_at" : "2023-11-04T19:03:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793526872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/76209654?v=4",
         "events_url" : "https://api.github.com/users/Ayush170-Future/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Ayush170-Future/followers",
         "following_url" : "https://api.github.com/users/Ayush170-Future/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Ayush170-Future/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Ayush170-Future",
         "id" : 76209654,
         "login" : "Ayush170-Future",
         "node_id" : "MDQ6VXNlcjc2MjA5NjU0",
         "organizations_url" : "https://api.github.com/users/Ayush170-Future/orgs",
         "received_events_url" : "https://api.github.com/users/Ayush170-Future/received_events",
         "repos_url" : "https://api.github.com/users/Ayush170-Future/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Ayush170-Future/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Ayush170-Future/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Ayush170-Future"
      }
   }
]
