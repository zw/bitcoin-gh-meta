[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28793).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [luke-jr](https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1802243288) |\n| Concept ACK | [brunoerg](https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1796514184), [Sjors](https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1882943986) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "created_at" : "2023-11-04T22:21:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1793568494",
      "id" : 1793568494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585q567u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793568494/reactions"
      },
      "updated_at" : "2024-01-09T12:00:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793568494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1382486877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382486877"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was never implemented, it should probably be dropped.",
      "commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "created_at" : "2023-11-05T00:42:46Z",
      "diff_hunk" : "@@ -0,0 +1,154 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")\n+    parser_decode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_decode.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout,\n+                               help=\"output text file; default is stdout\")\n+\n+    parser_diff = subparsers.add_parser(\"diff\", help=\"compute the difference between two asmap files\")\n+    parser_diff.add_argument('-i', '--ignore-unassigned', dest=\"ignore_unassigned\", default=False, action=\"store_true\",\n+                             help=\"ignore unassigned ranges in the first input (useful when second input is filled)\")\n+    parser_diff.add_argument('-u', '--unified', dest=\"unified\", default=False, action=\"store_true\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1382486877",
      "id" : 1382486877,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SZxNd",
      "original_commit_id" : "14ff89353f6fbaa879903f63c03d76003f1f80de",
      "original_line" : 113,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1713892958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382486877/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-05T00:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382486877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1383924519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1383924519"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "created_at" : "2023-11-06T20:13:13Z",
      "diff_hunk" : "@@ -0,0 +1,154 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")\n+    parser_decode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_decode.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout,\n+                               help=\"output text file; default is stdout\")\n+\n+    parser_diff = subparsers.add_parser(\"diff\", help=\"compute the difference between two asmap files\")\n+    parser_diff.add_argument('-i', '--ignore-unassigned', dest=\"ignore_unassigned\", default=False, action=\"store_true\",\n+                             help=\"ignore unassigned ranges in the first input (useful when second input is filled)\")\n+    parser_diff.add_argument('-u', '--unified', dest=\"unified\", default=False, action=\"store_true\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1383924519",
      "id" : 1383924519,
      "in_reply_to_id" : 1382486877,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SfQMn",
      "original_commit_id" : "14ff89353f6fbaa879903f63c03d76003f1f80de",
      "original_line" : 113,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1716162584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1383924519/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-06T20:13:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1383924519",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-11-06T21:23:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1796514184",
      "id" : 1796514184,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585rFKGI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1796514184/reactions"
      },
      "updated_at" : "2023-11-06T21:23:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1796514184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1384011959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384011959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In fde0193e687ad50a01a191e14fb6c052b3534bc1: perhaps using f-strings in all similar cases?",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-06T21:25:36Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1384011959",
      "id" : 1384011959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Sfli3",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1716269691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384011959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-06T21:25:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384011959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1384016700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384016700"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "from https://github.com/sipa/asmap/pull/9/\r\n\r\n```suggestion\r\n        print(\r\n            \"# %i%s IPv4 addresses changed; %i%s IPv6 addresses changed\"\r\n            % (\r\n                ipv4_changed,\r\n                \"\" if ipv4_changed == 0 else \" (2^%.2f)\" % math.log2(ipv4_changed),\r\n                ipv6_changed,\r\n                \"\" if ipv6_changed == 0 else \" (2^%.2f)\" % math.log2(ipv6_changed),\r\n            )\r\n        )\r\n```",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-06T21:29:47Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")\n+    parser_decode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_decode.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout,\n+                               help=\"output text file; default is stdout\")\n+\n+    parser_diff = subparsers.add_parser(\"diff\", help=\"compute the difference between two asmap files\")\n+    parser_diff.add_argument('-i', '--ignore-unassigned', dest=\"ignore_unassigned\", default=False, action=\"store_true\",\n+                             help=\"ignore unassigned ranges in the first input (useful when second input is filled)\")\n+    parser_diff.add_argument('infile1', type=argparse.FileType('rb'),\n+                             help=\"first file to compare (text or binary)\")\n+    parser_diff.add_argument('infile2', type=argparse.FileType('rb'),\n+                             help=\"second file to compare (text or binary)\")\n+\n+    args = parser.parse_args()\n+    if args.subcommand is None:\n+        parser.print_help()\n+    elif args.subcommand == \"encode\":\n+        state = load_file(args.infile)\n+        save_binary(args.outfile, state, fill=args.fill)\n+    elif args.subcommand == \"decode\":\n+        state = load_file(args.infile)\n+        save_text(args.outfile, state, fill=args.fill, overlapping=args.overlapping)\n+    elif args.subcommand == \"diff\":\n+        state1 = load_file(args.infile1)\n+        state2 = load_file(args.infile2)\n+        ipv4_changed = 0\n+        ipv6_changed = 0\n+        for prefix, old_asn, new_asn in state1.diff(state2):\n+            if args.ignore_unassigned and old_asn == 0:\n+                continue\n+            net = asmap.prefix_to_net(prefix)\n+            if isinstance(net, ipaddress.IPv4Network):\n+                ipv4_changed += 1 << (32 - net.prefixlen)\n+            elif isinstance(net, ipaddress.IPv6Network):\n+                ipv6_changed += 1 << (128 - net.prefixlen)\n+            if new_asn == 0:\n+                print(\"# %s was AS%i\" % (net, old_asn))\n+            elif old_asn == 0:\n+                print(\"%s AS%i # was unassigned\" % (net, new_asn))\n+            else:\n+                print(\"%s AS%i # was AS%i\" % (net, new_asn, old_asn))\n+        print(\"# %i (2^%f) IPv4 addresses changed; %i (2^%f) IPv6 addresses changed\" % (ipv4_changed, math.log2(ipv4_changed), ipv6_changed, math.log2(ipv6_changed)))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1384016700",
      "id" : 1384016700,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Sfms8",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 146,
      "original_position" : 146,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1716275437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384016700/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-06T21:29:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384016700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1384023104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384023104"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In fde0193e687ad50a01a191e14fb6c052b3534bc1: Is there any case of `state` not being `None` for any `load_file` usage?",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-06T21:35:27Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1384023104",
      "id" : 1384023104,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SfoRA",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1716283000,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384023104/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-06T21:35:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1384023104",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1385624420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1385624420"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not right now; we could drop that for now. I think the idea was supporting loading an asmap, and then also loading a patch file on top of it (which could be created by diffing).",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-07T21:46:23Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1385624420",
      "id" : 1385624420,
      "in_reply_to_id" : 1384023104,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SlvNk",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1718839156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1385624420/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-07T21:46:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1385624420",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1385624685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1385624685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: typo \"overallping\" (I love criticizing my own code...)",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-07T21:46:43Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1385624685",
      "id" : 1385624685,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SlvRt",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 104,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1718839619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1385624685/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-07T21:46:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1385624685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK\r\n\r\n>The motivation is that we should maintain the tooling for de- and encoding asmap files within the bitcoin core repository because it is not possible to use an asmap file that is not encoded.\r\n\r\nThat's not a reason. Ideally, the current repo should be split into several itself - but we have technical hurdles to get to that point. No reason to add more here \"just because\"",
      "created_at" : "2023-11-08T16:28:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1802243288",
      "id" : 1802243288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585rbAzY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1802243288/reactions"
      },
      "updated_at" : "2023-11-08T16:28:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1802243288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm fine with adding another contrib script here. But we could also make a new repo under bitcoin-core. Perhaps the choice depends on whether this tool is mainly useful for users, developers or maintainers ([bitcoin-core/bitcoin-maintainer-tools](https://github.com/bitcoin-core/bitcoin-maintainer-tools))?",
      "created_at" : "2023-11-09T01:19:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1803013981",
      "id" : 1803013981,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585rd89d",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1803013981/reactions"
      },
      "updated_at" : "2023-11-09T01:19:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1803013981",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> That's not a reason. Ideally, the current repo should be split into several itself - but we have technical hurdles to get to that point. No reason to add more here \"just because\"\r\n\r\n@luke-jr It is a reason, but you don't have to agree with it ;) If we want to move the `contrib` scripts outside of the bitcoin repo that sounds like a pretty big change that would require some conceptual review that is outside of the scope of the asmap project. If there is wider conceptual agreement on this I am open to adapt the approach. In the meantime I think this approach here is not a step in the wrong direction either way. Putting the `asmap-tool.py` in a separate repo would mean we would still have the `asmap.py` file duplicated and outdated in `contrib/seeds`. So we would need to fix that anyway even if we start out by putting `asmap-tool` somewhere else. After this change we can still move `contrib/asmap` and `contrib/seeds` into another repo when there is agreement on that.\r\n\r\n> Perhaps the choice depends on whether this tool is mainly useful for users, developers or maintainers ([bitcoin-core/bitcoin-maintainer-tools](https://github.com/bitcoin-core/bitcoin-maintainer-tools))?\r\n\r\n@Sjors All of the above. Users who want to build and use their own asmap file need to encode it for bitcoin core to accept it. Developers who want to test asmap functionality will need to encode and possibly also decode asmap files. Maintainers who build a release including an asmap file will need to encode the file as well if they want to reproduce the asmap file that will be embedded.",
      "created_at" : "2023-11-09T21:45:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1804732462",
      "id" : 1804732462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585rkggu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1804732462/reactions"
      },
      "updated_at" : "2023-11-09T21:45:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1804732462",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388646431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388646431"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-09T22:20:15Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388646431",
      "id" : 1388646431,
      "in_reply_to_id" : 1384011959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SxRAf",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1723599558,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388646431/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-09T22:20:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388646431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388646895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388646895"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Taken, but reformatted further with f-strings",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-09T22:20:48Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")\n+    parser_decode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_decode.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout,\n+                               help=\"output text file; default is stdout\")\n+\n+    parser_diff = subparsers.add_parser(\"diff\", help=\"compute the difference between two asmap files\")\n+    parser_diff.add_argument('-i', '--ignore-unassigned', dest=\"ignore_unassigned\", default=False, action=\"store_true\",\n+                             help=\"ignore unassigned ranges in the first input (useful when second input is filled)\")\n+    parser_diff.add_argument('infile1', type=argparse.FileType('rb'),\n+                             help=\"first file to compare (text or binary)\")\n+    parser_diff.add_argument('infile2', type=argparse.FileType('rb'),\n+                             help=\"second file to compare (text or binary)\")\n+\n+    args = parser.parse_args()\n+    if args.subcommand is None:\n+        parser.print_help()\n+    elif args.subcommand == \"encode\":\n+        state = load_file(args.infile)\n+        save_binary(args.outfile, state, fill=args.fill)\n+    elif args.subcommand == \"decode\":\n+        state = load_file(args.infile)\n+        save_text(args.outfile, state, fill=args.fill, overlapping=args.overlapping)\n+    elif args.subcommand == \"diff\":\n+        state1 = load_file(args.infile1)\n+        state2 = load_file(args.infile2)\n+        ipv4_changed = 0\n+        ipv6_changed = 0\n+        for prefix, old_asn, new_asn in state1.diff(state2):\n+            if args.ignore_unassigned and old_asn == 0:\n+                continue\n+            net = asmap.prefix_to_net(prefix)\n+            if isinstance(net, ipaddress.IPv4Network):\n+                ipv4_changed += 1 << (32 - net.prefixlen)\n+            elif isinstance(net, ipaddress.IPv6Network):\n+                ipv6_changed += 1 << (128 - net.prefixlen)\n+            if new_asn == 0:\n+                print(\"# %s was AS%i\" % (net, old_asn))\n+            elif old_asn == 0:\n+                print(\"%s AS%i # was unassigned\" % (net, new_asn))\n+            else:\n+                print(\"%s AS%i # was AS%i\" % (net, new_asn, old_asn))\n+        print(\"# %i (2^%f) IPv4 addresses changed; %i (2^%f) IPv6 addresses changed\" % (ipv4_changed, math.log2(ipv4_changed), ipv6_changed, math.log2(ipv6_changed)))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388646895",
      "id" : 1388646895,
      "in_reply_to_id" : 1384016700,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SxRHv",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 146,
      "original_position" : 146,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1723600567,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388646895/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-09T22:20:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388646895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388647127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388647127"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-09T22:21:06Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388647127",
      "id" : 1388647127,
      "in_reply_to_id" : 1385624685,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SxRLX",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 104,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1723600914,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388647127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-09T22:21:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388647127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388653133"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388653133"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Dropped it for now",
      "commit_id" : "423dbf872a4f3efdaca435fcb1b519ef74c9c51b",
      "created_at" : "2023-11-09T22:29:09Z",
      "diff_hunk" : "@@ -0,0 +1,152 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1388653133",
      "id" : 1388653133,
      "in_reply_to_id" : 1384023104,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SxSpN",
      "original_commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1723610518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388653133/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-09T22:29:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1388653133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-11-17T11:38:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1816228560",
      "id" : 1816228560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585sQXLQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1816228560/reactions"
      },
      "updated_at" : "2023-11-17T11:38:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1816228560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK on just adding these 150 lines of Python here, and lower the barrier for people to verify these things.\r\n\r\nThere's still some work in progress on fixing determinism, see https://github.com/fjahr/asmap-data/pull/6, but getting close!",
      "created_at" : "2024-01-09T12:00:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1882943986",
      "id" : 1882943986,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585wO3Hy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882943986/reactions"
      },
      "updated_at" : "2024-01-09T12:00:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882943986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> There's still some work in progress on fixing determinism, see [fjahr/asmap-data#6](https://github.com/fjahr/asmap-data/pull/6), but getting close!\r\n\r\nThis should be fixed now, the issue appears to have been the ordering of sets after combining/diffing them. The results are now explicitly sorted. On my system, I could replicate the issue by using different python versions and it was fixed with this change.\r\n\r\nCredits to @sipa for pointing me in the right direction.",
      "created_at" : "2024-01-13T14:58:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1890480213",
      "id" : 1890480213,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585wrnBV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890480213/reactions"
      },
      "updated_at" : "2024-01-13T14:58:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890480213",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   }
]
