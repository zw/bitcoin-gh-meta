[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28765).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [brunoerg](https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1790706698) |\n| Approach ACK | [mzumsande](https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1709034021) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21515](https://github.com/bitcoin/bitcoin/pull/21515) (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-11-01T09:06:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1788632672",
      "id" : 1788632672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28765",
      "node_id" : "IC_kwDOABII585qnF5g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1788632672/reactions"
      },
      "updated_at" : "2023-11-02T13:16:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1788632672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379299664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you explain a bit more why this is necessary, what is the lock order that would get violated if we did the locking later (just here, not necessarily in the comment)?",
      "commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "created_at" : "2023-11-01T20:27:58Z",
      "diff_hunk" : "@@ -5752,9 +5759,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379299664",
      "id" : 1379299664,
      "line" : 5762,
      "node_id" : "PRRC_kwDOABII585SNnFQ",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 5762,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T21:45:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: remove one `//`",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:35:43Z",
      "diff_hunk" : "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    for (int i = 1; i < 31; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    for (int j = 0; j < 100; ++j) {\n+        size_t total_fanouted = 0;\n+        auto wtxid = GetRandHash();\n+        for (int i = 1; i < 31; ++i) {\n+            total_fanouted += tracker.ShouldFanoutTo(wtxid, hasher, i,\n+                                               /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0);\n+        }\n+        BOOST_CHECK_EQUAL(total_fanouted, 3);\n+    }\n+\n+    // // Don't relay if there is sufficient non-reconciling peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306577",
      "id" : 1379306577,
      "line" : 144,
      "node_id" : "PRRC_kwDOABII585SNoxR",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 144,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 64,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I wonder if this algorithm (which took me a while to fully understand) could be simpler. \r\nE.g., if we used a sorted container for `best_peers` instead of a vector, inserted all of the peers, and then finally return the first `targets` elements of that container, I think we could do without the `try_fanout_candidate` lambda.\r\nOr would that be incorrect / less performant?\r\n\r\nI'm thinking of something like the following (just to show idea, I didn't test it):\r\n\r\n    struct ComparePairs {\r\n        bool operator()(const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) const {\r\n            return left.first > right.first;\r\n        }\r\n    };\r\n    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\r\n                                         bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\r\n    {\r\n        // The algorithm works as follows. We iterate through the peers (of a given direction)\r\n        // hashing them with the given wtxid, and sort them by this hash.\r\n        // We then consider top `limit` peers to be low-fanout flood targets.\r\n        // The randomness should be seeded with wtxid to return consistent results for every call.\r\n\r\n        double integer_part;\r\n        double fractional_peer = std::modf(limit, &integer_part);\r\n        const bool drop_peer_if_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\r\n        const size_t targets = drop_peer_if_extra ? size_t(integer_part): size_t(integer_part) + 1;\r\n\r\n        std::set<std::pair<uint64_t, NodeId>, ComparePairs> best_peers;\r\n\r\n        for (auto indexed_state : m_states) {\r\n            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\r\n            if (cur_state && cur_state->m_we_initiate == we_initiate) {\r\n                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\r\n                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\r\n            }\r\n        }\r\n\r\n        std::vector<NodeId> result;\r\n        auto it = best_peers.begin();\r\n        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\r\n            result.push_back(it->second);\r\n        }\r\n        return result;\r\n    }",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:36:07Z",
      "diff_hunk" : "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306928",
      "id" : 1379306928,
      "line" : 214,
      "node_id" : "PRRC_kwDOABII585SNo2w",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 214,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379309905"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do we have to first add and then (maybe) drop a peer here (instead of determining how many peers we want at the beginning, and then getting as many peers as we can up the desired number).",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:39:46Z",
      "diff_hunk" : "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                         bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // To handle fractional values, we add one peer optimistically and then probabilistically\n+        // drop it later.\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        const size_t targets = size_t(integer_part) + 1;\n+        const bool drop_peer_if_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379309905",
      "id" : 1379309905,
      "line" : 227,
      "node_id" : "PRRC_kwDOABII585SNplR",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 227,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 57,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379312851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "10% of 30 is integer, so maybe also add an example with a fraction. If we run it  often enough, we could probably assert that two values for `total_fanouted` are possible.",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:43:10Z",
      "diff_hunk" : "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379312851",
      "id" : 1379312851,
      "line" : 126,
      "node_id" : "PRRC_kwDOABII585SNqTT",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 126,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:46:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379313360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: remove empty line",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:43:47Z",
      "diff_hunk" : "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    for (int i = 1; i < 31; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379313360",
      "id" : 1379313360,
      "line" : 130,
      "node_id" : "PRRC_kwDOABII585SNqbQ",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 130,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379714659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379714659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I tried a whole bunch of combinations. Say, you move the `LOCK(m_peer_mutex);` to L5831, where `m_peer_map` is used.\r\n\r\nThen you get something [like this](https://cirrus-ci.com/task/6561881997967360?logs=ci#L3228) in Cirrus (not exactly!).\r\n\r\n```\r\n node0 2023-08-17T12:01:53.647510Z [msghand] [sync.cpp:97] [potential_deadlock_detected] POTENTIAL DEADLOCK DETECTED \r\n node0 2023-08-17T12:01:53.647516Z [msghand] [sync.cpp:98] [potential_deadlock_detected] Previous lock order was: \r\n node0 2023-08-17T12:01:53.647523Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'NetEventsInterface::g_msgproc_mutex' in net.cpp:2095 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647531Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'cs_main' in net_processing.cpp:5473 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647574Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  (2) 'm_peer_mutex' in net_processing.cpp:5686 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647581Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'tx_relay->m_tx_inventory_mutex' in net_processing.cpp:5688 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647587Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'tx_relay->m_bloom_filter_mutex' in net_processing.cpp:5768 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647593Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  (1) 'm_mempool.cs' in net_processing.cpp:5850 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647598Z [msghand] [sync.cpp:111] [potential_deadlock_detected] Current lock order is: \r\n node0 2023-08-17T12:01:53.647604Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'NetEventsInterface::g_msgproc_mutex' in net.cpp:2095 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647610Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'm_chainstate_mutex' in validation.cpp:3102 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647616Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'cs_main' in validation.cpp:3124 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647622Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  (1) 'MempoolMutex()' in validation.cpp:3126 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647627Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'cs_main' in net_processing.cpp:2013 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647633Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  (2) 'm_peer_mutex' in net_processing.cpp:1593 (in thread 'msghand') \r\n```\r\n\r\nFrom this log you see that `m_peer_mutex` should go before `m_mempool.cs`. I admit it might be not the 100% optimal placement, feels NP-hard to me :) Do you know how to approach this better?",
      "commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "created_at" : "2023-11-02T07:58:03Z",
      "diff_hunk" : "@@ -5752,9 +5759,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379714659",
      "id" : 1379714659,
      "in_reply_to_id" : 1379299664,
      "line" : 5762,
      "node_id" : "PRRC_kwDOABII585SPMZj",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 5762,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 1709638838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379714659/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-02T07:58:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379714659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379723181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379723181"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is certainly better. For no good reason, i just chose to follow a pattern we use elsewhere and never reconsidered it. I will take this code.",
      "commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "created_at" : "2023-11-02T08:06:46Z",
      "diff_hunk" : "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379723181",
      "id" : 1379723181,
      "in_reply_to_id" : 1379306928,
      "line" : 214,
      "node_id" : "PRRC_kwDOABII585SPOet",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 214,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 122,
      "pull_request_review_id" : 1709653011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379723181/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-02T08:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379723181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379749369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379749369"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm always not sure what to do with these kinds of probabilistic scenarios... Say you run 1000 experiments, and get 1000/0, so the assert fails. Is 1,000,000 sufficient in that case? Or how do you think this should be asserted otherwise.",
      "commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "created_at" : "2023-11-02T08:32:01Z",
      "diff_hunk" : "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379749369",
      "id" : 1379749369,
      "in_reply_to_id" : 1379312851,
      "line" : 126,
      "node_id" : "PRRC_kwDOABII585SPU35",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 126,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 1709693742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379749369/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-02T08:32:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379749369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-11-02T13:16:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1790706698",
      "id" : 1790706698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28765",
      "node_id" : "IC_kwDOABII585qvAQK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1790706698/reactions"
      },
      "updated_at" : "2023-11-02T13:16:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1790706698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1380105208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380105208"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 983f8c6e305fd9707c109c2a92637825262b9b09: Since `fanout` is already initialized `true`, couldn't we simplify it?\r\n\r\n```diff\r\n@@ -5878,19 +5878,17 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\r\n                         if (reconciles_txs) {\r\n                             auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\r\n                             if (txiter) {\r\n-                                if ((*txiter)->GetCountWithDescendants() > 1) {\r\n-                                    // If a transaction has in-mempool children, always fanout it.\r\n-                                    // Until package relay is implemented, this is needed to avoid\r\n-                                    // breaking parent+child relay expectations in some cases.\r\n-                                    //\r\n-                                    // Potentially reconciling parent+child would mean that for every\r\n-                                    // child we need to to check if any of the parents is currently\r\n-                                    // reconciled so that the child isn't fanouted ahead. But then\r\n-                                    // it gets tricky when reconciliation sets are full: a) the child\r\n-                                    // can't just be added; b) removing parents from reconciliation\r\n-                                    // sets for this one child is not good either.\r\n-                                    fanout = true;\r\n-                                } else {\r\n+                                // If a transaction has in-mempool children, always fanout it.\r\n+                                // Until package relay is implemented, this is needed to avoid\r\n+                                // breaking parent+child relay expectations in some cases.\r\n+                                //\r\n+                                // Potentially reconciling parent+child would mean that for every\r\n+                                // child we need to to check if any of the parents is currently\r\n+                                // reconciled so that the child isn't fanouted ahead. But then\r\n+                                // it gets tricky when reconciliation sets are full: a) the child\r\n+                                // can't just be added; b) removing parents from reconciliation\r\n+                                // sets for this one child is not good either.\r\n+                                if ((*txiter)->GetCountWithDescendants() <= 1) {\r\n                                     auto fanout_randomizer = m_connman.GetDeterministicRandomizer(RANDOMIZER_ID_FANOUTTARGET);\r\n                                     fanout = m_txreconciliat\r\nion->ShouldFanoutTo(wtxid, fanout_randomizer, pto->GetId(),\r\n                                                             \r\n                    inbounds_nonrcncl_tx_relay, outbounds_non\r\nrcncl_tx_relay);\r\n```",
      "commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "created_at" : "2023-11-02T13:28:33Z",
      "diff_hunk" : "@@ -5841,7 +5873,35 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                if ((*txiter)->GetCountWithDescendants() > 1) {\n+                                    // If a transaction has in-mempool children, always fanout it.\n+                                    // Until package relay is implemented, this is needed to avoid\n+                                    // breaking parent+child relay expectations in some cases.\n+                                    //\n+                                    // Potentially reconciling parent+child would mean that for every\n+                                    // child we need to to check if any of the parents is currently\n+                                    // reconciled so that the child isn't fanouted ahead. But then\n+                                    // it gets tricky when reconciliation sets are full: a) the child\n+                                    // can't just be added; b) removing parents from reconciliation\n+                                    // sets for this one child is not good either.\n+                                    fanout = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1380105208",
      "id" : 1380105208,
      "line" : 5892,
      "node_id" : "PRRC_kwDOABII585SQrv4",
      "original_commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "original_line" : 5892,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 91,
      "pull_request_review_id" : 1710245379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380105208/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-02T13:28:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380105208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1380216381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380216381"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 983f8c6e305fd9707c109c2a92637825262b9b09: Correct me if I'm wrong, but we're going use `inbounds_nonrcncl_tx_relay` and `outbounds_nonrcncl_tx_relay` only whether `reconciles_txs` is true, couldn't we only fill them if so?:\r\n```suggestion\r\n                    if (reconciles_txs) {\r\n```",
      "commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "created_at" : "2023-11-02T14:16:01Z",
      "diff_hunk" : "@@ -5814,6 +5824,28 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n+\n+                    size_t inbounds_nonrcncl_tx_relay = 0, outbounds_nonrcncl_tx_relay = 0;\n+                    if (m_txreconciliation) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1380216381",
      "id" : 1380216381,
      "line" : 5829,
      "node_id" : "PRRC_kwDOABII585SRG49",
      "original_commit_id" : "983f8c6e305fd9707c109c2a92637825262b9b09",
      "original_line" : 5829,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 47,
      "pull_request_review_id" : 1710413774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380216381/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-02T14:16:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380216381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   }
]
