[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28765).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21515](https://github.com/bitcoin/bitcoin/pull/21515) (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-11-01T09:06:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1788632672",
      "id" : 1788632672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28765",
      "node_id" : "IC_kwDOABII585qnF5g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1788632672/reactions"
      },
      "updated_at" : "2023-11-01T09:44:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1788632672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379299664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you explain a bit more why this is necessary, what is the lock order that would get violated if we did the locking later?",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:27:58Z",
      "diff_hunk" : "@@ -5752,9 +5759,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379299664",
      "id" : 1379299664,
      "line" : 5762,
      "node_id" : "PRRC_kwDOABII585SNnFQ",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 5762,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: remove one `//`",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:35:43Z",
      "diff_hunk" : "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    for (int i = 1; i < 31; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    for (int j = 0; j < 100; ++j) {\n+        size_t total_fanouted = 0;\n+        auto wtxid = GetRandHash();\n+        for (int i = 1; i < 31; ++i) {\n+            total_fanouted += tracker.ShouldFanoutTo(wtxid, hasher, i,\n+                                               /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0);\n+        }\n+        BOOST_CHECK_EQUAL(total_fanouted, 3);\n+    }\n+\n+    // // Don't relay if there is sufficient non-reconciling peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306577",
      "id" : 1379306577,
      "line" : 144,
      "node_id" : "PRRC_kwDOABII585SNoxR",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 144,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 64,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I wonder if this algorithm (which took me a while to fully understand) could be simpler. \r\nE.g., if we used a sorted container for `best_peers` instead of a vector, inserted all of the peers, and then finally return the first `targets` elements of that container, I think we could do without the `try_fanout_candidate` lambda.\r\nOr would that be incorrect / less performant?\r\n\r\nI'm thinking of something like the following (just to show idea, I didn't test it):\r\n\r\n    struct ComparePairs {\r\n        bool operator()(const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) const {\r\n            return left.first > right.first;\r\n        }\r\n    };\r\n    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\r\n                                         bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\r\n    {\r\n        // The algorithm works as follows. We iterate through the peers (of a given direction)\r\n        // hashing them with the given wtxid, and sort them by this hash.\r\n        // We then consider top `limit` peers to be low-fanout flood targets.\r\n        // The randomness should be seeded with wtxid to return consistent results for every call.\r\n\r\n        double integer_part;\r\n        double fractional_peer = std::modf(limit, &integer_part);\r\n        const bool drop_peer_if_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\r\n        const size_t targets = drop_peer_if_extra ? size_t(integer_part): size_t(integer_part) + 1;\r\n\r\n        std::set<std::pair<uint64_t, NodeId>, ComparePairs> best_peers;\r\n\r\n        for (auto indexed_state : m_states) {\r\n            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\r\n            if (cur_state && cur_state->m_we_initiate == we_initiate) {\r\n                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\r\n                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\r\n            }\r\n        }\r\n\r\n        std::vector<NodeId> result;\r\n        auto it = best_peers.begin();\r\n        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\r\n            result.push_back(it->second);\r\n        }\r\n        return result;\r\n    }",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:36:07Z",
      "diff_hunk" : "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306928",
      "id" : 1379306928,
      "line" : 214,
      "node_id" : "PRRC_kwDOABII585SNo2w",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 214,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 44,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379309905"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do we have to first add and then (maybe) drop a peer here (instead of determining how many peers we want at the beginning, and then getting as many peers as we can up the desired number).",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:39:46Z",
      "diff_hunk" : "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                         bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // To handle fractional values, we add one peer optimistically and then probabilistically\n+        // drop it later.\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        const size_t targets = size_t(integer_part) + 1;\n+        const bool drop_peer_if_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379309905",
      "id" : 1379309905,
      "line" : 227,
      "node_id" : "PRRC_kwDOABII585SNplR",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 227,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 57,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379312851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "10% of 30 is integer, so maybe also add an example with a fraction. If we run it  often enough, we could probably assert that two values for `total_fanouted` are possible.",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:43:10Z",
      "diff_hunk" : "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379312851",
      "id" : 1379312851,
      "line" : 126,
      "node_id" : "PRRC_kwDOABII585SNqTT",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 126,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:46:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379313360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: remove empty line",
      "commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "created_at" : "2023-11-01T20:43:47Z",
      "diff_hunk" : "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    for (int i = 1; i < 31; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379313360",
      "id" : 1379313360,
      "line" : 130,
      "node_id" : "PRRC_kwDOABII585SNqbQ",
      "original_commit_id" : "b07029a67c800c679214a28f935fa221b44e7ead",
      "original_line" : 130,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 1709034021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-01T20:45:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   }
]
