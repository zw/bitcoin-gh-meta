[
   {
      "author_association" : "MEMBER",
      "body" : "The underlying problem is described in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=36022, and it was not considered as a bug.\r\n\r\nI think that moving code that uses C++ template functions/classes out from the `bitcoinconsensus.{h,cpp}` compilation unit, which were suggested in #24994, is a step in the right direction.",
      "created_at" : "2023-12-19T14:37:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1862877305",
      "id" : 1862877305,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vCUB5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862877305/reactions"
      },
      "updated_at" : "2023-12-19T14:52:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862877305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "From the linked issue https://gcc.gnu.org/bugzilla/show_bug.cgi?id=36022#c4:\r\n\r\n> For C++, types that are to be used across shared libraries have to be visible\r\n\r\nSeems to suggest that it is a good thing for these symbols to be exported so the library and its callers use the same symbols, particularly `type_info` symbols, and I guess generally so symbols in shared libraries have the same visibility as symbols in static libraries. So linking dynamically doesn't turn shared symbols into hidden symbols.\r\n\r\nI don't know what the best approach is, but I guess my question is what is the harm of exporting these symbols?",
      "created_at" : "2023-12-19T17:22:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1863192161",
      "id" : 1863192161,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vDg5h",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1863192161/reactions"
      },
      "updated_at" : "2023-12-19T17:22:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1863192161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Seems to suggest that it is a good thing for these symbols to be exported so the library and its callers use the same symbols, particularly type_info symbols\r\n\r\nWe purposefully export only a C api to avoid exactly these type issues :)\r\nThe user's/lib's c++ impls should be completely firewalled from each-other.\r\n\r\n\r\nSo I agree that this is annoying and maybe worth a hack to fix. But I'd like to exhaust all other options first.",
      "created_at" : "2023-12-21T18:05:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1866725154",
      "id" : 1866725154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vQ_ci",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1866725154/reactions"
      },
      "updated_at" : "2023-12-21T18:05:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1866725154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky \r\n> my question is what is the harm of exporting these symbols?\r\n\r\nI can add nothing to the best practises:\r\n- https://gcc.gnu.org/wiki/Visibility\r\n- https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#index-fvisibility:\r\n> symbol visibility should be viewed as part of the API interface contract",
      "created_at" : "2023-12-22T12:44:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1867645491",
      "id" : 1867645491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vUgIz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867645491/reactions"
      },
      "updated_at" : "2023-12-22T12:44:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867645491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Adding one more bit to complicate and maybe explain why I described the boundary as a firewall... We build `libbitcoinconsensus.so` with guix using `-static-libstdc++` (side-note, we should perhaps move this into the build-system rather than guix).\r\n\r\nSo the idea here is that the entire c++ implementation should be compiled into the shared lib with no unresolved c++ stdlib symbols, and exporting only C symbols. That way the end-user can use any c++ impl (if any) they want without fear of collisions. And because there's no cross-boundary c++ calls, there's no benefit to having the shared typeinfo/exception symbols.\r\n\r\nArguably this is different than the libstdc++ bug that was closed as WONTFIX because (at least as far as I can tell) we're trying to do something completely safe.\r\n\r\nIf it turns out that tight firewall idea doesn't work because libstdc++ is stubborn about exporting symbols, we may need to either:\r\n- revisit the idea of `-static-libstdc++` and\r\n- Use the `--exclude-libs ALL` @hebasto has suggested",
      "created_at" : "2023-12-22T15:08:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1867794427",
      "id" : 1867794427,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vVEf7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867794427/reactions"
      },
      "updated_at" : "2023-12-22T15:08:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867794427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Adding one more bit to complicate\r\n\r\nThanks, I'll pile on some more. I've alluded to this in other threads (#24994), but still haven't seen a summary of:\r\n* What currently happens with `lld` + `libstdc++`?\r\n* What currently happens with `lld` + `libc++`?\r\n* Maybe even, what happens with [`mold`](https://github.com/rui314/mold) and either standard library?\r\n* What happens under LTO, in any combination of the above?\r\n\r\nThere is much more to consider here than \"What does `ld` happen to do\", and that means any \"fix\" should also work for/not break other toolchain combinations as well.\r\n\r\nThe discussion seemed to land on, nothing can be wrong with `ld`/`libstdc++`, because a 15 year old thread says \"`RESOLVED INVALID`\". However, it's not clear to me if, in the present day, that thread is still relevant/the expected behaviour, and, it's also completely possible that other bugs/changes in (expected) behaviour have emerged in `ld`, or `libstdc++`, over the past 15 years, leaving the discussion there outdated.\r\n\r\nI will also mention, that we currently skip exports checks for RISC-V binaries, because of std lib related symbol exports (#28095), so whatever the issue is here, it's also not specific to, or limited to libraries.",
      "created_at" : "2023-12-22T16:13:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1867858105",
      "id" : 1867858105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vVUC5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867858105/reactions"
      },
      "updated_at" : "2023-12-22T16:14:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867858105",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Our current release process uses a very particular toolchain. While LTO might be considered as its update in the near future, it is not clear how other combinations of tools are related to this problem? Unless we would prefer to alter the release toolchain instead of moving some code into a separated translation unit to fix the shared library symbol visibility.",
      "created_at" : "2023-12-22T16:26:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1867869356",
      "id" : 1867869356,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vVWys",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867869356/reactions"
      },
      "updated_at" : "2023-12-22T16:26:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867869356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Our current release process\r\n\r\nThis isn't specific to the release process. Anyone can, and should expect to be able to build \"working\" libs/bins outside of Guix.\r\n\r\n> it is not clear how other combinations of tools are related to this problem?\r\n\r\nIf you \"fix\" anything by doing something that isn't supported by those tools, i.e use a special link/compile flag, or rely on ld or libstdc++ specific behaviors, you're going to break things/be incompatible with anyone using any other tools. Also, any change in our source code/build system may have side-effects that could break things for users of those tools that otherwise already worked perfectly fine.",
      "created_at" : "2023-12-22T16:36:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1867877948",
      "id" : 1867877948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vVY48",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867877948/reactions"
      },
      "updated_at" : "2023-12-22T16:45:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867877948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If you \"fix' anything by doing something that isn't supported by those tools, i.e use a special link/compile flag, or rely on ld or libc++ specific behaviors, you're going to break things/be incompatible with anyone using any other tools.\r\n\r\nRight. Requiring that a fix does not introduce any regressions is obvious.\r\nBy the way, there were no comments regarding any introduced break in https://github.com/bitcoin/bitcoin/pull/24994.\r\n\r\nI mean, what is the point to analyze the current behavior with all possible tool combinations:\r\n\r\n>    * What currently happens with `lld` + `libstdc++`?\r\n> \r\n>    * What currently happens with `lld` + `libc++`?\r\n> \r\n>    * Maybe even, what happens with [`mold`](https://github.com/rui314/mold) and either standard library?\r\n\r\n?\r\n\r\nIf any of those combinations works, I doubt we will modify the release build system to use this working toolchain.",
      "created_at" : "2023-12-22T16:46:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1867886871",
      "id" : 1867886871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vVbEX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867886871/reactions"
      },
      "updated_at" : "2023-12-22T16:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867886871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Thanks, I'll pile on some more. I've alluded to this in other threads (#24994), but still haven't seen a summary of:\r\n> \r\n>     * What currently happens with `lld` + `libstdc++`?\r\n> \r\n>     * What currently happens with `lld` + `libc++`?\r\n> \r\n>     * Maybe even, what happens with [`mold`](https://github.com/rui314/mold) and either standard library?\r\n> \r\n>     * What happens under LTO, in any combination of the above?\r\n\r\nI've done some tests on Ubuntu 22.04 using a simple model [code](https://github.com/hebasto/dso-demo/tree/dso-trivial), compiling and testing as follows:\r\n```\r\ng++ -fPIC --shared -fvisibility=hidden -o test_lib.so -I . test_lib.cpp\r\nnm -C -D test_lib.so | grep \" W \"\r\n```\r\n\r\n`g++` with `-fuse-ld={bfd,gold,lld,mold}` does export unwanted symbols.\r\n\r\n`clang++` with libc++ or libstdc++ does _not_ export unwanted symbols.",
      "created_at" : "2023-12-22T18:24:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26698#issuecomment-1867962234",
      "id" : 1867962234,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26698",
      "node_id" : "IC_kwDOABII585vVtd6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867962234/reactions"
      },
      "updated_at" : "2023-12-22T18:26:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867962234",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   }
]
