[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/26606).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [darosior](https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1479296136), [Sjors](https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1658468351), [theStack](https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1713893741) |\n| Stale ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1546251193) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n* [#28236](https://github.com/bitcoin/bitcoin/pull/28236) (fuzz: wallet, add target for Spend by Ayush170-Future)\n* [#28142](https://github.com/bitcoin/bitcoin/pull/28142) (wallet: Allow users to create a wallet that encrypts all database records by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2022-11-29T21:50:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1331367594",
      "id" : 1331367594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585PWw6q",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331367594/reactions"
      },
      "updated_at" : "2023-11-05T01:15:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331367594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-02-17T19:14:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1435121115",
      "id" : 1435121115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585VijXb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435121115/reactions"
      },
      "updated_at" : "2023-02-17T19:14:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435121115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121971951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121971951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d `{`\r\n\r\nCould also use the `IsNull()` helper.",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-01T16:02:46Z",
      "diff_hunk" : "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121971951",
      "id" : 1121971951,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585C3-7v",
      "original_commit_id" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "original_line" : 535,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 1320156842,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121971951/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-01T16:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121971951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121975697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121975697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d: Note for other reviewers: yes\r\n\r\nhttps://en.cppreference.com/w/c/io/fseek",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-01T16:05:12Z",
      "diff_hunk" : "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121975697",
      "id" : 1121975697,
      "line" : 533,
      "node_id" : "PRRC_kwDOABII585C3_2R",
      "original_commit_id" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "original_line" : 533,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : 4,
      "pull_request_review_id" : 1320156842,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121975697/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-01T16:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121975697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121979628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121979628"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d: maybe log the exact error code.",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-01T16:07:54Z",
      "diff_hunk" : "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");\n+        if (fseek(file, offset, origin) != 0)\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::seek: end of file\" : \"CAutoFile::seek: fseek failed\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121979628",
      "id" : 1121979628,
      "line" : 539,
      "node_id" : "PRRC_kwDOABII585C4Azs",
      "original_commit_id" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "original_line" : 539,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : 10,
      "pull_request_review_id" : 1320156842,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121979628/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-01T16:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121979628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122017022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122017022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1224f45a92972199799d1ea33700eee567dc66fe: maybe call this file `bdb_ro_wallet_db.h`?",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-01T16:32:13Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122017022",
      "id" : 1122017022,
      "line" : 6,
      "node_id" : "PRRC_kwDOABII585C4J7-",
      "original_commit_id" : "1224f45a92972199799d1ea33700eee567dc66fe",
      "original_line" : 6,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.h",
      "position" : 6,
      "pull_request_review_id" : 1320156842,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122017022/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-01T16:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122017022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122022825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122022825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec: commit description also mentions `StartCursor`, `ReadAtCursor`, `CloseCursor`.",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-01T16:35:56Z",
      "diff_hunk" : "@@ -21,17 +21,37 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122022825",
      "id" : 1122022825,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585C4LWp",
      "original_commit_id" : "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec",
      "original_line" : 24,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : null,
      "pull_request_review_id" : 1320156842,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122022825/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-01T16:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122022825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556050"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556050"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-15T18:09:29Z",
      "diff_hunk" : "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556050",
      "id" : 1137556050,
      "in_reply_to_id" : 1121971951,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DzbpS",
      "original_commit_id" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "original_line" : 535,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 1342106242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556050/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-15T18:09:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's kind of annoying to do that, so I'll leave it as is. The other functions do the same.",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-15T18:09:47Z",
      "diff_hunk" : "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");\n+        if (fseek(file, offset, origin) != 0)\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::seek: end of file\" : \"CAutoFile::seek: fseek failed\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556512",
      "id" : 1137556512,
      "in_reply_to_id" : 1121979628,
      "line" : 539,
      "node_id" : "PRRC_kwDOABII585Dzbwg",
      "original_commit_id" : "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "original_line" : 539,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : 10,
      "pull_request_review_id" : 1342106695,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556512/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-15T18:09:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556948"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The intent is to have all of the migration stuff in these files, so I will leave it as is.",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-15T18:10:04Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556948",
      "id" : 1137556948,
      "in_reply_to_id" : 1122017022,
      "line" : 6,
      "node_id" : "PRRC_kwDOABII585Dzb3U",
      "original_commit_id" : "1224f45a92972199799d1ea33700eee567dc66fe",
      "original_line" : 6,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.h",
      "position" : 6,
      "pull_request_review_id" : 1342107141,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556948/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-15T18:10:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137557089"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137557089"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated the message.",
      "commit_id" : "33de558d939a232f7473d47be9a3385bcd1a7260",
      "created_at" : "2023-03-15T18:10:10Z",
      "diff_hunk" : "@@ -21,17 +21,37 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137557089",
      "id" : 1137557089,
      "in_reply_to_id" : 1122022825,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Dzb5h",
      "original_commit_id" : "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec",
      "original_line" : 24,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : null,
      "pull_request_review_id" : 1342107285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137557089/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-15T18:10:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137557089",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Have you looked into a fuzz target for this parser?",
      "created_at" : "2023-03-22T10:29:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1479296136",
      "id" : 1479296136,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585YLESI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479296136/reactions"
      },
      "updated_at" : "2023-03-22T10:29:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479296136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Have you looked into a fuzz target for this parser?\r\n\r\nI haven't. If someone would like to write one, I'd be happy to add it.",
      "created_at" : "2023-03-22T18:02:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1480027322",
      "id" : 1480027322,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585YN2y6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1480027322/reactions"
      },
      "updated_at" : "2023-03-22T18:02:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1480027322",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Adding a fuzz target that compares this to the real thing seems useful. Given that this PR changes `dumpwallet` to rely on the new parser, I think we should do that sooner rather than later. Otherwise I suggest changing e88ad38ac2f3e43de54a332965b13eb7cc27b91f so that the read-only parser is optional, and then change the tests to always use it.\r\n\r\nIt seems a bit daunting to compare the low level DBD parsing code in this PR to the real thing. Having a fuzzer also reduces the need to be very thorough in that. I'm not sure how much confidence I have in the existing test coverage for dumpwallet.",
      "created_at" : "2023-06-05T15:40:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1577039004",
      "id" : 1577039004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585d_7Sc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577039004/reactions"
      },
      "updated_at" : "2023-06-05T15:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577039004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase?",
      "created_at" : "2023-06-07T12:42:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1580738352",
      "id" : 1580738352,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585eOCcw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1580738352/reactions"
      },
      "updated_at" : "2023-06-07T12:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1580738352",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-06-10T16:52:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1585733097",
      "id" : 1585733097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585ehF3p",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1585733097/reactions"
      },
      "updated_at" : "2023-06-10T16:52:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1585733097",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1229358644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229358644"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why is this method returning `true`, but false for the erase methods?",
      "commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "created_at" : "2023-06-14T10:11:13Z",
      "diff_hunk" : "@@ -0,0 +1,122 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H\n+\n+#include <wallet/db.h>\n+\n+#include <optional>\n+\n+namespace wallet {\n+\n+using BerkeleyROData = std::map<SerializeData, SerializeData, std::less<>>;\n+\n+/**\n+ * A class representing a BerkeleyDB file from which we can only read records.\n+ * This is used only for migration of legacy to descriptor wallets\n+ */\n+class BerkeleyRODatabase : public WalletDatabase\n+{\n+private:\n+    const fs::path m_filepath;\n+\n+public:\n+    /** Create dummy DB handle */\n+    BerkeleyRODatabase(const fs::path& filepath) : WalletDatabase(), m_filepath(filepath)\n+    {\n+        Open();\n+    }\n+    ~BerkeleyRODatabase() {};\n+\n+    BerkeleyROData m_records;\n+\n+    /** Open the database if it is not already opened. */\n+    void Open() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override {}\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    void RemoveRef() override {}\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* pszSkip=nullptr) override { return false; }\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& strDest) const override;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+     void Flush() override {}\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    void Close() override {}\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override { return false; }\n+\n+    void IncrementUpdateCounter() override {}\n+\n+    void ReloadDbEnv() override {}\n+\n+    /** Return path to main database file for logs and error messages. */\n+    std::string Filename() override { return fs::PathToString(m_filepath); }\n+\n+    std::string Format() override { return \"bdb_ro\"; }\n+\n+    /** Make a DatabaseBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n+};\n+\n+class BerkeleyROCursor : public DatabaseCursor\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+    BerkeleyROData::const_iterator m_cursor;\n+    BerkeleyROData::const_iterator m_cursor_end;\n+\n+public:\n+    explicit BerkeleyROCursor(const BerkeleyRODatabase& database, Span<const std::byte> prefix = {});\n+    ~BerkeleyROCursor() {}\n+\n+    Status Next(DataStream& key, DataStream& value) override;\n+};\n+\n+/** RAII class that provides access to a BerkeleyRODatabase */\n+class BerkeleyROBatch : public DatabaseBatch\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+\n+    bool ReadKey(DataStream&& key, DataStream& value) override;\n+    bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite=true) override { return true; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1229358644",
      "id" : 1229358644,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII585JRoY0",
      "original_commit_id" : "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.h",
      "position" : 96,
      "pull_request_review_id" : 1478773216,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229358644/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-14T21:21:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229358644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Wrote [my first fuzz test](https://github.com/TheCharlatan/bitcoin/commit/995ccef131e71ae94f5c73ee3b0297282f5646ed) (I really don't know what I am doing so not even sure this is useful), and managed to hit: `fuzz: wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed`.\r\n\r\n",
      "created_at" : "2023-06-21T10:58:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1600625695",
      "id" : 1600625695,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585fZ5wf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600625695/reactions"
      },
      "updated_at" : "2023-06-21T10:58:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600625695",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed\r\n\r\nSound like a real bug, because `assert` should generally not be used to validate user input or files read from disk?",
      "created_at" : "2023-06-21T11:04:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1600634431",
      "id" : 1600634431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585fZ74_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600634431/reactions"
      },
      "updated_at" : "2023-06-21T11:04:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600634431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Wrote [my first fuzz test](https://github.com/TheCharlatan/bitcoin/commit/995ccef131e71ae94f5c73ee3b0297282f5646ed) (I really don't know what I am doing so not even sure this is useful), and managed to hit: `fuzz: wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed`.\r\n\r\nDo you have the input that hit that?",
      "created_at" : "2023-06-21T16:27:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601156957",
      "id" : 1601156957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585fb7dd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601156957/reactions"
      },
      "updated_at" : "2023-06-21T16:27:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601156957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Re https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601156957\r\n\r\n> Do you have the input that hit that?\r\n\r\nYes, pasting as base64 here, since I'm not sure about the practice of attaching random binary files:\r\n\r\n```\r\necho \"HQABAAAAAQAAAACPAAUxYgAAAAmK/////wkAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAKysrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////gAAAAAAz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Xz8/Pz8/Pz8/Pz8/Pz8/Pz88Az8/Pz8/PADqKIIr/////////EwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAArKysAAAAAAAAAAAAAAAAAAADPz8/Pz8/PxXt7e3t7e3t7AABPAAUxz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/S0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eNLS0tLS0tLSKtLS0tLS0tLS0tLS0tLS0tDS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0s/Pz8/Pz8/Pz8/Pz8/PAAB7e3t7e3t7e3sBAAABAAACK08ABQAgXFxcXFxcAQAAAACPAAUxYgAAAAmK/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKysrAAAAAAAAAAAAAAAAAAAAz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/PzwAAAP/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pzw==\" | base64 -d > crash-assert\r\n```",
      "created_at" : "2023-06-21T18:33:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601377160",
      "id" : 1601377160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585fcxOI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601377160/reactions"
      },
      "updated_at" : "2023-06-21T18:33:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601377160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Found an issue with prefix cursor handling, updated the tests to check for that. Also pulled in @TheCharlatan's fuzz test and changed several asserts to instead throw exceptions which resolves the fuzz crash.",
      "created_at" : "2023-06-28T22:28:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1612198266",
      "id" : 1612198266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585gGDF6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612198266/reactions"
      },
      "updated_at" : "2023-06-28T22:28:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612198266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Looks like the fuzz target doesn't compile on windows?",
      "created_at" : "2023-06-29T06:49:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1612512773",
      "id" : 1612512773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585gHP4F",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612512773/reactions"
      },
      "updated_at" : "2023-06-29T06:49:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612512773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247132355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247132355"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\r\n```\r\n\r\n?",
      "commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "created_at" : "2023-06-29T20:21:49Z",
      "diff_hunk" : "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247132355",
      "id" : 1247132355,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KVbrD",
      "original_commit_id" : "5b3573e201863cf22cf04597a346a027cb685a13",
      "original_line" : 528,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 1506063580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247132355/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-29T20:22:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247132355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247172893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247172893"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "created_at" : "2023-06-29T21:02:00Z",
      "diff_hunk" : "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247172893",
      "id" : 1247172893,
      "in_reply_to_id" : 1247132355,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KVlkd",
      "original_commit_id" : "5b3573e201863cf22cf04597a346a027cb685a13",
      "original_line" : 528,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 1506127844,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247172893/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-29T21:02:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247172893",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247469065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247469065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\r\n```",
      "commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "created_at" : "2023-06-30T06:00:58Z",
      "diff_hunk" : "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"AutoFile::read: file handle is nullptr\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247469065",
      "id" : 1247469065,
      "line" : 528,
      "node_id" : "PRRC_kwDOABII585KWt4J",
      "original_commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "original_line" : 528,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : 7,
      "pull_request_review_id" : 1506562478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247469065/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T06:02:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247469065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247687691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247687691"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "After testing with a valid database in the fuzzing corpus, I noticed that I messed up the `m_args`, `m_node.args`, `gArgs` division again ([see here](https://github.com/bitcoin/bitcoin/issues/25055)) - sorry about that. I have a basic patch here, but feel free to commit a more elegant fix:\r\n\r\n```diff\r\ndiff --git a/src/wallet/test/fuzz/wallet_bdb_parser.cpp b/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\nindex aabde093b6..a1acb95178 100644\r\n--- a/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\n+++ b/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\n@@ -19,23 +19,15 @@ using wallet::DatabaseOptions;\r\n using wallet::DatabaseStatus;\r\n \r\n namespace {\r\n-const TestingSetup* g_setup;\r\n+TestingSetup* g_setup;\r\n } // namespace\r\n \r\n void initialize_wallet_bdb_parser()\r\n {\r\n-    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\r\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\r\n     g_setup = testing_setup.get();\r\n }\r\n \r\n-void SetDumpFile(ArgsManager& args) {\r\n-    auto dumpfile{args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\r\n-    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\r\n-        remove(dumpfile);\r\n-    }\r\n-    args.ForceSetArg(\"-dumpfile\", fs::PathToString(args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"));\r\n-}\r\n-\r\n FUZZ_TARGET_INIT(wallet_bdb_parser, initialize_wallet_bdb_parser)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n@@ -52,10 +44,14 @@ FUZZ_TARGET_INIT(wallet_bdb_parser, initialize_wallet_bdb_parser)\r\n     DatabaseStatus status;\r\n     bilingual_str error;\r\n \r\n+    auto dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\r\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\r\n+        remove(dumpfile);\r\n+    }\r\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", dumpfile);\r\n+\r\n     try {\r\n         auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\r\n-        const auto& node = g_setup->m_node;\r\n-        SetDumpFile(*node.args);\r\n         assert(DumpWallet(g_setup->m_args, *db, error));\r\n     }\r\n     catch (const std::runtime_error& e) {\r\n```",
      "commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "created_at" : "2023-06-30T09:58:08Z",
      "diff_hunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+const TestingSetup* g_setup;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247687691",
      "id" : 1247687691,
      "line" : 22,
      "node_id" : "PRRC_kwDOABII585KXjQL",
      "original_commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "original_line" : 22,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 22,
      "pull_request_review_id" : 1506898105,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247687691/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T09:58:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247687691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247847963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247847963"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement handling of other endianness in BerkeleyRODatabase\" 0b8eac6a78351a68c1b5a6126564493ab50031dc\r\n\r\nI might be reading something wrong, or confusing something, but I don't quite understand why the record data itself does not have to get its endianness adjusted.",
      "commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "created_at" : "2023-06-30T13:11:01Z",
      "diff_hunk" : "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247847963",
      "id" : 1247847963,
      "line" : 588,
      "node_id" : "PRRC_kwDOABII585KYKYb",
      "original_commit_id" : "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "original_line" : 588,
      "original_position" : 215,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 588,
      "pull_request_review_id" : 1507168279,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247847963/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T13:19:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247847963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247852182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247852182"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: implement independent BDB deserializer in BerkeleyRODatabase\" d5fe130106bdf367c0bca157b02d12254590b585\r\n\r\nCan this `data` field be removed? Seems to be unused.",
      "commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "created_at" : "2023-06-30T13:15:02Z",
      "diff_hunk" : "@@ -1,13 +1,547 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    std::vector<std::byte> data; // Data from all of the overflow pages",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247852182",
      "id" : 1247852182,
      "line" : 265,
      "node_id" : "PRRC_kwDOABII585KYLaW",
      "original_commit_id" : "d5fe130106bdf367c0bca157b02d12254590b585",
      "original_line" : 224,
      "original_position" : 224,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 265,
      "pull_request_review_id" : 1507168279,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247852182/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T13:19:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247852182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248008111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248008111"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The record data should just be arbitrary byte strings so they don't have an endianness.",
      "commit_id" : "5da3bde89096098f29e1ca0a9c5c40700a610058",
      "created_at" : "2023-06-30T15:37:20Z",
      "diff_hunk" : "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248008111",
      "id" : 1248008111,
      "in_reply_to_id" : 1247847963,
      "line" : 586,
      "node_id" : "PRRC_kwDOABII585KYxev",
      "original_commit_id" : "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "original_line" : 586,
      "original_position" : 215,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 586,
      "pull_request_review_id" : 1507432998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248008111/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T15:37:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248008111",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248013942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248013942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "5da3bde89096098f29e1ca0a9c5c40700a610058",
      "created_at" : "2023-06-30T15:43:46Z",
      "diff_hunk" : "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"AutoFile::read: file handle is nullptr\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248013942",
      "id" : 1248013942,
      "in_reply_to_id" : 1247469065,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KYy52",
      "original_commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "original_line" : 528,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 1507442894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248013942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T15:43:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248013942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as suggested",
      "commit_id" : "5da3bde89096098f29e1ca0a9c5c40700a610058",
      "created_at" : "2023-06-30T15:43:54Z",
      "diff_hunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+const TestingSetup* g_setup;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014091",
      "id" : 1248014091,
      "in_reply_to_id" : 1247687691,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KYy8L",
      "original_commit_id" : "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "original_line" : 22,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : null,
      "pull_request_review_id" : 1507443085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014091/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T15:43:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed. I think originally I though I could put the overflow page data into this field, but I didn't end up doing it that way.",
      "commit_id" : "5da3bde89096098f29e1ca0a9c5c40700a610058",
      "created_at" : "2023-06-30T15:44:22Z",
      "diff_hunk" : "@@ -1,13 +1,547 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    std::vector<std::byte> data; // Data from all of the overflow pages",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014465",
      "id" : 1248014465,
      "in_reply_to_id" : 1247852182,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KYzCB",
      "original_commit_id" : "d5fe130106bdf367c0bca157b02d12254590b585",
      "original_line" : 224,
      "original_position" : 224,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : null,
      "pull_request_review_id" : 1507443735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T15:44:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248057852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248057852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIRC I did this to avoid issues with old wallets that the wallet loading logic would do automatic upgrading of which expects writing to not fail. It actually should be fine for those to not write anything.",
      "commit_id" : "4750b2c686cca5b4ae70898abe53e4017baab75b",
      "created_at" : "2023-06-30T16:20:07Z",
      "diff_hunk" : "@@ -0,0 +1,122 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H\n+\n+#include <wallet/db.h>\n+\n+#include <optional>\n+\n+namespace wallet {\n+\n+using BerkeleyROData = std::map<SerializeData, SerializeData, std::less<>>;\n+\n+/**\n+ * A class representing a BerkeleyDB file from which we can only read records.\n+ * This is used only for migration of legacy to descriptor wallets\n+ */\n+class BerkeleyRODatabase : public WalletDatabase\n+{\n+private:\n+    const fs::path m_filepath;\n+\n+public:\n+    /** Create dummy DB handle */\n+    BerkeleyRODatabase(const fs::path& filepath) : WalletDatabase(), m_filepath(filepath)\n+    {\n+        Open();\n+    }\n+    ~BerkeleyRODatabase() {};\n+\n+    BerkeleyROData m_records;\n+\n+    /** Open the database if it is not already opened. */\n+    void Open() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override {}\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    void RemoveRef() override {}\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* pszSkip=nullptr) override { return false; }\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& strDest) const override;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+     void Flush() override {}\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    void Close() override {}\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override { return false; }\n+\n+    void IncrementUpdateCounter() override {}\n+\n+    void ReloadDbEnv() override {}\n+\n+    /** Return path to main database file for logs and error messages. */\n+    std::string Filename() override { return fs::PathToString(m_filepath); }\n+\n+    std::string Format() override { return \"bdb_ro\"; }\n+\n+    /** Make a DatabaseBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n+};\n+\n+class BerkeleyROCursor : public DatabaseCursor\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+    BerkeleyROData::const_iterator m_cursor;\n+    BerkeleyROData::const_iterator m_cursor_end;\n+\n+public:\n+    explicit BerkeleyROCursor(const BerkeleyRODatabase& database, Span<const std::byte> prefix = {});\n+    ~BerkeleyROCursor() {}\n+\n+    Status Next(DataStream& key, DataStream& value) override;\n+};\n+\n+/** RAII class that provides access to a BerkeleyRODatabase */\n+class BerkeleyROBatch : public DatabaseBatch\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+\n+    bool ReadKey(DataStream&& key, DataStream& value) override;\n+    bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite=true) override { return true; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248057852",
      "id" : 1248057852,
      "in_reply_to_id" : 1229358644,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII585KY9n8",
      "original_commit_id" : "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.h",
      "position" : 96,
      "pull_request_review_id" : 1507509204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248057852/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T16:22:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248057852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1252319116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252319116"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK, please resolve.",
      "commit_id" : "4750b2c686cca5b4ae70898abe53e4017baab75b",
      "created_at" : "2023-07-04T20:01:54Z",
      "diff_hunk" : "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1252319116",
      "id" : 1252319116,
      "in_reply_to_id" : 1247847963,
      "line" : 586,
      "node_id" : "PRRC_kwDOABII585KpN-M",
      "original_commit_id" : "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "original_line" : 586,
      "original_position" : 215,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 586,
      "pull_request_review_id" : 1513342000,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252319116/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-04T20:01:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252319116",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1273993906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273993906"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This would be more readable if the `main` bytes were stuffed into a constant somewhere.",
      "commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "created_at" : "2023-07-25T19:30:14Z",
      "diff_hunk" : "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1273993906",
      "id" : 1273993906,
      "line" : 527,
      "node_id" : "PRRC_kwDOABII585L75qy",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 527,
      "original_position" : 527,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 527,
      "pull_request_review_id" : 1546251193,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273993906/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-25T19:58:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273993906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1274005925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1274005925"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you add a comment explaining why we check this?",
      "commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "created_at" : "2023-07-25T19:43:38Z",
      "diff_hunk" : "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {\n+        throw std::runtime_error(\"Subdatabase has an unexpected name\");\n+    }\n+    if (!std::holds_alternative<DataRecord>(page.records.at(1)) || std::get_if<DataRecord>(&page.records.at(1))->m_header.len != 4) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1274005925",
      "id" : 1274005925,
      "line" : 530,
      "node_id" : "PRRC_kwDOABII585L78ml",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 530,
      "original_position" : 530,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 530,
      "pull_request_review_id" : 1546251193,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1274005925/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-25T19:58:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1274005925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nI still suggest changing fc810c1df899e5b42fe7658ebdddc6b4320240a6 so that `dumpwallet` does not use the read-only format by default, and instead change the tests use it. ~However with the new fuzz target commit I'm less worried about it.~\r\n\r\nThe new fuzz target helps, but currently doesn't compare between BDB and the RO implementation. I'm also not sure how to see if we're covering all code paths. Should we manually produce some wallets to bootstrap a good corpus or is the fuzzer smart enough to find it?",
      "created_at" : "2023-07-31T14:20:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1658468351",
      "id" : 1658468351,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585i2jf_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1658468351/reactions"
      },
      "updated_at" : "2023-07-31T15:19:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1658468351",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279447033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279447033"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add a recommendation to the fuzz doc to [mount /tmp to tmpfs](https://ubuntu.com/blog/data-driven-analysis-tmp-on-tmpfs), or ensure we don't use the file system.",
      "commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "created_at" : "2023-07-31T15:07:01Z",
      "diff_hunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279447033",
      "id" : 1279447033,
      "line" : 35,
      "node_id" : "PRRC_kwDOABII585MQs_5",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 35,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 35,
      "pull_request_review_id" : 1555022636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279447033/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T15:07:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279447033",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279450655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279450655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is already in the test docs, no?\r\n\r\n```\r\n$ git grep tmpfs test/README.md\r\ntest/README.md:sudo mount -t tmpfs -o size=4g tmpfs /mnt/tmp/\r\n",
      "commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "created_at" : "2023-07-31T15:09:05Z",
      "diff_hunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279450655",
      "id" : 1279450655,
      "in_reply_to_id" : 1279447033,
      "line" : 35,
      "node_id" : "PRRC_kwDOABII585MQt4f",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 35,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 35,
      "pull_request_review_id" : 1555027910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279450655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T15:09:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279450655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279466130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279466130"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be useful here - if BDB is compiled - to also open it with BDB, dump and then compare both dumps.\r\n\r\nI'm not sure what to do for cases where BDB and RO have slightly different opinions on what they're willing to open at all. It's probably fine to skip comparing files where _either_ refuses to open.",
      "commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "created_at" : "2023-07-31T15:14:56Z",
      "diff_hunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279466130",
      "id" : 1279466130,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585MQxqS",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 55,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 55,
      "pull_request_review_id" : 1555052889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279466130/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T15:14:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279466130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279468544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279468544"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not in the fuzz docs, but just having it in the test docs is probably fine.",
      "commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "created_at" : "2023-07-31T15:16:53Z",
      "diff_hunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279468544",
      "id" : 1279468544,
      "in_reply_to_id" : 1279447033,
      "line" : 35,
      "node_id" : "PRRC_kwDOABII585MQyQA",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 35,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 35,
      "pull_request_review_id" : 1555058328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279468544/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-31T15:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279468544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-08-01T17:11:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1660761734",
      "id" : 1660761734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585i_TaG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1660761734/reactions"
      },
      "updated_at" : "2023-08-01T17:11:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1660761734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063486"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "created_at" : "2023-08-01T19:30:40Z",
      "diff_hunk" : "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063486",
      "id" : 1281063486,
      "in_reply_to_id" : 1273993906,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MW3o-",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 527,
      "original_position" : 527,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : null,
      "pull_request_review_id" : 1557685853,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063486/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-01T19:30:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063610"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063610"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment",
      "commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "created_at" : "2023-08-01T19:30:47Z",
      "diff_hunk" : "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {\n+        throw std::runtime_error(\"Subdatabase has an unexpected name\");\n+    }\n+    if (!std::holds_alternative<DataRecord>(page.records.at(1)) || std::get_if<DataRecord>(&page.records.at(1))->m_header.len != 4) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063610",
      "id" : 1281063610,
      "in_reply_to_id" : 1274005925,
      "line" : 534,
      "node_id" : "PRRC_kwDOABII585MW3q6",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 534,
      "original_position" : 530,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 534,
      "pull_request_review_id" : 1557686133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063610/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-01T19:30:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063722"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comparison",
      "commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "created_at" : "2023-08-01T19:30:55Z",
      "diff_hunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063722",
      "id" : 1281063722,
      "in_reply_to_id" : 1279466130,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII585MW3sq",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 58,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 58,
      "pull_request_review_id" : 1557686444,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063722/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-01T19:30:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I still suggest changing fc810c1 so that dumpwallet does not use the read-only format by default, and instead change the tests use it.\r\n\r\nSince dumping should be a read-only operation, I think it's better to use the read-only database since it definitely won't write to it like BDB does. Also it provides a good mechanism for testing.",
      "created_at" : "2023-08-01T19:32:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1660955989",
      "id" : 1660955989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jAC1V",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1660955989/reactions"
      },
      "updated_at" : "2023-08-01T19:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1660955989",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281410852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281410852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: I don't think this method is a subset of our streams. Many streams can't seek to the beginning after a read. It may be better to move this up by 3 lines of code (or more if you want)",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T05:26:46Z",
      "diff_hunk" : "@@ -528,6 +528,7 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281410852",
      "id" : 1281410852,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MYMck",
      "original_commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_line" : 531,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 1558219665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281410852/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T05:26:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281410852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281412977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281412977"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: If you remove this, it may be possible to feed in a \"happy\" wallet.dat (created with vanilla Bitcoin Core) as a fuzz input. See https://github.com/bitcoin-core/qa-assets/pull/140#issuecomment-1660088315\r\n\r\nThough, I haven't tested this.",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T05:30:46Z",
      "diff_hunk" : "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281412977",
      "id" : 1281412977,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII585MYM9x",
      "original_commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 41,
      "pull_request_review_id" : 1558223099,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281412977/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T05:30:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281412977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Since dumping should be a read-only operation, I think it's better to use the read-only database since it definitely won't write to it like BDB does.\r\n\r\nBut it could produce a corrupt dump, which someone might rely on for their backup (even if they shouldn't).",
      "created_at" : "2023-08-02T16:25:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1662535127",
      "id" : 1662535127,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jGEXX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662535127/reactions"
      },
      "updated_at" : "2023-08-02T16:25:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662535127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282150028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282150028"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice! I'll run the fuzzer against that...",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T16:26:46Z",
      "diff_hunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282150028",
      "id" : 1282150028,
      "in_reply_to_id" : 1279466130,
      "line" : 60,
      "node_id" : "PRRC_kwDOABII585MbA6M",
      "original_commit_id" : "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "original_line" : 60,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 60,
      "pull_request_review_id" : 1559403016,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282150028/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T16:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282150028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282196740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282196740"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So far my corpus doesn't make it here, as tested by sprinkling `assert(false)`. It may indeed need some help with a real wallet.",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T17:05:56Z",
      "diff_hunk" : "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path bdb_ro_dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile_bdb_ro.dat\"};\n+    if (fs::exists(bdb_ro_dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(bdb_ro_dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(bdb_ro_dumpfile));\n+\n+    bool bdb_ro_err = false;\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));\n+    }\n+    catch (const std::runtime_error& e) {\n+        bdb_ro_err = true;\n+        if (std::string(e.what()) == \"AutoFile::ignore: end of file: iostream error\") return;\n+        if (std::string(e.what()) == \"AutoFile::read: end of file: iostream error\") return;\n+        if (std::string(e.what()) == \"Not a BDB file\") return;\n+        if (std::string(e.what()) == \"Unsupported BDB data file version number\") return;\n+        if (std::string(e.what()) == \"Unexpected page type, should be 9 (BTree Metadata)\") return;\n+        if (std::string(e.what()) == \"Unexpected database flags, should only be 0x20 (subdatabases)\") return;\n+        if (std::string(e.what()) == \"Unexpected outer database root page type\") return;\n+        if (std::string(e.what()) == \"Unexpected number of entries in outer database root page\") return;\n+        if (std::string(e.what()) == \"Subdatabase has an unexpected name\") return;\n+        if (std::string(e.what()) == \"Subdatabase page number has unexpected length\") return;\n+        if (std::string(e.what()) == \"Unexpected inner database page type\") return;\n+        if (std::string(e.what()) == \"Unknown record type in records page\") return;\n+        if (std::string(e.what()) == \"Unknown record type in internal page\") return;\n+        if (std::string(e.what()) == \"Unexpected page size\") return;\n+        if (std::string(e.what()) == \"Unexpected page type\") return;\n+        throw e;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282196740",
      "id" : 1282196740,
      "line" : 82,
      "node_id" : "PRRC_kwDOABII585MbMUE",
      "original_commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_line" : 82,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 82,
      "pull_request_review_id" : 1559482876,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282196740/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T17:08:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282196740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282211461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282211461"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I simply copied a `wallet.dat` into the corpus directory. That resulted in a bunch of extra corpus entities and almost immediately a crash.",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T17:20:53Z",
      "diff_hunk" : "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282211461",
      "id" : 1282211461,
      "in_reply_to_id" : 1281412977,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII585MbP6F",
      "original_commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 41,
      "pull_request_review_id" : 1559505421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282211461/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T17:20:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282211461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282214518"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282214518"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Though the file seems to get ignored when trying to merge.",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T17:23:59Z",
      "diff_hunk" : "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282214518",
      "id" : 1282214518,
      "in_reply_to_id" : 1281412977,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII585MbQp2",
      "original_commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 41,
      "pull_request_review_id" : 1559510055,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282214518/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T17:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282214518",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282220244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282220244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T17:29:49Z",
      "diff_hunk" : "@@ -528,6 +528,7 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282220244",
      "id" : 1282220244,
      "in_reply_to_id" : 1281410852,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MbSDU",
      "original_commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_line" : 531,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 1559519181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282220244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T17:29:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282220244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282227280"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282227280"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, figured it out! Will push some new entries to the qa-assets PR that should reproduce the crash.",
      "commit_id" : "2c9e8f8d4ef8d7ac01fe9251cca424bda43f0848",
      "created_at" : "2023-08-02T17:36:55Z",
      "diff_hunk" : "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282227280",
      "id" : 1282227280,
      "in_reply_to_id" : 1281412977,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII585MbTxQ",
      "original_commit_id" : "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position" : 41,
      "pull_request_review_id" : 1559530471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282227280/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-02T17:36:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282227280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I tried adding `if (bdb_ro_err) return;` above `#ifdef USE_BDB` (although that does reduce coverage of potentially valid wallets). I also added in the second catch:\r\n\r\n```cpp\r\n// We are not interested in fuzzing the original BDB implementation\r\nif (std::string(e.what()) == \"BerkeleyDatabase: Error 22, can't open database fuzzed_wallet.dat\") return;\r\n```\r\n\r\nThat helps a bit, but still leads to a \"SEGV on unknown address 0x000000000000\" in `DumpWallet` very quickly. I haven't looked at what the fuzzer came up with. Perhaps it can be dealt with by making the RO parser more strict?\r\n\r\nOr can we tell the fuzzer to ignore crashes in the original BDB entirely? We only care about comparing dumps for wallets that the original implementation can load.",
      "created_at" : "2023-08-02T18:14:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1662720996",
      "id" : 1662720996,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jGxvk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662720996/reactions"
      },
      "updated_at" : "2023-08-02T18:15:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662720996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've fixed at least one fuzzer crash. BDB verifies a couple of other things that RO was not.\r\n\r\nI also changed the fuzzer to make sure that BDB fails to open the database if RO failed to open it, and vice versa.\r\n\r\nThere's still another crash that I have, but it's something where RO is being stricter than BDB.",
      "created_at" : "2023-08-02T20:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1662918852",
      "id" : 1662918852,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jHiDE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662918852/reactions"
      },
      "updated_at" : "2023-08-02T20:22:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662918852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> There's still another crash that I have\r\n\r\nNot sure if that was fixed in your later push, but in any case, I pushed another crash to the qa-assets PR.",
      "created_at" : "2023-08-03T08:50:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1663560293",
      "id" : 1663560293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jJ-pl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663560293/reactions"
      },
      "updated_at" : "2023-08-03T08:50:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663560293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282873918"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282873918"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in 167cbf7b1851eeeb28937bd8e241e1f865b813f8:\r\n\r\n\r\n```cpp\r\n    int64_t r{std::ftell(m_file)};",
      "commit_id" : "43d7ec1bb78c1dcfde9ca982e07fb0e51c088dce",
      "created_at" : "2023-08-03T08:55:14Z",
      "diff_hunk" : "@@ -21,6 +21,28 @@ std::size_t AutoFile::detail_fread(Span<std::byte> dst)\n     }\n }\n \n+void AutoFile::seek(int64_t offset, int origin)\n+{\n+    if (IsNull()) {\n+        throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\n+    }\n+    if (fseek(m_file, offset, origin) != 0) {\n+        throw std::ios_base::failure(feof() ? \"AutoFile::seek: end of file\" : \"AutoFile::seek: fseek failed\");\n+    }\n+}\n+\n+int64_t AutoFile::tell()\n+{\n+    if (IsNull()) {\n+        throw std::ios_base::failure(\"AutoFile::tell: file handle is nullptr\");\n+    }\n+    int64_t r = ftell(m_file);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282873918",
      "id" : 1282873918,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mdxo-",
      "original_commit_id" : "167cbf7b1851eeeb28937bd8e241e1f865b813f8",
      "original_line" : 39,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/streams.cpp",
      "position" : null,
      "pull_request_review_id" : 1560573265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282873918/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-03T08:56:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282873918",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282875416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282875416"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in 167cbf7b1851eeeb28937bd8e241e1f865b813f8:\r\n\r\nCould add `std::` before `fseek`? Also, the commit message has a typo:\r\n\r\nusefule -> useful (remove `e`)",
      "commit_id" : "43d7ec1bb78c1dcfde9ca982e07fb0e51c088dce",
      "created_at" : "2023-08-03T08:56:06Z",
      "diff_hunk" : "@@ -21,6 +21,28 @@ std::size_t AutoFile::detail_fread(Span<std::byte> dst)\n     }\n }\n \n+void AutoFile::seek(int64_t offset, int origin)\n+{\n+    if (IsNull()) {\n+        throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\n+    }\n+    if (fseek(m_file, offset, origin) != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282875416",
      "id" : 1282875416,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MdyAY",
      "original_commit_id" : "167cbf7b1851eeeb28937bd8e241e1f865b813f8",
      "original_line" : 29,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/streams.cpp",
      "position" : null,
      "pull_request_review_id" : 1560573265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282875416/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-03T08:56:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282875416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> But it could produce a corrupt dump, which someone might rely on for their backup (even if they shouldn't).\r\n\r\nI've changed it to be optional and enabled with the argument `-withinternalbdb`.\r\n\r\n> Not sure if that was fixed in your later push, but in any case,\r\n\r\nYes, I fixed that\r\n\r\n> I pushed another crash to the qa-assets PR.\r\n\r\nThis seems to be crash in BDB itself rather than in our parser. Not entirely sure how to handle that since we don't care about fuzzing BDB itself.",
      "created_at" : "2023-08-03T16:26:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1664282446",
      "id" : 1664282446,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jMu9O",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664282446/reactions"
      },
      "updated_at" : "2023-08-03T16:26:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664282446",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Not entirely sure how to handle that since we don't care about fuzzing BDB itself.\r\n\r\nIndeed, @MarcoFalke any idea on how to make the fuzzer ignore that?",
      "created_at" : "2023-08-03T17:15:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1664347932",
      "id" : 1664347932,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jM-8c",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664347932/reactions"
      },
      "updated_at" : "2023-08-03T17:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664347932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can you give more context? What are the steps to reproduce? My understanding is that the fuzz CI tasks don't install and use bdb. And you can put a comment in the fuzz test to document that running this with bdb can be done at the users own risk. Outside of that, my recommendations would be to use bdb-5.3, which fixed a few bugs (or maybe it is possible to use an even later version, just for fuzzing?).",
      "created_at" : "2023-08-08T10:33:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1669359482",
      "id" : 1669359482,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585jgGd6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1669359482/reactions"
      },
      "updated_at" : "2023-08-08T10:33:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1669359482",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase if still relevant",
      "created_at" : "2023-09-21T10:55:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1729332701",
      "id" : 1729332701,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585nE4Xd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729332701/reactions"
      },
      "updated_at" : "2023-09-21T10:55:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729332701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1382487576"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382487576"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(in commit b7b90daf46ae840d9ab089ac438f71f7b79dbf5a) could avoid duplicate std::map lookup by using `.find` instead:\r\n```suggestion\r\n    const auto it{m_database.m_records.find(key_data)};\r\n    if (it == m_database.m_records.end()) {\r\n         return false;\r\n    }\r\n    auto val = it->second;\r\n```",
      "commit_id" : "43d7ec1bb78c1dcfde9ca982e07fb0e51c088dce",
      "created_at" : "2023-11-05T00:53:14Z",
      "diff_hunk" : "@@ -21,17 +21,41 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;\n+    SerializeData key_data{key.begin(), key.end()};\n+    if (m_database.m_records.count(key_data) == 0) {\n+        return false;\n+    }\n+    auto val = m_database.m_records.at(key_data);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1382487576",
      "id" : 1382487576,
      "line" : 696,
      "node_id" : "PRRC_kwDOABII585SZxYY",
      "original_commit_id" : "b7b90daf46ae840d9ab089ac438f71f7b79dbf5a",
      "original_line" : 28,
      "original_position" : 9,
      "original_start_line" : 25,
      "path" : "src/wallet/migrate.cpp",
      "position" : 696,
      "pull_request_review_id" : 1713893741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382487576/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 693,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-11-05T01:15:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382487576",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1382488042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382488042"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(in commit a02db44419148984d726f95fd66030b9a40fc0bb) readability nit: could also use `std::get` here, as the RHS of the OR conditoin is only executed if the variant holds the right data type:\r\n```suggestion\r\n    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get<DataRecord>(page.records.at(0)).data != SUBDATABASE_NAME) {\r\n```\r\n(same for the two `page.records.at(1)` instances a few lines below)",
      "commit_id" : "43d7ec1bb78c1dcfde9ca982e07fb0e51c088dce",
      "created_at" : "2023-11-05T00:59:23Z",
      "diff_hunk" : "@@ -1,13 +1,601 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+// Subdatabase name\n+static const std::vector<std::byte> SUBDATABASE_NAME = {std::byte{'m'}, std::byte{'a'}, std::byte{'i'}, std::byte{'n'}};\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    uint32_t expected_page_num;\n+\n+    MetaPage(uint32_t expected_page_num) : expected_page_num(expected_page_num) {}\n+    MetaPage() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        // Page number must match\n+        if (page_num != expected_page_num) {\n+            throw std::runtime_error(\"Meta page number mismatch\");\n+        }\n+\n+        // Check magic\n+        if (magic != BTREE_MAGIC) {\n+            throw std::runtime_error(\"Not a BDB file\");\n+        }\n+\n+        // Only version 9 is supported\n+        if (version != 9) {\n+            throw std::runtime_error(\"Unsupported BDB data file version number\");\n+        }\n+\n+        // Page size must be 512 <= pagesize <= 64k, and be a power of 2\n+        if (pagesize < 512 || pagesize > 65536 ||  (pagesize & (pagesize - 1)) != 0) {\n+            throw std::runtime_error(\"Bad page size\");\n+        }\n+\n+        // Page type must be the btree type\n+        if (type != PageType::BTREE_META) {\n+            throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+        }\n+\n+        // Only supported meta-flag is subdatabase\n+        if (flags != BTreeFlags::SUBDB) {\n+            throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    uint32_t expected_page_num;\n+\n+    PageHeader(uint32_t page_num) : expected_page_num(page_num) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (expected_page_num != page_num) {\n+            throw std::runtime_error(\"Page number mismatch\");\n+        }\n+        if (level < 1) {\n+            throw std::runtime_error(\"Bad btree level\");\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.emplace_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static void SeekToPage(AutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n \n void BerkeleyRODatabase::Open()\n {\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    AutoFile db_file(file);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    // Expected page number is 0\n+    MetaPage outer_meta(0);\n+    db_file >> outer_meta;\n+    page_size = outer_meta.pagesize;\n+\n+    // Verify the size of the file is a multiple of the page size\n+    db_file.seek(0, SEEK_END);\n+    int64_t size = db_file.tell();\n+    /* BDB doesn't actually error on this\n+    if (size % page_size != 0) {\n+        throw std::runtime_error(\"File size is not a multiple of page size\");\n+    }\n+    */\n+\n+    // Check the last page number\n+    uint32_t expected_last_page = (size / page_size) - 1;\n+    if (outer_meta.last_page != expected_last_page) {\n+        throw std::runtime_error(\"Last page number could not fit in file\");\n+    }\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.root);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != SUBDATABASE_NAME) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1382488042",
      "id" : 1382488042,
      "line" : 566,
      "node_id" : "PRRC_kwDOABII585SZxfq",
      "original_commit_id" : "a02db44419148984d726f95fd66030b9a40fc0bb",
      "original_line" : 505,
      "original_position" : 505,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : 566,
      "pull_request_review_id" : 1713893741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382488042/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-05T01:15:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382488042",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Re https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1669359482\r\n\r\n> What are the steps to reproduce?\r\n\r\nRun the fuzzer on the fuzz test introduced in this PR seeded with Sjors' inputs from his [qa repo PR](https://github.com/bitcoin-core/qa-assets/pull/140) and compiled with bdb enabled.\r\n\r\n> Outside of that, my recommendations would be to use bdb-5.3\r\n\r\nThe bugs persist even with bdb 5.3.\r\n\r\n",
      "created_at" : "2023-11-06T07:50:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1794248918",
      "id" : 1794248918,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
      "node_id" : "IC_kwDOABII585q8hDW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1794248918/reactions"
      },
      "updated_at" : "2023-11-06T07:50:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1794248918",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1391817693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817693"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as suggested",
      "commit_id" : "c611bf520dfb00bc8132017899290116568d5ea1",
      "created_at" : "2023-11-13T23:42:04Z",
      "diff_hunk" : "@@ -21,17 +21,41 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;\n+    SerializeData key_data{key.begin(), key.end()};\n+    if (m_database.m_records.count(key_data) == 0) {\n+        return false;\n+    }\n+    auto val = m_database.m_records.at(key_data);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1391817693",
      "id" : 1391817693,
      "in_reply_to_id" : 1382487576,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585S9XPd",
      "original_commit_id" : "b7b90daf46ae840d9ab089ac438f71f7b79dbf5a",
      "original_line" : 28,
      "original_position" : 9,
      "original_start_line" : 25,
      "path" : "src/wallet/migrate.cpp",
      "position" : null,
      "pull_request_review_id" : 1728455389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817693/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-11-13T23:42:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817693",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1391817724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817724"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as suggested",
      "commit_id" : "c611bf520dfb00bc8132017899290116568d5ea1",
      "created_at" : "2023-11-13T23:42:08Z",
      "diff_hunk" : "@@ -1,13 +1,601 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+// Subdatabase name\n+static const std::vector<std::byte> SUBDATABASE_NAME = {std::byte{'m'}, std::byte{'a'}, std::byte{'i'}, std::byte{'n'}};\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    uint32_t expected_page_num;\n+\n+    MetaPage(uint32_t expected_page_num) : expected_page_num(expected_page_num) {}\n+    MetaPage() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        // Page number must match\n+        if (page_num != expected_page_num) {\n+            throw std::runtime_error(\"Meta page number mismatch\");\n+        }\n+\n+        // Check magic\n+        if (magic != BTREE_MAGIC) {\n+            throw std::runtime_error(\"Not a BDB file\");\n+        }\n+\n+        // Only version 9 is supported\n+        if (version != 9) {\n+            throw std::runtime_error(\"Unsupported BDB data file version number\");\n+        }\n+\n+        // Page size must be 512 <= pagesize <= 64k, and be a power of 2\n+        if (pagesize < 512 || pagesize > 65536 ||  (pagesize & (pagesize - 1)) != 0) {\n+            throw std::runtime_error(\"Bad page size\");\n+        }\n+\n+        // Page type must be the btree type\n+        if (type != PageType::BTREE_META) {\n+            throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+        }\n+\n+        // Only supported meta-flag is subdatabase\n+        if (flags != BTreeFlags::SUBDB) {\n+            throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    uint32_t expected_page_num;\n+\n+    PageHeader(uint32_t page_num) : expected_page_num(page_num) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (expected_page_num != page_num) {\n+            throw std::runtime_error(\"Page number mismatch\");\n+        }\n+        if (level < 1) {\n+            throw std::runtime_error(\"Bad btree level\");\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.emplace_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static void SeekToPage(AutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n \n void BerkeleyRODatabase::Open()\n {\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    AutoFile db_file(file);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    // Expected page number is 0\n+    MetaPage outer_meta(0);\n+    db_file >> outer_meta;\n+    page_size = outer_meta.pagesize;\n+\n+    // Verify the size of the file is a multiple of the page size\n+    db_file.seek(0, SEEK_END);\n+    int64_t size = db_file.tell();\n+    /* BDB doesn't actually error on this\n+    if (size % page_size != 0) {\n+        throw std::runtime_error(\"File size is not a multiple of page size\");\n+    }\n+    */\n+\n+    // Check the last page number\n+    uint32_t expected_last_page = (size / page_size) - 1;\n+    if (outer_meta.last_page != expected_last_page) {\n+        throw std::runtime_error(\"Last page number could not fit in file\");\n+    }\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.root);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != SUBDATABASE_NAME) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1391817724",
      "id" : 1391817724,
      "in_reply_to_id" : 1382488042,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585S9XP8",
      "original_commit_id" : "a02db44419148984d726f95fd66030b9a40fc0bb",
      "original_line" : 505,
      "original_position" : 505,
      "original_start_line" : null,
      "path" : "src/wallet/migrate.cpp",
      "position" : null,
      "pull_request_review_id" : 1728455442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817724/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-13T23:42:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
