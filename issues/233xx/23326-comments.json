[
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors\r\n\r\nMy thinking was that once it's deemed ready, we'd forward port the MuSig(2) support in secp256k1-zkp to libsecp256k1. That'd solve the issue of implementation compatibility.\r\n\r\nBeyond that, there are indeed a number of things that need to be decided:\r\n\r\n* How to integrate into descriptors. One possibility is to only support an `agg` fragment as leaf key (e.g. `agg(xpub1/.../*,xpub2/.../*)`), but it's also possible I think to support treating `agg` of xpubs as a new \"xpub\" itself (e.g. `agg(xpub1/...,xpub2/...)/*`) for example by defining the aggregated chaincode as a hash of the child chaincodes. This complicates signing further, however, though I don't think there are fundamental problems with this (I've had some discussions with @jonasnick with this).\r\n\r\n* Signing support feels like it'd be pretty much orthogonal to the descriptors integration. My thinking is that there is no need to restrict it - whatever our descriptors signing logic support will pretty much automatically be supported by MuSig signing code once we have it. `tr()` descriptors right now are very limited (only key path, and `pk(X)` leaves), but if that gets extended, all places that were key expressions are supported in there should also deal fine with MuSig keys.\r\n\r\n* I think you're misunderstanding how the pre-generated nonce variant of MuSig2 works. It isn't sufficient to generate the nonces ahead of time - they also need to be distributed to the co-signers ahead of time (in such a way that they know which nonce is going to be used with which signing attempt, **before** that signing attempt is made). This is both logistically hard (it's essentially incompatible with descriptors, as you can't go and generate/pay to addresses before nonce material has been exchanged), and a huge footgun (all participants need to increment positions in lockstep, make sure never to reuse, need to re-distribute nonces in case of loss of key material; backups are a huge hazard, ...). In my view, this variant is for very specialized applications where latency matters, and you have a well-defined protocol between known-to-be-online co-signers already that it can be integrated into (e.g. I can imagine Lightning using them). In a more \"general purpose\" setting like Bitcoin Core should probably cater to, it feels much safer & saner to stick to the non-interactive setup + 2-round signing version of the protocol.\r\n\r\n* PSBT extensions need to be defined for both rounds (for announcing which public nonces every co-signing is going to use, and for the partial signatures).",
      "created_at" : "2021-10-20T17:47:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-947898104",
      "id" : 947898104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844f8b4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947898104/reactions"
      },
      "updated_at" : "2021-10-20T17:47:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947898104",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> it's deemed ready, we'd forward port the MuSig(2) support in secp256k1-zkp to libsecp256k1. \r\n\r\nThat makes sense, but I suspect more people will review the secp256k1 PR, and more practical issues will come to light, if there's a (draft) Bitcoin Core integration. So it's a bit of chicken-egg.\r\n\r\n> It isn't sufficient to generate the nonces ahead of time - they also need to be distributed to the co-signers ahead of time (in such a way that they know which nonce is going to be used with which signing attempt, before that signing attempt is made)\r\n\r\nAh, the first constraint might be solvable by exporting it along with descriptors (which hardware wallets should store anyway for change detection). But the second constraint makes that a lot more complicated. \r\n\r\n> it feels much safer & saner to stick to the non-interactive setup + 2-round signing version of the protocol\r\n\r\nThat makes sense. Two rounds is annoying when any physical travel is involved, but it does seem much more realistic to implement in the near term. For a simple computer + hardware wallet setup two rounds are no problem; just a matter of calling HWI twice.\r\n\r\nI updated the description to reflect this.",
      "created_at" : "2021-10-20T18:47:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-947942068",
      "id" : 947942068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844gHK0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947942068/reactions"
      },
      "updated_at" : "2021-10-20T18:56:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947942068",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "If the non-interactive setup of MuSig 2 without preprocessing is what is being discussed, have the pros/cons of MuSig-DN been reconsidered? They would now be the same number of rounds, with MuSig-DN having all the security benefits of deterministic nonces (with the costs of implementation complexity and increased verification times).\r\n\r\n",
      "created_at" : "2021-10-22T21:35:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-949972894",
      "id" : 949972894,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844n2-e",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949972894/reactions"
      },
      "updated_at" : "2021-10-22T21:35:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949972894",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From the [MuSig-DN paper](https://eprint.iacr.org/2020/1057): \"This makes it possible to realize MuSig-DN efficiently using zero-knowledge proof frameworks for arithmetic circuits which support inputs given in Pedersen commitments, e.g., Bulletproofs. \"\r\n\r\nIn other words this adds a cryptographic assumption, as well as additional dependencies to implement said cryptography.",
      "created_at" : "2021-10-23T10:42:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-950132928",
      "id" : 950132928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844oeDA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950132928/reactions"
      },
      "updated_at" : "2021-10-23T10:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950132928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "So the advantages of MuSig-DN over MuSig:\r\n* Stateless signing: signers don't need any memory between signing sessions (either within rounds, or across rounds).\r\n* Compared to MuSig1: one fewer round (but 2-round MuSig2 has the same number of rounds).\r\n\r\nIt's easy to think MuSig-DN also avoids the need for randomness at signing time as well. While that's true on its face, MuSig2 can avoid it too: as the signers need state anyway, and a private key, they can use a counter in their state together with the private key to generate randomness (use H(counter++ || privkey) as RNG).\r\n\r\nThe disadvantages are:\r\n* MuSig-DN is far slower (~1000x) in terms of CPU cost.\r\n* Complicates setup (in addition to participant keys, co-signers also need to know each other's 512-bit host key) compared to 2-round MuSig2 (but 1-round MuSig2 is harder still).\r\n* Implementation complexity (needs arithmetic over two different curves (not secp256k1), needs Bulletproofs or other NIZK proof system, and a relatively complex statement (2030 gates) to prove in it). Also, only very experimental code for MuSig-DN exists; MuSig2 has an implementation that's pretty close to production-ready.\r\n* Additional security assumptions (DDH over two different elliptic curves).\r\n\r\nSo while MuSig-DN is conceptually a nice solution to the problem of having stateful signers (which is definitely annoying, and a risk for unsafe implementations), I don't think the downsides weigh up against it. The additional signing computational cost pretty much puts it pretty out of reach of hardware signing devices, for example. Plus, its only real advantage is a concern about unsafe implementations (which deal incorrectly with signing state) - but it does so by increasing implementation complexity in other ways which also increases risk. With MuSig2, the picture is even less rosy, as the round number advantage is gone too.",
      "created_at" : "2021-10-23T14:52:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-950163967",
      "id" : 950163967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844oln_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950163967/reactions"
      },
      "updated_at" : "2021-10-23T14:53:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950163967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks for the explanation!\r\n\r\nI will have to think how this could affect systems like Qubes due to the hypervisor, or amnesiac systems like Tails.",
      "created_at" : "2021-10-23T15:30:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-950168972",
      "id" : 950168972,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844om2M",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950168972/reactions"
      },
      "updated_at" : "2021-10-23T15:30:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950168972",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> So while MuSig-DN is conceptually a nice solution to the problem of having stateful signers (which is definitely annoying, and a risk for unsafe implementations), I don't think the downsides weigh up against it. \r\n\r\nAgreed. MuSig-DN (or the more efficient scheme in https://eprint.iacr.org/2021/1055.pdf) is still more in the academic realm. Technically it does its job but it's hard to use in practice. I think we'll need more research to make deterministic nonces in multisig more efficient and simpler to implement if we want something that fits in Bitcoin Core.  ",
      "created_at" : "2021-10-25T09:05:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-950694747",
      "id" : 950694747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844qnNb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950694747/reactions"
      },
      "updated_at" : "2021-10-25T09:05:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950694747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> it's also possible I think to support treating agg of xpubs as a new \"xpub\" itself (e.g. agg(xpub1/...,xpub2/...)/*) for example by defining the aggregated chaincode as a hash of the child chaincodes.\r\n\r\nI don't think there's a fundamental problem with that. I opened a [libsecp-zkp PR](https://github.com/ElementsProject/secp256k1-zkp/pull/151) that allows BIP32-tweaking an aggregate public key and signing for it. Luckily, it's not terribly complicated (see the commit that updates the musig example code [here](https://github.com/ElementsProject/secp256k1-zkp/pull/151/commits/8d1ece06a28128ad8810fdf52a1f88d78ce1e7ee)).",
      "created_at" : "2021-10-26T16:19:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-952101154",
      "id" : 952101154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844v-ki",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952101154/reactions"
      },
      "updated_at" : "2021-10-26T16:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952101154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2582071?v=4",
         "events_url" : "https://api.github.com/users/jonasnick/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasnick/followers",
         "following_url" : "https://api.github.com/users/jonasnick/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasnick/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasnick",
         "id" : 2582071,
         "login" : "jonasnick",
         "node_id" : "MDQ6VXNlcjI1ODIwNzE=",
         "organizations_url" : "https://api.github.com/users/jonasnick/orgs",
         "received_events_url" : "https://api.github.com/users/jonasnick/received_events",
         "repos_url" : "https://api.github.com/users/jonasnick/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasnick/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasnick/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasnick"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I think it's useful to describe the required behaviors in more detail, and with reference to the PSBT roles:\r\n\r\n#### Existing Creator, Updater, and Combiner behaviors...\r\n\r\n#### MuSig2 Round 1\r\n\r\n* PSBT is distributed to all Signers\r\n* Signers generate nonces (either from a monotonic counter and PRF or high quality RNG)\r\n* Signers add their nonces to PSBT\r\n* Combiner merges Signers' PSBTs\r\n* Optional: Combiner runs SignAgg on Signers' nonces \r\n  * Combiner adds aggregated nonce to PSBT\r\n  * Optional: Combiner removes individual Signers' nonces from PSBT\r\n\r\n#### MuSig2 Round 2\r\n\r\n* PSBT is distributed to all Signers\r\n* If PSBT contains individual Signers' nonces\r\n  * If PSBT does not contain aggregate nonce\r\n    * Signers run SignAgg to produce aggregate nonce\r\n  * Optional: Signers run Partial Verification\r\n* Signers run Sign'\r\n* Signers add their partial signatures to PSBT\r\n* Finalizer aggregates partial signatures and nonces\r\n* Finalizer validates final signature\r\n* Finalizer adds final signature to PSBT\r\n\r\n#### Existing Finalizer / Extractor behaviors...",
      "created_at" : "2021-11-23T18:11:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-976960583",
      "id" : 976960583,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5846OzxH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976960583/reactions"
      },
      "updated_at" : "2021-11-23T18:11:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976960583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/90655836?v=4",
         "events_url" : "https://api.github.com/users/brandonblack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brandonblack/followers",
         "following_url" : "https://api.github.com/users/brandonblack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brandonblack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brandonblack",
         "id" : 90655836,
         "login" : "brandonblack",
         "node_id" : "MDQ6VXNlcjkwNjU1ODM2",
         "organizations_url" : "https://api.github.com/users/brandonblack/orgs",
         "received_events_url" : "https://api.github.com/users/brandonblack/received_events",
         "repos_url" : "https://api.github.com/users/brandonblack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brandonblack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brandonblack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brandonblack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Beyond that, there are indeed a number of things that need to be decided:\r\n> \r\n> * How to integrate into descriptors. One possibility is to only support an `agg` fragment as leaf key (e.g. `agg(xpub1/.../*,xpub2/.../*)`), but it's also possible I think to support treating `agg` of xpubs as a new \"xpub\" itself (e.g. `agg(xpub1/...,xpub2/...)/*`) for example by defining the aggregated chaincode as a hash of the child chaincodes. This complicates signing further, however, though I don't think there are fundamental problems with this (I've had some discussions with @jonasnick with this).\r\n> \r\n\r\nWe're engraving descriptors to metal and are thus very interested in having compact or even constant sized MuSig/FROST descriptors. Is it possible to support descriptors that include only the \"aggregated xpub\" and not every key as in the proposed `agg()` expression, leading to a O(1) size instead of O(number-of-keys)?",
      "created_at" : "2023-11-14T13:48:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1810236476",
      "id" : 1810236476,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585r5gQ8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1810236476/reactions"
      },
      "updated_at" : "2023-11-14T13:48:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1810236476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/93251679?v=4",
         "events_url" : "https://api.github.com/users/seedhammer/events{/privacy}",
         "followers_url" : "https://api.github.com/users/seedhammer/followers",
         "following_url" : "https://api.github.com/users/seedhammer/following{/other_user}",
         "gists_url" : "https://api.github.com/users/seedhammer/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/seedhammer",
         "id" : 93251679,
         "login" : "seedhammer",
         "node_id" : "U_kgDOBY7oXw",
         "organizations_url" : "https://api.github.com/users/seedhammer/orgs",
         "received_events_url" : "https://api.github.com/users/seedhammer/received_events",
         "repos_url" : "https://api.github.com/users/seedhammer/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/seedhammer/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/seedhammer/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/seedhammer"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is it possible to support descriptors that include only the \"aggregated xpub\" and not every key as in the proposed `agg()` expression, leading to a O(1) size instead of O(number-of-keys)?\r\n\r\nThe aggregated pubkey will look like any other pubkey, so it is trivial to substitute it in to the descriptor if you wish to do so. However this is lossy as you will lose the information about the pubkeys that are involved in that aggregated pubkey, and that information is necessary for spending. It will still need to be stored and backed up somewhere.",
      "created_at" : "2023-11-14T16:59:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1810695939",
      "id" : 1810695939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585r7QcD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1810695939/reactions"
      },
      "updated_at" : "2023-11-14T16:59:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1810695939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > Is it possible to support descriptors that include only the \"aggregated xpub\" and not every key as in the proposed `agg()` expression, leading to a O(1) size instead of O(number-of-keys)?\r\n> \r\n> The aggregated pubkey will look like any other pubkey, so it is trivial to substitute it in to the descriptor if you wish to do so. However this is lossy as you will lose the information about the pubkeys that are involved in that aggregated pubkey, and that information is necessary for spending. It will still need to be stored and backed up somewhere.\r\n\r\nAfter talking with @seedhammer  about this a bit, and thinking about it, I came to the following tentative conclusion (after changing my mind about three times :) ):\r\n\r\nMuSig2 aggregation is compatible with BIP32 derivation (that much is not controversial, it's described in the MuSig2 BIP and, well, here), but (claim:) even more specifically, a single participant in the scheme doesn't need to store more than O(1) information, in order to make partial signatures later: instead of storing their private key (call it x_i), they can store x_i_agg = H(L||P_i)x_i (their 'private aggregated key' or whatever we call it), along with the negotiated aggregate public key P_agg. \r\n(Note: i'm specifically saying there that you *don't* store L, the full list of keys).\r\nThen let's say we want to sign on BIP32 (unhardened) branch index j. That participant, i, can (a) calculate the new aggregate pubkey P_agg_j = P_agg + d_j G (where d_j is the BIP32 tweak, publically derivable if unhardened), then calculate their signature share (after following the MuSig2 nonce generation process, note that the factor 'b' only depends on the aggregate key, here P_agg_j), with the formula s_i = k_i_1 + bk_i_2 + H(P_agg_j||R_agg||m)x_i_agg. When these s_i are added, they do not form a full valid signature, but you only need to further add H(P_agg_j||R_agg||m)d_j to make it correct.\r\n\r\nIt's highly likely that that is either (a) already known or (b) wrong in some detail or possibly (c) there is some security issue with doing this [see note]. But I wasn't able to find it written anywhere?\r\n\r\n\r\nA bit off topic here, but more relevant to @seedhammer 's needs, but I believe similar logic applies to FROST (if anything it's a little easier).\r\n\r\n[note] a relevant point of course is that doing unhardened BIP32 with schnorr is only secure because of key-prefixing; ecdsa gets by without it because of non-linearity, but if we didn't use key-prefixing in BIP340 then unhardened i.e. publically derivable tweaks would allow forgery.",
      "created_at" : "2023-11-14T19:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1811075330",
      "id" : 1811075330,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585r8tEC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1811075330/reactions"
      },
      "updated_at" : "2023-11-14T20:25:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1811075330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4278257?v=4",
         "events_url" : "https://api.github.com/users/AdamISZ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AdamISZ/followers",
         "following_url" : "https://api.github.com/users/AdamISZ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AdamISZ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AdamISZ",
         "id" : 4278257,
         "login" : "AdamISZ",
         "node_id" : "MDQ6VXNlcjQyNzgyNTc=",
         "organizations_url" : "https://api.github.com/users/AdamISZ/orgs",
         "received_events_url" : "https://api.github.com/users/AdamISZ/received_events",
         "repos_url" : "https://api.github.com/users/AdamISZ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AdamISZ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AdamISZ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AdamISZ"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "\n> Is it possible to support descriptors that include only the \"aggregated xpub\" and not every key as in the proposed `agg()` expression, leading to a O(1) size instead of O(number-of-keys)?\n\nYou should be able to use Shamir secret sharing between the private key data so that a spending threshold can recover all pubkey data needed to reconstruct the agg() expression.\n\n",
      "created_at" : "2023-11-15T02:57:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1811731481",
      "id" : 1811731481,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585r_NQZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1811731481/reactions"
      },
      "updated_at" : "2023-11-15T02:57:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1811731481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73506583?v=4",
         "events_url" : "https://api.github.com/users/BenWestgate/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BenWestgate/followers",
         "following_url" : "https://api.github.com/users/BenWestgate/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BenWestgate/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BenWestgate",
         "id" : 73506583,
         "login" : "BenWestgate",
         "node_id" : "MDQ6VXNlcjczNTA2NTgz",
         "organizations_url" : "https://api.github.com/users/BenWestgate/orgs",
         "received_events_url" : "https://api.github.com/users/BenWestgate/received_events",
         "repos_url" : "https://api.github.com/users/BenWestgate/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BenWestgate/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BenWestgate/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BenWestgate"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > Is it possible to support descriptors that include only the \"aggregated xpub\" and not every key as in the proposed `agg()` expression, leading to a O(1) size instead of O(number-of-keys)?\r\n> \r\n> You should be able to use Shamir secret sharing between the private key data so that a spending threshold can recover all pubkey data needed to reconstruct the agg() expression.\r\n\r\nAs I understand it, the `agg()` expression requires all `n` public keys. I don't see how a threshold, `m < n`, can recover `n` keys and certainly not with constant O(1) storage. Can you elaborate?",
      "created_at" : "2023-11-15T03:38:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1811758875",
      "id" : 1811758875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585r_T8b",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1811758875/reactions"
      },
      "updated_at" : "2023-11-15T03:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1811758875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/93251679?v=4",
         "events_url" : "https://api.github.com/users/seedhammer/events{/privacy}",
         "followers_url" : "https://api.github.com/users/seedhammer/followers",
         "following_url" : "https://api.github.com/users/seedhammer/following{/other_user}",
         "gists_url" : "https://api.github.com/users/seedhammer/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/seedhammer",
         "id" : 93251679,
         "login" : "seedhammer",
         "node_id" : "U_kgDOBY7oXw",
         "organizations_url" : "https://api.github.com/users/seedhammer/orgs",
         "received_events_url" : "https://api.github.com/users/seedhammer/received_events",
         "repos_url" : "https://api.github.com/users/seedhammer/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/seedhammer/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/seedhammer/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/seedhammer"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "In FROST\r\n\r\n> > > Is it possible to support descriptors that include only the \"aggregated xpub\" and not every key as in the proposed `agg()` expression, leading to a O(1) size instead of O(number-of-keys)?\r\n> > \r\n> > \r\n> > You should be able to use Shamir secret sharing between the private key data so that a spending threshold can recover all pubkey data needed to reconstruct the agg() expression.\r\n> \r\n> As I understand it, the `agg()` expression requires all `n` public keys. I don't see how a threshold, `m < n`, can recover `n` keys and certainly not with constant O(1) storage. Can you elaborate?\r\n\r\nFor MuSig2, each signer needs all pubkeys and its secret key in order to sign. Because MuSig2 is an n-of-n multi-signature, this means that if you can retrieve sufficient secret key material to sign, you also have everything you need to recreate all public keys.\r\n\r\nNow most MuSig2 users will also be using some kind of a taptree, which may contain other MuSig2s or script multisigs. In that case, the situation is much like that in a plain script multsig. Each signer's secret key should be stored with n-minus-t (I think?) other signers' public keys, as that enables them to fully reconstruct each of the possible signing cases for each address.\r\n\r\nFor FROST, the situation is different. FROST's DKG itself results in something approximately equivalent to a Shamir's Secret Sharing split of a secret key. What is unique about that is that one can have a single Schnorr public key for which the multisig can sign and the quorum of secret key shares _alone_ is sufficient to fully reconstruct the aggregate public and secret key. It is further possible, through a ceremony similar to that used for producing a FROST signature, to produce a new sharing of keys without ever reconstructing the aggregate secret key in a single location.\r\n\r\nIn short, FROST provides a significant improvement in the safe storage of multi-signature wallets compared to MuSig2 or script multisig.",
      "created_at" : "2023-11-15T19:00:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1813094549",
      "id" : 1813094549,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585sEaCV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1813094549/reactions"
      },
      "updated_at" : "2023-11-15T23:26:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1813094549",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/90655836?v=4",
         "events_url" : "https://api.github.com/users/brandonblack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brandonblack/followers",
         "following_url" : "https://api.github.com/users/brandonblack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brandonblack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brandonblack",
         "id" : 90655836,
         "login" : "brandonblack",
         "node_id" : "MDQ6VXNlcjkwNjU1ODM2",
         "organizations_url" : "https://api.github.com/users/brandonblack/orgs",
         "received_events_url" : "https://api.github.com/users/brandonblack/received_events",
         "repos_url" : "https://api.github.com/users/brandonblack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brandonblack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brandonblack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brandonblack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> For MuSig2, each signer needs all pubkeys and its secret key in order to sign.\r\n\r\nTo clarify, this is within _spec_ MuSig2 as described in BIP327. @AdamISZ's construction is quite possibly also secure and correct, but it's _way_ above my pay grade to evaluate the security or correctness of methods outside the spec :-P",
      "created_at" : "2023-11-16T15:38:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1814703426",
      "id" : 1814703426,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585sKi1C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814703426/reactions"
      },
      "updated_at" : "2023-11-16T15:38:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814703426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/90655836?v=4",
         "events_url" : "https://api.github.com/users/brandonblack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brandonblack/followers",
         "following_url" : "https://api.github.com/users/brandonblack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brandonblack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brandonblack",
         "id" : 90655836,
         "login" : "brandonblack",
         "node_id" : "MDQ6VXNlcjkwNjU1ODM2",
         "organizations_url" : "https://api.github.com/users/brandonblack/orgs",
         "received_events_url" : "https://api.github.com/users/brandonblack/received_events",
         "repos_url" : "https://api.github.com/users/brandonblack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brandonblack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brandonblack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brandonblack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> To clarify, this is within _spec_ MuSig2 as described in BIP327. @AdamISZ's construction is quite possibly also secure and correct, but it's _way_ above my pay grade to evaluate the security or correctness of methods outside the spec :-P\r\n\r\nThis would be a good time to mention that - even though it's sound advice to never step outside the procedure of a spec like this, because this is cryptography - there's a different reason why my suggestion there is \"flawed\", aside from the a) b) c) that I mentioned, it's d) : this procedure isn't *useful* for MuSig2, because we are limited to N of N signing policies and the nonce generation is interactive. Hence, in a recovery process with limited data, since all N parties would have to talk to each other, or a coordinator (modulo nonce pre-processing maybe?), they could also communicate pubkeys anyway. Instead of each party storing x_agg_i = H(L||P_i)x_i and P_agg as I analyzed there, they could each store x_i and P_i and the agg keys are trivially recovered.\r\n\r\nPossibly the point I raised there is still of interest, though. I'm not sure.\r\n\r\nAnd to reiterate, and as @brandonblack has gone into more detail on, this question is much more of interest with FROST.",
      "created_at" : "2023-11-16T16:11:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1814769006",
      "id" : 1814769006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585sKy1u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814769006/reactions"
      },
      "updated_at" : "2023-11-16T16:11:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814769006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4278257?v=4",
         "events_url" : "https://api.github.com/users/AdamISZ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AdamISZ/followers",
         "following_url" : "https://api.github.com/users/AdamISZ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AdamISZ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AdamISZ",
         "id" : 4278257,
         "login" : "AdamISZ",
         "node_id" : "MDQ6VXNlcjQyNzgyNTc=",
         "organizations_url" : "https://api.github.com/users/AdamISZ/orgs",
         "received_events_url" : "https://api.github.com/users/AdamISZ/received_events",
         "repos_url" : "https://api.github.com/users/AdamISZ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AdamISZ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AdamISZ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AdamISZ"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 @seedhammer\r\n\r\n> you will lose the information about the pubkeys that are involved in that aggregated pubkey, and that information is necessary for spending. It will still need to be stored and backed up somewhere.\r\n\r\nAs @AdamISZ notes above it would be sufficient to store the aggregate pubkey, let some third party provide the individual pubkeys and then check whether the aggregate of the individual pubkeys matches the stored aggregate pubkey. Due to the collision resistance property of key aggregation, the check only passes if the provided individual pubkeys were correct. Not sure if that follows the design philosophy of descriptors.\r\n\r\n@AdamISZ's proposed modification to the signing algorithm also looks secure (even if it may not be as useful) as it purely changes internal caching and leaves the output indistinguishable from the original signing algorithm.",
      "created_at" : "2023-11-16T20:06:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1815234541",
      "id" : 1815234541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585sMkft",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815234541/reactions"
      },
      "updated_at" : "2023-11-16T20:06:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815234541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2582071?v=4",
         "events_url" : "https://api.github.com/users/jonasnick/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasnick/followers",
         "following_url" : "https://api.github.com/users/jonasnick/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasnick/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasnick",
         "id" : 2582071,
         "login" : "jonasnick",
         "node_id" : "MDQ6VXNlcjI1ODIwNzE=",
         "organizations_url" : "https://api.github.com/users/jonasnick/orgs",
         "received_events_url" : "https://api.github.com/users/jonasnick/received_events",
         "repos_url" : "https://api.github.com/users/jonasnick/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasnick/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasnick/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasnick"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm a bit confused by the discussion here.\r\n\r\nThe point of descriptors is encoding all information necessary to spend funds (apart from private key material, which is optional). If you remove information like which the co-signer public keys are, then signing no longer works. Of course, you *could* get that information from your cosigners, but if that's acceptable, why can't you get the descriptor in its entirety from the cosigners (and if desired, just keep the (master) private key)?\r\n\r\nEDIT: I guess in case we're looking at MuSig2 aggregation of multiple keys, and then applying BIP32 derivation to the aggregated key, there is a point, as it'd let you derive keys without needing to know the individual participants' keys. You'd still need to know the participants at signing time, but if all you want is a descriptor for address derivation, this suffices. It's also related to https://github.com/bitcoin/bitcoin/issues/24114.",
      "created_at" : "2023-11-16T20:11:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1815241984",
      "id" : 1815241984,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585sMmUA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815241984/reactions"
      },
      "updated_at" : "2023-11-16T20:33:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815241984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa \r\n\r\n> Of course, you *could* get that information from your cosigners, but if that's acceptable, why can't you get the descriptor in its entirety from the cosigners (and if desired, just keep the (master) private key)?\r\n\r\nMy understanding was that it still makes sense to backup the descriptor even though its not sufficient to sign because it commits to your set of co-signers. If you don't back up such a descriptor and instead obtain it from somewhere, then you have to verify again somehow that the cosigners and their public keys are correct.",
      "created_at" : "2023-11-16T20:21:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1815255072",
      "id" : 1815255072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585sMpgg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815255072/reactions"
      },
      "updated_at" : "2023-11-16T20:21:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815255072",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2582071?v=4",
         "events_url" : "https://api.github.com/users/jonasnick/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasnick/followers",
         "following_url" : "https://api.github.com/users/jonasnick/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasnick/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasnick",
         "id" : 2582071,
         "login" : "jonasnick",
         "node_id" : "MDQ6VXNlcjI1ODIwNzE=",
         "organizations_url" : "https://api.github.com/users/jonasnick/orgs",
         "received_events_url" : "https://api.github.com/users/jonasnick/received_events",
         "repos_url" : "https://api.github.com/users/jonasnick/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasnick/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasnick/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasnick"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> My understanding was that it still makes sense to backup the descriptor even though its not sufficient to sign because it commits to your set of co-signers.\r\n\r\nThe address also commits to the set of co-signers.\r\n\r\nBut see my edit above: if you're going to do aggregation and then BIP32 derivation on top, it makes sense to backup the descriptor with the aggregation pre-evaluated; that's effectively equivalent to having the information for all addresses you'd want to derive with it.",
      "created_at" : "2023-11-16T20:24:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1815259028",
      "id" : 1815259028,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585sMqeU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815259028/reactions"
      },
      "updated_at" : "2023-11-16T20:24:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1815259028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Related: https://github.com/bitcoin-core/secp256k1/issues/1452",
      "created_at" : "2023-12-05T22:06:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-1841695038",
      "id" : 1841695038,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII585txgk-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841695038/reactions"
      },
      "updated_at" : "2023-12-05T22:06:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841695038",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   }
]
