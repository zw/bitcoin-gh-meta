[
   {
      "author_association" : "MEMBER",
      "body" : "Given the new build process, it is fairly easy to use a newer compiler, while still targetting older systems, right?\r\n\r\nIf so, I think it makes sense to fairly early on have an optional C++20 mode, and have it enabled in one of the CI targets. This makes sure the source code is C++20 compatible, and perhaps use some C++20 features where possible. It could also be enabled for releases, *if* there is a significant benefit.\r\n\r\nI don't think we want to migrate to have the code _depend_ on C++20 features very soon, as self-compilation on non-cutting-edge systems should remain supported.",
      "created_at" : "2021-10-26T15:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-952067574",
      "id" : 952067574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII5844v2X2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952067574/reactions"
      },
      "updated_at" : "2021-10-26T15:48:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952067574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It looks like  designated initializers were [partially implemented](https://en.cppreference.com/w/cpp/compiler_support#cpp20) in gcc 4.7 and clang 3.0, meaning we can enable C++20 compilation with our current dependencies of gcc-8 and clang-7, without raising them and without affecting any users?",
      "created_at" : "2021-10-26T15:53:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-952078123",
      "id" : 952078123,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII5844v48r",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952078123/reactions"
      },
      "updated_at" : "2021-10-26T15:53:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952078123",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "[C++20 ranges](https://en.cppreference.com/w/cpp/ranges) are pretty cool too. Like @sipa says, I figured we could do compatibility tests anytime, but wouldn't be able to rely on the new features until 2023 or 2024 or so.",
      "created_at" : "2021-10-26T21:51:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-952355438",
      "id" : 952355438,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII5844w8pu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952355438/reactions"
      },
      "updated_at" : "2021-10-26T21:51:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952355438",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm not really a fan of very granularly whitelisting features; it sounds like it'd just be confusing. Even if we only want designated initializers, we can't restrict gcc/clang to _only_ permit those, so you could end up in a situation where inadvertently someone introduces a dependency on a C++20 feature that happens to be supported in all compilers used in CI, but not in all compilers we want to support.\r\n\r\nRegarding ranges... yes, but that kind of feature doesn't give us much. Having conditional code that either uses ranges or a fallback, sounds like it'd generally be more complex and error-prone than just not using the ranges interface at all.",
      "created_at" : "2021-10-26T21:56:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-952357847",
      "id" : 952357847,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII5844w9PX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952357847/reactions"
      },
      "updated_at" : "2021-10-26T21:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952357847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't think we can avoid an \"incomplete\" support of the C++ language version. Currently we support C++17, but can use neither `std::filesystem`, nor `std::set::merge`. Similarly, when we switch to C++20, we won't be able to support `std::format` (and other stuff that hasn't been implemented at all in *any* compiler).\r\n\r\nAlso, our minimum compiler support is now checked by CI, so it shouldn't be possible to introduce a C++ feature that isn't supported by the compilers we want to support.\r\n\r\nSo I think when and if we turn on C++20, partial support of C++20 features will be expected and unavoidable.",
      "created_at" : "2021-10-27T08:36:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-952671776",
      "id" : 952671776,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII5844yJ4g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952671776/reactions"
      },
      "updated_at" : "2021-10-27T08:36:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/952671776",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke That's fair, but I think there is still a significant difference between \"most of C++20, except these things\" and \"only this and this and this feature\".",
      "created_at" : "2021-10-27T18:31:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-953200942",
      "id" : 953200942,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII58440LEu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953200942/reactions"
      },
      "updated_at" : "2021-10-27T18:31:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953200942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, I've changed the milestone to 24.0 for now, at which point we can consider adding a `--enable-c++20` option for developers and CI, similar to https://github.com/bitcoin/bitcoin/pull/18591 Edit: Done in #24169",
      "created_at" : "2021-12-03T11:16:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-985436107",
      "id" : 985436107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII5846vI_L",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985436107/reactions"
      },
      "updated_at" : "2022-03-10T19:15:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985436107",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing for now. It doesn't look like this gives us any new features at this point, as the wanted features are already implemented by hand by us in C++17.\r\n\r\nFeel free to continue discussion or ask for a reopen.",
      "created_at" : "2022-03-30T13:25:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1083138023",
      "id" : 1083138023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585Aj1_n",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083138023/reactions"
      },
      "updated_at" : "2022-03-30T13:25:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083138023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added `consteval` to OP",
      "created_at" : "2023-01-25T13:36:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1403633494",
      "id" : 1403633494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585Tqb9W",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1403633494/reactions"
      },
      "updated_at" : "2023-01-25T13:36:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1403633494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Looks like gcc can be bumped from the now minimum required 9.1 to 10, to get roughly all of C++20. Given that all recent LTS releases of all supported operating systems ship with such a compiler, maybe this can be considered? Maybe not for 26.x, but 27.x should be fine?",
      "created_at" : "2023-06-29T10:49:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1612868795",
      "id" : 1612868795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585gImy7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612868795/reactions"
      },
      "updated_at" : "2023-06-29T10:49:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612868795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Having `std::span<>` with the size as part of the type rather than a runtime thing could be nice for the various crypto things where we currently do things like `assert(key.size() == KEYLEN)`.",
      "created_at" : "2023-08-19T01:20:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1684633647",
      "id" : 1684633647,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585kaXgv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1684633647/reactions"
      },
      "updated_at" : "2023-08-19T01:20:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1684633647",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "c++20 would allow us to get rid of the autoconf-tested and platform-specific conversion code used by `serialize.h`.\r\n\r\nThe current complicated macro/posix-ish approach is a problem for libbitcoinkernel, specifically because it makes `bitcoin-config.h` a part of the api (which is definitely a bug). There are other ways to fix this, but simply making it header-only with c++20 would be the cleanest.\r\n\r\n[See here for a POC](https://github.com/theuni/bitcoin/commit/e04b4fe1ec82943f8016d92ddc7c68afd77842b9).",
      "created_at" : "2023-08-22T13:29:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1688191282",
      "id" : 1688191282,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585kn8Ey",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688191282/reactions"
      },
      "updated_at" : "2023-08-22T13:29:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688191282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> c++20 would allow us to get rid of the autoconf-tested and platform-specific conversion code used by serialize.h.\r\n\r\nThis would be very nice to be able todo. Looks like we are also already in the clear in terms of minimum required versions of compilers and standard libraries.",
      "created_at" : "2023-08-30T15:30:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1699400106",
      "id" : 1699400106,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585lSsmq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699400106/reactions"
      },
      "updated_at" : "2023-08-30T15:30:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699400106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Going to close this now that #28349 has been merged, and work is already underway to use C++20 code. I think further discussion about specific C++20 features, and their usage / compiler requirements, can continue in their own issues.",
      "created_at" : "2023-12-12T11:54:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1851893448",
      "id" : 1851893448,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585uYabI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1851893448/reactions"
      },
      "updated_at" : "2023-12-12T11:54:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1851893448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Having `std::span<>` with the size as part of the type rather than a runtime thing could be nice for the various crypto things where we currently do things like `assert(key.size() == KEYLEN)`.\r\n\r\nI guess this requires a helper method to safely convert to a fixed-size span, internally preferring a compile-time check, or falling back to an assert, if it isn't available?",
      "created_at" : "2023-12-15T08:45:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1857497397",
      "id" : 1857497397,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585utyk1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1857497397/reactions"
      },
      "updated_at" : "2023-12-15T08:45:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1857497397",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > Having `std::span<>` with the size as part of the type rather than a runtime thing could be nice for the various crypto things where we currently do things like `assert(key.size() == KEYLEN)`.\r\n> \r\n> I guess this requires a helper method to safely convert to a fixed-size span, internally preferring a compile-time check, or falling back to an assert, if it isn't available?\r\n\r\nIt doesn't /require/ it, but it'd probably be sensible so we always get an assertion failure rather than corrupted memory?\r\n\r\nI think you only need a helper for dynamic spans; for compile-time spans, just using `foo.subspan<3,18>()` already does compile time range checks. So maybe something like:\r\n\r\n```c++\r\ntemplate <size_t N, typename T, size_t Extent>\r\nstd::span<T,N> MkFixedSpan(std::span<T,Extent> src)\r\n{\r\n    static_assert(Extent == std::dynamic_extent, \"use subspan<0,N>() for static spans\");\r\n    assert(N <= src.size());\r\n    return std::span<T,N>(src);\r\n}\r\n```",
      "created_at" : "2023-12-15T16:18:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1858134567",
      "id" : 1858134567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585uwOIn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1858134567/reactions"
      },
      "updated_at" : "2023-12-15T16:18:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1858134567",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">     assert(N <= src.size());\r\n\r\nRight, seems fine to keep the assert. I was just thinking that it would be nice to drop it if the compiler can prove it isn't needed. Currently that only works for std::array or `[]` types. However, it doesn't seem to work out of the box for array wrappers, like uint256, whose extent is known at compile time.\r\n\r\nIdeally, this should work out of the box, but I guess it is too late to change the language now, so it may be better if we keep writing our own span implementation?\r\n\r\n\r\n```diff\r\ndiff --git a/src/init.cpp b/src/init.cpp\r\nindex 481d5d398d..0625bce0c1 100644\r\n--- a/src/init.cpp\r\n+++ b/src/init.cpp\r\n@@ -1108,6 +1108,7 @@ bool AppInitInterfaces(NodeContext& node)\r\n     return true;\r\n }\r\n \r\n+#include <span>\r\n bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\r\n {\r\n     const ArgsManager& args = *Assert(node.args);\r\n@@ -1933,6 +1934,13 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\r\n         client->start(*node.scheduler);\r\n     }\r\n \r\n+    uint256 a1{};\r\n+    std::array a2{-1};\r\n+    std::span b1{a1};\r\n+    std::span b2{a2};\r\n+    static_assert(a2.size() == b2.size()); // OK\r\n+    static_assert(a1.size() == b1.size()); // Not OK\r\n+\r\n     BanMan* banman = node.banman.get();\r\n     node.scheduler->scheduleEvery([banman]{\r\n         banman->DumpBanlist();\r\n",
      "created_at" : "2023-12-15T16:40:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1858164589",
      "id" : 1858164589,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585uwVdt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1858164589/reactions"
      },
      "updated_at" : "2023-12-15T16:40:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1858164589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Right, seems fine to keep the assert. I was just thinking that it would be nice to drop it if the compiler can prove it isn't needed. Currently that only works for std::array or `[]` types. However, it doesn't seem to work out of the box for array wrappers, like uint256, whose extent is known at compile time.\r\n\r\nSo, number one, I think you need an helper to implicitly convert a uint256 to a constant-extent span or you'll have to be explicit everywhere:\r\n\r\n```c++\r\nclass base_blob\r\n{\r\n...\r\n    constexpr operator std::span<unsigned char,WIDTH>() { return std::span<unsigned char,WIDTH>{*this}; }\r\n    constexpr operator std::span<const unsigned char,WIDTH>() const { return std::span<const unsigned char,WIDTH>{*this}; }\r\n};\r\n```\r\n\r\nThat's enough to let you pass a uint256 to something that expects a 32 uchar span:\r\n\r\n```c++\r\nvoid foo(std::span<const unsigned char,32> data);\r\nvoid foo_u256(const uint256& num)\r\n{\r\n    foo(num);\r\n}\r\n```\r\n\r\n(Then, to be able to pass a dynamic extent span to the function you probably want a helper to avoid having to repeat the type:\r\n\r\n```c++\r\ntemplate<size_t N, typename T>\r\nstd::span<T,N> StaticSubSpan(const std::span<T,std::dynamic_extent>& dynspan)\r\n{\r\n    assert(N == dynspan.size());\r\n    return std::span<T,N>(dynspan); // undefined behaviour if N != dynspan.size()\r\n}\r\n\r\nvoid foo_var(std::span<const unsigned char> vardata)\r\n{\r\n    assert(vardata.size() == 32);\r\n    // foo(vardata); // NOT OK\r\n    // foo(vardata.subspan(32)); // NOT OK\r\n    // foo(vardata.subspan<32>()); // NOT OK\r\n    foo(StaticSubSpan<32>(vardata)); // OK\r\n    foo(std::span<const unsigned char, 32>(vardata)); // OK; risks undefined behaviour if vardata.size() != 32\r\n}\r\n```\r\n\r\n)\r\n\r\n\r\nGetting back on track, if you want to assign a uint256 to a span, you can do that if you're explicit about it being a fixed extent:\r\n\r\n```c++\r\nuint256 a_u256{};\r\n\r\nstd::span<const unsigned char,32> b_u256_2{a_u256};\r\nstatic_assert(b_u256_2.extent == 32); // OK\r\n```\r\n\r\nBut if you want it to be implicit like it is for `std::array`, then I think you need a deduction guide:\r\n\r\n```c++\r\nnamespace std {\r\nspan(uint256& ) -> span<unsigned char, 32>;\r\nspan(const uint256& ) -> span<const unsigned char, 32>;\r\n}\r\nstd::span b_u256_1{a_u256};\r\nstatic_assert(b_u256_1.extent == 32);\r\n```\r\n\r\nBut I think adding a deduction guide for `std::span` on a custom class is undefined behaviour? https://stackoverflow.com/a/63424897 Maybe there's some way to do that properly? Otherwise, being explicit doesn't seem so bad, especially if we swapped `unsigned char` for `uint8_t`...",
      "created_at" : "2023-12-16T09:06:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1858768140",
      "id" : 1858768140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585uyo0M",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1858768140/reactions"
      },
      "updated_at" : "2023-12-16T09:06:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1858768140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think you need an helper\r\n\r\nLooks like you are right. I thought that it was possible to write a concept like\r\n\r\n```cpp\r\ntemplate <class T>\r\nconcept ArrayLike = requires(T a) {\r\n    std::array<decltype(*a.begin()), a.size()>{};\r\n};\r\n```\r\n\r\nBut that doesn't work, because `a.size()` is unevaluated (https://eel.is/c++draft/expr.prim#req.general-2) and presumably template arguments must be evaluated?",
      "created_at" : "2023-12-18T11:11:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1860181524",
      "id" : 1860181524,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585u4B4U",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1860181524/reactions"
      },
      "updated_at" : "2023-12-18T11:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1860181524",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > I think you need an helper\r\n> \r\n> Looks like you are right. I thought that it was possible to write a concept like\r\n> \r\n> ```c++\r\n> template <class T>\r\n> concept ArrayLike = requires(T a) {\r\n>     std::array<decltype(*a.begin()), a.size()>{};\r\n> };\r\n> ```\r\n> \r\n> But that doesn't work, because `a.size()` is unevaluated (https://eel.is/c++draft/expr.prim#req.general-2) and presumably template arguments must be evaluated?\r\n\r\n`ArrayLike` sounds like `ranges::contiguous_range` ? https://en.cppreference.com/w/cpp/ranges/contiguous_range\r\n\r\nThe `constexpr span( R&& range );` constructor is already conditional on that (ie, it's undefined behaviour if `R` isn't a `contiguous_range`) but that doesn't help that much (I think) because that constructor is marked explicit for non-dynamic extents...",
      "created_at" : "2023-12-18T11:27:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1860216234",
      "id" : 1860216234,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585u4KWq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1860216234/reactions"
      },
      "updated_at" : "2023-12-18T11:27:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1860216234",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> `ArrayLike` sounds like `ranges::contiguous_range` ? https://en.cppreference.com/w/cpp/ranges/contiguous_range\r\n\r\nNot exactly. `contiguous_range` is satisfied for `std::vector<int>`, whose size is runtime variable. My `concept ArrayLike` should be `contiguous_range` *and* checking that the size is known at compile time.",
      "created_at" : "2023-12-19T10:41:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1862522407",
      "id" : 1862522407,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585vA9Yn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862522407/reactions"
      },
      "updated_at" : "2023-12-19T10:41:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862522407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "https://stackoverflow.com/questions/70482497/detecting-compile-time-constantness-of-range-size ? `std::span<X, N>` seems like it's already pretty much the thing that tells you you've got a contiguous range of exactly N X's to me though...",
      "created_at" : "2023-12-19T11:23:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1862581792",
      "id" : 1862581792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585vBL4g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862581792/reactions"
      },
      "updated_at" : "2023-12-19T11:23:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862581792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> https://stackoverflow.com/questions/70482497/detecting-compile-time-constantness-of-range-size ?\r\n\r\nAh nice. So this was fixed in the language, but clang never implemented it.",
      "created_at" : "2023-12-19T11:41:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1862605906",
      "id" : 1862605906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585vBRxS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862605906/reactions"
      },
      "updated_at" : "2023-12-19T11:41:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1862605906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "On the `std::format` front, looks like as of the next Xcode release (15.3), Apple is [adding support for `std::format`](https://developer.apple.com/documentation/xcode-release-notes/xcode-15_3-release-notes#C++-Standard-Library): \r\n> The following new features have been implemented:\r\n> P0645 - Text formatting (std::format)",
      "created_at" : "2024-01-29T11:54:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1914540362",
      "id" : 1914540362,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585yHZFK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1914540362/reactions"
      },
      "updated_at" : "2024-01-29T11:54:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1914540362",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Not sure if there is any value in `std::format` for this codebase, because it is locale dependent. Seems better to stick to tinyformat?",
      "created_at" : "2024-01-29T12:12:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23363#issuecomment-1914568330",
      "id" : 1914568330,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23363",
      "node_id" : "IC_kwDOABII585yHf6K",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1914568330/reactions"
      },
      "updated_at" : "2024-01-29T12:12:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1914568330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   }
]
